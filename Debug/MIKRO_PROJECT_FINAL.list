
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000882c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009600  080089bc  080089bc  000099bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fbc  08011fbc  00013264  2**0
                  CONTENTS
  4 .ARM          00000008  08011fbc  08011fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011fc4  08011fc4  00013264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fc4  08011fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011fc8  08011fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  08011fcc  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000adb8  20000264  08012230  00013264  2**2
                  ALLOC
 10 ._user_heap_stack 00001304  2000b01c  08012230  0001401c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fc1  00000000  00000000  00013294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a8  00000000  00000000  00026255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00029800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc6  00000000  00000000  0002a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289df  00000000  00000000  0002b32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001643d  00000000  00000000  00053d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec313  00000000  00000000  0006a14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015645d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d0  00000000  00000000  001564a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089a4 	.word	0x080089a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	080089a4 	.word	0x080089a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ringBufferSetup>:
/************************************************************************
* Funkcja: ringBufferSetup()
* (Utworzenie instancji bufora)
************************************************************************/
void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	60da      	str	r2, [r3, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <USART_kbhit>:
/************************************************************************
* Funkcja: USART_kbhit()
* (Sprawdza czy w buforze odbiorczym znajdują się dane
* Zwraca 1 jeśli bufor zawiera dane do odczytu)
************************************************************************/
uint8_t USART_kbhit(){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <USART_kbhit+0x20>)
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <USART_kbhit+0x20>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d101      	bne.n	80005b4 <USART_kbhit+0x14>
		return 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e000      	b.n	80005b6 <USART_kbhit+0x16>
	}else{
		return 1;
 80005b4:	2301      	movs	r3, #1
	}
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000280 	.word	0x20000280

080005c4 <USART_getchar>:
* Jeśli bufor pusty = -1
* Jeśli jest dostępny bajt to funkcja zwraca jesgo wartość
* oraz aktualizuje index RX_Busy tak aby wskazywał na kolejny
* bajt do odczytu)
************************************************************************/
int16_t USART_getchar() {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <USART_getchar+0x4c>)
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <USART_getchar+0x4c>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d013      	beq.n	80005fe <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <USART_getchar+0x4c>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <USART_getchar+0x50>)
 80005dc:	5cd3      	ldrb	r3, [r2, r3]
 80005de:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <USART_getchar+0x4c>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <USART_getchar+0x4c>)
 80005e8:	68d2      	ldr	r2, [r2, #12]
 80005ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80005ee:	fb01 f202 	mul.w	r2, r1, r2
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <USART_getchar+0x4c>)
 80005f6:	6053      	str	r3, [r2, #4]
        return tmp;
 80005f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005fc:	e001      	b.n	8000602 <USART_getchar+0x3e>
    }
    return -1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000280 	.word	0x20000280
 8000614:	20000a04 	.word	0x20000a04

08000618 <USART_sendFrame>:
*    - bufor był pusty (writeIndex == readIndex)
*    - rejestr nadawczy jest gotowy (TXE = 1)
* 6. Aktualizuje wskaźnik zapisu w buforze kołowym
* 7. Włącza przerwania
************************************************************************/
void USART_sendFrame(const uint8_t* data, size_t length) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 8000622:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <USART_sendFrame+0xb4>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop

    __disable_irq();
    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	e016      	b.n	8000660 <USART_sendFrame+0x48>
        USART_TxBuf[idx] = data[i];
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	4413      	add	r3, r2
 8000638:	7819      	ldrb	r1, [r3, #0]
 800063a:	4a25      	ldr	r2, [pc, #148]	@ (80006d0 <USART_sendFrame+0xb8>)
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4413      	add	r3, r2
 8000640:	460a      	mov	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
        idx = (idx + 1) % txRingBuffer.mask;
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	3301      	adds	r3, #1
 8000648:	461a      	mov	r2, r3
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <USART_sendFrame+0xb4>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	fbb2 f1f3 	udiv	r1, r2, r3
 8000652:	fb01 f303 	mul.w	r3, r1, r3
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	3301      	adds	r3, #1
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d3e4      	bcc.n	8000632 <USART_sendFrame+0x1a>
    }

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <USART_sendFrame+0xb4>)
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <USART_sendFrame+0xb4>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	429a      	cmp	r2, r3
 8000672:	d122      	bne.n	80006ba <USART_sendFrame+0xa2>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <USART_sendFrame+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 800067e:	2b80      	cmp	r3, #128	@ 0x80
 8000680:	d11b      	bne.n	80006ba <USART_sendFrame+0xa2>
        txRingBuffer.writeIndex = idx;
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <USART_sendFrame+0xb4>)
 8000686:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8000688:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <USART_sendFrame+0xb4>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a10      	ldr	r2, [pc, #64]	@ (80006d0 <USART_sendFrame+0xb8>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) % txRingBuffer.mask;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <USART_sendFrame+0xb4>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <USART_sendFrame+0xb4>)
 800069a:	68d2      	ldr	r2, [r2, #12]
 800069c:	fbb3 f1f2 	udiv	r1, r3, r2
 80006a0:	fb01 f202 	mul.w	r2, r1, r2
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	4a09      	ldr	r2, [pc, #36]	@ (80006cc <USART_sendFrame+0xb4>)
 80006a8:	6053      	str	r3, [r2, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006aa:	f107 030f 	add.w	r3, r7, #15
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <USART_sendFrame+0xbc>)
 80006b4:	f004 fd9a 	bl	80051ec <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006b8:	e002      	b.n	80006c0 <USART_sendFrame+0xa8>
    } else {
        txRingBuffer.writeIndex = idx;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4a03      	ldr	r2, [pc, #12]	@ (80006cc <USART_sendFrame+0xb4>)
 80006be:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006c0:	b662      	cpsie	i
}
 80006c2:	bf00      	nop
    }

    __enable_irq();
}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000290 	.word	0x20000290
 80006d0:	200002a0 	.word	0x200002a0
 80006d4:	2000ae48 	.word	0x2000ae48

080006d8 <calculateCrc16>:
*      - crc_out[1] = crc & 0xFF (młodszy bajt)
*
* Korzysta z:
*   - crc16_table: Tablica lookup z wstępnie obliczonymi wartościami
************************************************************************/
void calculateCrc16(uint8_t *data, size_t length, uint8_t crc_out[2]) {
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	@ 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF;
 80006e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006e8:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	e019      	b.n	8000724 <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte;
 80006fa:	8bfb      	ldrh	r3, [r7, #30]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b2da      	uxtb	r2, r3
 8000702:	7dfb      	ldrb	r3, [r7, #23]
 8000704:	4053      	eors	r3, r2
 8000706:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index];
 8000708:	8bfb      	ldrh	r3, [r7, #30]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b21a      	sxth	r2, r3
 800070e:	7dbb      	ldrb	r3, [r7, #22]
 8000710:	490f      	ldr	r1, [pc, #60]	@ (8000750 <calculateCrc16+0x78>)
 8000712:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000716:	b21b      	sxth	r3, r3
 8000718:	4053      	eors	r3, r2
 800071a:	b21b      	sxth	r3, r3
 800071c:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	3301      	adds	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	429a      	cmp	r2, r3
 800072a:	d3e1      	bcc.n	80006f0 <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF);
 800072c:	8bfb      	ldrh	r3, [r7, #30]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	b29b      	uxth	r3, r3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3301      	adds	r3, #1
 800073c:	8bfa      	ldrh	r2, [r7, #30]
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3724      	adds	r7, #36	@ 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_DMA_Init+0x38>)
 800075c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800075e:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <MX_DMA_Init+0x38>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6493      	str	r3, [r2, #72]	@ 0x48
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_DMA_Init+0x38>)
 8000768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2102      	movs	r1, #2
 8000776:	200f      	movs	r0, #15
 8000778:	f001 ff51 	bl	800261e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800077c:	200f      	movs	r0, #15
 800077e:	f001 ff6a 	bl	8002656 <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <resetFrameState>:
* Zmienne globalne:
*   - in_frame: Flaga oznaczająca czy jesteśmy w trakcie odbierania ramki
*   - escape_detected: Flaga oznaczająca wykrycie znaku escape
*   - bx_index: Indeks w buforze odbiorczym
************************************************************************/
static void resetFrameState() {
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
    in_frame = false;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <resetFrameState+0x20>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <resetFrameState+0x24>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <resetFrameState+0x28>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	20000c28 	.word	0x20000c28
 80007b4:	20000c22 	.word	0x20000c22
 80007b8:	20000c24 	.word	0x20000c24

080007bc <stopAnimation>:

static void stopAnimation(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	text.isScrolling = false;
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <stopAnimation+0x18>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000cb4 	.word	0x20000cb4

080007d8 <isWithinBounds>:
* Korzysta z:
*   - LCD_WIDTH: Stała określająca szerokość ekranu
*   - LCD_HEIGHT: Stała określająca wysokość ekranu
************************************************************************/
static bool isWithinBounds(int x, int y)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <isWithinBounds+0x26>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b9f      	cmp	r3, #159	@ 0x9f
 80007ec:	dc07      	bgt.n	80007fe <isWithinBounds+0x26>
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db04      	blt.n	80007fe <isWithinBounds+0x26>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007f8:	dc01      	bgt.n	80007fe <isWithinBounds+0x26>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <isWithinBounds+0x28>
 80007fe:	2300      	movs	r3, #0
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <safeCompare>:

static bool safeCompare(const char* str1, const char* str2, size_t len)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
	if(str1 == NULL || str2 == NULL)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <safeCompare+0x18>
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <safeCompare+0x1c>
	{
		return false;
 800082a:	2300      	movs	r3, #0
 800082c:	e00a      	b.n	8000844 <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f007 fc12 	bl	800805c <memcmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <isValidTriangle>:



static bool isValidTriangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t x3, int16_t y3) {
 800084c:	b490      	push	{r4, r7}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	4604      	mov	r4, r0
 8000854:	4608      	mov	r0, r1
 8000856:	4611      	mov	r1, r2
 8000858:	461a      	mov	r2, r3
 800085a:	4623      	mov	r3, r4
 800085c:	80fb      	strh	r3, [r7, #6]
 800085e:	4603      	mov	r3, r0
 8000860:	80bb      	strh	r3, [r7, #4]
 8000862:	460b      	mov	r3, r1
 8000864:	807b      	strh	r3, [r7, #2]
 8000866:	4613      	mov	r3, r2
 8000868:	803b      	strh	r3, [r7, #0]
    // Obliczamy kwadraty długości boków
    int32_t a2 = (int32_t)(x2 - x1) * (x2 - x1) + (int32_t)(y2 - y1) * (y2 - y1);
 800086a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800086e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000878:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800087c:	1a8a      	subs	r2, r1, r2
 800087e:	fb03 f202 	mul.w	r2, r3, r2
 8000882:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000886:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800088a:	1acb      	subs	r3, r1, r3
 800088c:	f9b7 0000 	ldrsh.w	r0, [r7]
 8000890:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000894:	1a41      	subs	r1, r0, r1
 8000896:	fb01 f303 	mul.w	r3, r1, r3
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
    int32_t b2 = (int32_t)(x3 - x2) * (x3 - x2) + (int32_t)(y3 - y2) * (y3 - y2);
 800089e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80008a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80008ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008b0:	1a8a      	subs	r2, r1, r2
 80008b2:	fb03 f202 	mul.w	r2, r3, r2
 80008b6:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 80008ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 80008c4:	f9b7 1000 	ldrsh.w	r1, [r7]
 80008c8:	1a41      	subs	r1, r0, r1
 80008ca:	fb01 f303 	mul.w	r3, r1, r3
 80008ce:	4413      	add	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
    int32_t c2 = (int32_t)(x1 - x3) * (x1 - x3) + (int32_t)(y1 - y3) * (y1 - y3);
 80008d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80008e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80008e4:	1a8a      	subs	r2, r1, r2
 80008e6:	fb03 f202 	mul.w	r2, r3, r2
 80008ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80008f2:	1acb      	subs	r3, r1, r3
 80008f4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80008f8:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 80008fc:	1a41      	subs	r1, r0, r1
 80008fe:	fb01 f303 	mul.w	r3, r1, r3
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]

    // Sprawdzamy nierówność trójkąta używając kwadratów długości
    // Jeśli a² + b² ≤ c² (lub podobnie dla innych kombinacji),
    // to trójkąt nie może istnieć
    if (a2 + b2 <= c2 || b2 + c2 <= a2 || c2 + a2 <= b2) {
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	4413      	add	r3, r2
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	429a      	cmp	r2, r3
 8000910:	da0b      	bge.n	800092a <isValidTriangle+0xde>
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	429a      	cmp	r2, r3
 800091c:	da05      	bge.n	800092a <isValidTriangle+0xde>
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	4413      	add	r3, r2
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	429a      	cmp	r2, r3
 8000928:	db01      	blt.n	800092e <isValidTriangle+0xe2>
        return false;
 800092a:	2300      	movs	r3, #0
 800092c:	e01f      	b.n	800096e <isValidTriangle+0x122>
    }

    // Sprawdzamy czy punkty nie leżą na jednej linii
    int32_t cross = (int32_t)(x2 - x1) * (y3 - y1) - (int32_t)(y2 - y1) * (x3 - x1);
 800092e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 800093c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000940:	1a8a      	subs	r2, r1, r2
 8000942:	fb03 f202 	mul.w	r2, r3, r2
 8000946:	f9b7 1000 	ldrsh.w	r1, [r7]
 800094a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800094e:	1acb      	subs	r3, r1, r3
 8000950:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8000954:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000958:	1a41      	subs	r1, r0, r1
 800095a:	fb01 f303 	mul.w	r3, r1, r3
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	60bb      	str	r3, [r7, #8]
    if (cross == 0) {
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <isValidTriangle+0x120>
        return false;
 8000968:	2300      	movs	r3, #0
 800096a:	e000      	b.n	800096e <isValidTriangle+0x122>
    }

    return true;
 800096c:	2301      	movs	r3, #1
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc90      	pop	{r4, r7}
 8000976:	4770      	bx	lr

08000978 <sendStatus>:
*   - color_map: Globalna tablica struktur ColorMap zawierająca:
*   - name: string z nazwą koloru
*   - value: wartość Color_t w formacie RGB565
************************************************************************/

void sendStatus(StatusCode_t status) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af02      	add	r7, sp, #8
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
    if(status < STATUS_COUNT) {
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b09      	cmp	r3, #9
 8000986:	d80a      	bhi.n	800099e <sendStatus+0x26>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "%s", STATUS_MESSAGES[status]);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <sendStatus+0x30>)
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <sendStatus+0x34>)
 8000994:	4a06      	ldr	r2, [pc, #24]	@ (80009b0 <sendStatus+0x38>)
 8000996:	2167      	movs	r1, #103	@ 0x67
 8000998:	2068      	movs	r0, #104	@ 0x68
 800099a:	f000 fba3 	bl	80010e4 <prepareFrame>
    }
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	08008adc 	.word	0x08008adc
 80009ac:	08008a84 	.word	0x08008a84
 80009b0:	08008a88 	.word	0x08008a88

080009b4 <parseColor>:



bool parseColor(const char* color_name, Color_t* color) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
    if (color_name == NULL || color == NULL) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <parseColor+0x16>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <parseColor+0x1a>
        return false;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e026      	b.n	8000a1c <parseColor+0x68>
    }

    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	e01f      	b.n	8000a14 <parseColor+0x60>
        size_t color_len = strlen(color_map[i].name); // Get the expected color name length
 80009d4:	4a13      	ldr	r2, [pc, #76]	@ (8000a24 <parseColor+0x70>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fbf7 	bl	80001d0 <strlen>
 80009e2:	60b8      	str	r0, [r7, #8]
        if (safeCompare(color_name, color_map[i].name, color_len)) {
 80009e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <parseColor+0x70>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	4619      	mov	r1, r3
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff0e 	bl	8000812 <safeCompare>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d008      	beq.n	8000a0e <parseColor+0x5a>
            *color = color_map[i].value;
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <parseColor+0x70>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	889a      	ldrh	r2, [r3, #4]
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	801a      	strh	r2, [r3, #0]
            return true;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e006      	b.n	8000a1c <parseColor+0x68>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b07      	cmp	r3, #7
 8000a18:	d9dc      	bls.n	80009d4 <parseColor+0x20>
        }
    }
    return false;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08008b04 	.word	0x08008b04

08000a28 <parseParameters>:
*      - Pomija białe znaki
*      - Wyodrębnia token do następnego przecinka
*      - Przetwarza token według odpowiedniego typu
*   4. Zwalnia va_list
************************************************************************/
bool parseParameters(const uint8_t* data, const char* format, ...) {
 8000a28:	b40e      	push	{r1, r2, r3}
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b099      	sub	sp, #100	@ 0x64
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
    if (!data || !format) {
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <parseParameters+0x16>
 8000a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <parseParameters+0x1a>
        return false;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e0b0      	b.n	8000ba4 <parseParameters+0x17c>
    }
    va_list args;
    va_start(args, format);
 8000a42:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const uint8_t* data_ptr = data;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const char* fmt_ptr = format;
 8000a4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t token[51];
    size_t token_idx = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	657b      	str	r3, [r7, #84]	@ 0x54

    // Store scrollSpeed for text length validation
    uint8_t scrollSpeed = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    bool hasScrollSpeed = false;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

    while (*fmt_ptr) {
 8000a60:	e09a      	b.n	8000b98 <parseParameters+0x170>
        switch (*fmt_ptr) {
 8000a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b75      	cmp	r3, #117	@ 0x75
 8000a68:	d007      	beq.n	8000a7a <parseParameters+0x52>
 8000a6a:	2b75      	cmp	r3, #117	@ 0x75
 8000a6c:	f300 808c 	bgt.w	8000b88 <parseParameters+0x160>
 8000a70:	2b73      	cmp	r3, #115	@ 0x73
 8000a72:	d023      	beq.n	8000abc <parseParameters+0x94>
 8000a74:	2b74      	cmp	r3, #116	@ 0x74
 8000a76:	d054      	beq.n	8000b22 <parseParameters+0xfa>
 8000a78:	e086      	b.n	8000b88 <parseParameters+0x160>
            case 'u': {
                uint8_t* value_ptr = va_arg(args, uint8_t*);
 8000a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a7c:	1d1a      	adds	r2, r3, #4
 8000a7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
                *value_ptr = *data_ptr++;  // Bezpośrednio odczytaj bajt
 8000a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a8e:	701a      	strb	r2, [r3, #0]

                // Store scrollSpeed for later validation
                if (!hasScrollSpeed) {
 8000a90:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000a94:	f083 0301 	eor.w	r3, r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d006      	beq.n	8000aac <parseParameters+0x84>
                    scrollSpeed = *value_ptr;
 8000a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                    hasScrollSpeed = true;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
                }

                // Jeśli następny znak to przecinek, pomiń go
                if (*data_ptr == ',') {
 8000aac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ab2:	d16b      	bne.n	8000b8c <parseParameters+0x164>
                    data_ptr++;
 8000ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
                break;
 8000aba:	e067      	b.n	8000b8c <parseParameters+0x164>
            }
            case 's': {
                // Zbierz znaki do przecinka
                token_idx = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	657b      	str	r3, [r7, #84]	@ 0x54
                while (*data_ptr && *data_ptr != ',' && token_idx <= 10) {
 8000ac0:	e00a      	b.n	8000ad8 <parseParameters+0xb0>
                    token[token_idx++] = *data_ptr++;
 8000ac2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000ac4:	1c53      	adds	r3, r2, #1
 8000ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aca:	1c59      	adds	r1, r3, #1
 8000acc:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	3360      	adds	r3, #96	@ 0x60
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && *data_ptr != ',' && token_idx <= 10) {
 8000ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d006      	beq.n	8000aee <parseParameters+0xc6>
 8000ae0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ae6:	d002      	beq.n	8000aee <parseParameters+0xc6>
 8000ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aea:	2b0a      	cmp	r3, #10
 8000aec:	d9e9      	bls.n	8000ac2 <parseParameters+0x9a>
                }
                if (*data_ptr == ',') data_ptr++;
 8000aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000af4:	d102      	bne.n	8000afc <parseParameters+0xd4>
 8000af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000af8:	3301      	adds	r3, #1
 8000afa:	65fb      	str	r3, [r7, #92]	@ 0x5c

                Color_t* color_ptr = va_arg(args, Color_t*);
 8000afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000afe:	1d1a      	adds	r2, r3, #4
 8000b00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	643b      	str	r3, [r7, #64]	@ 0x40
                if (!parseColor((char*)token, color_ptr)) {
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff51 	bl	80009b4 <parseColor>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f083 0301 	eor.w	r3, r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d038      	beq.n	8000b90 <parseParameters+0x168>
                    va_end(args);
                    return false;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e040      	b.n	8000ba4 <parseParameters+0x17c>
                }
                break;
            }
            case 't': {
                token_idx = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	657b      	str	r3, [r7, #84]	@ 0x54
                while (*data_ptr && token_idx < 50) {
 8000b26:	e00a      	b.n	8000b3e <parseParameters+0x116>
                    token[token_idx++] = *data_ptr++;
 8000b28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000b2a:	1c53      	adds	r3, r2, #1
 8000b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b30:	1c59      	adds	r1, r3, #1
 8000b32:	6579      	str	r1, [r7, #84]	@ 0x54
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	3360      	adds	r3, #96	@ 0x60
 8000b38:	443b      	add	r3, r7
 8000b3a:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && token_idx < 50) {
 8000b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <parseParameters+0x124>
 8000b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b48:	2b31      	cmp	r3, #49	@ 0x31
 8000b4a:	d9ed      	bls.n	8000b28 <parseParameters+0x100>
                }

                size_t maxLength = (scrollSpeed == 0) ? 25 : 50;
 8000b4c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <parseParameters+0x130>
 8000b54:	2319      	movs	r3, #25
 8000b56:	e000      	b.n	8000b5a <parseParameters+0x132>
 8000b58:	2332      	movs	r3, #50	@ 0x32
 8000b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (token_idx > maxLength) {
 8000b5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d904      	bls.n	8000b6e <parseParameters+0x146>
                    va_end(args);
                    sendStatus(ERR_TOO_MUCH_TEXT);
 8000b64:	2008      	movs	r0, #8
 8000b66:	f7ff ff07 	bl	8000978 <sendStatus>
                    return false;  // Tekst jest za długi
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e01a      	b.n	8000ba4 <parseParameters+0x17c>
                }

                char* text_ptr = va_arg(args, char*);
 8000b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b70:	1d1a      	adds	r2, r3, #4
 8000b72:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	647b      	str	r3, [r7, #68]	@ 0x44
                memcpy(text_ptr, token, token_idx);
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000b7e:	4619      	mov	r1, r3
 8000b80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000b82:	f007 fac3 	bl	800810c <memcpy>
                break;
 8000b86:	e004      	b.n	8000b92 <parseParameters+0x16a>
            }
            default:
                va_end(args);
                return false;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e00b      	b.n	8000ba4 <parseParameters+0x17c>
                break;
 8000b8c:	bf00      	nop
 8000b8e:	e000      	b.n	8000b92 <parseParameters+0x16a>
                break;
 8000b90:	bf00      	nop
        }
        fmt_ptr++;
 8000b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b94:	3301      	adds	r3, #1
 8000b96:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*fmt_ptr) {
 8000b98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f47f af60 	bne.w	8000a62 <parseParameters+0x3a>
    }

    va_end(args);
    return true;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3764      	adds	r7, #100	@ 0x64
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bae:	b003      	add	sp, #12
 8000bb0:	4770      	bx	lr

08000bb2 <clearFrame>:
*   - Parametry: (void* ptr, int value, size_t num)
*   - ptr: Wskaźnik na początek bloku pamięci
*   - value: Wartość do wypełnienia (0 dla wyzerowania)
*   - num: Liczba bajtów do wypełnienia
************************************************************************/
void clearFrame(Frame* frame) {
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00d      	beq.n	8000bdc <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3305      	adds	r3, #5
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 fa57 	bl	800807c <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f007 fa50 	bl	800807c <memset>
    }
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <executeONK>:
*      - Parametry: (x, y, r, color)
*
*   3. prepareFrame(): Wysyła odpowiedź w przypadku błędu
************************************************************************/
static void executeONK(Frame *frame)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af04      	add	r7, sp, #16
 8000bea:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73bb      	strb	r3, [r7, #14]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	737b      	strb	r3, [r7, #13]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	1d58      	adds	r0, r3, #5
 8000c04:	f107 010e 	add.w	r1, r7, #14
 8000c08:	f107 020f 	add.w	r2, r7, #15
 8000c0c:	f107 030a 	add.w	r3, r7, #10
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	f107 030d 	add.w	r3, r7, #13
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4914      	ldr	r1, [pc, #80]	@ (8000c74 <executeONK+0x90>)
 8000c22:	f7ff ff01 	bl	8000a28 <parseParameters>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f083 0301 	eor.w	r3, r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <executeONK+0x56>
    {
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000c32:	2009      	movs	r0, #9
 8000c34:	f7ff fea0 	bl	8000978 <sendStatus>
 8000c38:	e019      	b.n	8000c6e <executeONK+0x8a>
        return;
    }
	switch(filling)
 8000c3a:	7b3b      	ldrb	r3, [r7, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <executeONK+0x62>
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d00a      	beq.n	8000c5a <executeONK+0x76>
 8000c44:	e013      	b.n	8000c6e <executeONK+0x8a>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	b218      	sxth	r0, r3
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	b219      	sxth	r1, r3
 8000c4e:	7b7b      	ldrb	r3, [r7, #13]
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	897b      	ldrh	r3, [r7, #10]
 8000c54:	f006 fdc2 	bl	80077dc <hagl_draw_circle>
		break;
 8000c58:	e009      	b.n	8000c6e <executeONK+0x8a>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	b218      	sxth	r0, r3
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	b219      	sxth	r1, r3
 8000c62:	7b7b      	ldrb	r3, [r7, #13]
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	897b      	ldrh	r3, [r7, #10]
 8000c68:	f006 fee7 	bl	8007a3a <hagl_fill_circle>
		break;
 8000c6c:	bf00      	nop
	}
}
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08008a8c 	.word	0x08008a8c

08000c78 <executeONP>:
*   2. hagl_draw_rectangle() / hagl_fill_rectangle():
*      Funkcje HAGL do rysowania prostokątów
*      - Parametry: (x, y, width, height, color)
************************************************************************/
static void executeONP(Frame *frame)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b089      	sub	sp, #36	@ 0x24
 8000c7c:	af04      	add	r7, sp, #16
 8000c7e:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	2300      	movs	r3, #0
 8000c86:	73bb      	strb	r3, [r7, #14]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	737b      	strb	r3, [r7, #13]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	733b      	strb	r3, [r7, #12]
 8000c90:	2300      	movs	r3, #0
 8000c92:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	1d58      	adds	r0, r3, #5
 8000c9c:	f107 010e 	add.w	r1, r7, #14
 8000ca0:	f107 020f 	add.w	r2, r7, #15
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	9303      	str	r3, [sp, #12]
 8000caa:	f107 030b 	add.w	r3, r7, #11
 8000cae:	9302      	str	r3, [sp, #8]
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	f107 030d 	add.w	r3, r7, #13
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	4919      	ldr	r1, [pc, #100]	@ (8000d24 <executeONP+0xac>)
 8000cc0:	f7ff feb2 	bl	8000a28 <parseParameters>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <executeONP+0x60>
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000cd0:	2009      	movs	r0, #9
 8000cd2:	f7ff fe51 	bl	8000978 <sendStatus>
 8000cd6:	e021      	b.n	8000d1c <executeONP+0xa4>
		return;
	}

	switch(filling)
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <executeONP+0x6c>
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d00e      	beq.n	8000d00 <executeONP+0x88>
 8000ce2:	e01b      	b.n	8000d1c <executeONP+0xa4>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	b218      	sxth	r0, r3
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	b219      	sxth	r1, r3
 8000cec:	7b7b      	ldrb	r3, [r7, #13]
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	7b3b      	ldrb	r3, [r7, #12]
 8000cf2:	b21c      	sxth	r4, r3
 8000cf4:	893b      	ldrh	r3, [r7, #8]
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	4623      	mov	r3, r4
 8000cfa:	f006 fa09 	bl	8007110 <hagl_draw_rectangle>
		break;
 8000cfe:	e00d      	b.n	8000d1c <executeONP+0xa4>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	b218      	sxth	r0, r3
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	b219      	sxth	r1, r3
 8000d08:	7b7b      	ldrb	r3, [r7, #13]
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	7b3b      	ldrb	r3, [r7, #12]
 8000d0e:	b21c      	sxth	r4, r3
 8000d10:	893b      	ldrh	r3, [r7, #8]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4623      	mov	r3, r4
 8000d16:	f006 fa81 	bl	800721c <hagl_fill_rectangle>
		break;
 8000d1a:	bf00      	nop
	}
}
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08008a94 	.word	0x08008a94

08000d28 <executeONT>:
*   2. hagl_draw_triangle() / hagl_fill_triangle():
*      Funkcje HAGL do rysowania trójkątów
*      - Parametry: (x1,y1, x2,y2, x3,y3, color)
************************************************************************/
static void executeONT(Frame *frame)
{
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	b08d      	sub	sp, #52	@ 0x34
 8000d2c:	af06      	add	r7, sp, #24
 8000d2e:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	75fb      	strb	r3, [r7, #23]
 8000d34:	2300      	movs	r3, #0
 8000d36:	75bb      	strb	r3, [r7, #22]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	757b      	strb	r3, [r7, #21]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	753b      	strb	r3, [r7, #20]
 8000d40:	2300      	movs	r3, #0
 8000d42:	74fb      	strb	r3, [r7, #19]
 8000d44:	2300      	movs	r3, #0
 8000d46:	74bb      	strb	r3, [r7, #18]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1d58      	adds	r0, r3, #5
 8000d54:	f107 0116 	add.w	r1, r7, #22
 8000d58:	f107 0217 	add.w	r2, r7, #23
 8000d5c:	f107 030e 	add.w	r3, r7, #14
 8000d60:	9305      	str	r3, [sp, #20]
 8000d62:	f107 0311 	add.w	r3, r7, #17
 8000d66:	9304      	str	r3, [sp, #16]
 8000d68:	f107 0312 	add.w	r3, r7, #18
 8000d6c:	9303      	str	r3, [sp, #12]
 8000d6e:	f107 0313 	add.w	r3, r7, #19
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	f107 0315 	add.w	r3, r7, #21
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	460b      	mov	r3, r1
 8000d82:	492f      	ldr	r1, [pc, #188]	@ (8000e40 <executeONT+0x118>)
 8000d84:	f7ff fe50 	bl	8000a28 <parseParameters>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f083 0301 	eor.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <executeONT+0x74>
    {
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000d94:	2009      	movs	r0, #9
 8000d96:	f7ff fdef 	bl	8000978 <sendStatus>
        return;
 8000d9a:	e04d      	b.n	8000e38 <executeONT+0x110>
    }
    if (!isValidTriangle(x1, y1, x2, y2, x3, y3)) {
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	b218      	sxth	r0, r3
 8000da0:	7dbb      	ldrb	r3, [r7, #22]
 8000da2:	b219      	sxth	r1, r3
 8000da4:	7d7b      	ldrb	r3, [r7, #21]
 8000da6:	b21c      	sxth	r4, r3
 8000da8:	7d3b      	ldrb	r3, [r7, #20]
 8000daa:	b21d      	sxth	r5, r3
 8000dac:	7cfb      	ldrb	r3, [r7, #19]
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	7cba      	ldrb	r2, [r7, #18]
 8000db2:	b212      	sxth	r2, r2
 8000db4:	9201      	str	r2, [sp, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	462b      	mov	r3, r5
 8000dba:	4622      	mov	r2, r4
 8000dbc:	f7ff fd46 	bl	800084c <isValidTriangle>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f083 0301 	eor.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <executeONT+0xac>
    	sendStatus(ERR_INVALID_TRIANGLE);
 8000dcc:	2007      	movs	r0, #7
 8000dce:	f7ff fdd3 	bl	8000978 <sendStatus>
            return;
 8000dd2:	e031      	b.n	8000e38 <executeONT+0x110>
    }
    switch(filling)
 8000dd4:	7c7b      	ldrb	r3, [r7, #17]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <executeONT+0xb8>
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d016      	beq.n	8000e0c <executeONT+0xe4>
 8000dde:	e02b      	b.n	8000e38 <executeONT+0x110>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	b218      	sxth	r0, r3
 8000de4:	7dbb      	ldrb	r3, [r7, #22]
 8000de6:	b21c      	sxth	r4, r3
 8000de8:	7d7b      	ldrb	r3, [r7, #21]
 8000dea:	b21d      	sxth	r5, r3
 8000dec:	7d3b      	ldrb	r3, [r7, #20]
 8000dee:	b21e      	sxth	r6, r3
 8000df0:	7cfb      	ldrb	r3, [r7, #19]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	7cba      	ldrb	r2, [r7, #18]
 8000df6:	b212      	sxth	r2, r2
 8000df8:	89f9      	ldrh	r1, [r7, #14]
 8000dfa:	9102      	str	r1, [sp, #8]
 8000dfc:	9201      	str	r2, [sp, #4]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	4633      	mov	r3, r6
 8000e02:	462a      	mov	r2, r5
 8000e04:	4621      	mov	r1, r4
 8000e06:	f007 f8a3 	bl	8007f50 <hagl_draw_triangle>
            break;
 8000e0a:	e015      	b.n	8000e38 <executeONT+0x110>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	b218      	sxth	r0, r3
 8000e10:	7dbb      	ldrb	r3, [r7, #22]
 8000e12:	b21c      	sxth	r4, r3
 8000e14:	7d7b      	ldrb	r3, [r7, #21]
 8000e16:	b21d      	sxth	r5, r3
 8000e18:	7d3b      	ldrb	r3, [r7, #20]
 8000e1a:	b21e      	sxth	r6, r3
 8000e1c:	7cfb      	ldrb	r3, [r7, #19]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	7cba      	ldrb	r2, [r7, #18]
 8000e22:	b212      	sxth	r2, r2
 8000e24:	89f9      	ldrh	r1, [r7, #14]
 8000e26:	9102      	str	r1, [sp, #8]
 8000e28:	9201      	str	r2, [sp, #4]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	4633      	mov	r3, r6
 8000e2e:	462a      	mov	r2, r5
 8000e30:	4621      	mov	r1, r4
 8000e32:	f007 f8b3 	bl	8007f9c <hagl_fill_triangle>
            break;
 8000e36:	bf00      	nop
    }
}
 8000e38:	371c      	adds	r7, #28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08008a9c 	.word	0x08008a9c

08000e44 <executeONN>:
*      - Parametry: (wtext, x, y, color, font)
*      - Dostępne fonty: font5x7, font5x8, font6x9

************************************************************************/
static void executeONN(Frame *frame)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	@ 0x50
 8000e48:	af04      	add	r7, sp, #16
 8000e4a:	6078      	str	r0, [r7, #4]
    const char charText[50] = {0};
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	222e      	movs	r2, #46	@ 0x2e
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f007 f90f 	bl	800807c <memset>
    if (!parseParameters(frame->data, "uuuust", &text.x, &text.y, &text.fontSize, &text.scrollSpeed, &text.color, charText)) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1d58      	adds	r0, r3, #5
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	9303      	str	r3, [sp, #12]
 8000e68:	4b48      	ldr	r3, [pc, #288]	@ (8000f8c <executeONN+0x148>)
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	4b48      	ldr	r3, [pc, #288]	@ (8000f90 <executeONN+0x14c>)
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	4b48      	ldr	r3, [pc, #288]	@ (8000f94 <executeONN+0x150>)
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4b48      	ldr	r3, [pc, #288]	@ (8000f98 <executeONN+0x154>)
 8000e76:	4a49      	ldr	r2, [pc, #292]	@ (8000f9c <executeONN+0x158>)
 8000e78:	4949      	ldr	r1, [pc, #292]	@ (8000fa0 <executeONN+0x15c>)
 8000e7a:	f7ff fdd5 	bl	8000a28 <parseParameters>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <executeONN+0x4e>
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000e8a:	2009      	movs	r0, #9
 8000e8c:	f7ff fd74 	bl	8000978 <sendStatus>
 8000e90:	e079      	b.n	8000f86 <executeONN+0x142>
        return;
    }

    // Zapisz początkowe pozycje
    memset(text.displayText, 0, sizeof(text.displayText));
 8000e92:	22c8      	movs	r2, #200	@ 0xc8
 8000e94:	2100      	movs	r1, #0
 8000e96:	4843      	ldr	r0, [pc, #268]	@ (8000fa4 <executeONN+0x160>)
 8000e98:	f007 f8f0 	bl	800807c <memset>
    text.startX = text.x;
 8000e9c:	4b41      	ldr	r3, [pc, #260]	@ (8000fa4 <executeONN+0x160>)
 8000e9e:	f9b3 20c8 	ldrsh.w	r2, [r3, #200]	@ 0xc8
 8000ea2:	4b40      	ldr	r3, [pc, #256]	@ (8000fa4 <executeONN+0x160>)
 8000ea4:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    text.startY = text.y;  // Ta wartość będzie używana do stałej pozycji Y
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <executeONN+0x160>)
 8000eaa:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 8000eae:	4b3d      	ldr	r3, [pc, #244]	@ (8000fa4 <executeONN+0x160>)
 8000eb0:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
    text.textLength = 0;
 8000eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa4 <executeONN+0x160>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    text.firstIteration = true;
 8000ebc:	4b39      	ldr	r3, [pc, #228]	@ (8000fa4 <executeONN+0x160>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
    // Konwersja tekstu
    while (charText[text.textLength] && text.textLength < 50) {
 8000ec4:	e015      	b.n	8000ef2 <executeONN+0xae>
        text.displayText[text.textLength] = (wchar_t)charText[text.textLength];
 8000ec6:	4b37      	ldr	r3, [pc, #220]	@ (8000fa4 <executeONN+0x160>)
 8000ec8:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000ecc:	3340      	adds	r3, #64	@ 0x40
 8000ece:	443b      	add	r3, r7
 8000ed0:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8000ed4:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <executeONN+0x160>)
 8000ed6:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b31      	ldr	r3, [pc, #196]	@ (8000fa4 <executeONN+0x160>)
 8000ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        text.textLength++;
 8000ee2:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <executeONN+0x160>)
 8000ee4:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <executeONN+0x160>)
 8000eee:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    while (charText[text.textLength] && text.textLength < 50) {
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <executeONN+0x160>)
 8000ef4:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000ef8:	3340      	adds	r3, #64	@ 0x40
 8000efa:	443b      	add	r3, r7
 8000efc:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <executeONN+0xca>
 8000f04:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <executeONN+0x160>)
 8000f06:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000f0a:	2b31      	cmp	r3, #49	@ 0x31
 8000f0c:	d9db      	bls.n	8000ec6 <executeONN+0x82>
    }

    text.isScrolling = (text.scrollSpeed > 0);
 8000f0e:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <executeONN+0x160>)
 8000f10:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <executeONN+0x160>)
 8000f20:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    text.lastUpdate = HAL_GetTick();
 8000f24:	f001 fa94 	bl	8002450 <HAL_GetTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <executeONN+0x160>)
 8000f2c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    const uint8_t* font;
    switch(text.fontSize) {
 8000f30:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <executeONN+0x160>)
 8000f32:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d00c      	beq.n	8000f54 <executeONN+0x110>
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	dc0d      	bgt.n	8000f5a <executeONN+0x116>
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d002      	beq.n	8000f48 <executeONN+0x104>
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d003      	beq.n	8000f4e <executeONN+0x10a>
 8000f46:	e008      	b.n	8000f5a <executeONN+0x116>
        case 1: font = font5x7; break;
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <executeONN+0x164>)
 8000f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f4c:	e007      	b.n	8000f5e <executeONN+0x11a>
        case 2: font = font5x8; break;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <executeONN+0x168>)
 8000f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f52:	e004      	b.n	8000f5e <executeONN+0x11a>
        case 3: font = font6x9; break;
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <executeONN+0x16c>)
 8000f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f58:	e001      	b.n	8000f5e <executeONN+0x11a>
        default: font = font5x7;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <executeONN+0x164>)
 8000f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    if(!text.scrollSpeed) {
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <executeONN+0x160>)
 8000f60:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10e      	bne.n	8000f86 <executeONN+0x142>
        hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8000f68:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <executeONN+0x160>)
 8000f6a:	f9b3 10c8 	ldrsh.w	r1, [r3, #200]	@ 0xc8
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <executeONN+0x160>)
 8000f70:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <executeONN+0x160>)
 8000f76:	f8b3 00d2 	ldrh.w	r0, [r3, #210]	@ 0xd2
 8000f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <executeONN+0x160>)
 8000f82:	f006 fbdc 	bl	800773e <hagl_put_text>
    }
}
 8000f86:	3740      	adds	r7, #64	@ 0x40
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000d86 	.word	0x20000d86
 8000f90:	20000d85 	.word	0x20000d85
 8000f94:	20000d84 	.word	0x20000d84
 8000f98:	20000d7e 	.word	0x20000d7e
 8000f9c:	20000d7c 	.word	0x20000d7c
 8000fa0:	08008aa8 	.word	0x08008aa8
 8000fa4:	20000cb4 	.word	0x20000cb4
 8000fa8:	08008b44 	.word	0x08008b44
 8000fac:	0800c04c 	.word	0x0800c04c
 8000fb0:	0800eef0 	.word	0x0800eef0

08000fb4 <executeOFF>:
*   case 1: Czyszczenie ekranu
*     - Używa hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK)
*
************************************************************************/
static void executeOFF(Frame *frame)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	795b      	ldrb	r3, [r3, #5]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <executeOFF+0x16>
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d006      	beq.n	8000fd6 <executeOFF+0x22>
 8000fc8:	e008      	b.n	8000fdc <executeOFF+0x28>
	{
	case 0:
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <executeOFF+0x38>)
 8000fd0:	f001 ff7c 	bl	8002ecc <HAL_GPIO_WritePin>
		break;
 8000fd4:	e006      	b.n	8000fe4 <executeOFF+0x30>
	case 1:
		lcdClear();
 8000fd6:	f000 fd8f 	bl	8001af8 <lcdClear>
		break;
 8000fda:	e003      	b.n	8000fe4 <executeOFF+0x30>
	default:
    	sendStatus(ERR_WRONG_OFF_DATA);
 8000fdc:	2005      	movs	r0, #5
 8000fde:	f7ff fccb 	bl	8000978 <sendStatus>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	48000400 	.word	0x48000400

08000ff0 <parseCoordinates>:
*      - Kolejne z NULL
*
*   3. atoi(): Konwertuje string na int
************************************************************************/
bool parseCoordinates(const uint8_t* data, int* x, int* y)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	 *x = data[0];  // Pierwszy bajt to x
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	601a      	str	r2, [r3, #0]
	 *y = data[2];  // Drugi bajt to y
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3302      	adds	r3, #2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
    return true;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <byteStuffing>:
*   '}' 			 	-> "}]"
*   '~'              	-> "}^"
*   '`'              	-> "}&"

************************************************************************/
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	e04b      	b.n	80010ce <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001040:	d10e      	bne.n	8001060 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	617a      	str	r2, [r7, #20]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	227d      	movs	r2, #125	@ 0x7d
 800104e:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	617a      	str	r2, [r7, #20]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	225d      	movs	r2, #93	@ 0x5d
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	e033      	b.n	80010c8 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b7e      	cmp	r3, #126	@ 0x7e
 800106a:	d10e      	bne.n	800108a <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	617a      	str	r2, [r7, #20]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	227d      	movs	r2, #125	@ 0x7d
 8001078:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	617a      	str	r2, [r7, #20]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	225e      	movs	r2, #94	@ 0x5e
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e01e      	b.n	80010c8 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b60      	cmp	r3, #96	@ 0x60
 8001094:	d10e      	bne.n	80010b4 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	617a      	str	r2, [r7, #20]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	227d      	movs	r2, #125	@ 0x7d
 80010a2:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	617a      	str	r2, [r7, #20]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	2226      	movs	r2, #38	@ 0x26
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e009      	b.n	80010c8 <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	441a      	add	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	1c59      	adds	r1, r3, #1
 80010be:	6179      	str	r1, [r7, #20]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	440b      	add	r3, r1
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	3301      	adds	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3af      	bcc.n	8001036 <byteStuffing+0x16>
        }
    }
    return j;
 80010d6:	697b      	ldr	r3, [r7, #20]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <prepareFrame>:
*   4. Konwertuje CRC na hex
*   5. Przygotowuje payload
*   6. Wykonuje byte stuffing
*   7. Wysyła ramkę
************************************************************************/
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 80010e4:	b408      	push	{r3}
 80010e6:	b580      	push	{r7, lr}
 80010e8:	f2ad 4d64 	subw	sp, sp, #1124	@ 0x464
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80010f2:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80010fc:	f2a3 4359 	subw	r3, r3, #1113	@ 0x459
 8001100:	4602      	mov	r2, r0
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001108:	f2a3 435a 	subw	r3, r3, #1114	@ 0x45a
 800110c:	460a      	mov	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
    Frame frame = {0};
 8001110:	f507 7371 	add.w	r3, r7, #964	@ 0x3c4
 8001114:	2285      	movs	r2, #133	@ 0x85
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f006 ffaf 	bl	800807c <memset>
    frame.sender = sender;
 800111e:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001122:	f2a3 4359 	subw	r3, r3, #1113	@ 0x459
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	f887 33c4 	strb.w	r3, [r7, #964]	@ 0x3c4
    frame.receiver = receiver;
 800112c:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001130:	f2a3 435a 	subw	r3, r3, #1114	@ 0x45a
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	f887 33c5 	strb.w	r3, [r7, #965]	@ 0x3c5
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 800113a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800113e:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8001142:	f507 7271 	add.w	r2, r7, #964	@ 0x3c4
 8001146:	1c90      	adds	r0, r2, #2
 8001148:	2203      	movs	r2, #3
 800114a:	6819      	ldr	r1, [r3, #0]
 800114c:	f006 ff9e 	bl	800808c <strncpy>

    // Stały bufor na sformatowane dane
    uint8_t formattedData[MAX_DATA_SIZE];
    va_list args;
    va_start(args, format);
 8001150:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 8001154:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001158:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800115c:	601a      	str	r2, [r3, #0]
    vsnprintf((char *)formattedData, MAX_DATA_SIZE, format, args);
 800115e:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001162:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001166:	f507 7051 	add.w	r0, r7, #836	@ 0x344
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8d7 246c 	ldr.w	r2, [r7, #1132]	@ 0x46c
 8001170:	2180      	movs	r1, #128	@ 0x80
 8001172:	f006 ff65 	bl	8008040 <vsniprintf>
    va_end(args);

    size_t dataLen = strlen((char *)formattedData);
 8001176:	f507 7351 	add.w	r3, r7, #836	@ 0x344
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f828 	bl	80001d0 <strlen>
 8001180:	f8c7 045c 	str.w	r0, [r7, #1116]	@ 0x45c

    // Bufor na dane do obliczenia CRC
    uint8_t crcInput[MAX_FRAME_WITHOUT_STUFFING];
    size_t crcInputLen = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458

    // Przygotowanie danych do CRC
    crcInput[crcInputLen++] = frame.sender;
 800118a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	f8c7 2458 	str.w	r2, [r7, #1112]	@ 0x458
 8001194:	f897 13c4 	ldrb.w	r1, [r7, #964]	@ 0x3c4
 8001198:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 800119c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80011a0:	54d1      	strb	r1, [r2, r3]
    crcInput[crcInputLen++] = frame.receiver;
 80011a2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	f8c7 2458 	str.w	r2, [r7, #1112]	@ 0x458
 80011ac:	f897 13c5 	ldrb.w	r1, [r7, #965]	@ 0x3c5
 80011b0:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80011b4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80011b8:	54d1      	strb	r1, [r2, r3]
    memcpy(crcInput + crcInputLen, frame.command, COMMAND_LENGTH);
 80011ba:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80011be:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80011c2:	4413      	add	r3, r2
 80011c4:	461a      	mov	r2, r3
 80011c6:	f207 33c6 	addw	r3, r7, #966	@ 0x3c6
 80011ca:	8819      	ldrh	r1, [r3, #0]
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	8011      	strh	r1, [r2, #0]
 80011d0:	7093      	strb	r3, [r2, #2]
    crcInputLen += COMMAND_LENGTH;
 80011d2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80011d6:	3303      	adds	r3, #3
 80011d8:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
    memcpy(crcInput + crcInputLen, formattedData, dataLen);
 80011dc:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80011e0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80011e4:	4413      	add	r3, r2
 80011e6:	f507 7151 	add.w	r1, r7, #836	@ 0x344
 80011ea:	f8d7 245c 	ldr.w	r2, [r7, #1116]	@ 0x45c
 80011ee:	4618      	mov	r0, r3
 80011f0:	f006 ff8c 	bl	800810c <memcpy>
    crcInputLen += dataLen;
 80011f4:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 80011f8:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 80011fc:	4413      	add	r3, r2
 80011fe:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458

    // Obliczenie CRC
    uint8_t crcOutput[2];
    calculateCrc16(crcInput, crcInputLen, crcOutput);
 8001202:	f507 722d 	add.w	r2, r7, #692	@ 0x2b4
 8001206:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800120a:	f8d7 1458 	ldr.w	r1, [r7, #1112]	@ 0x458
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fa62 	bl	80006d8 <calculateCrc16>

    // Przygotowanie surowej ramki
    uint8_t rawPayload[MAX_FRAME_WITHOUT_STUFFING];
    size_t rawPayloadLen = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454

    rawPayload[rawPayloadLen++] = frame.sender;
 800121a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	f8c7 2454 	str.w	r2, [r7, #1108]	@ 0x454
 8001224:	f897 13c4 	ldrb.w	r1, [r7, #964]	@ 0x3c4
 8001228:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 800122c:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8001230:	54d1      	strb	r1, [r2, r3]
    rawPayload[rawPayloadLen++] = frame.receiver;
 8001232:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	f8c7 2454 	str.w	r2, [r7, #1108]	@ 0x454
 800123c:	f897 13c5 	ldrb.w	r1, [r7, #965]	@ 0x3c5
 8001240:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 8001244:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8001248:	54d1      	strb	r1, [r2, r3]
    memcpy(rawPayload + rawPayloadLen, frame.command, COMMAND_LENGTH);
 800124a:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800124e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001252:	4413      	add	r3, r2
 8001254:	461a      	mov	r2, r3
 8001256:	f207 33c6 	addw	r3, r7, #966	@ 0x3c6
 800125a:	8819      	ldrh	r1, [r3, #0]
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	8011      	strh	r1, [r2, #0]
 8001260:	7093      	strb	r3, [r2, #2]
    rawPayloadLen += COMMAND_LENGTH;
 8001262:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001266:	3303      	adds	r3, #3
 8001268:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
    memcpy(rawPayload + rawPayloadLen, formattedData, dataLen);
 800126c:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8001270:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001274:	4413      	add	r3, r2
 8001276:	f507 7151 	add.w	r1, r7, #836	@ 0x344
 800127a:	f8d7 245c 	ldr.w	r2, [r7, #1116]	@ 0x45c
 800127e:	4618      	mov	r0, r3
 8001280:	f006 ff44 	bl	800810c <memcpy>
    rawPayloadLen += dataLen;
 8001284:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 8001288:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 800128c:	4413      	add	r3, r2
 800128e:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454

    rawPayload[rawPayloadLen++] = crcOutput[0];
 8001292:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	f8c7 2454 	str.w	r2, [r7, #1108]	@ 0x454
 800129c:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80012a0:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80012a4:	7811      	ldrb	r1, [r2, #0]
 80012a6:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80012aa:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 80012ae:	54d1      	strb	r1, [r2, r3]
    rawPayload[rawPayloadLen++] = crcOutput[1];
 80012b0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	f8c7 2454 	str.w	r2, [r7, #1108]	@ 0x454
 80012ba:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80012be:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80012c2:	7851      	ldrb	r1, [r2, #1]
 80012c4:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80012c8:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 80012cc:	54d1      	strb	r1, [r2, r3]

    uint8_t stuffedPayload[MAX_FRAME_LEN];
    size_t stuffedLen = byteStuffing(rawPayload, rawPayloadLen, stuffedPayload);
 80012ce:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80012d2:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 80012d6:	f8d7 1454 	ldr.w	r1, [r7, #1108]	@ 0x454
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fea0 	bl	8001020 <byteStuffing>
 80012e0:	f8c7 0450 	str.w	r0, [r7, #1104]	@ 0x450

    uint8_t finalFrame[MAX_FRAME_LEN + 2];
    size_t finalLen = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c

    finalFrame[finalLen++] = FRAME_START;
 80012ea:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	f8c7 244c 	str.w	r2, [r7, #1100]	@ 0x44c
 80012f4:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80012f8:	f2a2 4254 	subw	r2, r2, #1108	@ 0x454
 80012fc:	217e      	movs	r1, #126	@ 0x7e
 80012fe:	54d1      	strb	r1, [r2, r3]
    memcpy(finalFrame + finalLen, stuffedPayload, stuffedLen);
 8001300:	f107 020c 	add.w	r2, r7, #12
 8001304:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001308:	4413      	add	r3, r2
 800130a:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 800130e:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8001312:	4618      	mov	r0, r3
 8001314:	f006 fefa 	bl	800810c <memcpy>
    finalLen += stuffedLen;
 8001318:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 800131c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001320:	4413      	add	r3, r2
 8001322:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
    finalFrame[finalLen++] = FRAME_END;
 8001326:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	f8c7 244c 	str.w	r2, [r7, #1100]	@ 0x44c
 8001330:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 8001334:	f2a2 4254 	subw	r2, r2, #1108	@ 0x454
 8001338:	2160      	movs	r1, #96	@ 0x60
 800133a:	54d1      	strb	r1, [r2, r3]
    USART_sendFrame(finalFrame, finalLen);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f967 	bl	8000618 <USART_sendFrame>
}
 800134a:	bf00      	nop
 800134c:	f207 4764 	addw	r7, r7, #1124	@ 0x464
 8001350:	46bd      	mov	sp, r7
 8001352:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001356:	b001      	add	sp, #4
 8001358:	4770      	bx	lr

0800135a <decodeFrame>:
*
* Używa:
*   - memcpy: Kopiowanie danych
*   - calculateCrc16: Obliczanie sumy kontrolnej
************************************************************************/
bool decodeFrame(uint8_t *bx, Frame *frame, uint8_t len) {
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	4613      	mov	r3, r2
 8001366:	71fb      	strb	r3, [r7, #7]
    uint8_t ownCrc[2];
    uint8_t incCrc[2];

    if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_WITHOUT_STUFFING) {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b06      	cmp	r3, #6
 800136c:	d95c      	bls.n	8001428 <decodeFrame+0xce>
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b87      	cmp	r3, #135	@ 0x87
 8001372:	d859      	bhi.n	8001428 <decodeFrame+0xce>
        uint8_t k = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	75fb      	strb	r3, [r7, #23]
        frame->sender = bx[k++];
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	75fa      	strb	r2, [r7, #23]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	701a      	strb	r2, [r3, #0]
        frame->receiver = bx[k++];
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	75fa      	strb	r2, [r7, #23]
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	781a      	ldrb	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	705a      	strb	r2, [r3, #1]
        if(frame->sender != PC_ADDR)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b67      	cmp	r3, #103	@ 0x67
 80013a2:	d004      	beq.n	80013ae <decodeFrame+0x54>
        {
        	sendStatus(ERR_WRONG_SENDER);
 80013a4:	2002      	movs	r0, #2
 80013a6:	f7ff fae7 	bl	8000978 <sendStatus>
        	return false;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e03d      	b.n	800142a <decodeFrame+0xd0>
        }

        memcpy(frame->command, &bx[k], COMMAND_LENGTH);
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1c98      	adds	r0, r3, #2
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	2203      	movs	r2, #3
 80013ba:	4619      	mov	r1, r3
 80013bc:	f006 fea6 	bl	800810c <memcpy>
        k += COMMAND_LENGTH;
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	3303      	adds	r3, #3
 80013c4:	75fb      	strb	r3, [r7, #23]

        uint8_t data_len = len - MIN_DECODED_FRAME_LEN; //to sprawdzic
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	3b07      	subs	r3, #7
 80013ca:	75bb      	strb	r3, [r7, #22]
        memcpy(frame->data, &bx[k], data_len);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1d58      	adds	r0, r3, #5
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	7dba      	ldrb	r2, [r7, #22]
 80013d8:	4619      	mov	r1, r3
 80013da:	f006 fe97 	bl	800810c <memcpy>
        frame->data[data_len] = '\0';
 80013de:	7dbb      	ldrb	r3, [r7, #22]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	2200      	movs	r2, #0
 80013e6:	715a      	strb	r2, [r3, #5]
        k += data_len;
 80013e8:	7dfa      	ldrb	r2, [r7, #23]
 80013ea:	7dbb      	ldrb	r3, [r7, #22]
 80013ec:	4413      	add	r3, r2
 80013ee:	75fb      	strb	r3, [r7, #23]

        memcpy(incCrc, &bx[k], 2);
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4413      	add	r3, r2
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	823b      	strh	r3, [r7, #16]
        calculateCrc16((uint8_t *)frame, k, ownCrc);
 80013fc:	7dfb      	ldrb	r3, [r7, #23]
 80013fe:	f107 0214 	add.w	r2, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	68b8      	ldr	r0, [r7, #8]
 8001406:	f7ff f967 	bl	80006d8 <calculateCrc16>
        if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 800140a:	7d3a      	ldrb	r2, [r7, #20]
 800140c:	7c3b      	ldrb	r3, [r7, #16]
 800140e:	429a      	cmp	r2, r3
 8001410:	d103      	bne.n	800141a <decodeFrame+0xc0>
 8001412:	7d7a      	ldrb	r2, [r7, #21]
 8001414:	7c7b      	ldrb	r3, [r7, #17]
 8001416:	429a      	cmp	r2, r3
 8001418:	d004      	beq.n	8001424 <decodeFrame+0xca>
        	sendStatus(ERR_WRONG_CRC);
 800141a:	2003      	movs	r0, #3
 800141c:	f7ff faac 	bl	8000978 <sendStatus>
            return false;
 8001420:	2300      	movs	r3, #0
 8001422:	e002      	b.n	800142a <decodeFrame+0xd0>
        }
        return true;
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <decodeFrame+0xd0>
    }
    return false;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <processReceivedChar>:
*   - Nieprawidłowe sekwencje escape
*   - Przepełnienie bufora
*   - Nieoczekiwane znaki początku/końca
************************************************************************/

void processReceivedChar(uint8_t received_char) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
    if (received_char == FRAME_START) {
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b7e      	cmp	r3, #126	@ 0x7e
 8001442:	d105      	bne.n	8001450 <processReceivedChar+0x1c>
    	resetFrameState();
 8001444:	f7ff f9a4 	bl	8000790 <resetFrameState>
    	in_frame = true;
 8001448:	4b3d      	ldr	r3, [pc, #244]	@ (8001540 <processReceivedChar+0x10c>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
        	bx[bx_index++] = received_char;
        }
    } else if (bx_index >= MAX_FRAME_WITHOUT_STUFFING) {
    	resetFrameState();
    }
}
 800144e:	e073      	b.n	8001538 <processReceivedChar+0x104>
    } else if (received_char == FRAME_END && escape_detected == false) {
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b60      	cmp	r3, #96	@ 0x60
 8001454:	d124      	bne.n	80014a0 <processReceivedChar+0x6c>
 8001456:	4b3b      	ldr	r3, [pc, #236]	@ (8001544 <processReceivedChar+0x110>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	f083 0301 	eor.w	r3, r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01d      	beq.n	80014a0 <processReceivedChar+0x6c>
        if (in_frame) {
 8001464:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <processReceivedChar+0x10c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d065      	beq.n	8001538 <processReceivedChar+0x104>
            if (decodeFrame(bx, &frame, bx_index)) {
 800146c:	4b36      	ldr	r3, [pc, #216]	@ (8001548 <processReceivedChar+0x114>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	4935      	ldr	r1, [pc, #212]	@ (800154c <processReceivedChar+0x118>)
 8001476:	4836      	ldr	r0, [pc, #216]	@ (8001550 <processReceivedChar+0x11c>)
 8001478:	f7ff ff6f 	bl	800135a <decodeFrame>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <processReceivedChar+0x60>
            	stopAnimation();
 8001482:	f7ff f99b 	bl	80007bc <stopAnimation>
            	sendStatus(ERR_GOOD);
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fa76 	bl	8000978 <sendStatus>
                handleCommand(&frame);
 800148c:	482f      	ldr	r0, [pc, #188]	@ (800154c <processReceivedChar+0x118>)
 800148e:	f000 f861 	bl	8001554 <handleCommand>
 8001492:	e002      	b.n	800149a <processReceivedChar+0x66>
            	sendStatus(ERR_FAIL);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fa6f 	bl	8000978 <sendStatus>
            resetFrameState();
 800149a:	f7ff f979 	bl	8000790 <resetFrameState>
        if (in_frame) {
 800149e:	e04b      	b.n	8001538 <processReceivedChar+0x104>
    } else if (in_frame) {
 80014a0:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <processReceivedChar+0x10c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d040      	beq.n	800152a <processReceivedChar+0xf6>
        if (escape_detected) {
 80014a8:	4b26      	ldr	r3, [pc, #152]	@ (8001544 <processReceivedChar+0x110>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d02c      	beq.n	800150a <processReceivedChar+0xd6>
            if (received_char == FRAME_START_STUFF) {
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b5e      	cmp	r3, #94	@ 0x5e
 80014b4:	d108      	bne.n	80014c8 <processReceivedChar+0x94>
                bx[bx_index++] = FRAME_START;
 80014b6:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <processReceivedChar+0x114>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	4922      	ldr	r1, [pc, #136]	@ (8001548 <processReceivedChar+0x114>)
 80014be:	600a      	str	r2, [r1, #0]
 80014c0:	4a23      	ldr	r2, [pc, #140]	@ (8001550 <processReceivedChar+0x11c>)
 80014c2:	217e      	movs	r1, #126	@ 0x7e
 80014c4:	54d1      	strb	r1, [r2, r3]
 80014c6:	e01c      	b.n	8001502 <processReceivedChar+0xce>
            } else if (received_char == ESCAPE_CHAR_STUFF) {
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b5d      	cmp	r3, #93	@ 0x5d
 80014cc:	d108      	bne.n	80014e0 <processReceivedChar+0xac>
                bx[bx_index++] = ESCAPE_CHAR;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <processReceivedChar+0x114>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	491c      	ldr	r1, [pc, #112]	@ (8001548 <processReceivedChar+0x114>)
 80014d6:	600a      	str	r2, [r1, #0]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <processReceivedChar+0x11c>)
 80014da:	217d      	movs	r1, #125	@ 0x7d
 80014dc:	54d1      	strb	r1, [r2, r3]
 80014de:	e010      	b.n	8001502 <processReceivedChar+0xce>
            } else if (received_char == FRAME_END_STUFF) {
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b26      	cmp	r3, #38	@ 0x26
 80014e4:	d108      	bne.n	80014f8 <processReceivedChar+0xc4>
                bx[bx_index++] = FRAME_END;
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <processReceivedChar+0x114>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	4916      	ldr	r1, [pc, #88]	@ (8001548 <processReceivedChar+0x114>)
 80014ee:	600a      	str	r2, [r1, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <processReceivedChar+0x11c>)
 80014f2:	2160      	movs	r1, #96	@ 0x60
 80014f4:	54d1      	strb	r1, [r2, r3]
 80014f6:	e004      	b.n	8001502 <processReceivedChar+0xce>
            	sendStatus(ERR_FAIL);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff fa3d 	bl	8000978 <sendStatus>
                resetFrameState();
 80014fe:	f7ff f947 	bl	8000790 <resetFrameState>
            escape_detected = false;
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <processReceivedChar+0x110>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
}
 8001508:	e016      	b.n	8001538 <processReceivedChar+0x104>
        } else if (received_char == ESCAPE_CHAR) {
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b7d      	cmp	r3, #125	@ 0x7d
 800150e:	d103      	bne.n	8001518 <processReceivedChar+0xe4>
            escape_detected = true;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <processReceivedChar+0x110>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
}
 8001516:	e00f      	b.n	8001538 <processReceivedChar+0x104>
        	bx[bx_index++] = received_char;
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <processReceivedChar+0x114>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	490a      	ldr	r1, [pc, #40]	@ (8001548 <processReceivedChar+0x114>)
 8001520:	600a      	str	r2, [r1, #0]
 8001522:	490b      	ldr	r1, [pc, #44]	@ (8001550 <processReceivedChar+0x11c>)
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	54ca      	strb	r2, [r1, r3]
}
 8001528:	e006      	b.n	8001538 <processReceivedChar+0x104>
    } else if (bx_index >= MAX_FRAME_WITHOUT_STUFFING) {
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <processReceivedChar+0x114>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b86      	cmp	r3, #134	@ 0x86
 8001530:	dd02      	ble.n	8001538 <processReceivedChar+0x104>
    	resetFrameState();
 8001532:	f7ff f92d 	bl	8000790 <resetFrameState>
}
 8001536:	e7ff      	b.n	8001538 <processReceivedChar+0x104>
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000c28 	.word	0x20000c28
 8001544:	20000c22 	.word	0x20000c22
 8001548:	20000c24 	.word	0x20000c24
 800154c:	20000c2c 	.word	0x20000c2c
 8001550:	20000b14 	.word	0x20000b14

08001554 <handleCommand>:
* Błędy:
*   - Nieznana komenda
*   - Nieprawidłowe współrzędne
*   - Przekroczenie obszaru wyświetlacza
************************************************************************/
void handleCommand(Frame *frame) {
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	b090      	sub	sp, #64	@ 0x40
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    if (frame == NULL) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d076      	beq.n	8001650 <handleCommand+0xfc>
        return;
    }
    CommandEntry commandTable[COMMAND_COUNT] = {
 8001562:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <handleCommand+0x104>)
 8001564:	f107 0414 	add.w	r4, r7, #20
 8001568:	461d      	mov	r5, r3
 800156a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001572:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001576:	e884 0003 	stmia.w	r4, {r0, r1}
        {"ONP", executeONP},
        {"ONT", executeONT},
        {"ONN", executeONN},
        {"OFF", executeOFF}
    };
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2102      	movs	r1, #2
 800157e:	4837      	ldr	r0, [pc, #220]	@ (800165c <handleCommand+0x108>)
 8001580:	f001 fca4 	bl	8002ecc <HAL_GPIO_WritePin>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 8001584:	2300      	movs	r3, #0
 8001586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001588:	e05e      	b.n	8001648 <handleCommand+0xf4>
            if (safeCompare(frame->command, commandTable[i].command, COMMAND_LENGTH)) {
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	1c98      	adds	r0, r3, #2
 800158e:	f107 0214 	add.w	r2, r7, #20
 8001592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	2203      	movs	r2, #3
 800159a:	4619      	mov	r1, r3
 800159c:	f7ff f939 	bl	8000812 <safeCompare>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d04d      	beq.n	8001642 <handleCommand+0xee>
                if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 80015a6:	f107 0214 	add.w	r2, r7, #20
 80015aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4413      	add	r3, r2
 80015b0:	2203      	movs	r2, #3
 80015b2:	492b      	ldr	r1, [pc, #172]	@ (8001660 <handleCommand+0x10c>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff f92c 	bl	8000812 <safeCompare>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00f      	beq.n	80015e0 <handleCommand+0x8c>
                    lcdClear();
 80015c0:	f000 fa9a 	bl	8001af8 <lcdClear>
                    commandTable[i].function(frame);
 80015c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	3340      	adds	r3, #64	@ 0x40
 80015ca:	443b      	add	r3, r7
 80015cc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
                    lcdCopy();
 80015d4:	f000 fa64 	bl	8001aa0 <lcdCopy>
                    clearFrame(frame);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff faea 	bl	8000bb2 <clearFrame>
                    return;
 80015de:	e038      	b.n	8001652 <handleCommand+0xfe>
                }

                int x, y;
                if (parseCoordinates(frame->data, &x, &y)) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3305      	adds	r3, #5
 80015e4:	f107 020c 	add.w	r2, r7, #12
 80015e8:	f107 0110 	add.w	r1, r7, #16
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fcff 	bl	8000ff0 <parseCoordinates>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01c      	beq.n	8001632 <handleCommand+0xde>
                    if (isWithinBounds(x, y)) {
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f8ea 	bl	80007d8 <isWithinBounds>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00f      	beq.n	800162a <handleCommand+0xd6>
                        lcdClear();
 800160a:	f000 fa75 	bl	8001af8 <lcdClear>
                        commandTable[i].function(frame);
 800160e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	3340      	adds	r3, #64	@ 0x40
 8001614:	443b      	add	r3, r7
 8001616:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
                        lcdCopy();
 800161e:	f000 fa3f 	bl	8001aa0 <lcdCopy>
                        clearFrame(frame);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fac5 	bl	8000bb2 <clearFrame>
                        return;
 8001628:	e013      	b.n	8001652 <handleCommand+0xfe>
                    } else {
                    sendStatus(ERR_DISPLAY_AREA);
 800162a:	2004      	movs	r0, #4
 800162c:	f7ff f9a4 	bl	8000978 <sendStatus>
                    return;
 8001630:	e00f      	b.n	8001652 <handleCommand+0xfe>
                }
            } else {
            	lcdClear();
 8001632:	f000 fa61 	bl	8001af8 <lcdClear>
            	lcdCopy();
 8001636:	f000 fa33 	bl	8001aa0 <lcdCopy>
            	sendStatus(ERR_NOT_RECOGNIZED);
 800163a:	2009      	movs	r0, #9
 800163c:	f7ff f99c 	bl	8000978 <sendStatus>
            	return;
 8001640:	e007      	b.n	8001652 <handleCommand+0xfe>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 8001642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001644:	3301      	adds	r3, #1
 8001646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800164a:	2b04      	cmp	r3, #4
 800164c:	dd9d      	ble.n	800158a <handleCommand+0x36>
 800164e:	e000      	b.n	8001652 <handleCommand+0xfe>
        return;
 8001650:	bf00      	nop
            }
        }
    }
}
 8001652:	3740      	adds	r7, #64	@ 0x40
 8001654:	46bd      	mov	sp, r7
 8001656:	bdb0      	pop	{r4, r5, r7, pc}
 8001658:	08008ab4 	.word	0x08008ab4
 800165c:	48000400 	.word	0x48000400
 8001660:	08008ab0 	.word	0x08008ab0

08001664 <updateScrollingText>:



void updateScrollingText(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
    if (!text.isScrolling || text.scrollSpeed == 0) {
 800166a:	4b5d      	ldr	r3, [pc, #372]	@ (80017e0 <updateScrollingText+0x17c>)
 800166c:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	f040 80ae 	bne.w	80017d8 <updateScrollingText+0x174>
 800167c:	4b58      	ldr	r3, [pc, #352]	@ (80017e0 <updateScrollingText+0x17c>)
 800167e:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80a8 	beq.w	80017d8 <updateScrollingText+0x174>
        return;
    }

    uint32_t currentTime = HAL_GetTick();
 8001688:	f000 fee2 	bl	8002450 <HAL_GetTick>
 800168c:	6078      	str	r0, [r7, #4]
    if ((currentTime - text.lastUpdate) >= (256 - text.scrollSpeed)) {
 800168e:	4b54      	ldr	r3, [pc, #336]	@ (80017e0 <updateScrollingText+0x17c>)
 8001690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	4a51      	ldr	r2, [pc, #324]	@ (80017e0 <updateScrollingText+0x17c>)
 800169a:	f892 20d1 	ldrb.w	r2, [r2, #209]	@ 0xd1
 800169e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80016a2:	4293      	cmp	r3, r2
 80016a4:	f0c0 8099 	bcc.w	80017da <updateScrollingText+0x176>
        text.lastUpdate = currentTime;
 80016a8:	4a4d      	ldr	r2, [pc, #308]	@ (80017e0 <updateScrollingText+0x17c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

        uint8_t charWidth;
        uint8_t charHeight;
        const uint8_t* font;
        switch(text.fontSize) {
 80016b0:	4b4b      	ldr	r3, [pc, #300]	@ (80017e0 <updateScrollingText+0x17c>)
 80016b2:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d014      	beq.n	80016e4 <updateScrollingText+0x80>
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	dc19      	bgt.n	80016f2 <updateScrollingText+0x8e>
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d002      	beq.n	80016c8 <updateScrollingText+0x64>
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d007      	beq.n	80016d6 <updateScrollingText+0x72>
 80016c6:	e014      	b.n	80016f2 <updateScrollingText+0x8e>
            case 1: charWidth = 5; charHeight = 7; font=font5x7; break;
 80016c8:	2305      	movs	r3, #5
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	2307      	movs	r3, #7
 80016ce:	73bb      	strb	r3, [r7, #14]
 80016d0:	4b44      	ldr	r3, [pc, #272]	@ (80017e4 <updateScrollingText+0x180>)
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	e014      	b.n	8001700 <updateScrollingText+0x9c>
            case 2: charWidth = 5; charHeight = 8; font=font5x8; break;
 80016d6:	2305      	movs	r3, #5
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	2308      	movs	r3, #8
 80016dc:	73bb      	strb	r3, [r7, #14]
 80016de:	4b42      	ldr	r3, [pc, #264]	@ (80017e8 <updateScrollingText+0x184>)
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	e00d      	b.n	8001700 <updateScrollingText+0x9c>
            case 3: charWidth = 6; charHeight = 9; font=font6x9; break;
 80016e4:	2306      	movs	r3, #6
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	2309      	movs	r3, #9
 80016ea:	73bb      	strb	r3, [r7, #14]
 80016ec:	4b3f      	ldr	r3, [pc, #252]	@ (80017ec <updateScrollingText+0x188>)
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	e006      	b.n	8001700 <updateScrollingText+0x9c>
            default: charWidth = 5; charHeight = 7; font=font5x7; break;
 80016f2:	2305      	movs	r3, #5
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	2307      	movs	r3, #7
 80016f8:	73bb      	strb	r3, [r7, #14]
 80016fa:	4b3a      	ldr	r3, [pc, #232]	@ (80017e4 <updateScrollingText+0x180>)
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	bf00      	nop
        }

        // Oblicz całkowitą szerokość tekstu
        int16_t textWidth = text.textLength * charWidth;
 8001700:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <updateScrollingText+0x17c>)
 8001702:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8001706:	461a      	mov	r2, r3
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	b29b      	uxth	r3, r3
 800170c:	fb12 f303 	smulbb	r3, r2, r3
 8001710:	b29b      	uxth	r3, r3
 8001712:	807b      	strh	r3, [r7, #2]

        // Przewijanie od lewej do prawej
        if (!text.firstIteration) {
 8001714:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <updateScrollingText+0x17c>)
 8001716:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 800171a:	f083 0301 	eor.w	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d034      	beq.n	800178e <updateScrollingText+0x12a>
            text.x+=text.textLength;  // Przesuwamy w prawo
 8001724:	4b2e      	ldr	r3, [pc, #184]	@ (80017e0 <updateScrollingText+0x17c>)
 8001726:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 800172a:	b29b      	uxth	r3, r3
 800172c:	4a2c      	ldr	r2, [pc, #176]	@ (80017e0 <updateScrollingText+0x17c>)
 800172e:	f892 20d4 	ldrb.w	r2, [r2, #212]	@ 0xd4
 8001732:	4413      	add	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	b21a      	sxth	r2, r3
 8001738:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <updateScrollingText+0x17c>)
 800173a:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8

            // Jeśli tekst całkowicie wyszedł z prawej strony
            if (text.x > LCD_WIDTH) {
 800173e:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <updateScrollingText+0x17c>)
 8001740:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8001744:	2ba0      	cmp	r3, #160	@ 0xa0
 8001746:	dd33      	ble.n	80017b0 <updateScrollingText+0x14c>
                text.x = -textWidth; // Wróć na lewą stronę
 8001748:	887b      	ldrh	r3, [r7, #2]
 800174a:	425b      	negs	r3, r3
 800174c:	b29b      	uxth	r3, r3
 800174e:	b21a      	sxth	r2, r3
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <updateScrollingText+0x17c>)
 8001752:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
                text.y += charHeight; // Przejdź do następnej linii
 8001756:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <updateScrollingText+0x17c>)
 8001758:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 800175c:	b29a      	uxth	r2, r3
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	b29b      	uxth	r3, r3
 8001762:	4413      	add	r3, r2
 8001764:	b29b      	uxth	r3, r3
 8001766:	b21a      	sxth	r2, r3
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <updateScrollingText+0x17c>)
 800176a:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca

                // Jeśli doszliśmy do dołu ekranu
                if (text.y >= LCD_HEIGHT - charHeight) {
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <updateScrollingText+0x17c>)
 8001770:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 8001774:	461a      	mov	r2, r3
 8001776:	7bbb      	ldrb	r3, [r7, #14]
 8001778:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800177c:	429a      	cmp	r2, r3
 800177e:	db17      	blt.n	80017b0 <updateScrollingText+0x14c>
                    text.y = text.startY; // Wróć na początkową wysokość
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <updateScrollingText+0x17c>)
 8001782:	f9b3 20ce 	ldrsh.w	r2, [r3, #206]	@ 0xce
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <updateScrollingText+0x17c>)
 8001788:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
 800178c:	e010      	b.n	80017b0 <updateScrollingText+0x14c>
                }
            }
        } else {
            // Pierwsza iteracja - start z lewej strony
            text.x = -textWidth;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	425b      	negs	r3, r3
 8001792:	b29b      	uxth	r3, r3
 8001794:	b21a      	sxth	r2, r3
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <updateScrollingText+0x17c>)
 8001798:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
            text.y = text.startY;
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <updateScrollingText+0x17c>)
 800179e:	f9b3 20ce 	ldrsh.w	r2, [r3, #206]	@ 0xce
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <updateScrollingText+0x17c>)
 80017a4:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
            text.firstIteration = false;
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <updateScrollingText+0x17c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
        }
            lcdClear();
 80017b0:	f000 f9a2 	bl	8001af8 <lcdClear>
            hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <updateScrollingText+0x17c>)
 80017b6:	f9b3 10c8 	ldrsh.w	r1, [r3, #200]	@ 0xc8
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <updateScrollingText+0x17c>)
 80017bc:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <updateScrollingText+0x17c>)
 80017c2:	f8b3 00d2 	ldrh.w	r0, [r3, #210]	@ 0xd2
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	4603      	mov	r3, r0
 80017cc:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <updateScrollingText+0x17c>)
 80017ce:	f005 ffb6 	bl	800773e <hagl_put_text>
            lcdCopy();
 80017d2:	f000 f965 	bl	8001aa0 <lcdCopy>
 80017d6:	e000      	b.n	80017da <updateScrollingText+0x176>
        return;
 80017d8:	bf00      	nop
    }
}
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000cb4 	.word	0x20000cb4
 80017e4:	08008b44 	.word	0x08008b44
 80017e8:	0800c04c 	.word	0x0800c04c
 80017ec:	0800eef0 	.word	0x0800eef0

080017f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	@ 0x28
 80017f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	4b4a      	ldr	r3, [pc, #296]	@ (8001930 <MX_GPIO_Init+0x140>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a49      	ldr	r2, [pc, #292]	@ (8001930 <MX_GPIO_Init+0x140>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <MX_GPIO_Init+0x140>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	4b44      	ldr	r3, [pc, #272]	@ (8001930 <MX_GPIO_Init+0x140>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a43      	ldr	r2, [pc, #268]	@ (8001930 <MX_GPIO_Init+0x140>)
 8001824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b41      	ldr	r3, [pc, #260]	@ (8001930 <MX_GPIO_Init+0x140>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b3e      	ldr	r3, [pc, #248]	@ (8001930 <MX_GPIO_Init+0x140>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4a3d      	ldr	r2, [pc, #244]	@ (8001930 <MX_GPIO_Init+0x140>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4b3b      	ldr	r3, [pc, #236]	@ (8001930 <MX_GPIO_Init+0x140>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <MX_GPIO_Init+0x140>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	4a37      	ldr	r2, [pc, #220]	@ (8001930 <MX_GPIO_Init+0x140>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185a:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <MX_GPIO_Init+0x140>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001866:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <MX_GPIO_Init+0x140>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	4a31      	ldr	r2, [pc, #196]	@ (8001930 <MX_GPIO_Init+0x140>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001872:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <MX_GPIO_Init+0x140>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	f641 0106 	movw	r1, #6150	@ 0x1806
 8001884:	482b      	ldr	r0, [pc, #172]	@ (8001934 <MX_GPIO_Init+0x144>)
 8001886:	f001 fb21 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800188a:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800188e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001890:	2303      	movs	r3, #3
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4826      	ldr	r0, [pc, #152]	@ (8001938 <MX_GPIO_Init+0x148>)
 80018a0:	f001 f96a 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a4:	2303      	movs	r3, #3
 80018a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a8:	2303      	movs	r3, #3
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4821      	ldr	r0, [pc, #132]	@ (800193c <MX_GPIO_Init+0x14c>)
 80018b8:	f001 f95e 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80018bc:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 80018c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c2:	2303      	movs	r3, #3
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d4:	f001 f950 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80018d8:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 80018dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018de:	2303      	movs	r3, #3
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4811      	ldr	r0, [pc, #68]	@ (8001934 <MX_GPIO_Init+0x144>)
 80018ee:	f001 f943 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 80018f2:	f641 0306 	movw	r3, #6150	@ 0x1806
 80018f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	480a      	ldr	r0, [pc, #40]	@ (8001934 <MX_GPIO_Init+0x144>)
 800190c:	f001 f934 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001910:	2304      	movs	r3, #4
 8001912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001914:	2303      	movs	r3, #3
 8001916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4807      	ldr	r0, [pc, #28]	@ (8001940 <MX_GPIO_Init+0x150>)
 8001924:	f001 f928 	bl	8002b78 <HAL_GPIO_Init>

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	@ 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	48000400 	.word	0x48000400
 8001938:	48000800 	.word	0x48000800
 800193c:	48001c00 	.word	0x48001c00
 8001940:	48000c00 	.word	0x48000c00

08001944 <lcdCmd>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdCmd(uint8_t cmd)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <lcdCmd+0x44>)
 8001956:	f001 fab9 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001960:	4809      	ldr	r0, [pc, #36]	@ (8001988 <lcdCmd+0x44>)
 8001962:	f001 fab3 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001966:	1df9      	adds	r1, r7, #7
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	2201      	movs	r2, #1
 800196e:	4807      	ldr	r0, [pc, #28]	@ (800198c <lcdCmd+0x48>)
 8001970:	f002 fe87 	bl	8004682 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800197a:	4803      	ldr	r0, [pc, #12]	@ (8001988 <lcdCmd+0x44>)
 800197c:	f001 faa6 	bl	8002ecc <HAL_GPIO_WritePin>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	48000400 	.word	0x48000400
 800198c:	2000ad98 	.word	0x2000ad98

08001990 <lcdData>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdData(uint8_t data)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800199a:	2201      	movs	r2, #1
 800199c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019a0:	480c      	ldr	r0, [pc, #48]	@ (80019d4 <lcdData+0x44>)
 80019a2:	f001 fa93 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ac:	4809      	ldr	r0, [pc, #36]	@ (80019d4 <lcdData+0x44>)
 80019ae:	f001 fa8d 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80019b2:	1df9      	adds	r1, r7, #7
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	2201      	movs	r2, #1
 80019ba:	4807      	ldr	r0, [pc, #28]	@ (80019d8 <lcdData+0x48>)
 80019bc:	f002 fe61 	bl	8004682 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019c6:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <lcdData+0x44>)
 80019c8:	f001 fa80 	bl	8002ecc <HAL_GPIO_WritePin>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	48000400 	.word	0x48000400
 80019d8:	2000ad98 	.word	0x2000ad98

080019dc <lcdSend>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komendy
*   - lcd_data: wysyłanie danych
************************************************************************/
static void lcdSend(uint16_t value)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <lcdSend+0x20>
		lcdCmd(value);
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ffa5 	bl	8001944 <lcdCmd>
	} else {
		lcdData(value);
	}
}
 80019fa:	e004      	b.n	8001a06 <lcdSend+0x2a>
		lcdData(value);
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ffc5 	bl	8001990 <lcdData>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <lcdData16>:
*   - value: 16-bitowa wartość do wysłania
* Korzysta z:
*   - lcd_data: wysyłanie pojedynczych bajtów
************************************************************************/
static void lcdData16(uint16_t value)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ffb5 	bl	8001990 <lcdData>
	lcdData(value);
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ffb0 	bl	8001990 <lcdData>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <lcdSetWindow>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komend CASET i RASET
*   - lcd_data16: wysyłanie współrzędnych
************************************************************************/
static void lcdSetWindow(int x, int y, int width, int height)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 8001a46:	202a      	movs	r0, #42	@ 0x2a
 8001a48:	f7ff ff7c 	bl	8001944 <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ffda 	bl	8001a0e <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ffd1 	bl	8001a0e <lcdData16>

  lcdCmd(ST7735S_RASET);
 8001a6c:	202b      	movs	r0, #43	@ 0x2b
 8001a6e:	f7ff ff69 	bl	8001944 <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3302      	adds	r3, #2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ffc7 	bl	8001a0e <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ffbc 	bl	8001a0e <lcdData16>
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <lcdCopy>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdCopy(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) {
 8001aa4:	f000 f894 	bl	8001bd0 <lcdIsBusy>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d11b      	bne.n	8001ae6 <lcdCopy+0x46>
        return;
    }

    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	22a0      	movs	r2, #160	@ 0xa0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff ffbf 	bl	8001a38 <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 8001aba:	202c      	movs	r0, #44	@ 0x2c
 8001abc:	f7ff ff42 	bl	8001944 <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ac6:	4809      	ldr	r0, [pc, #36]	@ (8001aec <lcdCopy+0x4c>)
 8001ac8:	f001 fa00 	bl	8002ecc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ad2:	4806      	ldr	r0, [pc, #24]	@ (8001aec <lcdCopy+0x4c>)
 8001ad4:	f001 f9fa 	bl	8002ecc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer));
 8001ad8:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001adc:	4904      	ldr	r1, [pc, #16]	@ (8001af0 <lcdCopy+0x50>)
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <lcdCopy+0x54>)
 8001ae0:	f002 ff46 	bl	8004970 <HAL_SPI_Transmit_DMA>
 8001ae4:	e000      	b.n	8001ae8 <lcdCopy+0x48>
        return;
 8001ae6:	bf00      	nop
}
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	48000400 	.word	0x48000400
 8001af0:	20000d90 	.word	0x20000d90
 8001af4:	2000ad98 	.word	0x2000ad98

08001af8 <lcdClear>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdClear(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001afc:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001b00:	2100      	movs	r1, #0
 8001b02:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <lcdClear+0x14>)
 8001b04:	f006 faba 	bl	800807c <memset>
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000d90 	.word	0x20000d90

08001b10 <lcdInit>:
*   4. Włącza wyświetlacz i podświetlenie
* Korzysta z:
*   - lcd_send: wysyłanie komend inicjalizacyjnych
*   - HAL_GPIO_WritePin: sterowanie pinami RST i BL
************************************************************************/
void lcdInit(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2104      	movs	r1, #4
 8001b1a:	481c      	ldr	r0, [pc, #112]	@ (8001b8c <lcdInit+0x7c>)
 8001b1c:	f001 f9d6 	bl	8002ecc <HAL_GPIO_WritePin>
    delay(100);
 8001b20:	2064      	movs	r0, #100	@ 0x64
 8001b22:	f000 f8c9 	bl	8001cb8 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2104      	movs	r1, #4
 8001b2a:	4818      	ldr	r0, [pc, #96]	@ (8001b8c <lcdInit+0x7c>)
 8001b2c:	f001 f9ce 	bl	8002ecc <HAL_GPIO_WritePin>
    delay(100);
 8001b30:	2064      	movs	r0, #100	@ 0x64
 8001b32:	f000 f8c1 	bl	8001cb8 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	e009      	b.n	8001b50 <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <lcdInit+0x80>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff49 	bl	80019dc <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b4b      	cmp	r3, #75	@ 0x4b
 8001b54:	d9f2      	bls.n	8001b3c <lcdInit+0x2c>
    }
    delay(200);
 8001b56:	20c8      	movs	r0, #200	@ 0xc8
 8001b58:	f000 f8ae 	bl	8001cb8 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001b5c:	2011      	movs	r0, #17
 8001b5e:	f7ff fef1 	bl	8001944 <lcdCmd>
    delay(120);
 8001b62:	2078      	movs	r0, #120	@ 0x78
 8001b64:	f000 f8a8 	bl	8001cb8 <delay>
    lcdCmd(ST7735S_DISPON);
 8001b68:	2029      	movs	r0, #41	@ 0x29
 8001b6a:	f7ff feeb 	bl	8001944 <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2102      	movs	r1, #2
 8001b72:	4806      	ldr	r0, [pc, #24]	@ (8001b8c <lcdInit+0x7c>)
 8001b74:	f001 f9aa 	bl	8002ecc <HAL_GPIO_WritePin>
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001b78:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <lcdInit+0x84>)
 8001b80:	f006 fa7c 	bl	800807c <memset>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	08011ea8 	.word	0x08011ea8
 8001b94:	20000d90 	.word	0x20000d90

08001b98 <lcdPutPixel>:
* Parametry:
*   - x, y: Współrzędne piksela
*   - color: Kolor w formacie RGB565
************************************************************************/
void lcdPutPixel(int x, int y, uint16_t color)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	80fb      	strh	r3, [r7, #6]
        frameBuffer[y * LCD_WIDTH + x] = color;
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	015b      	lsls	r3, r3, #5
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4905      	ldr	r1, [pc, #20]	@ (8001bcc <lcdPutPixel+0x34>)
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000d90 	.word	0x20000d90

08001bd0 <lcdIsBusy>:
bool lcdIsBusy(void) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
    return transferInProgress;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <lcdIsBusy+0x14>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	2000ad90 	.word	0x2000ad90

08001be8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <HAL_SPI_TxCpltCallback+0x2c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d108      	bne.n	8001c0a <HAL_SPI_TxCpltCallback+0x22>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bfe:	4806      	ldr	r0, [pc, #24]	@ (8001c18 <HAL_SPI_TxCpltCallback+0x30>)
 8001c00:	f001 f964 	bl	8002ecc <HAL_GPIO_WritePin>
        transferInProgress = false;
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_SPI_TxCpltCallback+0x34>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
    }
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000ad98 	.word	0x2000ad98
 8001c18:	48000400 	.word	0x48000400
 8001c1c:	2000ad90 	.word	0x2000ad90

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	@ (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	@ (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ffc2 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <delay>:
*   - delayMs: Liczba milisekund do odczekania

* Korzysta z:
*   - tick: Globalna zmienna zwiększana w przerwaniu systemowym
************************************************************************/
void delay(uint32_t delayMs){
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <delay+0x2c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8001cc6:	bf00      	nop
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	441a      	add	r2, r3
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <delay+0x2c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d8f8      	bhi.n	8001cc8 <delay+0x10>
}
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	2000ad94 	.word	0x2000ad94

08001ce8 <waitForFrame>:
*   - USART_kbhit: Sprawdzenie dostępności danych
*   - USART_getchar: Pobranie znaku z UART
*   - processReceivedChar: Przetworzenie odebranego znaku
************************************************************************/
void waitForFrame(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001cee:	f7fe fc57 	bl	80005a0 <USART_kbhit>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <waitForFrame+0x20>
	        uint8_t received_char = USART_getchar();
 8001cf8:	f7fe fc64 	bl	80005c4 <USART_getchar>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(received_char);
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fb96 	bl	8001434 <processReceivedChar>
	 }
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d14:	f000 fb33 	bl	800237e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d18:	f000 f812 	bl	8001d40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001d1c:	4807      	ldr	r0, [pc, #28]	@ (8001d3c <main+0x2c>)
 8001d1e:	f7ff ffa9 	bl	8001c74 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d22:	f7ff fd65 	bl	80017f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d26:	f7fe fd15 	bl	8000754 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d2a:	f000 fa53 	bl	80021d4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001d2e:	f000 f85f 	bl	8001df0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(); // inicjalizacja wyświetlacza
 8001d32:	f7ff feed 	bl	8001b10 <lcdInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  waitForFrame();
 8001d36:	f7ff ffd7 	bl	8001ce8 <waitForFrame>
 8001d3a:	e7fc      	b.n	8001d36 <main+0x26>
 8001d3c:	00013880 	.word	0x00013880

08001d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b096      	sub	sp, #88	@ 0x58
 8001d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	2244      	movs	r2, #68	@ 0x44
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f006 f994 	bl	800807c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d54:	463b      	mov	r3, r7
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d66:	f001 f8d7 	bl	8002f18 <HAL_PWREx_ControlVoltageScaling>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d70:	f000 f838 	bl	8001de4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d74:	2310      	movs	r3, #16
 8001d76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d80:	2360      	movs	r3, #96	@ 0x60
 8001d82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d84:	2302      	movs	r3, #2
 8001d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d90:	2328      	movs	r3, #40	@ 0x28
 8001d92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d94:	2307      	movs	r3, #7
 8001d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 f90d 	bl	8002fc4 <HAL_RCC_OscConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001db0:	f000 f818 	bl	8001de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db4:	230f      	movs	r3, #15
 8001db6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db8:	2303      	movs	r3, #3
 8001dba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2104      	movs	r1, #4
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fcd5 	bl	800377c <HAL_RCC_ClockConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001dd8:	f000 f804 	bl	8001de4 <Error_Handler>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3758      	adds	r7, #88	@ 0x58
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001de8:	b672      	cpsid	i
}
 8001dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <Error_Handler+0x8>

08001df0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001df6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e68 <MX_SPI2_Init+0x78>)
 8001df8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001dfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e02:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e08:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e0a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e0e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e10:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e16:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e22:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e26:	2210      	movs	r2, #16
 8001e28:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e3e:	2207      	movs	r2, #7
 8001e40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e4e:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <MX_SPI2_Init+0x74>)
 8001e50:	f002 fb74 	bl	800453c <HAL_SPI_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e5a:	f7ff ffc3 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000ad98 	.word	0x2000ad98
 8001e68:	40003800 	.word	0x40003800

08001e6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	@ 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3e      	ldr	r2, [pc, #248]	@ (8001f84 <HAL_SPI_MspInit+0x118>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d175      	bne.n	8001f7a <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f88 <HAL_SPI_MspInit+0x11c>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	4a3d      	ldr	r2, [pc, #244]	@ (8001f88 <HAL_SPI_MspInit+0x11c>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f88 <HAL_SPI_MspInit+0x11c>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea6:	4b38      	ldr	r3, [pc, #224]	@ (8001f88 <HAL_SPI_MspInit+0x11c>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	4a37      	ldr	r2, [pc, #220]	@ (8001f88 <HAL_SPI_MspInit+0x11c>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb2:	4b35      	ldr	r3, [pc, #212]	@ (8001f88 <HAL_SPI_MspInit+0x11c>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	4b32      	ldr	r3, [pc, #200]	@ (8001f88 <HAL_SPI_MspInit+0x11c>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	4a31      	ldr	r2, [pc, #196]	@ (8001f88 <HAL_SPI_MspInit+0x11c>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eca:	4b2f      	ldr	r3, [pc, #188]	@ (8001f88 <HAL_SPI_MspInit+0x11c>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4826      	ldr	r0, [pc, #152]	@ (8001f8c <HAL_SPI_MspInit+0x120>)
 8001ef2:	f000 fe41 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f08:	2305      	movs	r3, #5
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	481f      	ldr	r0, [pc, #124]	@ (8001f90 <HAL_SPI_MspInit+0x124>)
 8001f14:	f000 fe30 	bl	8002b78 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001f18:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f98 <HAL_SPI_MspInit+0x12c>)
 8001f1c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f26:	2210      	movs	r2, #16
 8001f28:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f30:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f32:	2280      	movs	r2, #128	@ 0x80
 8001f34:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f36:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f3c:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001f42:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001f4e:	4811      	ldr	r0, [pc, #68]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f50:	f000 fb9c 	bl	800268c <HAL_DMA_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001f5a:	f7ff ff43 	bl	8001de4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a0c      	ldr	r2, [pc, #48]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f64:	4a0b      	ldr	r2, [pc, #44]	@ (8001f94 <HAL_SPI_MspInit+0x128>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	2024      	movs	r0, #36	@ 0x24
 8001f70:	f000 fb55 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f74:	2024      	movs	r0, #36	@ 0x24
 8001f76:	f000 fb6e 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	@ 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40003800 	.word	0x40003800
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	48000800 	.word	0x48000800
 8001f90:	48000400 	.word	0x48000400
 8001f94:	2000adfc 	.word	0x2000adfc
 8001f98:	40020058 	.word	0x40020058

08001f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbe:	4a08      	ldr	r2, [pc, #32]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_MspInit+0x44>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <NMI_Handler+0x4>

08001fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <UsageFault_Handler+0x4>

0800200c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203c:	f000 f9f4 	bl	8002428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  tick++; // zwiększanie zmiennej dla funkcji delay()
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <SysTick_Handler+0x1c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	4a03      	ldr	r2, [pc, #12]	@ (8002054 <SysTick_Handler+0x1c>)
 8002048:	6013      	str	r3, [r2, #0]
  updateScrollingText();
 800204a:	f7ff fb0b 	bl	8001664 <updateScrollingText>

  /* USER CODE END SysTick_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000ad94 	.word	0x2000ad94

08002058 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <DMA1_Channel5_IRQHandler+0x10>)
 800205e:	f000 fcac 	bl	80029ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000adfc 	.word	0x2000adfc

0800206c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <SPI2_IRQHandler+0x10>)
 8002072:	f002 fd6b 	bl	8004b4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000ad98 	.word	0x2000ad98

08002080 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <USART2_IRQHandler+0x10>)
 8002086:	f003 f95b 	bl	8005340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000ae48 	.word	0x2000ae48

08002094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800209c:	4a14      	ldr	r2, [pc, #80]	@ (80020f0 <_sbrk+0x5c>)
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <_sbrk+0x60>)
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a8:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <_sbrk+0x64>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <_sbrk+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d207      	bcs.n	80020d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c4:	f005 fff6 	bl	80080b4 <__errno>
 80020c8:	4603      	mov	r3, r0
 80020ca:	220c      	movs	r2, #12
 80020cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	e009      	b.n	80020e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020da:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <_sbrk+0x64>)
 80020e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20018000 	.word	0x20018000
 80020f4:	00001000 	.word	0x00001000
 80020f8:	2000ae44 	.word	0x2000ae44
 80020fc:	2000b020 	.word	0x2000b020

08002100 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <SystemInit+0x20>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <SystemInit+0x20>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <HAL_UART_TxCpltCallback>:
* Korzysta z:
*   txRingBuffer - struktura bufora kołowego transmisji
*   USART_TxBuf - bufor danych do transmisji
*   HAL_UART_Transmit_IT - funkcja HAL rozpoczynająca transmisję
************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <HAL_UART_TxCpltCallback+0x54>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d11d      	bne.n	8002170 <HAL_UART_TxCpltCallback+0x4c>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <HAL_UART_TxCpltCallback+0x58>)
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b10      	ldr	r3, [pc, #64]	@ (800217c <HAL_UART_TxCpltCallback+0x58>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d017      	beq.n	8002170 <HAL_UART_TxCpltCallback+0x4c>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8002140:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <HAL_UART_TxCpltCallback+0x58>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a0e      	ldr	r2, [pc, #56]	@ (8002180 <HAL_UART_TxCpltCallback+0x5c>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) % txRingBuffer.mask;
 800214a:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <HAL_UART_TxCpltCallback+0x58>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	3301      	adds	r3, #1
 8002150:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <HAL_UART_TxCpltCallback+0x58>)
 8002152:	68d2      	ldr	r2, [r2, #12]
 8002154:	fbb3 f1f2 	udiv	r1, r3, r2
 8002158:	fb01 f202 	mul.w	r2, r1, r2
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	4a07      	ldr	r2, [pc, #28]	@ (800217c <HAL_UART_TxCpltCallback+0x58>)
 8002160:	6053      	str	r3, [r2, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8002162:	f107 030f 	add.w	r3, r7, #15
 8002166:	2201      	movs	r2, #1
 8002168:	4619      	mov	r1, r3
 800216a:	4803      	ldr	r0, [pc, #12]	@ (8002178 <HAL_UART_TxCpltCallback+0x54>)
 800216c:	f003 f83e 	bl	80051ec <HAL_UART_Transmit_IT>
	   }
   }
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	2000ae48 	.word	0x2000ae48
 800217c:	20000290 	.word	0x20000290
 8002180:	200002a0 	.word	0x200002a0

08002184 <HAL_UART_RxCpltCallback>:
* Korzysta z:
*   rxRingBuffer - struktura bufora kołowego odbioru
*   USART_RxBuf - bufor danych odebranych
*   HAL_UART_Receive_IT - funkcja HAL rozpoczynająca odbiór
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0e      	ldr	r2, [pc, #56]	@ (80021c8 <HAL_UART_RxCpltCallback+0x44>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d114      	bne.n	80021be <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex = (rxRingBuffer.writeIndex + 1) % rxRingBuffer.mask;
 8002194:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <HAL_UART_RxCpltCallback+0x48>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	3301      	adds	r3, #1
 800219a:	4a0c      	ldr	r2, [pc, #48]	@ (80021cc <HAL_UART_RxCpltCallback+0x48>)
 800219c:	68d2      	ldr	r2, [r2, #12]
 800219e:	fbb3 f1f2 	udiv	r1, r3, r2
 80021a2:	fb01 f202 	mul.w	r2, r1, r2
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	4a08      	ldr	r2, [pc, #32]	@ (80021cc <HAL_UART_RxCpltCallback+0x48>)
 80021aa:	6093      	str	r3, [r2, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 80021ac:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <HAL_UART_RxCpltCallback+0x48>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a07      	ldr	r2, [pc, #28]	@ (80021d0 <HAL_UART_RxCpltCallback+0x4c>)
 80021b2:	4413      	add	r3, r2
 80021b4:	2201      	movs	r2, #1
 80021b6:	4619      	mov	r1, r3
 80021b8:	4803      	ldr	r0, [pc, #12]	@ (80021c8 <HAL_UART_RxCpltCallback+0x44>)
 80021ba:	f003 f875 	bl	80052a8 <HAL_UART_Receive_IT>

	 }
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000ae48 	.word	0x2000ae48
 80021cc:	20000280 	.word	0x20000280
 80021d0:	20000a04 	.word	0x20000a04

080021d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021d8:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <MX_USART2_UART_Init+0x78>)
 80021da:	4a1d      	ldr	r2, [pc, #116]	@ (8002250 <MX_USART2_UART_Init+0x7c>)
 80021dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <MX_USART2_UART_Init+0x78>)
 80021e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b19      	ldr	r3, [pc, #100]	@ (800224c <MX_USART2_UART_Init+0x78>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b17      	ldr	r3, [pc, #92]	@ (800224c <MX_USART2_UART_Init+0x78>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <MX_USART2_UART_Init+0x78>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b14      	ldr	r3, [pc, #80]	@ (800224c <MX_USART2_UART_Init+0x78>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <MX_USART2_UART_Init+0x78>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <MX_USART2_UART_Init+0x78>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <MX_USART2_UART_Init+0x78>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002210:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <MX_USART2_UART_Init+0x78>)
 8002212:	2200      	movs	r2, #0
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002216:	480d      	ldr	r0, [pc, #52]	@ (800224c <MX_USART2_UART_Init+0x78>)
 8002218:	f002 ff9a 	bl	8005150 <HAL_UART_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002222:	f7ff fddf 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 8002226:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800222a:	490a      	ldr	r1, [pc, #40]	@ (8002254 <MX_USART2_UART_Init+0x80>)
 800222c:	480a      	ldr	r0, [pc, #40]	@ (8002258 <MX_USART2_UART_Init+0x84>)
 800222e:	f7fe f99f 	bl	8000570 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 8002232:	f240 7262 	movw	r2, #1890	@ 0x762
 8002236:	4909      	ldr	r1, [pc, #36]	@ (800225c <MX_USART2_UART_Init+0x88>)
 8002238:	4809      	ldr	r0, [pc, #36]	@ (8002260 <MX_USART2_UART_Init+0x8c>)
 800223a:	f7fe f999 	bl	8000570 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 800223e:	2201      	movs	r2, #1
 8002240:	4904      	ldr	r1, [pc, #16]	@ (8002254 <MX_USART2_UART_Init+0x80>)
 8002242:	4802      	ldr	r0, [pc, #8]	@ (800224c <MX_USART2_UART_Init+0x78>)
 8002244:	f003 f830 	bl	80052a8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2000ae48 	.word	0x2000ae48
 8002250:	40004400 	.word	0x40004400
 8002254:	20000a04 	.word	0x20000a04
 8002258:	20000280 	.word	0x20000280
 800225c:	200002a0 	.word	0x200002a0
 8002260:	20000290 	.word	0x20000290

08002264 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0ac      	sub	sp, #176	@ 0xb0
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2288      	movs	r2, #136	@ 0x88
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f005 fef9 	bl	800807c <memset>
  if(uartHandle->Instance==USART2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a25      	ldr	r2, [pc, #148]	@ (8002324 <HAL_UART_MspInit+0xc0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d143      	bne.n	800231c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002294:	2302      	movs	r3, #2
 8002296:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002298:	2300      	movs	r3, #0
 800229a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 fc8f 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022ac:	f7ff fd9a 	bl	8001de4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <HAL_UART_MspInit+0xc4>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <HAL_UART_MspInit+0xc4>)
 80022b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80022bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <HAL_UART_MspInit+0xc4>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	4b17      	ldr	r3, [pc, #92]	@ (8002328 <HAL_UART_MspInit+0xc4>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022cc:	4a16      	ldr	r2, [pc, #88]	@ (8002328 <HAL_UART_MspInit+0xc4>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d4:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <HAL_UART_MspInit+0xc4>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022e0:	230c      	movs	r3, #12
 80022e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022f8:	2307      	movs	r3, #7
 80022fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002302:	4619      	mov	r1, r3
 8002304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002308:	f000 fc36 	bl	8002b78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2101      	movs	r1, #1
 8002310:	2026      	movs	r0, #38	@ 0x26
 8002312:	f000 f984 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002316:	2026      	movs	r0, #38	@ 0x26
 8002318:	f000 f99d 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800231c:	bf00      	nop
 800231e:	37b0      	adds	r7, #176	@ 0xb0
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40004400 	.word	0x40004400
 8002328:	40021000 	.word	0x40021000

0800232c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800232c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002364 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002330:	f7ff fee6 	bl	8002100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002334:	480c      	ldr	r0, [pc, #48]	@ (8002368 <LoopForever+0x6>)
  ldr r1, =_edata
 8002336:	490d      	ldr	r1, [pc, #52]	@ (800236c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002338:	4a0d      	ldr	r2, [pc, #52]	@ (8002370 <LoopForever+0xe>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800233c:	e002      	b.n	8002344 <LoopCopyDataInit>

0800233e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002342:	3304      	adds	r3, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002348:	d3f9      	bcc.n	800233e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800234c:	4c0a      	ldr	r4, [pc, #40]	@ (8002378 <LoopForever+0x16>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002350:	e001      	b.n	8002356 <LoopFillZerobss>

08002352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002354:	3204      	adds	r2, #4

08002356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002358:	d3fb      	bcc.n	8002352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235a:	f005 feb1 	bl	80080c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800235e:	f7ff fcd7 	bl	8001d10 <main>

08002362 <LoopForever>:

LoopForever:
    b LoopForever
 8002362:	e7fe      	b.n	8002362 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002364:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800236c:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002370:	08011fcc 	.word	0x08011fcc
  ldr r2, =_sbss
 8002374:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8002378:	2000b01c 	.word	0x2000b01c

0800237c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC1_2_IRQHandler>

0800237e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f000 f93d 	bl	8002608 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800238e:	200f      	movs	r0, #15
 8002390:	f000 f80e 	bl	80023b0 <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	e001      	b.n	80023a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023a0:	f7ff fdfc 	bl	8001f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023a4:	79fb      	ldrb	r3, [r7, #7]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023bc:	4b17      	ldr	r3, [pc, #92]	@ (800241c <HAL_InitTick+0x6c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d023      	beq.n	800240c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023c4:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <HAL_InitTick+0x70>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b14      	ldr	r3, [pc, #80]	@ (800241c <HAL_InitTick+0x6c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f949 	bl	8002672 <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d809      	bhi.n	8002400 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ec:	2200      	movs	r2, #0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f000 f913 	bl	800261e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <HAL_InitTick+0x74>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e007      	b.n	8002410 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e004      	b.n	8002410 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e001      	b.n	8002410 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000208 	.word	0x20000208
 8002420:	20000200 	.word	0x20000200
 8002424:	20000204 	.word	0x20000204

08002428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_IncTick+0x20>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_IncTick+0x24>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	@ (800244c <HAL_IncTick+0x24>)
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000208 	.word	0x20000208
 800244c:	2000aed0 	.word	0x2000aed0

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b03      	ldr	r3, [pc, #12]	@ (8002464 <HAL_GetTick+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	2000aed0 	.word	0x2000aed0

08002468 <__NVIC_SetPriorityGrouping>:
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	@ (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_GetPriorityGrouping>:
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	@ (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	@ (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	@ (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	@ 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	@ 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <SysTick_Config>:
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d4:	d301      	bcc.n	80025da <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00f      	b.n	80025fa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025da:	4a0a      	ldr	r2, [pc, #40]	@ (8002604 <SysTick_Config+0x40>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e2:	210f      	movs	r1, #15
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff ff8e 	bl	8002508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <SysTick_Config+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f2:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <SysTick_Config+0x40>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff29 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002630:	f7ff ff3e 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 8002634:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7ff ff8e 	bl	800255c <NVIC_EncodePriority>
 8002640:	4602      	mov	r2, r0
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff5d 	bl	8002508 <__NVIC_SetPriority>
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff31 	bl	80024cc <__NVIC_EnableIRQ>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffa2 	bl	80025c4 <SysTick_Config>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e098      	b.n	80027d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b4d      	ldr	r3, [pc, #308]	@ (80027dc <HAL_DMA_Init+0x150>)
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d80f      	bhi.n	80026ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b4b      	ldr	r3, [pc, #300]	@ (80027e0 <HAL_DMA_Init+0x154>)
 80026b2:	4413      	add	r3, r2
 80026b4:	4a4b      	ldr	r2, [pc, #300]	@ (80027e4 <HAL_DMA_Init+0x158>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	009a      	lsls	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a48      	ldr	r2, [pc, #288]	@ (80027e8 <HAL_DMA_Init+0x15c>)
 80026c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026c8:	e00e      	b.n	80026e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b46      	ldr	r3, [pc, #280]	@ (80027ec <HAL_DMA_Init+0x160>)
 80026d2:	4413      	add	r3, r2
 80026d4:	4a43      	ldr	r2, [pc, #268]	@ (80027e4 <HAL_DMA_Init+0x158>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	009a      	lsls	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a42      	ldr	r2, [pc, #264]	@ (80027f0 <HAL_DMA_Init+0x164>)
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002702:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800270c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002742:	d039      	beq.n	80027b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	4a27      	ldr	r2, [pc, #156]	@ (80027e8 <HAL_DMA_Init+0x15c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d11a      	bne.n	8002784 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800274e:	4b29      	ldr	r3, [pc, #164]	@ (80027f4 <HAL_DMA_Init+0x168>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	f003 031c 	and.w	r3, r3, #28
 800275a:	210f      	movs	r1, #15
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	4924      	ldr	r1, [pc, #144]	@ (80027f4 <HAL_DMA_Init+0x168>)
 8002764:	4013      	ands	r3, r2
 8002766:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002768:	4b22      	ldr	r3, [pc, #136]	@ (80027f4 <HAL_DMA_Init+0x168>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002774:	f003 031c 	and.w	r3, r3, #28
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	491d      	ldr	r1, [pc, #116]	@ (80027f4 <HAL_DMA_Init+0x168>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
 8002782:	e019      	b.n	80027b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002784:	4b1c      	ldr	r3, [pc, #112]	@ (80027f8 <HAL_DMA_Init+0x16c>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278c:	f003 031c 	and.w	r3, r3, #28
 8002790:	210f      	movs	r1, #15
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	4917      	ldr	r1, [pc, #92]	@ (80027f8 <HAL_DMA_Init+0x16c>)
 800279a:	4013      	ands	r3, r2
 800279c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_DMA_Init+0x16c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	f003 031c 	and.w	r3, r3, #28
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	4911      	ldr	r1, [pc, #68]	@ (80027f8 <HAL_DMA_Init+0x16c>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40020407 	.word	0x40020407
 80027e0:	bffdfff8 	.word	0xbffdfff8
 80027e4:	cccccccd 	.word	0xcccccccd
 80027e8:	40020000 	.word	0x40020000
 80027ec:	bffdfbf8 	.word	0xbffdfbf8
 80027f0:	40020400 	.word	0x40020400
 80027f4:	400200a8 	.word	0x400200a8
 80027f8:	400204a8 	.word	0x400204a8

080027fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_DMA_Start_IT+0x20>
 8002818:	2302      	movs	r3, #2
 800281a:	e04b      	b.n	80028b4 <HAL_DMA_Start_IT+0xb8>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d13a      	bne.n	80028a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f95f 	bl	8002b18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 020e 	orr.w	r2, r2, #14
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e00f      	b.n	8002894 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0204 	bic.w	r2, r2, #4
 8002882:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 020a 	orr.w	r2, r2, #10
 8002892:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e005      	b.n	80028b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
 80028b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d008      	beq.n	80028e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2204      	movs	r2, #4
 80028d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e022      	b.n	800292c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 020e 	bic.w	r2, r2, #14
 80028f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0201 	bic.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	f003 021c 	and.w	r2, r3, #28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	2101      	movs	r1, #1
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d005      	beq.n	800295c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2204      	movs	r2, #4
 8002954:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e029      	b.n	80029b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 020e 	bic.w	r2, r2, #14
 800296a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002980:	f003 021c 	and.w	r2, r3, #28
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
    }
  }
  return status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	f003 031c 	and.w	r3, r3, #28
 80029da:	2204      	movs	r2, #4
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d026      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x7a>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d021      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0204 	bic.w	r2, r2, #4
 8002a0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	f003 021c 	and.w	r2, r3, #28
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	2104      	movs	r1, #4
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d071      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a32:	e06c      	b.n	8002b0e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	f003 031c 	and.w	r3, r3, #28
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d02e      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xec>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d029      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10b      	bne.n	8002a78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 020a 	bic.w	r2, r2, #10
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7c:	f003 021c 	and.w	r2, r3, #28
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	2102      	movs	r1, #2
 8002a86:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d038      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002aa4:	e033      	b.n	8002b0e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f003 031c 	and.w	r3, r3, #28
 8002aae:	2208      	movs	r2, #8
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d02a      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x156>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d025      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 020e 	bic.w	r2, r2, #14
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad8:	f003 021c 	and.w	r2, r3, #28
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
}
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	f003 021c 	and.w	r2, r3, #28
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d108      	bne.n	8002b5c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b5a:	e007      	b.n	8002b6c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	60da      	str	r2, [r3, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b86:	e17f      	b.n	8002e88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8171 	beq.w	8002e82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d005      	beq.n	8002bb8 <HAL_GPIO_Init+0x40>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d130      	bne.n	8002c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bee:	2201      	movs	r2, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0201 	and.w	r2, r3, #1
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d118      	bne.n	8002c58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	f003 0201 	and.w	r2, r3, #1
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d017      	beq.n	8002c94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d123      	bne.n	8002ce8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	08da      	lsrs	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3208      	adds	r2, #8
 8002ce2:	6939      	ldr	r1, [r7, #16]
 8002ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0203 	and.w	r2, r3, #3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80ac 	beq.w	8002e82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d36:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d42:	4a5a      	ldr	r2, [pc, #360]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d6c:	d025      	beq.n	8002dba <HAL_GPIO_Init+0x242>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb0 <HAL_GPIO_Init+0x338>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <HAL_GPIO_Init+0x23e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4e      	ldr	r2, [pc, #312]	@ (8002eb4 <HAL_GPIO_Init+0x33c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x23a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb8 <HAL_GPIO_Init+0x340>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x236>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4c      	ldr	r2, [pc, #304]	@ (8002ebc <HAL_GPIO_Init+0x344>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x232>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec0 <HAL_GPIO_Init+0x348>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x22e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4a      	ldr	r2, [pc, #296]	@ (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x22a>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00c      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002da2:	2307      	movs	r3, #7
 8002da4:	e00a      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dcc:	4937      	ldr	r1, [pc, #220]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dda:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dfe:	4a32      	ldr	r2, [pc, #200]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e04:	4b30      	ldr	r3, [pc, #192]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e28:	4a27      	ldr	r2, [pc, #156]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e52:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e7c:	4a12      	ldr	r2, [pc, #72]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f47f ae78 	bne.w	8002b88 <HAL_GPIO_Init+0x10>
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	48000400 	.word	0x48000400
 8002eb4:	48000800 	.word	0x48000800
 8002eb8:	48000c00 	.word	0x48000c00
 8002ebc:	48001000 	.word	0x48001000
 8002ec0:	48001400 	.word	0x48001400
 8002ec4:	48001800 	.word	0x48001800
 8002ec8:	40010400 	.word	0x40010400

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f00:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40007000 	.word	0x40007000

08002f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f26:	d130      	bne.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f28:	4b23      	ldr	r3, [pc, #140]	@ (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f34:	d038      	beq.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f36:	4b20      	ldr	r3, [pc, #128]	@ (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f46:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2232      	movs	r2, #50	@ 0x32
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9b      	lsrs	r3, r3, #18
 8002f58:	3301      	adds	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f5c:	e002      	b.n	8002f64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f64:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f70:	d102      	bne.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f2      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f78:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f84:	d110      	bne.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e00f      	b.n	8002faa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f96:	d007      	beq.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f98:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fa0:	4a05      	ldr	r2, [pc, #20]	@ (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fa6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	20000200 	.word	0x20000200
 8002fc0:	431bde83 	.word	0x431bde83

08002fc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e3ca      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd6:	4b97      	ldr	r3, [pc, #604]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe0:	4b94      	ldr	r3, [pc, #592]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80e4 	beq.w	80031c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_RCC_OscConfig+0x4a>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	f040 808b 	bne.w	800311c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b01      	cmp	r3, #1
 800300a:	f040 8087 	bne.w	800311c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800300e:	4b89      	ldr	r3, [pc, #548]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x62>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e3a2      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	4b82      	ldr	r3, [pc, #520]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d004      	beq.n	8003040 <HAL_RCC_OscConfig+0x7c>
 8003036:	4b7f      	ldr	r3, [pc, #508]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800303e:	e005      	b.n	800304c <HAL_RCC_OscConfig+0x88>
 8003040:	4b7c      	ldr	r3, [pc, #496]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800304c:	4293      	cmp	r3, r2
 800304e:	d223      	bcs.n	8003098 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fd55 	bl	8003b04 <RCC_SetFlashLatencyFromMSIRange>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e383      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003064:	4b73      	ldr	r3, [pc, #460]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a72      	ldr	r2, [pc, #456]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800306a:	f043 0308 	orr.w	r3, r3, #8
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b70      	ldr	r3, [pc, #448]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	496d      	ldr	r1, [pc, #436]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003082:	4b6c      	ldr	r3, [pc, #432]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	4968      	ldr	r1, [pc, #416]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
 8003096:	e025      	b.n	80030e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003098:	4b66      	ldr	r3, [pc, #408]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a65      	ldr	r2, [pc, #404]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800309e:	f043 0308 	orr.w	r3, r3, #8
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b63      	ldr	r3, [pc, #396]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4960      	ldr	r1, [pc, #384]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	495b      	ldr	r1, [pc, #364]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d109      	bne.n	80030e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fd15 	bl	8003b04 <RCC_SetFlashLatencyFromMSIRange>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e343      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030e4:	f000 fc4a 	bl	800397c <HAL_RCC_GetSysClockFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b52      	ldr	r3, [pc, #328]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	4950      	ldr	r1, [pc, #320]	@ (8003238 <HAL_RCC_OscConfig+0x274>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003100:	4a4e      	ldr	r2, [pc, #312]	@ (800323c <HAL_RCC_OscConfig+0x278>)
 8003102:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003104:	4b4e      	ldr	r3, [pc, #312]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff f951 	bl	80023b0 <HAL_InitTick>
 800310e:	4603      	mov	r3, r0
 8003110:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d052      	beq.n	80031be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	e327      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d032      	beq.n	800318a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003124:	4b43      	ldr	r3, [pc, #268]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a42      	ldr	r2, [pc, #264]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003130:	f7ff f98e 	bl	8002450 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003138:	f7ff f98a 	bl	8002450 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e310      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800314a:	4b3a      	ldr	r3, [pc, #232]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003156:	4b37      	ldr	r3, [pc, #220]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a36      	ldr	r2, [pc, #216]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800315c:	f043 0308 	orr.w	r3, r3, #8
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b34      	ldr	r3, [pc, #208]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4931      	ldr	r1, [pc, #196]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003174:	4b2f      	ldr	r3, [pc, #188]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	492c      	ldr	r1, [pc, #176]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
 8003188:	e01a      	b.n	80031c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800318a:	4b2a      	ldr	r3, [pc, #168]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a29      	ldr	r2, [pc, #164]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003196:	f7ff f95b 	bl	8002450 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800319e:	f7ff f957 	bl	8002450 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e2dd      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031b0:	4b20      	ldr	r3, [pc, #128]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f0      	bne.n	800319e <HAL_RCC_OscConfig+0x1da>
 80031bc:	e000      	b.n	80031c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d074      	beq.n	80032b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d005      	beq.n	80031de <HAL_RCC_OscConfig+0x21a>
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b0c      	cmp	r3, #12
 80031d6:	d10e      	bne.n	80031f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d064      	beq.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d160      	bne.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e2ba      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x24a>
 8003200:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0b      	ldr	r2, [pc, #44]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	e026      	b.n	800325c <HAL_RCC_OscConfig+0x298>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003216:	d115      	bne.n	8003244 <HAL_RCC_OscConfig+0x280>
 8003218:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a05      	ldr	r2, [pc, #20]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800321e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b03      	ldr	r3, [pc, #12]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a02      	ldr	r2, [pc, #8]	@ (8003234 <HAL_RCC_OscConfig+0x270>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e014      	b.n	800325c <HAL_RCC_OscConfig+0x298>
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	08011f40 	.word	0x08011f40
 800323c:	20000200 	.word	0x20000200
 8003240:	20000204 	.word	0x20000204
 8003244:	4ba0      	ldr	r3, [pc, #640]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a9f      	ldr	r2, [pc, #636]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b9d      	ldr	r3, [pc, #628]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a9c      	ldr	r2, [pc, #624]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7ff f8f4 	bl	8002450 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7ff f8f0 	bl	8002450 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	@ 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e276      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800327e:	4b92      	ldr	r3, [pc, #584]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x2a8>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7ff f8e0 	bl	8002450 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7ff f8dc 	bl	8002450 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	@ 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e262      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032a6:	4b88      	ldr	r3, [pc, #544]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x2d0>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d060      	beq.n	8003384 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_OscConfig+0x310>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d119      	bne.n	8003302 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d116      	bne.n	8003302 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d4:	4b7c      	ldr	r3, [pc, #496]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_OscConfig+0x328>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e23f      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b76      	ldr	r3, [pc, #472]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	4973      	ldr	r1, [pc, #460]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003300:	e040      	b.n	8003384 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d023      	beq.n	8003352 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330a:	4b6f      	ldr	r3, [pc, #444]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6e      	ldr	r2, [pc, #440]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7ff f89b 	bl	8002450 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7ff f897 	bl	8002450 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e21d      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003330:	4b65      	ldr	r3, [pc, #404]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b62      	ldr	r3, [pc, #392]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	495f      	ldr	r1, [pc, #380]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]
 8003350:	e018      	b.n	8003384 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003352:	4b5d      	ldr	r3, [pc, #372]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a5c      	ldr	r2, [pc, #368]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 8003358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800335c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7ff f877 	bl	8002450 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003366:	f7ff f873 	bl	8002450 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1f9      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003378:	4b53      	ldr	r3, [pc, #332]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f0      	bne.n	8003366 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d03c      	beq.n	800340a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01c      	beq.n	80033d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003398:	4b4b      	ldr	r3, [pc, #300]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800339e:	4a4a      	ldr	r2, [pc, #296]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7ff f852 	bl	8002450 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b0:	f7ff f84e 	bl	8002450 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e1d4      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c2:	4b41      	ldr	r3, [pc, #260]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80033c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ef      	beq.n	80033b0 <HAL_RCC_OscConfig+0x3ec>
 80033d0:	e01b      	b.n	800340a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d2:	4b3d      	ldr	r3, [pc, #244]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80033d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033d8:	4a3b      	ldr	r2, [pc, #236]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7ff f835 	bl	8002450 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ea:	f7ff f831 	bl	8002450 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1b7      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033fc:	4b32      	ldr	r3, [pc, #200]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ef      	bne.n	80033ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80a6 	beq.w	8003564 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800341c:	4b2a      	ldr	r3, [pc, #168]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10d      	bne.n	8003444 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003428:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342c:	4a26      	ldr	r2, [pc, #152]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 800342e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003432:	6593      	str	r3, [r2, #88]	@ 0x58
 8003434:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003440:	2301      	movs	r3, #1
 8003442:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003444:	4b21      	ldr	r3, [pc, #132]	@ (80034cc <HAL_RCC_OscConfig+0x508>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d118      	bne.n	8003482 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003450:	4b1e      	ldr	r3, [pc, #120]	@ (80034cc <HAL_RCC_OscConfig+0x508>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1d      	ldr	r2, [pc, #116]	@ (80034cc <HAL_RCC_OscConfig+0x508>)
 8003456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345c:	f7fe fff8 	bl	8002450 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003464:	f7fe fff4 	bl	8002450 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e17a      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <HAL_RCC_OscConfig+0x508>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d108      	bne.n	800349c <HAL_RCC_OscConfig+0x4d8>
 800348a:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003490:	4a0d      	ldr	r2, [pc, #52]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800349a:	e029      	b.n	80034f0 <HAL_RCC_OscConfig+0x52c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d115      	bne.n	80034d0 <HAL_RCC_OscConfig+0x50c>
 80034a4:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	4a07      	ldr	r2, [pc, #28]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034b4:	4b04      	ldr	r3, [pc, #16]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ba:	4a03      	ldr	r2, [pc, #12]	@ (80034c8 <HAL_RCC_OscConfig+0x504>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034c4:	e014      	b.n	80034f0 <HAL_RCC_OscConfig+0x52c>
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40007000 	.word	0x40007000
 80034d0:	4b9c      	ldr	r3, [pc, #624]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d6:	4a9b      	ldr	r2, [pc, #620]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034e0:	4b98      	ldr	r3, [pc, #608]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	4a97      	ldr	r2, [pc, #604]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d016      	beq.n	8003526 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe ffaa 	bl	8002450 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fe ffa6 	bl	8002450 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e12a      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003516:	4b8b      	ldr	r3, [pc, #556]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ed      	beq.n	8003500 <HAL_RCC_OscConfig+0x53c>
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fe ff93 	bl	8002450 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fe ff8f 	bl	8002450 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e113      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003544:	4b7f      	ldr	r3, [pc, #508]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ed      	bne.n	800352e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003552:	7ffb      	ldrb	r3, [r7, #31]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003558:	4b7a      	ldr	r3, [pc, #488]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	4a79      	ldr	r2, [pc, #484]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 800355e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003562:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80fe 	beq.w	800376a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	2b02      	cmp	r3, #2
 8003574:	f040 80d0 	bne.w	8003718 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003578:	4b72      	ldr	r3, [pc, #456]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0203 	and.w	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003588:	429a      	cmp	r2, r3
 800358a:	d130      	bne.n	80035ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	3b01      	subs	r3, #1
 8003598:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d127      	bne.n	80035ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d11f      	bne.n	80035ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035b8:	2a07      	cmp	r2, #7
 80035ba:	bf14      	ite	ne
 80035bc:	2201      	movne	r2, #1
 80035be:	2200      	moveq	r2, #0
 80035c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d113      	bne.n	80035ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	3b01      	subs	r3, #1
 80035d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	3b01      	subs	r3, #1
 80035e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d06e      	beq.n	80036cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d069      	beq.n	80036c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035f4:	4b53      	ldr	r3, [pc, #332]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003600:	4b50      	ldr	r3, [pc, #320]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0ad      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003610:	4b4c      	ldr	r3, [pc, #304]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a4b      	ldr	r2, [pc, #300]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800361a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800361c:	f7fe ff18 	bl	8002450 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe ff14 	bl	8002450 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e09a      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003636:	4b43      	ldr	r3, [pc, #268]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003642:	4b40      	ldr	r3, [pc, #256]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	4b40      	ldr	r3, [pc, #256]	@ (8003748 <HAL_RCC_OscConfig+0x784>)
 8003648:	4013      	ands	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003652:	3a01      	subs	r2, #1
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	4311      	orrs	r1, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800365c:	0212      	lsls	r2, r2, #8
 800365e:	4311      	orrs	r1, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003664:	0852      	lsrs	r2, r2, #1
 8003666:	3a01      	subs	r2, #1
 8003668:	0552      	lsls	r2, r2, #21
 800366a:	4311      	orrs	r1, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003670:	0852      	lsrs	r2, r2, #1
 8003672:	3a01      	subs	r2, #1
 8003674:	0652      	lsls	r2, r2, #25
 8003676:	4311      	orrs	r1, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800367c:	0912      	lsrs	r2, r2, #4
 800367e:	0452      	lsls	r2, r2, #17
 8003680:	430a      	orrs	r2, r1
 8003682:	4930      	ldr	r1, [pc, #192]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003684:	4313      	orrs	r3, r2
 8003686:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003688:	4b2e      	ldr	r3, [pc, #184]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2d      	ldr	r2, [pc, #180]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003692:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003694:	4b2b      	ldr	r3, [pc, #172]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a2a      	ldr	r2, [pc, #168]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 800369a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800369e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036a0:	f7fe fed6 	bl	8002450 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe fed2 	bl	8002450 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e058      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	4b22      	ldr	r3, [pc, #136]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c6:	e050      	b.n	800376a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e04f      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d148      	bne.n	800376a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a19      	ldr	r2, [pc, #100]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80036de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036e4:	4b17      	ldr	r3, [pc, #92]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a16      	ldr	r2, [pc, #88]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 80036ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036f0:	f7fe feae 	bl	8002450 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe feaa 	bl	8002450 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e030      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370a:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x734>
 8003716:	e028      	b.n	800376a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d023      	beq.n	8003766 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371e:	4b09      	ldr	r3, [pc, #36]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a08      	ldr	r2, [pc, #32]	@ (8003744 <HAL_RCC_OscConfig+0x780>)
 8003724:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe fe91 	bl	8002450 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003730:	e00c      	b.n	800374c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe fe8d 	bl	8002450 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d905      	bls.n	800374c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e013      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
 8003744:	40021000 	.word	0x40021000
 8003748:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374c:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <HAL_RCC_OscConfig+0x7b0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ec      	bne.n	8003732 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003758:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <HAL_RCC_OscConfig+0x7b0>)
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	4905      	ldr	r1, [pc, #20]	@ (8003774 <HAL_RCC_OscConfig+0x7b0>)
 800375e:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <HAL_RCC_OscConfig+0x7b4>)
 8003760:	4013      	ands	r3, r2
 8003762:	60cb      	str	r3, [r1, #12]
 8003764:	e001      	b.n	800376a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	feeefffc 	.word	0xfeeefffc

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0e7      	b.n	8003960 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b75      	ldr	r3, [pc, #468]	@ (8003968 <HAL_RCC_ClockConfig+0x1ec>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d910      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b72      	ldr	r3, [pc, #456]	@ (8003968 <HAL_RCC_ClockConfig+0x1ec>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 0207 	bic.w	r2, r3, #7
 80037a6:	4970      	ldr	r1, [pc, #448]	@ (8003968 <HAL_RCC_ClockConfig+0x1ec>)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003968 <HAL_RCC_ClockConfig+0x1ec>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cf      	b.n	8003960 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d010      	beq.n	80037ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	4b66      	ldr	r3, [pc, #408]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037d8:	429a      	cmp	r2, r3
 80037da:	d908      	bls.n	80037ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b63      	ldr	r3, [pc, #396]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4960      	ldr	r1, [pc, #384]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d04c      	beq.n	8003894 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003802:	4b5a      	ldr	r3, [pc, #360]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d121      	bne.n	8003852 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0a6      	b.n	8003960 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381a:	4b54      	ldr	r3, [pc, #336]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d115      	bne.n	8003852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e09a      	b.n	8003960 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003832:	4b4e      	ldr	r3, [pc, #312]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e08e      	b.n	8003960 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003842:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e086      	b.n	8003960 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b46      	ldr	r3, [pc, #280]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4943      	ldr	r1, [pc, #268]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003864:	f7fe fdf4 	bl	8002450 <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fe fdf0 	bl	8002450 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e06e      	b.n	8003960 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b3a      	ldr	r3, [pc, #232]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	4b31      	ldr	r3, [pc, #196]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d208      	bcs.n	80038c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b2e      	ldr	r3, [pc, #184]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	492b      	ldr	r1, [pc, #172]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c2:	4b29      	ldr	r3, [pc, #164]	@ (8003968 <HAL_RCC_ClockConfig+0x1ec>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d210      	bcs.n	80038f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d0:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <HAL_RCC_ClockConfig+0x1ec>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 0207 	bic.w	r2, r3, #7
 80038d8:	4923      	ldr	r1, [pc, #140]	@ (8003968 <HAL_RCC_ClockConfig+0x1ec>)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	4313      	orrs	r3, r2
 80038de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e0:	4b21      	ldr	r3, [pc, #132]	@ (8003968 <HAL_RCC_ClockConfig+0x1ec>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d001      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e036      	b.n	8003960 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fe:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	4918      	ldr	r1, [pc, #96]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391c:	4b13      	ldr	r3, [pc, #76]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4910      	ldr	r1, [pc, #64]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003930:	f000 f824 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b0d      	ldr	r3, [pc, #52]	@ (800396c <HAL_RCC_ClockConfig+0x1f0>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	490b      	ldr	r1, [pc, #44]	@ (8003970 <HAL_RCC_ClockConfig+0x1f4>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	4a09      	ldr	r2, [pc, #36]	@ (8003974 <HAL_RCC_ClockConfig+0x1f8>)
 800394e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003950:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <HAL_RCC_ClockConfig+0x1fc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe fd2b 	bl	80023b0 <HAL_InitTick>
 800395a:	4603      	mov	r3, r0
 800395c:	72fb      	strb	r3, [r7, #11]

  return status;
 800395e:	7afb      	ldrb	r3, [r7, #11]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40022000 	.word	0x40022000
 800396c:	40021000 	.word	0x40021000
 8003970:	08011f40 	.word	0x08011f40
 8003974:	20000200 	.word	0x20000200
 8003978:	20000204 	.word	0x20000204

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	@ 0x24
 8003980:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x108>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003994:	4b3b      	ldr	r3, [pc, #236]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x34>
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d121      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d11e      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039b0:	4b34      	ldr	r3, [pc, #208]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039bc:	4b31      	ldr	r3, [pc, #196]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e005      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d102      	bne.n	80039fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039f4:	4b25      	ldr	r3, [pc, #148]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x110>)
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	e004      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a00:	4b23      	ldr	r3, [pc, #140]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d134      	bne.n	8003a74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d003      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0xac>
 8003a20:	e005      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a22:	4b1a      	ldr	r3, [pc, #104]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a24:	617b      	str	r3, [r7, #20]
      break;
 8003a26:	e005      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a28:	4b19      	ldr	r3, [pc, #100]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a2a:	617b      	str	r3, [r7, #20]
      break;
 8003a2c:	e002      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	617b      	str	r3, [r7, #20]
      break;
 8003a32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a34:	4b13      	ldr	r3, [pc, #76]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	3301      	adds	r3, #1
 8003a40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	fb03 f202 	mul.w	r2, r3, r2
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	0e5b      	lsrs	r3, r3, #25
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	3301      	adds	r3, #1
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a74:	69bb      	ldr	r3, [r7, #24]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3724      	adds	r7, #36	@ 0x24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	08011f58 	.word	0x08011f58
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	007a1200 	.word	0x007a1200

08003a94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a98:	4b03      	ldr	r3, [pc, #12]	@ (8003aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000200 	.word	0x20000200

08003aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ab0:	f7ff fff0 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4904      	ldr	r1, [pc, #16]	@ (8003ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08011f50 	.word	0x08011f50

08003ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003adc:	f7ff ffda 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0adb      	lsrs	r3, r3, #11
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4904      	ldr	r1, [pc, #16]	@ (8003b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	08011f50 	.word	0x08011f50

08003b04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b10:	4b2a      	ldr	r3, [pc, #168]	@ (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b1c:	f7ff f9ee 	bl	8002efc <HAL_PWREx_GetVoltageRange>
 8003b20:	6178      	str	r0, [r7, #20]
 8003b22:	e014      	b.n	8003b4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b24:	4b25      	ldr	r3, [pc, #148]	@ (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b28:	4a24      	ldr	r2, [pc, #144]	@ (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b30:	4b22      	ldr	r3, [pc, #136]	@ (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b3c:	f7ff f9de 	bl	8002efc <HAL_PWREx_GetVoltageRange>
 8003b40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b42:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b46:	4a1d      	ldr	r2, [pc, #116]	@ (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b54:	d10b      	bne.n	8003b6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b80      	cmp	r3, #128	@ 0x80
 8003b5a:	d919      	bls.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b60:	d902      	bls.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b62:	2302      	movs	r3, #2
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e013      	b.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b68:	2301      	movs	r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	e010      	b.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b80      	cmp	r3, #128	@ 0x80
 8003b72:	d902      	bls.n	8003b7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b74:	2303      	movs	r3, #3
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	e00a      	b.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b80      	cmp	r3, #128	@ 0x80
 8003b7e:	d102      	bne.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b80:	2302      	movs	r3, #2
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	e004      	b.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b70      	cmp	r3, #112	@ 0x70
 8003b8a:	d101      	bne.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b90:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 0207 	bic.w	r2, r3, #7
 8003b98:	4909      	ldr	r1, [pc, #36]	@ (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ba0:	4b07      	ldr	r3, [pc, #28]	@ (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d001      	beq.n	8003bb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40022000 	.word	0x40022000

08003bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d041      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003be8:	d02a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bee:	d824      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bf0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bf4:	d008      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bfa:	d81e      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c04:	d010      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c06:	e018      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c08:	4b86      	ldr	r3, [pc, #536]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a85      	ldr	r2, [pc, #532]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c14:	e015      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fabb 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c26:	e00c      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3320      	adds	r3, #32
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fba6 	bl	8004380 <RCCEx_PLLSAI2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c48:	4b76      	ldr	r3, [pc, #472]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c56:	4973      	ldr	r1, [pc, #460]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c5e:	e001      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d041      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c78:	d02a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c7e:	d824      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c84:	d008      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c8a:	d81e      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c94:	d010      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c96:	e018      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c98:	4b62      	ldr	r3, [pc, #392]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a61      	ldr	r2, [pc, #388]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca4:	e015      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fa73 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cb6:	e00c      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3320      	adds	r3, #32
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fb5e 	bl	8004380 <RCCEx_PLLSAI2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cc8:	e003      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	74fb      	strb	r3, [r7, #19]
      break;
 8003cce:	e000      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cd8:	4b52      	ldr	r3, [pc, #328]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ce6:	494f      	ldr	r1, [pc, #316]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cee:	e001      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80a0 	beq.w	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d02:	2300      	movs	r3, #0
 8003d04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d06:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d16:	2300      	movs	r3, #0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1c:	4b41      	ldr	r3, [pc, #260]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d20:	4a40      	ldr	r2, [pc, #256]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d28:	4b3e      	ldr	r3, [pc, #248]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d34:	2301      	movs	r3, #1
 8003d36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d38:	4b3b      	ldr	r3, [pc, #236]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d44:	f7fe fb84 	bl	8002450 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d4a:	e009      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4c:	f7fe fb80 	bl	8002450 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d902      	bls.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d5e:	e005      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d60:	4b31      	ldr	r3, [pc, #196]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ef      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d6c:	7cfb      	ldrb	r3, [r7, #19]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d15c      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d72:	4b2c      	ldr	r3, [pc, #176]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01f      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d019      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d90:	4b24      	ldr	r3, [pc, #144]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d9c:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	4a20      	ldr	r2, [pc, #128]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dac:	4b1d      	ldr	r3, [pc, #116]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dbc:	4a19      	ldr	r2, [pc, #100]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fe fb3f 	bl	8002450 <HAL_GetTick>
 8003dd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd4:	e00b      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fe fb3b 	bl	8002450 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d902      	bls.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	74fb      	strb	r3, [r7, #19]
            break;
 8003dec:	e006      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dee:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ec      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e02:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e12:	4904      	ldr	r1, [pc, #16]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e1a:	e009      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	74bb      	strb	r3, [r7, #18]
 8003e20:	e006      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e30:	7c7b      	ldrb	r3, [r7, #17]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d105      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e36:	4b9e      	ldr	r3, [pc, #632]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	4a9d      	ldr	r2, [pc, #628]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e4e:	4b98      	ldr	r3, [pc, #608]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e54:	f023 0203 	bic.w	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5c:	4994      	ldr	r1, [pc, #592]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e70:	4b8f      	ldr	r3, [pc, #572]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e76:	f023 020c 	bic.w	r2, r3, #12
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7e:	498c      	ldr	r1, [pc, #560]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e92:	4b87      	ldr	r3, [pc, #540]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	4983      	ldr	r1, [pc, #524]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	497b      	ldr	r1, [pc, #492]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ed6:	4b76      	ldr	r3, [pc, #472]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003edc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee4:	4972      	ldr	r1, [pc, #456]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ef8:	4b6d      	ldr	r3, [pc, #436]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f06:	496a      	ldr	r1, [pc, #424]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f1a:	4b65      	ldr	r3, [pc, #404]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f28:	4961      	ldr	r1, [pc, #388]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f4a:	4959      	ldr	r1, [pc, #356]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f5e:	4b54      	ldr	r3, [pc, #336]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6c:	4950      	ldr	r1, [pc, #320]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f80:	4b4b      	ldr	r3, [pc, #300]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f86:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8e:	4948      	ldr	r1, [pc, #288]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fa2:	4b43      	ldr	r3, [pc, #268]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb0:	493f      	ldr	r1, [pc, #252]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d028      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fd2:	4937      	ldr	r1, [pc, #220]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe4:	4b32      	ldr	r3, [pc, #200]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a31      	ldr	r2, [pc, #196]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fee:	60d3      	str	r3, [r2, #12]
 8003ff0:	e011      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ff6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ffa:	d10c      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	2101      	movs	r1, #1
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f8c8 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d028      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004022:	4b23      	ldr	r3, [pc, #140]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004028:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	491f      	ldr	r1, [pc, #124]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004040:	d106      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004042:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800404c:	60d3      	str	r3, [r2, #12]
 800404e:	e011      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004058:	d10c      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3304      	adds	r3, #4
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 f899 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d02b      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004080:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004086:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800408e:	4908      	ldr	r1, [pc, #32]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800409a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800409e:	d109      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a0:	4b03      	ldr	r3, [pc, #12]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4a02      	ldr	r2, [pc, #8]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040aa:	60d3      	str	r3, [r2, #12]
 80040ac:	e014      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	2101      	movs	r1, #1
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f867 	bl	8004198 <RCCEx_PLLSAI1_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d02f      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040f2:	4928      	ldr	r1, [pc, #160]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004102:	d10d      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	2102      	movs	r1, #2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f844 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d014      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	74bb      	strb	r3, [r7, #18]
 800411e:	e011      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004128:	d10c      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3320      	adds	r3, #32
 800412e:	2102      	movs	r1, #2
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f925 	bl	8004380 <RCCEx_PLLSAI2_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800413a:	7cfb      	ldrb	r3, [r7, #19]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004150:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004156:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800415e:	490d      	ldr	r1, [pc, #52]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004172:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004178:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004182:	4904      	ldr	r1, [pc, #16]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800418a:	7cbb      	ldrb	r3, [r7, #18]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000

08004198 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041a6:	4b75      	ldr	r3, [pc, #468]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d018      	beq.n	80041e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041b2:	4b72      	ldr	r3, [pc, #456]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0203 	and.w	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10d      	bne.n	80041de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
       ||
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041ca:	4b6c      	ldr	r3, [pc, #432]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
       ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d047      	beq.n	800426e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e044      	b.n	800426e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d018      	beq.n	800421e <RCCEx_PLLSAI1_Config+0x86>
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d825      	bhi.n	800423c <RCCEx_PLLSAI1_Config+0xa4>
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d002      	beq.n	80041fa <RCCEx_PLLSAI1_Config+0x62>
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d009      	beq.n	800420c <RCCEx_PLLSAI1_Config+0x74>
 80041f8:	e020      	b.n	800423c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041fa:	4b60      	ldr	r3, [pc, #384]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11d      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420a:	e01a      	b.n	8004242 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800420c:	4b5b      	ldr	r3, [pc, #364]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004214:	2b00      	cmp	r3, #0
 8004216:	d116      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800421c:	e013      	b.n	8004246 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800421e:	4b57      	ldr	r3, [pc, #348]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10f      	bne.n	800424a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800422a:	4b54      	ldr	r3, [pc, #336]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800423a:	e006      	b.n	800424a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
      break;
 8004240:	e004      	b.n	800424c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004242:	bf00      	nop
 8004244:	e002      	b.n	800424c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800424a:	bf00      	nop
    }

    if(status == HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004252:	4b4a      	ldr	r3, [pc, #296]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6819      	ldr	r1, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	430b      	orrs	r3, r1
 8004268:	4944      	ldr	r1, [pc, #272]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d17d      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004274:	4b41      	ldr	r3, [pc, #260]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a40      	ldr	r2, [pc, #256]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800427e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004280:	f7fe f8e6 	bl	8002450 <HAL_GetTick>
 8004284:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004286:	e009      	b.n	800429c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004288:	f7fe f8e2 	bl	8002450 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d902      	bls.n	800429c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	73fb      	strb	r3, [r7, #15]
        break;
 800429a:	e005      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800429c:	4b37      	ldr	r3, [pc, #220]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ef      	bne.n	8004288 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d160      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d111      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b4:	4b31      	ldr	r3, [pc, #196]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80042bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6892      	ldr	r2, [r2, #8]
 80042c4:	0211      	lsls	r1, r2, #8
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68d2      	ldr	r2, [r2, #12]
 80042ca:	0912      	lsrs	r2, r2, #4
 80042cc:	0452      	lsls	r2, r2, #17
 80042ce:	430a      	orrs	r2, r1
 80042d0:	492a      	ldr	r1, [pc, #168]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	610b      	str	r3, [r1, #16]
 80042d6:	e027      	b.n	8004328 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d112      	bne.n	8004304 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042de:	4b27      	ldr	r3, [pc, #156]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80042e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6892      	ldr	r2, [r2, #8]
 80042ee:	0211      	lsls	r1, r2, #8
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6912      	ldr	r2, [r2, #16]
 80042f4:	0852      	lsrs	r2, r2, #1
 80042f6:	3a01      	subs	r2, #1
 80042f8:	0552      	lsls	r2, r2, #21
 80042fa:	430a      	orrs	r2, r1
 80042fc:	491f      	ldr	r1, [pc, #124]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]
 8004302:	e011      	b.n	8004328 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004304:	4b1d      	ldr	r3, [pc, #116]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800430c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6892      	ldr	r2, [r2, #8]
 8004314:	0211      	lsls	r1, r2, #8
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6952      	ldr	r2, [r2, #20]
 800431a:	0852      	lsrs	r2, r2, #1
 800431c:	3a01      	subs	r2, #1
 800431e:	0652      	lsls	r2, r2, #25
 8004320:	430a      	orrs	r2, r1
 8004322:	4916      	ldr	r1, [pc, #88]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004328:	4b14      	ldr	r3, [pc, #80]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a13      	ldr	r2, [pc, #76]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fe f88c 	bl	8002450 <HAL_GetTick>
 8004338:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800433a:	e009      	b.n	8004350 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800433c:	f7fe f888 	bl	8002450 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d902      	bls.n	8004350 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	73fb      	strb	r3, [r7, #15]
          break;
 800434e:	e005      	b.n	800435c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004350:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ef      	beq.n	800433c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	4904      	ldr	r1, [pc, #16]	@ (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000

08004380 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800438e:	4b6a      	ldr	r3, [pc, #424]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800439a:	4b67      	ldr	r3, [pc, #412]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0203 	and.w	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d10d      	bne.n	80043c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
       ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043b2:	4b61      	ldr	r3, [pc, #388]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
       ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d047      	beq.n	8004456 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
 80043ca:	e044      	b.n	8004456 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d018      	beq.n	8004406 <RCCEx_PLLSAI2_Config+0x86>
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d825      	bhi.n	8004424 <RCCEx_PLLSAI2_Config+0xa4>
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d002      	beq.n	80043e2 <RCCEx_PLLSAI2_Config+0x62>
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d009      	beq.n	80043f4 <RCCEx_PLLSAI2_Config+0x74>
 80043e0:	e020      	b.n	8004424 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043e2:	4b55      	ldr	r3, [pc, #340]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11d      	bne.n	800442a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f2:	e01a      	b.n	800442a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043f4:	4b50      	ldr	r3, [pc, #320]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d116      	bne.n	800442e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004404:	e013      	b.n	800442e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004406:	4b4c      	ldr	r3, [pc, #304]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004412:	4b49      	ldr	r3, [pc, #292]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004422:	e006      	b.n	8004432 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      break;
 8004428:	e004      	b.n	8004434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800442a:	bf00      	nop
 800442c:	e002      	b.n	8004434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800442e:	bf00      	nop
 8004430:	e000      	b.n	8004434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004432:	bf00      	nop
    }

    if(status == HAL_OK)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10d      	bne.n	8004456 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800443a:	4b3f      	ldr	r3, [pc, #252]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	3b01      	subs	r3, #1
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	430b      	orrs	r3, r1
 8004450:	4939      	ldr	r1, [pc, #228]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d167      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800445c:	4b36      	ldr	r3, [pc, #216]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a35      	ldr	r2, [pc, #212]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004468:	f7fd fff2 	bl	8002450 <HAL_GetTick>
 800446c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800446e:	e009      	b.n	8004484 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004470:	f7fd ffee 	bl	8002450 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d902      	bls.n	8004484 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	73fb      	strb	r3, [r7, #15]
        break;
 8004482:	e005      	b.n	8004490 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004484:	4b2c      	ldr	r3, [pc, #176]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ef      	bne.n	8004470 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d14a      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d111      	bne.n	80044c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800449c:	4b26      	ldr	r3, [pc, #152]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80044a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6892      	ldr	r2, [r2, #8]
 80044ac:	0211      	lsls	r1, r2, #8
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68d2      	ldr	r2, [r2, #12]
 80044b2:	0912      	lsrs	r2, r2, #4
 80044b4:	0452      	lsls	r2, r2, #17
 80044b6:	430a      	orrs	r2, r1
 80044b8:	491f      	ldr	r1, [pc, #124]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	614b      	str	r3, [r1, #20]
 80044be:	e011      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6892      	ldr	r2, [r2, #8]
 80044d0:	0211      	lsls	r1, r2, #8
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6912      	ldr	r2, [r2, #16]
 80044d6:	0852      	lsrs	r2, r2, #1
 80044d8:	3a01      	subs	r2, #1
 80044da:	0652      	lsls	r2, r2, #25
 80044dc:	430a      	orrs	r2, r1
 80044de:	4916      	ldr	r1, [pc, #88]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044e4:	4b14      	ldr	r3, [pc, #80]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a13      	ldr	r2, [pc, #76]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd ffae 	bl	8002450 <HAL_GetTick>
 80044f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044f6:	e009      	b.n	800450c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044f8:	f7fd ffaa 	bl	8002450 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d902      	bls.n	800450c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	73fb      	strb	r3, [r7, #15]
          break;
 800450a:	e005      	b.n	8004518 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800450c:	4b0a      	ldr	r3, [pc, #40]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ef      	beq.n	80044f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800451e:	4b06      	ldr	r3, [pc, #24]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4904      	ldr	r1, [pc, #16]	@ (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000

0800453c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e095      	b.n	800467a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800455e:	d009      	beq.n	8004574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	e005      	b.n	8004574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fc6c 	bl	8001e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045b4:	d902      	bls.n	80045bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e002      	b.n	80045c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80045ca:	d007      	beq.n	80045dc <HAL_SPI_Init+0xa0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045d4:	d002      	beq.n	80045dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461e:	ea42 0103 	orr.w	r1, r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004626:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	f003 0204 	and.w	r2, r3, #4
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004658:	ea42 0103 	orr.w	r1, r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004692:	f7fd fedd 	bl	8002450 <HAL_GetTick>
 8004696:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
 80046aa:	e15c      	b.n	8004966 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_SPI_Transmit+0x36>
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e154      	b.n	8004966 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_SPI_Transmit+0x48>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e14d      	b.n	8004966 <HAL_SPI_Transmit+0x2e4>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2203      	movs	r2, #3
 80046d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800471c:	d10f      	bne.n	800473e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800472c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800473c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d007      	beq.n	800475c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800475a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004764:	d952      	bls.n	800480c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_SPI_Transmit+0xf2>
 800476e:	8b7b      	ldrh	r3, [r7, #26]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d145      	bne.n	8004800 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	881a      	ldrh	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004784:	1c9a      	adds	r2, r3, #2
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004798:	e032      	b.n	8004800 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d112      	bne.n	80047ce <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	881a      	ldrh	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b8:	1c9a      	adds	r2, r3, #2
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047cc:	e018      	b.n	8004800 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ce:	f7fd fe3f 	bl	8002450 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d803      	bhi.n	80047e6 <HAL_SPI_Transmit+0x164>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d102      	bne.n	80047ec <HAL_SPI_Transmit+0x16a>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0b2      	b.n	8004966 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1c7      	bne.n	800479a <HAL_SPI_Transmit+0x118>
 800480a:	e083      	b.n	8004914 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_SPI_Transmit+0x198>
 8004814:	8b7b      	ldrh	r3, [r7, #26]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d177      	bne.n	800490a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d912      	bls.n	800484a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	881a      	ldrh	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004834:	1c9a      	adds	r2, r3, #2
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b02      	subs	r3, #2
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004848:	e05f      	b.n	800490a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004870:	e04b      	b.n	800490a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b02      	cmp	r3, #2
 800487e:	d12b      	bne.n	80048d8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d912      	bls.n	80048b0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488e:	881a      	ldrh	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	1c9a      	adds	r2, r3, #2
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b02      	subs	r3, #2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048ae:	e02c      	b.n	800490a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	7812      	ldrb	r2, [r2, #0]
 80048bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048d6:	e018      	b.n	800490a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d8:	f7fd fdba 	bl	8002450 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d803      	bhi.n	80048f0 <HAL_SPI_Transmit+0x26e>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d102      	bne.n	80048f6 <HAL_SPI_Transmit+0x274>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e02d      	b.n	8004966 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1ae      	bne.n	8004872 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fbd3 	bl	80050c4 <SPI_EndRxTxTransaction>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004964:	2300      	movs	r3, #0
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b01      	cmp	r3, #1
 8004988:	d001      	beq.n	800498e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800498a:	2302      	movs	r3, #2
 800498c:	e0d4      	b.n	8004b38 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_SPI_Transmit_DMA+0x2a>
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e0cc      	b.n	8004b38 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_SPI_Transmit_DMA+0x3c>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e0c5      	b.n	8004b38 <HAL_SPI_Transmit_DMA+0x1c8>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2203      	movs	r2, #3
 80049b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049fe:	d10f      	bne.n	8004a20 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	4a46      	ldr	r2, [pc, #280]	@ (8004b40 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004a26:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2c:	4a45      	ldr	r2, [pc, #276]	@ (8004b44 <HAL_SPI_Transmit_DMA+0x1d4>)
 8004a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a34:	4a44      	ldr	r2, [pc, #272]	@ (8004b48 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004a36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a4e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a58:	d82d      	bhi.n	8004ab6 <HAL_SPI_Transmit_DMA+0x146>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a64:	d127      	bne.n	8004ab6 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10f      	bne.n	8004a94 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a82:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a92:	e010      	b.n	8004ab6 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aa2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004acc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ace:	f7fd fe95 	bl	80027fc <HAL_DMA_Start_IT>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00b      	beq.n	8004af0 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004adc:	f043 0210 	orr.w	r2, r3, #16
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e023      	b.n	8004b38 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d007      	beq.n	8004b0e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b0c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0220 	orr.w	r2, r2, #32
 8004b24:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0202 	orr.w	r2, r2, #2
 8004b34:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	08004e03 	.word	0x08004e03
 8004b44:	08004d5d 	.word	0x08004d5d
 8004b48:	08004e1f 	.word	0x08004e1f

08004b4c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10e      	bne.n	8004b8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	4798      	blx	r3
    return;
 8004b8a:	e0ce      	b.n	8004d2a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_SPI_IRQHandler+0x5e>
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
    return;
 8004ba8:	e0bf      	b.n	8004d2a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <HAL_SPI_IRQHandler+0x7e>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d105      	bne.n	8004bca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80b0 	beq.w	8004d2a <HAL_SPI_IRQHandler+0x1de>
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80aa 	beq.w	8004d2a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d023      	beq.n	8004c28 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d011      	beq.n	8004c10 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bf0:	f043 0204 	orr.w	r2, r3, #4
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	e00b      	b.n	8004c28 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	693b      	ldr	r3, [r7, #16]
        return;
 8004c26:	e080      	b.n	8004d2a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d014      	beq.n	8004c5c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c36:	f043 0201 	orr.w	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c6a:	f043 0208 	orr.w	r2, r3, #8
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c72:	2300      	movs	r3, #0
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d04f      	beq.n	8004d28 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c96:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <HAL_SPI_IRQHandler+0x168>
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d034      	beq.n	8004d1e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0203 	bic.w	r2, r2, #3
 8004cc2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d011      	beq.n	8004cf0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd0:	4a17      	ldr	r2, [pc, #92]	@ (8004d30 <HAL_SPI_IRQHandler+0x1e4>)
 8004cd2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fd fe2d 	bl	8002938 <HAL_DMA_Abort_IT>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d016      	beq.n	8004d26 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8004d30 <HAL_SPI_IRQHandler+0x1e4>)
 8004cfe:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fd fe17 	bl	8002938 <HAL_DMA_Abort_IT>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004d1c:	e003      	b.n	8004d26 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f812 	bl	8004d48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d24:	e000      	b.n	8004d28 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004d26:	bf00      	nop
    return;
 8004d28:	bf00      	nop
  }
}
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	08004e5f 	.word	0x08004e5f

08004d34 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d6a:	f7fd fb71 	bl	8002450 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d03b      	beq.n	8004df6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0220 	bic.w	r2, r2, #32
 8004d8c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0202 	bic.w	r2, r2, #2
 8004d9c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	2164      	movs	r1, #100	@ 0x64
 8004da2:	6978      	ldr	r0, [r7, #20]
 8004da4:	f000 f98e 	bl	80050c4 <SPI_EndRxTxTransaction>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004dee:	6978      	ldr	r0, [r7, #20]
 8004df0:	f7ff ffaa 	bl	8004d48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004df4:	e002      	b.n	8004dfc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004df6:	6978      	ldr	r0, [r7, #20]
 8004df8:	f7fc fef6 	bl	8001be8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff ff8f 	bl	8004d34 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0203 	bic.w	r2, r2, #3
 8004e3a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e40:	f043 0210 	orr.w	r2, r3, #16
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff ff79 	bl	8004d48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e56:	bf00      	nop
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff ff64 	bl	8004d48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e98:	f7fd fada 	bl	8002450 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ea8:	f7fd fad2 	bl	8002450 <HAL_GetTick>
 8004eac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eae:	4b39      	ldr	r3, [pc, #228]	@ (8004f94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	015b      	lsls	r3, r3, #5
 8004eb4:	0d1b      	lsrs	r3, r3, #20
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	fb02 f303 	mul.w	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ebe:	e054      	b.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d050      	beq.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ec8:	f7fd fac2 	bl	8002450 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d902      	bls.n	8004ede <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d13d      	bne.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ef6:	d111      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f00:	d004      	beq.n	8004f0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f0a:	d107      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f24:	d10f      	bne.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e017      	b.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d19b      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000200 	.word	0x20000200

08004f98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	@ 0x28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004faa:	f7fd fa51 	bl	8002450 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004fba:	f7fd fa49 	bl	8002450 <HAL_GetTick>
 8004fbe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80050c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00da      	lsls	r2, r3, #3
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	0d1b      	lsrs	r3, r3, #20
 8004fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fe0:	e060      	b.n	80050a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fe8:	d107      	bne.n	8004ffa <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d104      	bne.n	8004ffa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d050      	beq.n	80050a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005002:	f7fd fa25 	bl	8002450 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500e:	429a      	cmp	r2, r3
 8005010:	d902      	bls.n	8005018 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	d13d      	bne.n	8005094 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005026:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005030:	d111      	bne.n	8005056 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800503a:	d004      	beq.n	8005046 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005044:	d107      	bne.n	8005056 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005054:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800505e:	d10f      	bne.n	8005080 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800507e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e010      	b.n	80050b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d196      	bne.n	8004fe2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3728      	adds	r7, #40	@ 0x28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000200 	.word	0x20000200

080050c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff ff5b 	bl	8004f98 <SPI_WaitFifoStateUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ec:	f043 0220 	orr.w	r2, r3, #32
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e027      	b.n	8005148 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2200      	movs	r2, #0
 8005100:	2180      	movs	r1, #128	@ 0x80
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff fec0 	bl	8004e88 <SPI_WaitFlagStateUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005112:	f043 0220 	orr.w	r2, r3, #32
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e014      	b.n	8005148 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2200      	movs	r2, #0
 8005126:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff ff34 	bl	8004f98 <SPI_WaitFifoStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e000      	b.n	8005148 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e040      	b.n	80051e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fd f876 	bl	8002264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	@ 0x24
 800517c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fea6 	bl	8005ee8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fbeb 	bl	8005978 <UART_SetConfig>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e01b      	b.n	80051e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 ff25 	bl	800602c <UART_CheckIdleState>
 80051e2:	4603      	mov	r3, r0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b08b      	sub	sp, #44	@ 0x2c
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d147      	bne.n	8005292 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_UART_Transmit_IT+0x22>
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e040      	b.n	8005294 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2221      	movs	r2, #33	@ 0x21
 800523a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005244:	d107      	bne.n	8005256 <HAL_UART_Transmit_IT+0x6a>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4a13      	ldr	r2, [pc, #76]	@ (80052a0 <HAL_UART_Transmit_IT+0xb4>)
 8005252:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005254:	e002      	b.n	800525c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a12      	ldr	r2, [pc, #72]	@ (80052a4 <HAL_UART_Transmit_IT+0xb8>)
 800525a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	613b      	str	r3, [r7, #16]
   return(result);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	623b      	str	r3, [r7, #32]
 800527c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	69f9      	ldr	r1, [r7, #28]
 8005280:	6a3a      	ldr	r2, [r7, #32]
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	61bb      	str	r3, [r7, #24]
   return(result);
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e6      	bne.n	800525c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	e000      	b.n	8005294 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005292:	2302      	movs	r3, #2
  }
}
 8005294:	4618      	mov	r0, r3
 8005296:	372c      	adds	r7, #44	@ 0x2c
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	0800658f 	.word	0x0800658f
 80052a4:	080064d9 	.word	0x080064d9

080052a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	@ 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d137      	bne.n	8005330 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_UART_Receive_IT+0x24>
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e030      	b.n	8005332 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a18      	ldr	r2, [pc, #96]	@ (800533c <HAL_UART_Receive_IT+0x94>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d01f      	beq.n	8005320 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	613b      	str	r3, [r7, #16]
   return(result);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	623b      	str	r3, [r7, #32]
 800530e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	69f9      	ldr	r1, [r7, #28]
 8005312:	6a3a      	ldr	r2, [r7, #32]
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	61bb      	str	r3, [r7, #24]
   return(result);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e6      	bne.n	80052ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	461a      	mov	r2, r3
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 ff96 	bl	8006258 <UART_Start_Receive_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	e000      	b.n	8005332 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3728      	adds	r7, #40	@ 0x28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40008000 	.word	0x40008000

08005340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b0ba      	sub	sp, #232	@ 0xe8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800536a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800536e:	4013      	ands	r3, r2
 8005370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d115      	bne.n	80053a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800537c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00f      	beq.n	80053a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 82ca 	beq.w	8005932 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	4798      	blx	r3
      }
      return;
 80053a6:	e2c4      	b.n	8005932 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80053a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8117 	beq.w	80055e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053c2:	4b85      	ldr	r3, [pc, #532]	@ (80055d8 <HAL_UART_IRQHandler+0x298>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 810a 	beq.w	80055e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d011      	beq.n	80053fc <HAL_UART_IRQHandler+0xbc>
 80053d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2201      	movs	r2, #1
 80053ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f2:	f043 0201 	orr.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d011      	beq.n	800542c <HAL_UART_IRQHandler+0xec>
 8005408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2202      	movs	r2, #2
 800541a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005422:	f043 0204 	orr.w	r2, r3, #4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800542c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d011      	beq.n	800545c <HAL_UART_IRQHandler+0x11c>
 8005438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2204      	movs	r2, #4
 800544a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005452:	f043 0202 	orr.w	r2, r3, #2
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d017      	beq.n	8005498 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005478:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2208      	movs	r2, #8
 8005486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800548e:	f043 0208 	orr.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d012      	beq.n	80054ca <HAL_UART_IRQHandler+0x18a>
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00c      	beq.n	80054ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8230 	beq.w	8005936 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005504:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005512:	2b40      	cmp	r3, #64	@ 0x40
 8005514:	d005      	beq.n	8005522 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800551a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800551e:	2b00      	cmp	r3, #0
 8005520:	d04f      	beq.n	80055c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 ff5e 	bl	80063e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005532:	2b40      	cmp	r3, #64	@ 0x40
 8005534:	d141      	bne.n	80055ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3308      	adds	r3, #8
 800553c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800554c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005562:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005566:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800556e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800557a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1d9      	bne.n	8005536 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005586:	2b00      	cmp	r3, #0
 8005588:	d013      	beq.n	80055b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558e:	4a13      	ldr	r2, [pc, #76]	@ (80055dc <HAL_UART_IRQHandler+0x29c>)
 8005590:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005596:	4618      	mov	r0, r3
 8005598:	f7fd f9ce 	bl	8002938 <HAL_DMA_Abort_IT>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d017      	beq.n	80055d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055ac:	4610      	mov	r0, r2
 80055ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	e00f      	b.n	80055d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9ca 	bl	800594c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	e00b      	b.n	80055d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f9c6 	bl	800594c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	e007      	b.n	80055d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f9c2 	bl	800594c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80055d0:	e1b1      	b.n	8005936 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d2:	bf00      	nop
    return;
 80055d4:	e1af      	b.n	8005936 <HAL_UART_IRQHandler+0x5f6>
 80055d6:	bf00      	nop
 80055d8:	04000120 	.word	0x04000120
 80055dc:	080064ad 	.word	0x080064ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	f040 816a 	bne.w	80058be <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 8163 	beq.w	80058be <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 815c 	beq.w	80058be <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2210      	movs	r2, #16
 800560c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005618:	2b40      	cmp	r3, #64	@ 0x40
 800561a:	f040 80d4 	bne.w	80057c6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800562a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80ad 	beq.w	800578e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800563a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800563e:	429a      	cmp	r2, r3
 8005640:	f080 80a5 	bcs.w	800578e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800564a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 8086 	bne.w	800576c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800567c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800568a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800568e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005696:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1da      	bne.n	8005660 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3308      	adds	r3, #8
 80056b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e1      	bne.n	80056aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800570a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800570c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e3      	bne.n	80056e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800573a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800573c:	f023 0310 	bic.w	r3, r3, #16
 8005740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800574e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005750:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800575c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e4      	bne.n	800572c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005766:	4618      	mov	r0, r3
 8005768:	f7fd f8a8 	bl	80028bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800577e:	b29b      	uxth	r3, r3
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	b29b      	uxth	r3, r3
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8ea 	bl	8005960 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800578c:	e0d5      	b.n	800593a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005794:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005798:	429a      	cmp	r2, r3
 800579a:	f040 80ce 	bne.w	800593a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	f040 80c5 	bne.w	800593a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8ce 	bl	8005960 <HAL_UARTEx_RxEventCallback>
      return;
 80057c4:	e0b9      	b.n	800593a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80ab 	beq.w	800593e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80057e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80a6 	beq.w	800593e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005814:	647b      	str	r3, [r7, #68]	@ 0x44
 8005816:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800581a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e4      	bne.n	80057f2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	623b      	str	r3, [r7, #32]
   return(result);
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f023 0301 	bic.w	r3, r3, #1
 800583e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800584c:	633a      	str	r2, [r7, #48]	@ 0x30
 800584e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e3      	bne.n	8005828 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	60fb      	str	r3, [r7, #12]
   return(result);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f023 0310 	bic.w	r3, r3, #16
 8005888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	69b9      	ldr	r1, [r7, #24]
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	617b      	str	r3, [r7, #20]
   return(result);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e4      	bne.n	8005874 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f852 	bl	8005960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058bc:	e03f      	b.n	800593e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00e      	beq.n	80058e8 <HAL_UART_IRQHandler+0x5a8>
 80058ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 f89b 	bl	8006a1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058e6:	e02d      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00e      	beq.n	8005912 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01c      	beq.n	8005942 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	4798      	blx	r3
    }
    return;
 8005910:	e017      	b.n	8005942 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d012      	beq.n	8005944 <HAL_UART_IRQHandler+0x604>
 800591e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fe8f 	bl	800664e <UART_EndTransmit_IT>
    return;
 8005930:	e008      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
      return;
 8005932:	bf00      	nop
 8005934:	e006      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
    return;
 8005936:	bf00      	nop
 8005938:	e004      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
      return;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
      return;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
    return;
 8005942:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005944:	37e8      	adds	r7, #232	@ 0xe8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop

0800594c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800597c:	b08a      	sub	sp, #40	@ 0x28
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	431a      	orrs	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	431a      	orrs	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4313      	orrs	r3, r2
 800599e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4ba4      	ldr	r3, [pc, #656]	@ (8005c38 <UART_SetConfig+0x2c0>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059b0:	430b      	orrs	r3, r1
 80059b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a99      	ldr	r2, [pc, #612]	@ (8005c3c <UART_SetConfig+0x2c4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e0:	4313      	orrs	r3, r2
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f4:	430a      	orrs	r2, r1
 80059f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a90      	ldr	r2, [pc, #576]	@ (8005c40 <UART_SetConfig+0x2c8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d126      	bne.n	8005a50 <UART_SetConfig+0xd8>
 8005a02:	4b90      	ldr	r3, [pc, #576]	@ (8005c44 <UART_SetConfig+0x2cc>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d81b      	bhi.n	8005a48 <UART_SetConfig+0xd0>
 8005a10:	a201      	add	r2, pc, #4	@ (adr r2, 8005a18 <UART_SetConfig+0xa0>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a29 	.word	0x08005a29
 8005a1c:	08005a39 	.word	0x08005a39
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a41 	.word	0x08005a41
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a2e:	e116      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005a30:	2302      	movs	r3, #2
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a36:	e112      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a3e:	e10e      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005a40:	2308      	movs	r3, #8
 8005a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a46:	e10a      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a4e:	e106      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a7c      	ldr	r2, [pc, #496]	@ (8005c48 <UART_SetConfig+0x2d0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d138      	bne.n	8005acc <UART_SetConfig+0x154>
 8005a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c44 <UART_SetConfig+0x2cc>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a60:	f003 030c 	and.w	r3, r3, #12
 8005a64:	2b0c      	cmp	r3, #12
 8005a66:	d82d      	bhi.n	8005ac4 <UART_SetConfig+0x14c>
 8005a68:	a201      	add	r2, pc, #4	@ (adr r2, 8005a70 <UART_SetConfig+0xf8>)
 8005a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6e:	bf00      	nop
 8005a70:	08005aa5 	.word	0x08005aa5
 8005a74:	08005ac5 	.word	0x08005ac5
 8005a78:	08005ac5 	.word	0x08005ac5
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005ab5 	.word	0x08005ab5
 8005a84:	08005ac5 	.word	0x08005ac5
 8005a88:	08005ac5 	.word	0x08005ac5
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005aad 	.word	0x08005aad
 8005a94:	08005ac5 	.word	0x08005ac5
 8005a98:	08005ac5 	.word	0x08005ac5
 8005a9c:	08005ac5 	.word	0x08005ac5
 8005aa0:	08005abd 	.word	0x08005abd
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aaa:	e0d8      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005aac:	2302      	movs	r3, #2
 8005aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ab2:	e0d4      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aba:	e0d0      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ac2:	e0cc      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aca:	e0c8      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a5e      	ldr	r2, [pc, #376]	@ (8005c4c <UART_SetConfig+0x2d4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d125      	bne.n	8005b22 <UART_SetConfig+0x1aa>
 8005ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8005c44 <UART_SetConfig+0x2cc>)
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005adc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ae0:	2b30      	cmp	r3, #48	@ 0x30
 8005ae2:	d016      	beq.n	8005b12 <UART_SetConfig+0x19a>
 8005ae4:	2b30      	cmp	r3, #48	@ 0x30
 8005ae6:	d818      	bhi.n	8005b1a <UART_SetConfig+0x1a2>
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d00a      	beq.n	8005b02 <UART_SetConfig+0x18a>
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d814      	bhi.n	8005b1a <UART_SetConfig+0x1a2>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <UART_SetConfig+0x182>
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d008      	beq.n	8005b0a <UART_SetConfig+0x192>
 8005af8:	e00f      	b.n	8005b1a <UART_SetConfig+0x1a2>
 8005afa:	2300      	movs	r3, #0
 8005afc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b00:	e0ad      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005b02:	2302      	movs	r3, #2
 8005b04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b08:	e0a9      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005b0a:	2304      	movs	r3, #4
 8005b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b10:	e0a5      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005b12:	2308      	movs	r3, #8
 8005b14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b18:	e0a1      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005b1a:	2310      	movs	r3, #16
 8005b1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b20:	e09d      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a4a      	ldr	r2, [pc, #296]	@ (8005c50 <UART_SetConfig+0x2d8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d125      	bne.n	8005b78 <UART_SetConfig+0x200>
 8005b2c:	4b45      	ldr	r3, [pc, #276]	@ (8005c44 <UART_SetConfig+0x2cc>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b38:	d016      	beq.n	8005b68 <UART_SetConfig+0x1f0>
 8005b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b3c:	d818      	bhi.n	8005b70 <UART_SetConfig+0x1f8>
 8005b3e:	2b80      	cmp	r3, #128	@ 0x80
 8005b40:	d00a      	beq.n	8005b58 <UART_SetConfig+0x1e0>
 8005b42:	2b80      	cmp	r3, #128	@ 0x80
 8005b44:	d814      	bhi.n	8005b70 <UART_SetConfig+0x1f8>
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <UART_SetConfig+0x1d8>
 8005b4a:	2b40      	cmp	r3, #64	@ 0x40
 8005b4c:	d008      	beq.n	8005b60 <UART_SetConfig+0x1e8>
 8005b4e:	e00f      	b.n	8005b70 <UART_SetConfig+0x1f8>
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b56:	e082      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b5e:	e07e      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005b60:	2304      	movs	r3, #4
 8005b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b66:	e07a      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005b68:	2308      	movs	r3, #8
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6e:	e076      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005b70:	2310      	movs	r3, #16
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b76:	e072      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a35      	ldr	r2, [pc, #212]	@ (8005c54 <UART_SetConfig+0x2dc>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d12a      	bne.n	8005bd8 <UART_SetConfig+0x260>
 8005b82:	4b30      	ldr	r3, [pc, #192]	@ (8005c44 <UART_SetConfig+0x2cc>)
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b90:	d01a      	beq.n	8005bc8 <UART_SetConfig+0x250>
 8005b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b96:	d81b      	bhi.n	8005bd0 <UART_SetConfig+0x258>
 8005b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b9c:	d00c      	beq.n	8005bb8 <UART_SetConfig+0x240>
 8005b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ba2:	d815      	bhi.n	8005bd0 <UART_SetConfig+0x258>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <UART_SetConfig+0x238>
 8005ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bac:	d008      	beq.n	8005bc0 <UART_SetConfig+0x248>
 8005bae:	e00f      	b.n	8005bd0 <UART_SetConfig+0x258>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb6:	e052      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bbe:	e04e      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc6:	e04a      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bce:	e046      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bd6:	e042      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a17      	ldr	r2, [pc, #92]	@ (8005c3c <UART_SetConfig+0x2c4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d13a      	bne.n	8005c58 <UART_SetConfig+0x2e0>
 8005be2:	4b18      	ldr	r3, [pc, #96]	@ (8005c44 <UART_SetConfig+0x2cc>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005bec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bf0:	d01a      	beq.n	8005c28 <UART_SetConfig+0x2b0>
 8005bf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bf6:	d81b      	bhi.n	8005c30 <UART_SetConfig+0x2b8>
 8005bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bfc:	d00c      	beq.n	8005c18 <UART_SetConfig+0x2a0>
 8005bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c02:	d815      	bhi.n	8005c30 <UART_SetConfig+0x2b8>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <UART_SetConfig+0x298>
 8005c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c0c:	d008      	beq.n	8005c20 <UART_SetConfig+0x2a8>
 8005c0e:	e00f      	b.n	8005c30 <UART_SetConfig+0x2b8>
 8005c10:	2300      	movs	r3, #0
 8005c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c16:	e022      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c1e:	e01e      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005c20:	2304      	movs	r3, #4
 8005c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c26:	e01a      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c2e:	e016      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005c30:	2310      	movs	r3, #16
 8005c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c36:	e012      	b.n	8005c5e <UART_SetConfig+0x2e6>
 8005c38:	efff69f3 	.word	0xefff69f3
 8005c3c:	40008000 	.word	0x40008000
 8005c40:	40013800 	.word	0x40013800
 8005c44:	40021000 	.word	0x40021000
 8005c48:	40004400 	.word	0x40004400
 8005c4c:	40004800 	.word	0x40004800
 8005c50:	40004c00 	.word	0x40004c00
 8005c54:	40005000 	.word	0x40005000
 8005c58:	2310      	movs	r3, #16
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a9f      	ldr	r2, [pc, #636]	@ (8005ee0 <UART_SetConfig+0x568>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d17a      	bne.n	8005d5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d824      	bhi.n	8005cba <UART_SetConfig+0x342>
 8005c70:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <UART_SetConfig+0x300>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005c9d 	.word	0x08005c9d
 8005c7c:	08005cbb 	.word	0x08005cbb
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cbb 	.word	0x08005cbb
 8005c88:	08005cab 	.word	0x08005cab
 8005c8c:	08005cbb 	.word	0x08005cbb
 8005c90:	08005cbb 	.word	0x08005cbb
 8005c94:	08005cbb 	.word	0x08005cbb
 8005c98:	08005cb3 	.word	0x08005cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c9c:	f7fd ff06 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 8005ca0:	61f8      	str	r0, [r7, #28]
        break;
 8005ca2:	e010      	b.n	8005cc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca4:	4b8f      	ldr	r3, [pc, #572]	@ (8005ee4 <UART_SetConfig+0x56c>)
 8005ca6:	61fb      	str	r3, [r7, #28]
        break;
 8005ca8:	e00d      	b.n	8005cc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005caa:	f7fd fe67 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8005cae:	61f8      	str	r0, [r7, #28]
        break;
 8005cb0:	e009      	b.n	8005cc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cb6:	61fb      	str	r3, [r7, #28]
        break;
 8005cb8:	e005      	b.n	8005cc6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80fb 	beq.w	8005ec4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d305      	bcc.n	8005cea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d903      	bls.n	8005cf2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005cf0:	e0e8      	b.n	8005ec4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	461c      	mov	r4, r3
 8005cf8:	4615      	mov	r5, r2
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	022b      	lsls	r3, r5, #8
 8005d04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d08:	0222      	lsls	r2, r4, #8
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	6849      	ldr	r1, [r1, #4]
 8005d0e:	0849      	lsrs	r1, r1, #1
 8005d10:	2000      	movs	r0, #0
 8005d12:	4688      	mov	r8, r1
 8005d14:	4681      	mov	r9, r0
 8005d16:	eb12 0a08 	adds.w	sl, r2, r8
 8005d1a:	eb43 0b09 	adc.w	fp, r3, r9
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	603b      	str	r3, [r7, #0]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d2c:	4650      	mov	r0, sl
 8005d2e:	4659      	mov	r1, fp
 8005d30:	f7fa faa6 	bl	8000280 <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4613      	mov	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d42:	d308      	bcc.n	8005d56 <UART_SetConfig+0x3de>
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d4a:	d204      	bcs.n	8005d56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	60da      	str	r2, [r3, #12]
 8005d54:	e0b6      	b.n	8005ec4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d5c:	e0b2      	b.n	8005ec4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d66:	d15e      	bne.n	8005e26 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d828      	bhi.n	8005dc2 <UART_SetConfig+0x44a>
 8005d70:	a201      	add	r2, pc, #4	@ (adr r2, 8005d78 <UART_SetConfig+0x400>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005d9d 	.word	0x08005d9d
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	08005dad 	.word	0x08005dad
 8005d84:	08005dc3 	.word	0x08005dc3
 8005d88:	08005db3 	.word	0x08005db3
 8005d8c:	08005dc3 	.word	0x08005dc3
 8005d90:	08005dc3 	.word	0x08005dc3
 8005d94:	08005dc3 	.word	0x08005dc3
 8005d98:	08005dbb 	.word	0x08005dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d9c:	f7fd fe86 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 8005da0:	61f8      	str	r0, [r7, #28]
        break;
 8005da2:	e014      	b.n	8005dce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da4:	f7fd fe98 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 8005da8:	61f8      	str	r0, [r7, #28]
        break;
 8005daa:	e010      	b.n	8005dce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dac:	4b4d      	ldr	r3, [pc, #308]	@ (8005ee4 <UART_SetConfig+0x56c>)
 8005dae:	61fb      	str	r3, [r7, #28]
        break;
 8005db0:	e00d      	b.n	8005dce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db2:	f7fd fde3 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8005db6:	61f8      	str	r0, [r7, #28]
        break;
 8005db8:	e009      	b.n	8005dce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dbe:	61fb      	str	r3, [r7, #28]
        break;
 8005dc0:	e005      	b.n	8005dce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005dcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d077      	beq.n	8005ec4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	005a      	lsls	r2, r3, #1
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	085b      	lsrs	r3, r3, #1
 8005dde:	441a      	add	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b0f      	cmp	r3, #15
 8005dee:	d916      	bls.n	8005e1e <UART_SetConfig+0x4a6>
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df6:	d212      	bcs.n	8005e1e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f023 030f 	bic.w	r3, r3, #15
 8005e00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	8afb      	ldrh	r3, [r7, #22]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	8afa      	ldrh	r2, [r7, #22]
 8005e1a:	60da      	str	r2, [r3, #12]
 8005e1c:	e052      	b.n	8005ec4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e24:	e04e      	b.n	8005ec4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d827      	bhi.n	8005e7e <UART_SetConfig+0x506>
 8005e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e34 <UART_SetConfig+0x4bc>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e61 	.word	0x08005e61
 8005e3c:	08005e69 	.word	0x08005e69
 8005e40:	08005e7f 	.word	0x08005e7f
 8005e44:	08005e6f 	.word	0x08005e6f
 8005e48:	08005e7f 	.word	0x08005e7f
 8005e4c:	08005e7f 	.word	0x08005e7f
 8005e50:	08005e7f 	.word	0x08005e7f
 8005e54:	08005e77 	.word	0x08005e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e58:	f7fd fe28 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 8005e5c:	61f8      	str	r0, [r7, #28]
        break;
 8005e5e:	e014      	b.n	8005e8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e60:	f7fd fe3a 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 8005e64:	61f8      	str	r0, [r7, #28]
        break;
 8005e66:	e010      	b.n	8005e8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e68:	4b1e      	ldr	r3, [pc, #120]	@ (8005ee4 <UART_SetConfig+0x56c>)
 8005e6a:	61fb      	str	r3, [r7, #28]
        break;
 8005e6c:	e00d      	b.n	8005e8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e6e:	f7fd fd85 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8005e72:	61f8      	str	r0, [r7, #28]
        break;
 8005e74:	e009      	b.n	8005e8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e7a:	61fb      	str	r3, [r7, #28]
        break;
 8005e7c:	e005      	b.n	8005e8a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e88:	bf00      	nop
    }

    if (pclk != 0U)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d019      	beq.n	8005ec4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	085a      	lsrs	r2, r3, #1
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	441a      	add	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b0f      	cmp	r3, #15
 8005ea8:	d909      	bls.n	8005ebe <UART_SetConfig+0x546>
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb0:	d205      	bcs.n	8005ebe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60da      	str	r2, [r3, #12]
 8005ebc:	e002      	b.n	8005ec4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ed0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3728      	adds	r7, #40	@ 0x28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ede:	bf00      	nop
 8005ee0:	40008000 	.word	0x40008000
 8005ee4:	00f42400 	.word	0x00f42400

08005ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01a      	beq.n	8005ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fe6:	d10a      	bne.n	8005ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b098      	sub	sp, #96	@ 0x60
 8006030:	af02      	add	r7, sp, #8
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800603c:	f7fc fa08 	bl	8002450 <HAL_GetTick>
 8006040:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b08      	cmp	r3, #8
 800604e:	d12e      	bne.n	80060ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006050:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006058:	2200      	movs	r2, #0
 800605a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f88c 	bl	800617c <UART_WaitOnFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d021      	beq.n	80060ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800607e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006088:	647b      	str	r3, [r7, #68]	@ 0x44
 800608a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800608e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e062      	b.n	8006174 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d149      	bne.n	8006150 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c4:	2200      	movs	r2, #0
 80060c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f856 	bl	800617c <UART_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d03c      	beq.n	8006150 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	623b      	str	r3, [r7, #32]
   return(result);
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e6      	bne.n	80060d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3308      	adds	r3, #8
 800610e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	60fb      	str	r3, [r7, #12]
   return(result);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0301 	bic.w	r3, r3, #1
 800611e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006128:	61fa      	str	r2, [r7, #28]
 800612a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	69b9      	ldr	r1, [r7, #24]
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	617b      	str	r3, [r7, #20]
   return(result);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e5      	bne.n	8006108 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e011      	b.n	8006174 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3758      	adds	r7, #88	@ 0x58
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	4613      	mov	r3, r2
 800618a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618c:	e04f      	b.n	800622e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d04b      	beq.n	800622e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006196:	f7fc f95b 	bl	8002450 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d302      	bcc.n	80061ac <UART_WaitOnFlagUntilTimeout+0x30>
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e04e      	b.n	800624e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d037      	beq.n	800622e <UART_WaitOnFlagUntilTimeout+0xb2>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b80      	cmp	r3, #128	@ 0x80
 80061c2:	d034      	beq.n	800622e <UART_WaitOnFlagUntilTimeout+0xb2>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b40      	cmp	r3, #64	@ 0x40
 80061c8:	d031      	beq.n	800622e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d110      	bne.n	80061fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2208      	movs	r2, #8
 80061de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f8ff 	bl	80063e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2208      	movs	r2, #8
 80061ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e029      	b.n	800624e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006208:	d111      	bne.n	800622e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f8e5 	bl	80063e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e00f      	b.n	800624e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4013      	ands	r3, r2
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	429a      	cmp	r2, r3
 800623c:	bf0c      	ite	eq
 800623e:	2301      	moveq	r3, #1
 8006240:	2300      	movne	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	429a      	cmp	r2, r3
 800624a:	d0a0      	beq.n	800618e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006258:	b480      	push	{r7}
 800625a:	b097      	sub	sp, #92	@ 0x5c
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	88fa      	ldrh	r2, [r7, #6]
 8006278:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628a:	d10e      	bne.n	80062aa <UART_Start_Receive_IT+0x52>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d105      	bne.n	80062a0 <UART_Start_Receive_IT+0x48>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800629a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800629e:	e02d      	b.n	80062fc <UART_Start_Receive_IT+0xa4>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	22ff      	movs	r2, #255	@ 0xff
 80062a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062a8:	e028      	b.n	80062fc <UART_Start_Receive_IT+0xa4>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10d      	bne.n	80062ce <UART_Start_Receive_IT+0x76>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <UART_Start_Receive_IT+0x6c>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	22ff      	movs	r2, #255	@ 0xff
 80062be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062c2:	e01b      	b.n	80062fc <UART_Start_Receive_IT+0xa4>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	227f      	movs	r2, #127	@ 0x7f
 80062c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062cc:	e016      	b.n	80062fc <UART_Start_Receive_IT+0xa4>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062d6:	d10d      	bne.n	80062f4 <UART_Start_Receive_IT+0x9c>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <UART_Start_Receive_IT+0x92>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	227f      	movs	r2, #127	@ 0x7f
 80062e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062e8:	e008      	b.n	80062fc <UART_Start_Receive_IT+0xa4>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	223f      	movs	r2, #63	@ 0x3f
 80062ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062f2:	e003      	b.n	80062fc <UART_Start_Receive_IT+0xa4>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2222      	movs	r2, #34	@ 0x22
 8006308:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3308      	adds	r3, #8
 8006312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800631c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	657b      	str	r3, [r7, #84]	@ 0x54
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3308      	adds	r3, #8
 800632a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800632c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800632e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800633a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e5      	bne.n	800630c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006348:	d107      	bne.n	800635a <UART_Start_Receive_IT+0x102>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4a21      	ldr	r2, [pc, #132]	@ (80063dc <UART_Start_Receive_IT+0x184>)
 8006356:	669a      	str	r2, [r3, #104]	@ 0x68
 8006358:	e002      	b.n	8006360 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a20      	ldr	r2, [pc, #128]	@ (80063e0 <UART_Start_Receive_IT+0x188>)
 800635e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d019      	beq.n	800639c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800637c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006386:	637b      	str	r3, [r7, #52]	@ 0x34
 8006388:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800638c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e6      	bne.n	8006368 <UART_Start_Receive_IT+0x110>
 800639a:	e018      	b.n	80063ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	613b      	str	r3, [r7, #16]
   return(result);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f043 0320 	orr.w	r3, r3, #32
 80063b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ba:	623b      	str	r3, [r7, #32]
 80063bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	69f9      	ldr	r1, [r7, #28]
 80063c0:	6a3a      	ldr	r2, [r7, #32]
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e6      	bne.n	800639c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	375c      	adds	r7, #92	@ 0x5c
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	08006861 	.word	0x08006861
 80063e0:	080066a5 	.word	0x080066a5

080063e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b095      	sub	sp, #84	@ 0x54
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800640a:	643b      	str	r3, [r7, #64]	@ 0x40
 800640c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e6      	bne.n	80063ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3308      	adds	r3, #8
 8006424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	61fb      	str	r3, [r7, #28]
   return(result);
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3308      	adds	r3, #8
 800643c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800643e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e5      	bne.n	800641e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006456:	2b01      	cmp	r3, #1
 8006458:	d118      	bne.n	800648c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	60bb      	str	r3, [r7, #8]
   return(result);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f023 0310 	bic.w	r3, r3, #16
 800646e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	6979      	ldr	r1, [r7, #20]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	613b      	str	r3, [r7, #16]
   return(result);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e6      	bne.n	800645a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064a0:	bf00      	nop
 80064a2:	3754      	adds	r7, #84	@ 0x54
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff fa3e 	bl	800594c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064d8:	b480      	push	{r7}
 80064da:	b08f      	sub	sp, #60	@ 0x3c
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064e4:	2b21      	cmp	r3, #33	@ 0x21
 80064e6:	d14c      	bne.n	8006582 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d132      	bne.n	800655a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	61fb      	str	r3, [r7, #28]
   return(result);
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006508:	637b      	str	r3, [r7, #52]	@ 0x34
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006512:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006514:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e6      	bne.n	80064f4 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	60bb      	str	r3, [r7, #8]
   return(result);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800653a:	633b      	str	r3, [r7, #48]	@ 0x30
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6979      	ldr	r1, [r7, #20]
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	613b      	str	r3, [r7, #16]
   return(result);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e6      	bne.n	8006526 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006558:	e013      	b.n	8006582 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800655e:	781a      	ldrb	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006582:	bf00      	nop
 8006584:	373c      	adds	r7, #60	@ 0x3c
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800658e:	b480      	push	{r7}
 8006590:	b091      	sub	sp, #68	@ 0x44
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800659a:	2b21      	cmp	r3, #33	@ 0x21
 800659c:	d151      	bne.n	8006642 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d132      	bne.n	8006610 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	623b      	str	r3, [r7, #32]
   return(result);
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80065ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e6      	bne.n	80065aa <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	69b9      	ldr	r1, [r7, #24]
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	617b      	str	r3, [r7, #20]
   return(result);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e6      	bne.n	80065dc <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800660e:	e018      	b.n	8006642 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006618:	881a      	ldrh	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006622:	b292      	uxth	r2, r2
 8006624:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800662a:	1c9a      	adds	r2, r3, #2
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006642:	bf00      	nop
 8006644:	3744      	adds	r7, #68	@ 0x44
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b088      	sub	sp, #32
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	60bb      	str	r3, [r7, #8]
   return(result);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6979      	ldr	r1, [r7, #20]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	613b      	str	r3, [r7, #16]
   return(result);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e6      	bne.n	8006656 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fb fd45 	bl	8002124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669a:	bf00      	nop
 800669c:	3720      	adds	r7, #32
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b09c      	sub	sp, #112	@ 0x70
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066bc:	2b22      	cmp	r3, #34	@ 0x22
 80066be:	f040 80be 	bne.w	800683e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80066c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066d0:	b2d9      	uxtb	r1, r3
 80066d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066dc:	400a      	ands	r2, r1
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	f040 80a3 	bne.w	8006852 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800671a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800671c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006720:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800672a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800672c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006730:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e6      	bne.n	800670c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3308      	adds	r3, #8
 8006744:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800674e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	667b      	str	r3, [r7, #100]	@ 0x64
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800675e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006760:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800676c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e5      	bne.n	800673e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a34      	ldr	r2, [pc, #208]	@ (800685c <UART_RxISR_8BIT+0x1b8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d01f      	beq.n	80067d0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d018      	beq.n	80067d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	623b      	str	r3, [r7, #32]
   return(result);
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80067be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e6      	bne.n	800679e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d12e      	bne.n	8006836 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0310 	bic.w	r3, r3, #16
 80067f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	69b9      	ldr	r1, [r7, #24]
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	617b      	str	r3, [r7, #20]
   return(result);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e6      	bne.n	80067de <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f003 0310 	and.w	r3, r3, #16
 800681a:	2b10      	cmp	r3, #16
 800681c:	d103      	bne.n	8006826 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2210      	movs	r2, #16
 8006824:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff f896 	bl	8005960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006834:	e00d      	b.n	8006852 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fb fca4 	bl	8002184 <HAL_UART_RxCpltCallback>
}
 800683c:	e009      	b.n	8006852 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	8b1b      	ldrh	r3, [r3, #24]
 8006844:	b29a      	uxth	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0208 	orr.w	r2, r2, #8
 800684e:	b292      	uxth	r2, r2
 8006850:	831a      	strh	r2, [r3, #24]
}
 8006852:	bf00      	nop
 8006854:	3770      	adds	r7, #112	@ 0x70
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	40008000 	.word	0x40008000

08006860 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b09c      	sub	sp, #112	@ 0x70
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800686e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006878:	2b22      	cmp	r3, #34	@ 0x22
 800687a:	f040 80be 	bne.w	80069fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006884:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800688e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006892:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006896:	4013      	ands	r3, r2
 8006898:	b29a      	uxth	r2, r3
 800689a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800689c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a2:	1c9a      	adds	r2, r3, #2
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f040 80a3 	bne.w	8006a0e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80068d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80068e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80068f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e6      	bne.n	80068c8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3308      	adds	r3, #8
 8006900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	663b      	str	r3, [r7, #96]	@ 0x60
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3308      	adds	r3, #8
 8006918:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800691a:	643a      	str	r2, [r7, #64]	@ 0x40
 800691c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e5      	bne.n	80068fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a34      	ldr	r2, [pc, #208]	@ (8006a18 <UART_RxISR_16BIT+0x1b8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d01f      	beq.n	800698c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d018      	beq.n	800698c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	61fb      	str	r3, [r7, #28]
   return(result);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800696e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800697a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800697e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e6      	bne.n	800695a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006990:	2b01      	cmp	r3, #1
 8006992:	d12e      	bne.n	80069f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f023 0310 	bic.w	r3, r3, #16
 80069ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069b8:	61bb      	str	r3, [r7, #24]
 80069ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	6979      	ldr	r1, [r7, #20]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	613b      	str	r3, [r7, #16]
   return(result);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e6      	bne.n	800699a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0310 	and.w	r3, r3, #16
 80069d6:	2b10      	cmp	r3, #16
 80069d8:	d103      	bne.n	80069e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2210      	movs	r2, #16
 80069e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fe ffb8 	bl	8005960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069f0:	e00d      	b.n	8006a0e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fb fbc6 	bl	8002184 <HAL_UART_RxCpltCallback>
}
 80069f8:	e009      	b.n	8006a0e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	8b1b      	ldrh	r3, [r3, #24]
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0208 	orr.w	r2, r2, #8
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	831a      	strh	r2, [r3, #24]
}
 8006a0e:	bf00      	nop
 8006a10:	3770      	adds	r7, #112	@ 0x70
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40008000 	.word	0x40008000

08006a1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	7992      	ldrb	r2, [r2, #6]
 8006a42:	08d2      	lsrs	r2, r2, #3
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	fb13 f302 	smulbb	r3, r3, r2
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	889b      	ldrh	r3, [r3, #4]
 8006a54:	461a      	mov	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	885b      	ldrh	r3, [r3, #2]
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	60da      	str	r2, [r3, #12]
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006a76:	b490      	push	{r4, r7}
 8006a78:	b086      	sub	sp, #24
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	1d39      	adds	r1, r7, #4
 8006a82:	e881 000c 	stmia.w	r1, {r2, r3}
 8006a86:	4623      	mov	r3, r4
 8006a88:	81fb      	strh	r3, [r7, #14]
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a96:	88ba      	ldrh	r2, [r7, #4]
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	da04      	bge.n	8006aa6 <code+0x30>
        code |= LEFT;
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	75fb      	strb	r3, [r7, #23]
 8006aa4:	e008      	b.n	8006ab8 <code+0x42>
    } else if (x0 > window.x1) {
 8006aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006aaa:	893a      	ldrh	r2, [r7, #8]
 8006aac:	4293      	cmp	r3, r2
 8006aae:	dd03      	ble.n	8006ab8 <code+0x42>
        code |= RIGHT;
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006ab8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	da04      	bge.n	8006acc <code+0x56>
        code |= BOTTOM;
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	75fb      	strb	r3, [r7, #23]
 8006aca:	e008      	b.n	8006ade <code+0x68>
    } else if (y0 > window.y1) {
 8006acc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ad0:	897a      	ldrh	r2, [r7, #10]
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	dd03      	ble.n	8006ade <code+0x68>
        code |= TOP;
 8006ad6:	2208      	movs	r2, #8
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc90      	pop	{r4, r7}
 8006ae8:	4770      	bx	lr

08006aea <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b088      	sub	sp, #32
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
 8006af6:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006b04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006b08:	cb0c      	ldmia	r3, {r2, r3}
 8006b0a:	f7ff ffb4 	bl	8006a76 <code>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006b1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006b22:	cb0c      	ldmia	r3, {r2, r3}
 8006b24:	f7ff ffa7 	bl	8006a76 <code>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006b30:	7ffa      	ldrb	r2, [r7, #31]
 8006b32:	7fbb      	ldrb	r3, [r7, #30]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d102      	bne.n	8006b42 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	777b      	strb	r3, [r7, #29]
            break;
 8006b40:	e0e9      	b.n	8006d16 <clip_line+0x22c>
        } else if (code0 & code1) {
 8006b42:	7ffa      	ldrb	r2, [r7, #31]
 8006b44:	7fbb      	ldrb	r3, [r7, #30]
 8006b46:	4013      	ands	r3, r2
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 80e2 	bne.w	8006d14 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006b58:	7ffb      	ldrb	r3, [r7, #31]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <clip_line+0x78>
 8006b5e:	7ffb      	ldrb	r3, [r7, #31]
 8006b60:	e000      	b.n	8006b64 <clip_line+0x7a>
 8006b62:	7fbb      	ldrb	r3, [r7, #30]
 8006b64:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006b66:	2208      	movs	r2, #8
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d024      	beq.n	8006bbc <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b80:	4619      	mov	r1, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b88:	1acb      	subs	r3, r1, r3
 8006b8a:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b94:	1a41      	subs	r1, r0, r1
 8006b96:	fb03 f101 	mul.w	r1, r3, r1
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba8:	1ac3      	subs	r3, r0, r3
 8006baa:	fb91 f3f3 	sdiv	r3, r1, r3
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	4413      	add	r3, r2
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006bb6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006bb8:	833b      	strh	r3, [r7, #24]
 8006bba:	e07f      	b.n	8006cbc <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d024      	beq.n	8006c12 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bde:	1acb      	subs	r3, r1, r3
 8006be0:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006be2:	4608      	mov	r0, r1
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006bea:	1a41      	subs	r1, r0, r1
 8006bec:	fb03 f101 	mul.w	r1, r3, r1
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bfe:	1ac3      	subs	r3, r0, r3
 8006c00:	fb91 f3f3 	sdiv	r3, r1, r3
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	4413      	add	r3, r2
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006c0c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c0e:	833b      	strh	r3, [r7, #24]
 8006c10:	e054      	b.n	8006cbc <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006c12:	2202      	movs	r2, #2
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	4013      	ands	r3, r2
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d024      	beq.n	8006c68 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c34:	1acb      	subs	r3, r1, r3
 8006c36:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006c38:	4608      	mov	r0, r1
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006c40:	1a41      	subs	r1, r0, r1
 8006c42:	fb03 f101 	mul.w	r1, r3, r1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c54:	1ac3      	subs	r3, r0, r3
 8006c56:	fb91 f3f3 	sdiv	r3, r1, r3
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006c62:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c64:	837b      	strh	r3, [r7, #26]
 8006c66:	e029      	b.n	8006cbc <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006c68:	2201      	movs	r2, #1
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d023      	beq.n	8006cbc <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c82:	4619      	mov	r1, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c8a:	1acb      	subs	r3, r1, r3
 8006c8c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006c8e:	4608      	mov	r0, r1
 8006c90:	68f9      	ldr	r1, [r7, #12]
 8006c92:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006c96:	1a41      	subs	r1, r0, r1
 8006c98:	fb03 f101 	mul.w	r1, r3, r1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006caa:	1ac3      	subs	r3, r0, r3
 8006cac:	fb91 f3f3 	sdiv	r3, r1, r3
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006cb8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006cba:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006cbc:	7dfa      	ldrb	r2, [r7, #23]
 8006cbe:	7ffb      	ldrb	r3, [r7, #31]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d113      	bne.n	8006cec <clip_line+0x202>
                *x0 = x;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8b7a      	ldrh	r2, [r7, #26]
 8006cc8:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	8b3a      	ldrh	r2, [r7, #24]
 8006cce:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006cdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006ce0:	cb0c      	ldmia	r3, {r2, r3}
 8006ce2:	f7ff fec8 	bl	8006a76 <code>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e721      	b.n	8006b30 <clip_line+0x46>
            } else {
                *x1 = x;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8b7a      	ldrh	r2, [r7, #26]
 8006cf0:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	8b3a      	ldrh	r2, [r7, #24]
 8006cf6:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006d04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006d08:	cb0c      	ldmia	r3, {r2, r3}
 8006d0a:	f7ff feb4 	bl	8006a76 <code>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006d12:	e70d      	b.n	8006b30 <clip_line+0x46>
            break;
 8006d14:	bf00      	nop
            }
        }
    }

    return accept;
 8006d16:	7f7b      	ldrb	r3, [r7, #29]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3720      	adds	r7, #32
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	3306      	adds	r3, #6
 8006d30:	2208      	movs	r2, #8
 8006d32:	4619      	mov	r1, r3
 8006d34:	f001 f9ea 	bl	800810c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	330e      	adds	r3, #14
 8006d3c:	781a      	ldrb	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	330f      	adds	r3, #15
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	3310      	adds	r3, #16
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	72da      	strb	r2, [r3, #11]

    return 0;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08e      	sub	sp, #56	@ 0x38
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006d6c:	f107 0314 	add.w	r3, r7, #20
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff ffd4 	bl	8006d20 <fontx_meta>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8006d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <fontx_glyph+0x2c>
        return status;
 8006d86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d8a:	e077      	b.n	8006e7c <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006d8c:	7f7a      	ldrb	r2, [r7, #29]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006d92:	7fba      	ldrb	r2, [r7, #30]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006d98:	7f7b      	ldrb	r3, [r7, #29]
 8006d9a:	3307      	adds	r3, #7
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da00      	bge.n	8006da2 <fontx_glyph+0x42>
 8006da0:	3307      	adds	r3, #7
 8006da2:	10db      	asrs	r3, r3, #3
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	78da      	ldrb	r2, [r3, #3]
 8006dae:	7fbb      	ldrb	r3, [r7, #30]
 8006db0:	fb12 f303 	smulbb	r3, r2, r3
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006dba:	7ffb      	ldrb	r3, [r7, #31]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10f      	bne.n	8006de0 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2bff      	cmp	r3, #255	@ 0xff
 8006dc4:	d859      	bhi.n	8006e7a <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	789b      	ldrb	r3, [r3, #2]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	fb02 f303 	mul.w	r3, r2, r3
 8006dd2:	3311      	adds	r3, #17
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	441a      	add	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e04d      	b.n	8006e7c <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3312      	adds	r3, #18
 8006de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3311      	adds	r3, #17
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8006df2:	e03d      	b.n	8006e70 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	4413      	add	r3, r2
 8006e04:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e08:	3302      	adds	r3, #2
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e10:	3303      	adds	r3, #3
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	4413      	add	r3, r2
 8006e18:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d31c      	bcc.n	8006e5c <fontx_glyph+0xfc>
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d818      	bhi.n	8006e5c <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e32:	4413      	add	r3, r2
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3311      	adds	r3, #17
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	461a      	mov	r2, r3
                    nc * glyph->size
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	789b      	ldrb	r3, [r3, #2]
 8006e44:	4619      	mov	r1, r3
 8006e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e48:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	441a      	add	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e00f      	b.n	8006e7c <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006e5c:	6a3a      	ldr	r2, [r7, #32]
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	1ad2      	subs	r2, r2, r3
 8006e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e64:	4413      	add	r3, r2
 8006e66:	3301      	adds	r3, #1
 8006e68:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	1e5a      	subs	r2, r3, #1
 8006e74:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1bc      	bne.n	8006df4 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3738      	adds	r7, #56	@ 0x38
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	dd01      	ble.n	8006e9a <min+0x16>
        return b;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	e000      	b.n	8006e9c <min+0x18>
    };
    return a;
 8006e9a:	687b      	ldr	r3, [r7, #4]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <max>:

static inline int max(int a, int b) {
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	dd01      	ble.n	8006ebe <max+0x16>
        return a;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	e000      	b.n	8006ec0 <max+0x18>
    }
    return b;
 8006ebe:	683b      	ldr	r3, [r7, #0]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	80fb      	strh	r3, [r7, #6]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	80bb      	strh	r3, [r7, #4]
 8006eda:	4613      	mov	r3, r2
 8006edc:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ee2:	4a12      	ldr	r2, [pc, #72]	@ (8006f2c <hagl_put_pixel+0x60>)
 8006ee4:	8812      	ldrh	r2, [r2, #0]
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	db1a      	blt.n	8006f20 <hagl_put_pixel+0x54>
 8006eea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006eee:	4a0f      	ldr	r2, [pc, #60]	@ (8006f2c <hagl_put_pixel+0x60>)
 8006ef0:	8852      	ldrh	r2, [r2, #2]
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	db14      	blt.n	8006f20 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006efa:	4a0c      	ldr	r2, [pc, #48]	@ (8006f2c <hagl_put_pixel+0x60>)
 8006efc:	8892      	ldrh	r2, [r2, #4]
 8006efe:	4293      	cmp	r3, r2
 8006f00:	dc10      	bgt.n	8006f24 <hagl_put_pixel+0x58>
 8006f02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f06:	4a09      	ldr	r2, [pc, #36]	@ (8006f2c <hagl_put_pixel+0x60>)
 8006f08:	88d2      	ldrh	r2, [r2, #6]
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	dc0a      	bgt.n	8006f24 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f12:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006f16:	887a      	ldrh	r2, [r7, #2]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fa fe3d 	bl	8001b98 <lcdPutPixel>
 8006f1e:	e002      	b.n	8006f26 <hagl_put_pixel+0x5a>
        return;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <hagl_put_pixel+0x5a>
        return;
 8006f24:	bf00      	nop
}
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	2000020c 	.word	0x2000020c

08006f30 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006f30:	b590      	push	{r4, r7, lr}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4623      	mov	r3, r4
 8006f40:	80fb      	strh	r3, [r7, #6]
 8006f42:	4603      	mov	r3, r0
 8006f44:	80bb      	strh	r3, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	807b      	strh	r3, [r7, #2]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8006f4e:	88fa      	ldrh	r2, [r7, #6]
 8006f50:	887b      	ldrh	r3, [r7, #2]
 8006f52:	4413      	add	r3, r2
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	b21a      	sxth	r2, r3
 8006f58:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006f5c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006f60:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006f64:	883b      	ldrh	r3, [r7, #0]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	4623      	mov	r3, r4
 8006f6a:	f000 f827 	bl	8006fbc <hagl_draw_line>
#endif
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd90      	pop	{r4, r7, pc}

08006f76 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006f76:	b590      	push	{r4, r7, lr}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af02      	add	r7, sp, #8
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	4608      	mov	r0, r1
 8006f80:	4611      	mov	r1, r2
 8006f82:	461a      	mov	r2, r3
 8006f84:	4623      	mov	r3, r4
 8006f86:	80fb      	strh	r3, [r7, #6]
 8006f88:	4603      	mov	r3, r0
 8006f8a:	80bb      	strh	r3, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	807b      	strh	r3, [r7, #2]
 8006f90:	4613      	mov	r3, r2
 8006f92:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006f94:	88ba      	ldrh	r2, [r7, #4]
 8006f96:	887b      	ldrh	r3, [r7, #2]
 8006f98:	4413      	add	r3, r2
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	b21c      	sxth	r4, r3
 8006f9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fa2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006fa6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006faa:	883b      	ldrh	r3, [r7, #0]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4623      	mov	r3, r4
 8006fb0:	f000 f804 	bl	8006fbc <hagl_draw_line>
#endif
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd90      	pop	{r4, r7, pc}

08006fbc <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fbe:	b089      	sub	sp, #36	@ 0x24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4623      	mov	r3, r4
 8006fcc:	80fb      	strh	r3, [r7, #6]
 8006fce:	4603      	mov	r3, r0
 8006fd0:	80bb      	strh	r3, [r7, #4]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	807b      	strh	r3, [r7, #2]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006fda:	463b      	mov	r3, r7
 8006fdc:	1cba      	adds	r2, r7, #2
 8006fde:	1d3d      	adds	r5, r7, #4
 8006fe0:	1dbc      	adds	r4, r7, #6
 8006fe2:	494a      	ldr	r1, [pc, #296]	@ (800710c <hagl_draw_line+0x150>)
 8006fe4:	466e      	mov	r6, sp
 8006fe6:	c903      	ldmia	r1, {r0, r1}
 8006fe8:	e886 0003 	stmia.w	r6, {r0, r1}
 8006fec:	4629      	mov	r1, r5
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7ff fd7b 	bl	8006aea <clip_line>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f083 0301 	eor.w	r3, r3, #1
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d17e      	bne.n	80070fe <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8007000:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007004:	461a      	mov	r2, r3
 8007006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	bfb8      	it	lt
 8007010:	425b      	neglt	r3, r3
 8007012:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8007014:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007018:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800701c:	429a      	cmp	r2, r3
 800701e:	da01      	bge.n	8007024 <hagl_draw_line+0x68>
 8007020:	2301      	movs	r3, #1
 8007022:	e001      	b.n	8007028 <hagl_draw_line+0x6c>
 8007024:	f04f 33ff 	mov.w	r3, #4294967295
 8007028:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 800702a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800702e:	461a      	mov	r2, r3
 8007030:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	bfb8      	it	lt
 800703a:	425b      	neglt	r3, r3
 800703c:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800703e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007042:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007046:	429a      	cmp	r2, r3
 8007048:	da01      	bge.n	800704e <hagl_draw_line+0x92>
 800704a:	2301      	movs	r3, #1
 800704c:	e001      	b.n	8007052 <hagl_draw_line+0x96>
 800704e:	f04f 33ff 	mov.w	r3, #4294967295
 8007052:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8007054:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007058:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800705c:	429a      	cmp	r2, r3
 800705e:	dd06      	ble.n	800706e <hagl_draw_line+0xb2>
 8007060:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007064:	0fda      	lsrs	r2, r3, #31
 8007066:	4413      	add	r3, r2
 8007068:	105b      	asrs	r3, r3, #1
 800706a:	b21b      	sxth	r3, r3
 800706c:	e006      	b.n	800707c <hagl_draw_line+0xc0>
 800706e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007072:	0fda      	lsrs	r2, r3, #31
 8007074:	4413      	add	r3, r2
 8007076:	105b      	asrs	r3, r3, #1
 8007078:	425b      	negs	r3, r3
 800707a:	b21b      	sxth	r3, r3
 800707c:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800707e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007082:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007086:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff ff1f 	bl	8006ecc <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800708e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007092:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007096:	429a      	cmp	r2, r3
 8007098:	d105      	bne.n	80070a6 <hagl_draw_line+0xea>
 800709a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800709e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d02d      	beq.n	8007102 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 80070a6:	8afb      	ldrh	r3, [r7, #22]
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80070ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80070b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80070b6:	425b      	negs	r3, r3
 80070b8:	429a      	cmp	r2, r3
 80070ba:	dd0c      	ble.n	80070d6 <hagl_draw_line+0x11a>
            err -= dy;
 80070bc:	8afa      	ldrh	r2, [r7, #22]
 80070be:	8a3b      	ldrh	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80070c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	8a7b      	ldrh	r3, [r7, #18]
 80070ce:	4413      	add	r3, r2
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	b21b      	sxth	r3, r3
 80070d4:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 80070d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80070da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80070de:	429a      	cmp	r2, r3
 80070e0:	dacd      	bge.n	800707e <hagl_draw_line+0xc2>
            err += dx;
 80070e2:	8afa      	ldrh	r2, [r7, #22]
 80070e4:	8abb      	ldrh	r3, [r7, #20]
 80070e6:	4413      	add	r3, r2
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80070ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	89fb      	ldrh	r3, [r7, #14]
 80070f4:	4413      	add	r3, r2
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	b21b      	sxth	r3, r3
 80070fa:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80070fc:	e7bf      	b.n	800707e <hagl_draw_line+0xc2>
        return;
 80070fe:	bf00      	nop
 8007100:	e000      	b.n	8007104 <hagl_draw_line+0x148>
            break;
 8007102:	bf00      	nop
        }
    }
}
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710a:	bf00      	nop
 800710c:	2000020c 	.word	0x2000020c

08007110 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007110:	b590      	push	{r4, r7, lr}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	4611      	mov	r1, r2
 800711c:	461a      	mov	r2, r3
 800711e:	4623      	mov	r3, r4
 8007120:	80fb      	strh	r3, [r7, #6]
 8007122:	4603      	mov	r3, r0
 8007124:	80bb      	strh	r3, [r7, #4]
 8007126:	460b      	mov	r3, r1
 8007128:	807b      	strh	r3, [r7, #2]
 800712a:	4613      	mov	r3, r2
 800712c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800712e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007132:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007136:	429a      	cmp	r2, r3
 8007138:	dd0e      	ble.n	8007158 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	887b      	ldrh	r3, [r7, #2]
 800713e:	4413      	add	r3, r2
 8007140:	b29b      	uxth	r3, r3
 8007142:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007144:	88fa      	ldrh	r2, [r7, #6]
 8007146:	887b      	ldrh	r3, [r7, #2]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	b29b      	uxth	r3, r3
 800714c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800714e:	88fa      	ldrh	r2, [r7, #6]
 8007150:	887b      	ldrh	r3, [r7, #2]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	b29b      	uxth	r3, r3
 8007156:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007158:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800715c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007160:	429a      	cmp	r2, r3
 8007162:	dd0e      	ble.n	8007182 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8007164:	88ba      	ldrh	r2, [r7, #4]
 8007166:	883b      	ldrh	r3, [r7, #0]
 8007168:	4413      	add	r3, r2
 800716a:	b29b      	uxth	r3, r3
 800716c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800716e:	88ba      	ldrh	r2, [r7, #4]
 8007170:	883b      	ldrh	r3, [r7, #0]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	b29b      	uxth	r3, r3
 8007176:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007178:	88ba      	ldrh	r2, [r7, #4]
 800717a:	883b      	ldrh	r3, [r7, #0]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	b29b      	uxth	r3, r3
 8007180:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8007182:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007186:	4a24      	ldr	r2, [pc, #144]	@ (8007218 <hagl_draw_rectangle+0x108>)
 8007188:	8812      	ldrh	r2, [r2, #0]
 800718a:	4293      	cmp	r3, r2
 800718c:	db3e      	blt.n	800720c <hagl_draw_rectangle+0xfc>
 800718e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007192:	4a21      	ldr	r2, [pc, #132]	@ (8007218 <hagl_draw_rectangle+0x108>)
 8007194:	8852      	ldrh	r2, [r2, #2]
 8007196:	4293      	cmp	r3, r2
 8007198:	db38      	blt.n	800720c <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800719a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800719e:	4a1e      	ldr	r2, [pc, #120]	@ (8007218 <hagl_draw_rectangle+0x108>)
 80071a0:	8892      	ldrh	r2, [r2, #4]
 80071a2:	4293      	cmp	r3, r2
 80071a4:	dc34      	bgt.n	8007210 <hagl_draw_rectangle+0x100>
 80071a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007218 <hagl_draw_rectangle+0x108>)
 80071ac:	88d2      	ldrh	r2, [r2, #6]
 80071ae:	4293      	cmp	r3, r2
 80071b0:	dc2e      	bgt.n	8007210 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 80071b2:	887a      	ldrh	r2, [r7, #2]
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3301      	adds	r3, #1
 80071bc:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 80071be:	883a      	ldrh	r2, [r7, #0]
 80071c0:	88bb      	ldrh	r3, [r7, #4]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3301      	adds	r3, #1
 80071c8:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 80071ca:	8c3b      	ldrh	r3, [r7, #32]
 80071cc:	89fa      	ldrh	r2, [r7, #14]
 80071ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80071d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80071d6:	f7ff feab 	bl	8006f30 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 80071da:	8c3b      	ldrh	r3, [r7, #32]
 80071dc:	89fa      	ldrh	r2, [r7, #14]
 80071de:	f9b7 1000 	ldrsh.w	r1, [r7]
 80071e2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80071e6:	f7ff fea3 	bl	8006f30 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 80071ea:	8c3b      	ldrh	r3, [r7, #32]
 80071ec:	89ba      	ldrh	r2, [r7, #12]
 80071ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80071f2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80071f6:	f7ff febe 	bl	8006f76 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 80071fa:	8c3b      	ldrh	r3, [r7, #32]
 80071fc:	89ba      	ldrh	r2, [r7, #12]
 80071fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007202:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8007206:	f7ff feb6 	bl	8006f76 <hagl_draw_vline>
 800720a:	e002      	b.n	8007212 <hagl_draw_rectangle+0x102>
        return;
 800720c:	bf00      	nop
 800720e:	e000      	b.n	8007212 <hagl_draw_rectangle+0x102>
        return;
 8007210:	bf00      	nop
}
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	bd90      	pop	{r4, r7, pc}
 8007218:	2000020c 	.word	0x2000020c

0800721c <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	4611      	mov	r1, r2
 8007228:	461a      	mov	r2, r3
 800722a:	4623      	mov	r3, r4
 800722c:	80fb      	strh	r3, [r7, #6]
 800722e:	4603      	mov	r3, r0
 8007230:	80bb      	strh	r3, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	807b      	strh	r3, [r7, #2]
 8007236:	4613      	mov	r3, r2
 8007238:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800723a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800723e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007242:	429a      	cmp	r2, r3
 8007244:	dd0e      	ble.n	8007264 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8007246:	88fa      	ldrh	r2, [r7, #6]
 8007248:	887b      	ldrh	r3, [r7, #2]
 800724a:	4413      	add	r3, r2
 800724c:	b29b      	uxth	r3, r3
 800724e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	887b      	ldrh	r3, [r7, #2]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	b29b      	uxth	r3, r3
 8007258:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800725a:	88fa      	ldrh	r2, [r7, #6]
 800725c:	887b      	ldrh	r3, [r7, #2]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	b29b      	uxth	r3, r3
 8007262:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007264:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007268:	f9b7 3000 	ldrsh.w	r3, [r7]
 800726c:	429a      	cmp	r2, r3
 800726e:	dd0e      	ble.n	800728e <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8007270:	88ba      	ldrh	r2, [r7, #4]
 8007272:	883b      	ldrh	r3, [r7, #0]
 8007274:	4413      	add	r3, r2
 8007276:	b29b      	uxth	r3, r3
 8007278:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800727a:	88ba      	ldrh	r2, [r7, #4]
 800727c:	883b      	ldrh	r3, [r7, #0]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	b29b      	uxth	r3, r3
 8007282:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007284:	88ba      	ldrh	r2, [r7, #4]
 8007286:	883b      	ldrh	r3, [r7, #0]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	b29b      	uxth	r3, r3
 800728c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800728e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007292:	4a33      	ldr	r2, [pc, #204]	@ (8007360 <hagl_fill_rectangle+0x144>)
 8007294:	8812      	ldrh	r2, [r2, #0]
 8007296:	4293      	cmp	r3, r2
 8007298:	db5b      	blt.n	8007352 <hagl_fill_rectangle+0x136>
 800729a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800729e:	4a30      	ldr	r2, [pc, #192]	@ (8007360 <hagl_fill_rectangle+0x144>)
 80072a0:	8852      	ldrh	r2, [r2, #2]
 80072a2:	4293      	cmp	r3, r2
 80072a4:	db55      	blt.n	8007352 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80072a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072aa:	4a2d      	ldr	r2, [pc, #180]	@ (8007360 <hagl_fill_rectangle+0x144>)
 80072ac:	8892      	ldrh	r2, [r2, #4]
 80072ae:	4293      	cmp	r3, r2
 80072b0:	dc51      	bgt.n	8007356 <hagl_fill_rectangle+0x13a>
 80072b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80072b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007360 <hagl_fill_rectangle+0x144>)
 80072b8:	88d2      	ldrh	r2, [r2, #6]
 80072ba:	4293      	cmp	r3, r2
 80072bc:	dc4b      	bgt.n	8007356 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80072be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072c2:	4a27      	ldr	r2, [pc, #156]	@ (8007360 <hagl_fill_rectangle+0x144>)
 80072c4:	8812      	ldrh	r2, [r2, #0]
 80072c6:	4611      	mov	r1, r2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff fded 	bl	8006ea8 <max>
 80072ce:	4603      	mov	r3, r0
 80072d0:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80072d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80072d6:	4a22      	ldr	r2, [pc, #136]	@ (8007360 <hagl_fill_rectangle+0x144>)
 80072d8:	8852      	ldrh	r2, [r2, #2]
 80072da:	4611      	mov	r1, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff fde3 	bl	8006ea8 <max>
 80072e2:	4603      	mov	r3, r0
 80072e4:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 80072e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80072ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007360 <hagl_fill_rectangle+0x144>)
 80072ec:	8892      	ldrh	r2, [r2, #4]
 80072ee:	4611      	mov	r1, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff fdc7 	bl	8006e84 <min>
 80072f6:	4603      	mov	r3, r0
 80072f8:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80072fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80072fe:	4a18      	ldr	r2, [pc, #96]	@ (8007360 <hagl_fill_rectangle+0x144>)
 8007300:	88d2      	ldrh	r2, [r2, #6]
 8007302:	4611      	mov	r1, r2
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fdbd 	bl	8006e84 <min>
 800730a:	4603      	mov	r3, r0
 800730c:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800730e:	887a      	ldrh	r2, [r7, #2]
 8007310:	88fb      	ldrh	r3, [r7, #6]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	b29b      	uxth	r3, r3
 8007316:	3301      	adds	r3, #1
 8007318:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800731a:	883a      	ldrh	r2, [r7, #0]
 800731c:	88bb      	ldrh	r3, [r7, #4]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	b29b      	uxth	r3, r3
 8007322:	3301      	adds	r3, #1
 8007324:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8007326:	2300      	movs	r3, #0
 8007328:	81fb      	strh	r3, [r7, #14]
 800732a:	e00d      	b.n	8007348 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800732c:	88ba      	ldrh	r2, [r7, #4]
 800732e:	89fb      	ldrh	r3, [r7, #14]
 8007330:	4413      	add	r3, r2
 8007332:	b29b      	uxth	r3, r3
 8007334:	b219      	sxth	r1, r3
 8007336:	8c3b      	ldrh	r3, [r7, #32]
 8007338:	89ba      	ldrh	r2, [r7, #12]
 800733a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800733e:	f7ff fdf7 	bl	8006f30 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8007342:	89fb      	ldrh	r3, [r7, #14]
 8007344:	3301      	adds	r3, #1
 8007346:	81fb      	strh	r3, [r7, #14]
 8007348:	89fa      	ldrh	r2, [r7, #14]
 800734a:	897b      	ldrh	r3, [r7, #10]
 800734c:	429a      	cmp	r2, r3
 800734e:	d3ed      	bcc.n	800732c <hagl_fill_rectangle+0x110>
 8007350:	e002      	b.n	8007358 <hagl_fill_rectangle+0x13c>
        return;
 8007352:	bf00      	nop
 8007354:	e000      	b.n	8007358 <hagl_fill_rectangle+0x13c>
        return;
 8007356:	bf00      	nop
#endif
    }
}
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	bd90      	pop	{r4, r7, pc}
 800735e:	bf00      	nop
 8007360:	2000020c 	.word	0x2000020c

08007364 <hagl_put_char>:
    }

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font) {
 8007364:	b590      	push	{r4, r7, lr}
 8007366:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800736a:	b081      	sub	sp, #4
 800736c:	af00      	add	r7, sp, #0
 800736e:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8007372:	f844 0c34 	str.w	r0, [r4, #-52]
 8007376:	460c      	mov	r4, r1
 8007378:	4610      	mov	r0, r2
 800737a:	4619      	mov	r1, r3
 800737c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007380:	4622      	mov	r2, r4
 8007382:	f823 2c36 	strh.w	r2, [r3, #-54]
 8007386:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800738a:	4602      	mov	r2, r0
 800738c:	f823 2c38 	strh.w	r2, [r3, #-56]
 8007390:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007394:	460a      	mov	r2, r1
 8007396:	f823 2c3a 	strh.w	r2, [r3, #-58]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800739a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800739e:	4619      	mov	r1, r3
 80073a0:	f107 0320 	add.w	r3, r7, #32
 80073a4:	3b10      	subs	r3, #16
 80073a6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80073aa:	f102 0210 	add.w	r2, r2, #16
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	f851 1c34 	ldr.w	r1, [r1, #-52]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff fcd3 	bl	8006d60 <fontx_glyph>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80073c0:	f102 0215 	add.w	r2, r2, #21
 80073c4:	7013      	strb	r3, [r2, #0]
    if (0 != status) {
 80073c6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073ca:	f103 0315 	add.w	r3, r3, #21
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <hagl_put_char+0x74>
        return 0;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e1ac      	b.n	8007732 <hagl_put_char+0x3ce>
    }

    bitmap.width = glyph.width;
 80073d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073dc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80073e0:	461a      	mov	r2, r3
 80073e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073e6:	f823 2c28 	strh.w	r2, [r3, #-40]
    bitmap.height = glyph.height;
 80073ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073ee:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 80073f2:	461a      	mov	r2, r3
 80073f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073f8:	f823 2c26 	strh.w	r2, [r3, #-38]
    bitmap.depth = DISPLAY_DEPTH;
 80073fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007400:	2210      	movs	r2, #16
 8007402:	f803 2c22 	strb.w	r2, [r3, #-34]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8007406:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800740a:	3a18      	subs	r2, #24
 800740c:	f107 0320 	add.w	r3, r7, #32
 8007410:	3b08      	subs	r3, #8
 8007412:	4611      	mov	r1, r2
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff fb0b 	bl	8006a30 <bitmap_init>
    color_t *ptr = (color_t *) bitmap.buffer;
 800741a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800741e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007422:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007426:	f102 021c 	add.w	r2, r2, #28
 800742a:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800742c:	2300      	movs	r3, #0
 800742e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007432:	f102 021b 	add.w	r2, r2, #27
 8007436:	7013      	strb	r3, [r2, #0]
 8007438:	e071      	b.n	800751e <hagl_put_char+0x1ba>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800743a:	2300      	movs	r3, #0
 800743c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007440:	f102 021a 	add.w	r2, r2, #26
 8007444:	7013      	strb	r3, [r2, #0]
 8007446:	e047      	b.n	80074d8 <hagl_put_char+0x174>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8007448:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800744c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	b25a      	sxtb	r2, r3
 8007454:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007458:	f103 031a 	add.w	r3, r3, #26
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	f003 0307 	and.w	r3, r3, #7
 8007462:	2180      	movs	r1, #128	@ 0x80
 8007464:	fa41 f303 	asr.w	r3, r1, r3
 8007468:	b25b      	sxtb	r3, r3
 800746a:	4013      	ands	r3, r2
 800746c:	b25b      	sxtb	r3, r3
 800746e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007472:	f102 0209 	add.w	r2, r2, #9
 8007476:	7013      	strb	r3, [r2, #0]
            if (set) {
 8007478:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800747c:	f103 0309 	add.w	r3, r3, #9
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d010      	beq.n	80074a8 <hagl_put_char+0x144>
                *(ptr++) = color;
 8007486:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800748a:	f103 031c 	add.w	r3, r3, #28
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	1c9a      	adds	r2, r3, #2
 8007492:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8007496:	f101 011c 	add.w	r1, r1, #28
 800749a:	600a      	str	r2, [r1, #0]
 800749c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80074a0:	f832 2c3a 	ldrh.w	r2, [r2, #-58]
 80074a4:	801a      	strh	r2, [r3, #0]
 80074a6:	e00c      	b.n	80074c2 <hagl_put_char+0x15e>
            } else {
                *(ptr++) = 0x0000;
 80074a8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074ac:	f103 031c 	add.w	r3, r3, #28
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	1c9a      	adds	r2, r3, #2
 80074b4:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80074b8:	f101 011c 	add.w	r1, r1, #28
 80074bc:	600a      	str	r2, [r1, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80074c2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074c6:	f103 031a 	add.w	r3, r3, #26
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80074d2:	f102 021a 	add.w	r2, r2, #26
 80074d6:	7013      	strb	r3, [r2, #0]
 80074d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80074dc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80074e0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80074e4:	f102 021a 	add.w	r2, r2, #26
 80074e8:	7812      	ldrb	r2, [r2, #0]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d3ac      	bcc.n	8007448 <hagl_put_char+0xe4>
            }
        }
        glyph.buffer += glyph.pitch;
 80074ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80074f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80074f6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80074fa:	f812 2c2d 	ldrb.w	r2, [r2, #-45]
 80074fe:	4413      	add	r3, r2
 8007500:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007504:	f842 3c2c 	str.w	r3, [r2, #-44]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8007508:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800750c:	f103 031b 	add.w	r3, r3, #27
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007518:	f102 021b 	add.w	r2, r2, #27
 800751c:	7013      	strb	r3, [r2, #0]
 800751e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007522:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8007526:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800752a:	f102 021b 	add.w	r2, r2, #27
 800752e:	7812      	ldrb	r2, [r2, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d382      	bcc.n	800743a <hagl_put_char+0xd6>
    }

    // Modyfikacja: obsługa częściowego wyświetlania znaku
    int16_t start_x = max(0, -x0);
 8007534:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007538:	f933 3c36 	ldrsh.w	r3, [r3, #-54]
 800753c:	425b      	negs	r3, r3
 800753e:	4619      	mov	r1, r3
 8007540:	2000      	movs	r0, #0
 8007542:	f7ff fcb1 	bl	8006ea8 <max>
 8007546:	4603      	mov	r3, r0
 8007548:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800754c:	f102 0212 	add.w	r2, r2, #18
 8007550:	8013      	strh	r3, [r2, #0]
    int16_t start_y = max(0, -y0);
 8007552:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007556:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 800755a:	425b      	negs	r3, r3
 800755c:	4619      	mov	r1, r3
 800755e:	2000      	movs	r0, #0
 8007560:	f7ff fca2 	bl	8006ea8 <max>
 8007564:	4603      	mov	r3, r0
 8007566:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800756a:	f102 0210 	add.w	r2, r2, #16
 800756e:	8013      	strh	r3, [r2, #0]
    int16_t end_x = min(bitmap.width, LCD_WIDTH - x0);
 8007570:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007574:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8007578:	461a      	mov	r2, r3
 800757a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800757e:	f933 3c36 	ldrsh.w	r3, [r3, #-54]
 8007582:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f7ff fc7b 	bl	8006e84 <min>
 800758e:	4603      	mov	r3, r0
 8007590:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007594:	f102 020e 	add.w	r2, r2, #14
 8007598:	8013      	strh	r3, [r2, #0]
    int16_t end_y = min(bitmap.height, LCD_HEIGHT - y0);
 800759a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800759e:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 80075a2:	461a      	mov	r2, r3
 80075a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80075a8:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80075ac:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f7ff fc66 	bl	8006e84 <min>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80075be:	f102 020c 	add.w	r2, r2, #12
 80075c2:	8013      	strh	r3, [r2, #0]

    if (start_x < end_x && start_y < end_y) {
 80075c4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075c8:	f103 0312 	add.w	r3, r3, #18
 80075cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80075d0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075d4:	f103 030e 	add.w	r3, r3, #14
 80075d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075dc:	429a      	cmp	r2, r3
 80075de:	f280 80a3 	bge.w	8007728 <hagl_put_char+0x3c4>
 80075e2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075e6:	f103 0310 	add.w	r3, r3, #16
 80075ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80075ee:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075f2:	f103 030c 	add.w	r3, r3, #12
 80075f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	f280 8094 	bge.w	8007728 <hagl_put_char+0x3c4>
        for (int16_t y = start_y; y < end_y; y++) {
 8007600:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007604:	f103 0310 	add.w	r3, r3, #16
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800760e:	f102 0218 	add.w	r2, r2, #24
 8007612:	8013      	strh	r3, [r2, #0]
 8007614:	e079      	b.n	800770a <hagl_put_char+0x3a6>
            for (int16_t x = start_x; x < end_x; x++) {
 8007616:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800761a:	f103 0312 	add.w	r3, r3, #18
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007624:	f102 0216 	add.w	r2, r2, #22
 8007628:	8013      	strh	r3, [r2, #0]
 800762a:	e052      	b.n	80076d2 <hagl_put_char+0x36e>
                color_t pixel = buffer[y * bitmap.width + x];
 800762c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007630:	f103 0318 	add.w	r3, r3, #24
 8007634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007638:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800763c:	f832 2c28 	ldrh.w	r2, [r2, #-40]
 8007640:	fb03 f202 	mul.w	r2, r3, r2
 8007644:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007648:	f103 0316 	add.w	r3, r3, #22
 800764c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007650:	4413      	add	r3, r2
 8007652:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	4413      	add	r3, r2
 800765a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800765e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007662:	f102 020a 	add.w	r2, r2, #10
 8007666:	8013      	strh	r3, [r2, #0]
                if (pixel != 0x0000) { // tylko nieprzezroczyste piksele
 8007668:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800766c:	f103 030a 	add.w	r3, r3, #10
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01f      	beq.n	80076b6 <hagl_put_char+0x352>
                    hagl_put_pixel(x0 + x, y0 + y, pixel);
 8007676:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800767a:	f833 2c36 	ldrh.w	r2, [r3, #-54]
 800767e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007682:	f103 0316 	add.w	r3, r3, #22
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	4413      	add	r3, r2
 800768a:	b29b      	uxth	r3, r3
 800768c:	b218      	sxth	r0, r3
 800768e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007692:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 8007696:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800769a:	f103 0318 	add.w	r3, r3, #24
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	4413      	add	r3, r2
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	b21b      	sxth	r3, r3
 80076a6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076aa:	f102 020a 	add.w	r2, r2, #10
 80076ae:	8812      	ldrh	r2, [r2, #0]
 80076b0:	4619      	mov	r1, r3
 80076b2:	f7ff fc0b 	bl	8006ecc <hagl_put_pixel>
            for (int16_t x = start_x; x < end_x; x++) {
 80076b6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076ba:	f103 0316 	add.w	r3, r3, #22
 80076be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3301      	adds	r3, #1
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076cc:	f102 0216 	add.w	r2, r2, #22
 80076d0:	8013      	strh	r3, [r2, #0]
 80076d2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076d6:	f103 0316 	add.w	r3, r3, #22
 80076da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80076de:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076e2:	f103 030e 	add.w	r3, r3, #14
 80076e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	db9e      	blt.n	800762c <hagl_put_char+0x2c8>
        for (int16_t y = start_y; y < end_y; y++) {
 80076ee:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076f2:	f103 0318 	add.w	r3, r3, #24
 80076f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3301      	adds	r3, #1
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007704:	f102 0218 	add.w	r2, r2, #24
 8007708:	8013      	strh	r3, [r2, #0]
 800770a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800770e:	f103 0318 	add.w	r3, r3, #24
 8007712:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007716:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800771a:	f103 030c 	add.w	r3, r3, #12
 800771e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007722:	429a      	cmp	r2, r3
 8007724:	f6ff af77 	blt.w	8007616 <hagl_put_char+0x2b2>
                }
            }
        }
    }

    return bitmap.width;
 8007728:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800772c:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8007730:	b2db      	uxtb	r3, r3
}
 8007732:	4618      	mov	r0, r3
 8007734:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8007738:	3704      	adds	r7, #4
 800773a:	46bd      	mov	sp, r7
 800773c:	bd90      	pop	{r4, r7, pc}

0800773e <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b08c      	sub	sp, #48	@ 0x30
 8007742:	af02      	add	r7, sp, #8
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	4608      	mov	r0, r1
 8007748:	4611      	mov	r1, r2
 800774a:	461a      	mov	r2, r3
 800774c:	4603      	mov	r3, r0
 800774e:	817b      	strh	r3, [r7, #10]
 8007750:	460b      	mov	r3, r1
 8007752:	813b      	strh	r3, [r7, #8]
 8007754:	4613      	mov	r3, r2
 8007756:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8007758:	897b      	ldrh	r3, [r7, #10]
 800775a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800775c:	f107 0314 	add.w	r3, r7, #20
 8007760:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fadc 	bl	8006d20 <fontx_meta>
 8007768:	4603      	mov	r3, r0
 800776a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 800776e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <hagl_put_text+0x3c>
        return 0;
 8007776:	2300      	movs	r3, #0
 8007778:	e02c      	b.n	80077d4 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1d1a      	adds	r2, r3, #4
 800777e:	60fa      	str	r2, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	2b0d      	cmp	r3, #13
 8007788:	d002      	beq.n	8007790 <hagl_put_text+0x52>
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	2b0a      	cmp	r3, #10
 800778e:	d108      	bne.n	80077a2 <hagl_put_text+0x64>
            x0 = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8007794:	7fbb      	ldrb	r3, [r7, #30]
 8007796:	461a      	mov	r2, r3
 8007798:	893b      	ldrh	r3, [r7, #8]
 800779a:	4413      	add	r3, r2
 800779c:	b29b      	uxth	r3, r3
 800779e:	813b      	strh	r3, [r7, #8]
 80077a0:	e010      	b.n	80077c4 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80077a2:	88f8      	ldrh	r0, [r7, #6]
 80077a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80077a8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	6a38      	ldr	r0, [r7, #32]
 80077b4:	f7ff fdd6 	bl	8007364 <hagl_put_char>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	897b      	ldrh	r3, [r7, #10]
 80077be:	4413      	add	r3, r2
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1d6      	bne.n	800777a <hagl_put_text+0x3c>

    return x0 - original;
 80077cc:	897a      	ldrh	r2, [r7, #10]
 80077ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	b29b      	uxth	r3, r3
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3728      	adds	r7, #40	@ 0x28
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <hagl_draw_circle>:
#endif
}



void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 80077dc:	b590      	push	{r4, r7, lr}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	4611      	mov	r1, r2
 80077e8:	461a      	mov	r2, r3
 80077ea:	4623      	mov	r3, r4
 80077ec:	80fb      	strh	r3, [r7, #6]
 80077ee:	4603      	mov	r3, r0
 80077f0:	80bb      	strh	r3, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	807b      	strh	r3, [r7, #2]
 80077f6:	4613      	mov	r3, r2
 80077f8:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80077fe:	887b      	ldrh	r3, [r7, #2]
 8007800:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007802:	887b      	ldrh	r3, [r7, #2]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	b29b      	uxth	r3, r3
 8007808:	f1c3 0303 	rsb	r3, r3, #3
 800780c:	b29b      	uxth	r3, r3
 800780e:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 8007810:	88fa      	ldrh	r2, [r7, #6]
 8007812:	89fb      	ldrh	r3, [r7, #14]
 8007814:	4413      	add	r3, r2
 8007816:	b29b      	uxth	r3, r3
 8007818:	b218      	sxth	r0, r3
 800781a:	88ba      	ldrh	r2, [r7, #4]
 800781c:	89bb      	ldrh	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	b29b      	uxth	r3, r3
 8007822:	b21b      	sxth	r3, r3
 8007824:	883a      	ldrh	r2, [r7, #0]
 8007826:	4619      	mov	r1, r3
 8007828:	f7ff fb50 	bl	8006ecc <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	89fb      	ldrh	r3, [r7, #14]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	b29b      	uxth	r3, r3
 8007834:	b218      	sxth	r0, r3
 8007836:	88ba      	ldrh	r2, [r7, #4]
 8007838:	89bb      	ldrh	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	b21b      	sxth	r3, r3
 8007840:	883a      	ldrh	r2, [r7, #0]
 8007842:	4619      	mov	r1, r3
 8007844:	f7ff fb42 	bl	8006ecc <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8007848:	88fa      	ldrh	r2, [r7, #6]
 800784a:	89fb      	ldrh	r3, [r7, #14]
 800784c:	4413      	add	r3, r2
 800784e:	b29b      	uxth	r3, r3
 8007850:	b218      	sxth	r0, r3
 8007852:	88ba      	ldrh	r2, [r7, #4]
 8007854:	89bb      	ldrh	r3, [r7, #12]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	b29b      	uxth	r3, r3
 800785a:	b21b      	sxth	r3, r3
 800785c:	883a      	ldrh	r2, [r7, #0]
 800785e:	4619      	mov	r1, r3
 8007860:	f7ff fb34 	bl	8006ecc <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8007864:	88fa      	ldrh	r2, [r7, #6]
 8007866:	89fb      	ldrh	r3, [r7, #14]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	b29b      	uxth	r3, r3
 800786c:	b218      	sxth	r0, r3
 800786e:	88ba      	ldrh	r2, [r7, #4]
 8007870:	89bb      	ldrh	r3, [r7, #12]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	b29b      	uxth	r3, r3
 8007876:	b21b      	sxth	r3, r3
 8007878:	883a      	ldrh	r2, [r7, #0]
 800787a:	4619      	mov	r1, r3
 800787c:	f7ff fb26 	bl	8006ecc <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8007880:	88fa      	ldrh	r2, [r7, #6]
 8007882:	89bb      	ldrh	r3, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	b29b      	uxth	r3, r3
 8007888:	b218      	sxth	r0, r3
 800788a:	88ba      	ldrh	r2, [r7, #4]
 800788c:	89fb      	ldrh	r3, [r7, #14]
 800788e:	4413      	add	r3, r2
 8007890:	b29b      	uxth	r3, r3
 8007892:	b21b      	sxth	r3, r3
 8007894:	883a      	ldrh	r2, [r7, #0]
 8007896:	4619      	mov	r1, r3
 8007898:	f7ff fb18 	bl	8006ecc <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 800789c:	88fa      	ldrh	r2, [r7, #6]
 800789e:	89bb      	ldrh	r3, [r7, #12]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	b218      	sxth	r0, r3
 80078a6:	88ba      	ldrh	r2, [r7, #4]
 80078a8:	89fb      	ldrh	r3, [r7, #14]
 80078aa:	4413      	add	r3, r2
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	b21b      	sxth	r3, r3
 80078b0:	883a      	ldrh	r2, [r7, #0]
 80078b2:	4619      	mov	r1, r3
 80078b4:	f7ff fb0a 	bl	8006ecc <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 80078b8:	88fa      	ldrh	r2, [r7, #6]
 80078ba:	89bb      	ldrh	r3, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	b29b      	uxth	r3, r3
 80078c0:	b218      	sxth	r0, r3
 80078c2:	88ba      	ldrh	r2, [r7, #4]
 80078c4:	89fb      	ldrh	r3, [r7, #14]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	b21b      	sxth	r3, r3
 80078cc:	883a      	ldrh	r2, [r7, #0]
 80078ce:	4619      	mov	r1, r3
 80078d0:	f7ff fafc 	bl	8006ecc <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 80078d4:	88fa      	ldrh	r2, [r7, #6]
 80078d6:	89bb      	ldrh	r3, [r7, #12]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	b218      	sxth	r0, r3
 80078de:	88ba      	ldrh	r2, [r7, #4]
 80078e0:	89fb      	ldrh	r3, [r7, #14]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	b21b      	sxth	r3, r3
 80078e8:	883a      	ldrh	r2, [r7, #0]
 80078ea:	4619      	mov	r1, r3
 80078ec:	f7ff faee 	bl	8006ecc <hagl_put_pixel>

    while (y >= x) {
 80078f0:	e097      	b.n	8007a22 <hagl_draw_circle+0x246>
        x++;
 80078f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3301      	adds	r3, #1
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 80078fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007902:	2b00      	cmp	r3, #0
 8007904:	dd14      	ble.n	8007930 <hagl_draw_circle+0x154>
            y--;
 8007906:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29b      	uxth	r3, r3
 8007910:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007912:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007916:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	b29b      	uxth	r3, r3
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	b29a      	uxth	r2, r3
 8007922:	897b      	ldrh	r3, [r7, #10]
 8007924:	4413      	add	r3, r2
 8007926:	b29b      	uxth	r3, r3
 8007928:	330a      	adds	r3, #10
 800792a:	b29b      	uxth	r3, r3
 800792c:	817b      	strh	r3, [r7, #10]
 800792e:	e008      	b.n	8007942 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8007930:	89fb      	ldrh	r3, [r7, #14]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	b29a      	uxth	r2, r3
 8007936:	897b      	ldrh	r3, [r7, #10]
 8007938:	4413      	add	r3, r2
 800793a:	b29b      	uxth	r3, r3
 800793c:	3306      	adds	r3, #6
 800793e:	b29b      	uxth	r3, r3
 8007940:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	89fb      	ldrh	r3, [r7, #14]
 8007946:	4413      	add	r3, r2
 8007948:	b29b      	uxth	r3, r3
 800794a:	b218      	sxth	r0, r3
 800794c:	88ba      	ldrh	r2, [r7, #4]
 800794e:	89bb      	ldrh	r3, [r7, #12]
 8007950:	4413      	add	r3, r2
 8007952:	b29b      	uxth	r3, r3
 8007954:	b21b      	sxth	r3, r3
 8007956:	883a      	ldrh	r2, [r7, #0]
 8007958:	4619      	mov	r1, r3
 800795a:	f7ff fab7 	bl	8006ecc <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 800795e:	88fa      	ldrh	r2, [r7, #6]
 8007960:	89fb      	ldrh	r3, [r7, #14]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	b29b      	uxth	r3, r3
 8007966:	b218      	sxth	r0, r3
 8007968:	88ba      	ldrh	r2, [r7, #4]
 800796a:	89bb      	ldrh	r3, [r7, #12]
 800796c:	4413      	add	r3, r2
 800796e:	b29b      	uxth	r3, r3
 8007970:	b21b      	sxth	r3, r3
 8007972:	883a      	ldrh	r2, [r7, #0]
 8007974:	4619      	mov	r1, r3
 8007976:	f7ff faa9 	bl	8006ecc <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 800797a:	88fa      	ldrh	r2, [r7, #6]
 800797c:	89fb      	ldrh	r3, [r7, #14]
 800797e:	4413      	add	r3, r2
 8007980:	b29b      	uxth	r3, r3
 8007982:	b218      	sxth	r0, r3
 8007984:	88ba      	ldrh	r2, [r7, #4]
 8007986:	89bb      	ldrh	r3, [r7, #12]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	b29b      	uxth	r3, r3
 800798c:	b21b      	sxth	r3, r3
 800798e:	883a      	ldrh	r2, [r7, #0]
 8007990:	4619      	mov	r1, r3
 8007992:	f7ff fa9b 	bl	8006ecc <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8007996:	88fa      	ldrh	r2, [r7, #6]
 8007998:	89fb      	ldrh	r3, [r7, #14]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	b29b      	uxth	r3, r3
 800799e:	b218      	sxth	r0, r3
 80079a0:	88ba      	ldrh	r2, [r7, #4]
 80079a2:	89bb      	ldrh	r3, [r7, #12]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	b21b      	sxth	r3, r3
 80079aa:	883a      	ldrh	r2, [r7, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	f7ff fa8d 	bl	8006ecc <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 80079b2:	88fa      	ldrh	r2, [r7, #6]
 80079b4:	89bb      	ldrh	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	b218      	sxth	r0, r3
 80079bc:	88ba      	ldrh	r2, [r7, #4]
 80079be:	89fb      	ldrh	r3, [r7, #14]
 80079c0:	4413      	add	r3, r2
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	b21b      	sxth	r3, r3
 80079c6:	883a      	ldrh	r2, [r7, #0]
 80079c8:	4619      	mov	r1, r3
 80079ca:	f7ff fa7f 	bl	8006ecc <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	89bb      	ldrh	r3, [r7, #12]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	b218      	sxth	r0, r3
 80079d8:	88ba      	ldrh	r2, [r7, #4]
 80079da:	89fb      	ldrh	r3, [r7, #14]
 80079dc:	4413      	add	r3, r2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	b21b      	sxth	r3, r3
 80079e2:	883a      	ldrh	r2, [r7, #0]
 80079e4:	4619      	mov	r1, r3
 80079e6:	f7ff fa71 	bl	8006ecc <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	89bb      	ldrh	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	b218      	sxth	r0, r3
 80079f4:	88ba      	ldrh	r2, [r7, #4]
 80079f6:	89fb      	ldrh	r3, [r7, #14]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	b21b      	sxth	r3, r3
 80079fe:	883a      	ldrh	r2, [r7, #0]
 8007a00:	4619      	mov	r1, r3
 8007a02:	f7ff fa63 	bl	8006ecc <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8007a06:	88fa      	ldrh	r2, [r7, #6]
 8007a08:	89bb      	ldrh	r3, [r7, #12]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	b218      	sxth	r0, r3
 8007a10:	88ba      	ldrh	r2, [r7, #4]
 8007a12:	89fb      	ldrh	r3, [r7, #14]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	b21b      	sxth	r3, r3
 8007a1a:	883a      	ldrh	r2, [r7, #0]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	f7ff fa55 	bl	8006ecc <hagl_put_pixel>
    while (y >= x) {
 8007a22:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	f6bf af61 	bge.w	80078f2 <hagl_draw_circle+0x116>
    }
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd90      	pop	{r4, r7, pc}

08007a3a <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8007a3a:	b590      	push	{r4, r7, lr}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	4604      	mov	r4, r0
 8007a42:	4608      	mov	r0, r1
 8007a44:	4611      	mov	r1, r2
 8007a46:	461a      	mov	r2, r3
 8007a48:	4623      	mov	r3, r4
 8007a4a:	80fb      	strh	r3, [r7, #6]
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	80bb      	strh	r3, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	807b      	strh	r3, [r7, #2]
 8007a54:	4613      	mov	r3, r2
 8007a56:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8007a5c:	887b      	ldrh	r3, [r7, #2]
 8007a5e:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007a60:	887b      	ldrh	r3, [r7, #2]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f1c3 0303 	rsb	r3, r3, #3
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8007a6e:	e067      	b.n	8007b40 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8007a70:	88fa      	ldrh	r2, [r7, #6]
 8007a72:	89fb      	ldrh	r3, [r7, #14]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	b218      	sxth	r0, r3
 8007a7a:	88ba      	ldrh	r2, [r7, #4]
 8007a7c:	89bb      	ldrh	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	b219      	sxth	r1, r3
 8007a84:	89fb      	ldrh	r3, [r7, #14]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	883b      	ldrh	r3, [r7, #0]
 8007a8c:	f7ff fa50 	bl	8006f30 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8007a90:	88fa      	ldrh	r2, [r7, #6]
 8007a92:	89fb      	ldrh	r3, [r7, #14]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	b218      	sxth	r0, r3
 8007a9a:	88ba      	ldrh	r2, [r7, #4]
 8007a9c:	89bb      	ldrh	r3, [r7, #12]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	b219      	sxth	r1, r3
 8007aa4:	89fb      	ldrh	r3, [r7, #14]
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	883b      	ldrh	r3, [r7, #0]
 8007aac:	f7ff fa40 	bl	8006f30 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8007ab0:	88fa      	ldrh	r2, [r7, #6]
 8007ab2:	89bb      	ldrh	r3, [r7, #12]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	b218      	sxth	r0, r3
 8007aba:	88ba      	ldrh	r2, [r7, #4]
 8007abc:	89fb      	ldrh	r3, [r7, #14]
 8007abe:	4413      	add	r3, r2
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	b219      	sxth	r1, r3
 8007ac4:	89bb      	ldrh	r3, [r7, #12]
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	883b      	ldrh	r3, [r7, #0]
 8007acc:	f7ff fa30 	bl	8006f30 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8007ad0:	88fa      	ldrh	r2, [r7, #6]
 8007ad2:	89bb      	ldrh	r3, [r7, #12]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	b218      	sxth	r0, r3
 8007ada:	88ba      	ldrh	r2, [r7, #4]
 8007adc:	89fb      	ldrh	r3, [r7, #14]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	b219      	sxth	r1, r3
 8007ae4:	89bb      	ldrh	r3, [r7, #12]
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	883b      	ldrh	r3, [r7, #0]
 8007aec:	f7ff fa20 	bl	8006f30 <hagl_draw_hline>
        x++;
 8007af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3301      	adds	r3, #1
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007afc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	dd14      	ble.n	8007b2e <hagl_fill_circle+0xf4>
            y--;
 8007b04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007b10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007b14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	897b      	ldrh	r3, [r7, #10]
 8007b22:	4413      	add	r3, r2
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	330a      	adds	r3, #10
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	817b      	strh	r3, [r7, #10]
 8007b2c:	e008      	b.n	8007b40 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8007b2e:	89fb      	ldrh	r3, [r7, #14]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	897b      	ldrh	r3, [r7, #10]
 8007b36:	4413      	add	r3, r2
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3306      	adds	r3, #6
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8007b40:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007b44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	da91      	bge.n	8007a70 <hagl_fill_circle+0x36>
        }
    }
}
 8007b4c:	bf00      	nop
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd90      	pop	{r4, r7, pc}

08007b56 <hagl_draw_polygon>:



void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007b56:	b590      	push	{r4, r7, lr}
 8007b58:	b087      	sub	sp, #28
 8007b5a:	af02      	add	r7, sp, #8
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	6039      	str	r1, [r7, #0]
 8007b60:	80fb      	strh	r3, [r7, #6]
 8007b62:	4613      	mov	r3, r2
 8007b64:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8007b66:	2300      	movs	r3, #0
 8007b68:	81fb      	strh	r3, [r7, #14]
 8007b6a:	e02a      	b.n	8007bc2 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8007b6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	4413      	add	r3, r2
        hagl_draw_line(
 8007b76:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8007b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	3302      	adds	r3, #2
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	4413      	add	r3, r2
        hagl_draw_line(
 8007b86:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8007b8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	4413      	add	r3, r2
        hagl_draw_line(
 8007b96:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8007b9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	3306      	adds	r3, #6
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	4413      	add	r3, r2
        hagl_draw_line(
 8007ba6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007baa:	88bb      	ldrh	r3, [r7, #4]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	4622      	mov	r2, r4
 8007bb2:	f7ff fa03 	bl	8006fbc <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	81fb      	strh	r3, [r7, #14]
 8007bc2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	dbcd      	blt.n	8007b6c <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	3302      	adds	r3, #2
    hagl_draw_line(
 8007bda:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8007bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007be2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007be6:	3b01      	subs	r3, #1
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	4413      	add	r3, r2
    hagl_draw_line(
 8007bee:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	3b02      	subs	r3, #2
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	4413      	add	r3, r2
    hagl_draw_line(
 8007bfe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007c02:	88bb      	ldrh	r3, [r7, #4]
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	4613      	mov	r3, r2
 8007c08:	4622      	mov	r2, r4
 8007c0a:	f7ff f9d7 	bl	8006fbc <hagl_draw_line>
        color
    );
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd90      	pop	{r4, r7, pc}

08007c16 <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b0ac      	sub	sp, #176	@ 0xb0
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	6039      	str	r1, [r7, #0]
 8007c20:	80fb      	strh	r3, [r7, #6]
 8007c22:	4613      	mov	r3, r2
 8007c24:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8007c26:	2380      	movs	r3, #128	@ 0x80
 8007c28:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007c32:	2300      	movs	r3, #0
 8007c34:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007c38:	e02e      	b.n	8007c98 <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8007c3a:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	3302      	adds	r3, #2
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	4413      	add	r3, r2
 8007c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c4a:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	dd08      	ble.n	8007c64 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8007c52:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	3302      	adds	r3, #2
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8007c64:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	3302      	adds	r3, #2
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c74:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	da08      	bge.n	8007c8e <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8007c7c:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	3302      	adds	r3, #2
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	4413      	add	r3, r2
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8007c8e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c92:	3301      	adds	r3, #1
 8007c94:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007c98:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8007c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	dbca      	blt.n	8007c3a <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007ca4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007ca8:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007cac:	e144      	b.n	8007f38 <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007cb4:	88fb      	ldrh	r3, [r7, #6]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007cc4:	e0a6      	b.n	8007e14 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007cc6:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cd4:	ee07 3a90 	vmov	s15, r3
 8007cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cdc:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007ce0:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	3302      	adds	r3, #2
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	4413      	add	r3, r2
 8007cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cf0:	ee07 3a90 	vmov	s15, r3
 8007cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cf8:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007cfc:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4413      	add	r3, r2
 8007d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d12:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007d16:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	3302      	adds	r3, #2
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	4413      	add	r3, r2
 8007d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d2e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007d32:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007d3e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4a:	d50c      	bpl.n	8007d66 <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007d4c:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d50:	ee07 3a90 	vmov	s15, r3
 8007d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d58:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007d5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d64:	da19      	bge.n	8007d9a <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007d66:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007d72:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7e:	d53e      	bpl.n	8007dfe <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007d80:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d8c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d98:	db31      	blt.n	8007dfe <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007d9a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007da6:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007daa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007dae:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007db2:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbe:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007dc2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007dc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007dca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dce:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dda:	ee17 3a90 	vmov	r3, s15
 8007dde:	b21a      	sxth	r2, r3
 8007de0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007de4:	b292      	uxth	r2, r2
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	33b0      	adds	r3, #176	@ 0xb0
 8007dea:	443b      	add	r3, r7
 8007dec:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007df0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3301      	adds	r3, #1
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007dfe:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007e02:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007e06:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007e14:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007e18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	f6ff af52 	blt.w	8007cc6 <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007e28:	e046      	b.n	8007eb8 <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007e2a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	33b0      	adds	r3, #176	@ 0xb0
 8007e32:	443b      	add	r3, r7
 8007e34:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007e38:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	33b0      	adds	r3, #176	@ 0xb0
 8007e42:	443b      	add	r3, r7
 8007e44:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d92e      	bls.n	8007eaa <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8007e4c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	33b0      	adds	r3, #176	@ 0xb0
 8007e54:	443b      	add	r3, r7
 8007e56:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007e5a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8007e5e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e62:	3301      	adds	r3, #1
 8007e64:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	33b0      	adds	r3, #176	@ 0xb0
 8007e6c:	443b      	add	r3, r7
 8007e6e:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007e72:	0053      	lsls	r3, r2, #1
 8007e74:	33b0      	adds	r3, #176	@ 0xb0
 8007e76:	443b      	add	r3, r7
 8007e78:	460a      	mov	r2, r1
 8007e7a:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8007e7e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e82:	3301      	adds	r3, #1
 8007e84:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	33b0      	adds	r3, #176	@ 0xb0
 8007e8c:	443b      	add	r3, r7
 8007e8e:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007e92:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00e      	beq.n	8007eb8 <hagl_fill_polygon+0x2a2>
                    i--;
 8007e9a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007ea8:	e006      	b.n	8007eb8 <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 8007eaa:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007eb8:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007ebc:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	dbb1      	blt.n	8007e2a <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007ecc:	e027      	b.n	8007f1e <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007ece:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	33b0      	adds	r3, #176	@ 0xb0
 8007ed8:	443b      	add	r3, r7
 8007eda:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007ede:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	33b0      	adds	r3, #176	@ 0xb0
 8007ee6:	443b      	add	r3, r7
 8007ee8:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007ef4:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	33b0      	adds	r3, #176	@ 0xb0
 8007efc:	443b      	add	r3, r7
 8007efe:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007f02:	b218      	sxth	r0, r3
 8007f04:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8007f08:	88bb      	ldrh	r3, [r7, #4]
 8007f0a:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8007f0e:	f7ff f80f 	bl	8006f30 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007f12:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007f16:	3302      	adds	r3, #2
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007f1e:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007f22:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007f26:	429a      	cmp	r2, r3
 8007f28:	dbd1      	blt.n	8007ece <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 8007f2a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3301      	adds	r3, #1
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007f38:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8007f3c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007f40:	429a      	cmp	r2, r3
 8007f42:	f6ff aeb4 	blt.w	8007cae <hagl_fill_polygon+0x98>
        }
    }
}
 8007f46:	bf00      	nop
 8007f48:	bf00      	nop
 8007f4a:	37b0      	adds	r7, #176	@ 0xb0
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007f50:	b590      	push	{r4, r7, lr}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	4623      	mov	r3, r4
 8007f60:	80fb      	strh	r3, [r7, #6]
 8007f62:	4603      	mov	r3, r0
 8007f64:	80bb      	strh	r3, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	807b      	strh	r3, [r7, #2]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007f6e:	88fb      	ldrh	r3, [r7, #6]
 8007f70:	81bb      	strh	r3, [r7, #12]
 8007f72:	88bb      	ldrh	r3, [r7, #4]
 8007f74:	81fb      	strh	r3, [r7, #14]
 8007f76:	887b      	ldrh	r3, [r7, #2]
 8007f78:	823b      	strh	r3, [r7, #16]
 8007f7a:	883b      	ldrh	r3, [r7, #0]
 8007f7c:	827b      	strh	r3, [r7, #18]
 8007f7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f80:	82bb      	strh	r3, [r7, #20]
 8007f82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007f84:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 8007f86:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007f88:	f107 030c 	add.w	r3, r7, #12
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	2003      	movs	r0, #3
 8007f90:	f7ff fde1 	bl	8007b56 <hagl_draw_polygon>
};
 8007f94:	bf00      	nop
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd90      	pop	{r4, r7, pc}

08007f9c <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	461a      	mov	r2, r3
 8007faa:	4623      	mov	r3, r4
 8007fac:	80fb      	strh	r3, [r7, #6]
 8007fae:	4603      	mov	r3, r0
 8007fb0:	80bb      	strh	r3, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	807b      	strh	r3, [r7, #2]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	81bb      	strh	r3, [r7, #12]
 8007fbe:	88bb      	ldrh	r3, [r7, #4]
 8007fc0:	81fb      	strh	r3, [r7, #14]
 8007fc2:	887b      	ldrh	r3, [r7, #2]
 8007fc4:	823b      	strh	r3, [r7, #16]
 8007fc6:	883b      	ldrh	r3, [r7, #0]
 8007fc8:	827b      	strh	r3, [r7, #18]
 8007fca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007fcc:	82bb      	strh	r3, [r7, #20]
 8007fce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007fd0:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007fd2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007fd4:	f107 030c 	add.w	r3, r7, #12
 8007fd8:	4619      	mov	r1, r3
 8007fda:	2003      	movs	r0, #3
 8007fdc:	f7ff fe1b 	bl	8007c16 <hagl_fill_polygon>
}
 8007fe0:	bf00      	nop
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd90      	pop	{r4, r7, pc}

08007fe8 <_vsniprintf_r>:
 8007fe8:	b530      	push	{r4, r5, lr}
 8007fea:	4614      	mov	r4, r2
 8007fec:	2c00      	cmp	r4, #0
 8007fee:	b09b      	sub	sp, #108	@ 0x6c
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	da05      	bge.n	8008002 <_vsniprintf_r+0x1a>
 8007ff6:	238b      	movs	r3, #139	@ 0x8b
 8007ff8:	6003      	str	r3, [r0, #0]
 8007ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffe:	b01b      	add	sp, #108	@ 0x6c
 8008000:	bd30      	pop	{r4, r5, pc}
 8008002:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008006:	f8ad 300c 	strh.w	r3, [sp, #12]
 800800a:	bf14      	ite	ne
 800800c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008010:	4623      	moveq	r3, r4
 8008012:	9302      	str	r3, [sp, #8]
 8008014:	9305      	str	r3, [sp, #20]
 8008016:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800801a:	9100      	str	r1, [sp, #0]
 800801c:	9104      	str	r1, [sp, #16]
 800801e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008022:	4669      	mov	r1, sp
 8008024:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008026:	f000 f9d3 	bl	80083d0 <_svfiprintf_r>
 800802a:	1c43      	adds	r3, r0, #1
 800802c:	bfbc      	itt	lt
 800802e:	238b      	movlt	r3, #139	@ 0x8b
 8008030:	602b      	strlt	r3, [r5, #0]
 8008032:	2c00      	cmp	r4, #0
 8008034:	d0e3      	beq.n	8007ffe <_vsniprintf_r+0x16>
 8008036:	9b00      	ldr	r3, [sp, #0]
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	e7df      	b.n	8007ffe <_vsniprintf_r+0x16>
	...

08008040 <vsniprintf>:
 8008040:	b507      	push	{r0, r1, r2, lr}
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	460a      	mov	r2, r1
 8008048:	4601      	mov	r1, r0
 800804a:	4803      	ldr	r0, [pc, #12]	@ (8008058 <vsniprintf+0x18>)
 800804c:	6800      	ldr	r0, [r0, #0]
 800804e:	f7ff ffcb 	bl	8007fe8 <_vsniprintf_r>
 8008052:	b003      	add	sp, #12
 8008054:	f85d fb04 	ldr.w	pc, [sp], #4
 8008058:	20000214 	.word	0x20000214

0800805c <memcmp>:
 800805c:	b510      	push	{r4, lr}
 800805e:	3901      	subs	r1, #1
 8008060:	4402      	add	r2, r0
 8008062:	4290      	cmp	r0, r2
 8008064:	d101      	bne.n	800806a <memcmp+0xe>
 8008066:	2000      	movs	r0, #0
 8008068:	e005      	b.n	8008076 <memcmp+0x1a>
 800806a:	7803      	ldrb	r3, [r0, #0]
 800806c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008070:	42a3      	cmp	r3, r4
 8008072:	d001      	beq.n	8008078 <memcmp+0x1c>
 8008074:	1b18      	subs	r0, r3, r4
 8008076:	bd10      	pop	{r4, pc}
 8008078:	3001      	adds	r0, #1
 800807a:	e7f2      	b.n	8008062 <memcmp+0x6>

0800807c <memset>:
 800807c:	4402      	add	r2, r0
 800807e:	4603      	mov	r3, r0
 8008080:	4293      	cmp	r3, r2
 8008082:	d100      	bne.n	8008086 <memset+0xa>
 8008084:	4770      	bx	lr
 8008086:	f803 1b01 	strb.w	r1, [r3], #1
 800808a:	e7f9      	b.n	8008080 <memset+0x4>

0800808c <strncpy>:
 800808c:	b510      	push	{r4, lr}
 800808e:	3901      	subs	r1, #1
 8008090:	4603      	mov	r3, r0
 8008092:	b132      	cbz	r2, 80080a2 <strncpy+0x16>
 8008094:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008098:	f803 4b01 	strb.w	r4, [r3], #1
 800809c:	3a01      	subs	r2, #1
 800809e:	2c00      	cmp	r4, #0
 80080a0:	d1f7      	bne.n	8008092 <strncpy+0x6>
 80080a2:	441a      	add	r2, r3
 80080a4:	2100      	movs	r1, #0
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d100      	bne.n	80080ac <strncpy+0x20>
 80080aa:	bd10      	pop	{r4, pc}
 80080ac:	f803 1b01 	strb.w	r1, [r3], #1
 80080b0:	e7f9      	b.n	80080a6 <strncpy+0x1a>
	...

080080b4 <__errno>:
 80080b4:	4b01      	ldr	r3, [pc, #4]	@ (80080bc <__errno+0x8>)
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20000214 	.word	0x20000214

080080c0 <__libc_init_array>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	4d0d      	ldr	r5, [pc, #52]	@ (80080f8 <__libc_init_array+0x38>)
 80080c4:	4c0d      	ldr	r4, [pc, #52]	@ (80080fc <__libc_init_array+0x3c>)
 80080c6:	1b64      	subs	r4, r4, r5
 80080c8:	10a4      	asrs	r4, r4, #2
 80080ca:	2600      	movs	r6, #0
 80080cc:	42a6      	cmp	r6, r4
 80080ce:	d109      	bne.n	80080e4 <__libc_init_array+0x24>
 80080d0:	4d0b      	ldr	r5, [pc, #44]	@ (8008100 <__libc_init_array+0x40>)
 80080d2:	4c0c      	ldr	r4, [pc, #48]	@ (8008104 <__libc_init_array+0x44>)
 80080d4:	f000 fc66 	bl	80089a4 <_init>
 80080d8:	1b64      	subs	r4, r4, r5
 80080da:	10a4      	asrs	r4, r4, #2
 80080dc:	2600      	movs	r6, #0
 80080de:	42a6      	cmp	r6, r4
 80080e0:	d105      	bne.n	80080ee <__libc_init_array+0x2e>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e8:	4798      	blx	r3
 80080ea:	3601      	adds	r6, #1
 80080ec:	e7ee      	b.n	80080cc <__libc_init_array+0xc>
 80080ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f2:	4798      	blx	r3
 80080f4:	3601      	adds	r6, #1
 80080f6:	e7f2      	b.n	80080de <__libc_init_array+0x1e>
 80080f8:	08011fc4 	.word	0x08011fc4
 80080fc:	08011fc4 	.word	0x08011fc4
 8008100:	08011fc4 	.word	0x08011fc4
 8008104:	08011fc8 	.word	0x08011fc8

08008108 <__retarget_lock_acquire_recursive>:
 8008108:	4770      	bx	lr

0800810a <__retarget_lock_release_recursive>:
 800810a:	4770      	bx	lr

0800810c <memcpy>:
 800810c:	440a      	add	r2, r1
 800810e:	4291      	cmp	r1, r2
 8008110:	f100 33ff 	add.w	r3, r0, #4294967295
 8008114:	d100      	bne.n	8008118 <memcpy+0xc>
 8008116:	4770      	bx	lr
 8008118:	b510      	push	{r4, lr}
 800811a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800811e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008122:	4291      	cmp	r1, r2
 8008124:	d1f9      	bne.n	800811a <memcpy+0xe>
 8008126:	bd10      	pop	{r4, pc}

08008128 <_free_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4605      	mov	r5, r0
 800812c:	2900      	cmp	r1, #0
 800812e:	d041      	beq.n	80081b4 <_free_r+0x8c>
 8008130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008134:	1f0c      	subs	r4, r1, #4
 8008136:	2b00      	cmp	r3, #0
 8008138:	bfb8      	it	lt
 800813a:	18e4      	addlt	r4, r4, r3
 800813c:	f000 f8e0 	bl	8008300 <__malloc_lock>
 8008140:	4a1d      	ldr	r2, [pc, #116]	@ (80081b8 <_free_r+0x90>)
 8008142:	6813      	ldr	r3, [r2, #0]
 8008144:	b933      	cbnz	r3, 8008154 <_free_r+0x2c>
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	6014      	str	r4, [r2, #0]
 800814a:	4628      	mov	r0, r5
 800814c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008150:	f000 b8dc 	b.w	800830c <__malloc_unlock>
 8008154:	42a3      	cmp	r3, r4
 8008156:	d908      	bls.n	800816a <_free_r+0x42>
 8008158:	6820      	ldr	r0, [r4, #0]
 800815a:	1821      	adds	r1, r4, r0
 800815c:	428b      	cmp	r3, r1
 800815e:	bf01      	itttt	eq
 8008160:	6819      	ldreq	r1, [r3, #0]
 8008162:	685b      	ldreq	r3, [r3, #4]
 8008164:	1809      	addeq	r1, r1, r0
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	e7ed      	b.n	8008146 <_free_r+0x1e>
 800816a:	461a      	mov	r2, r3
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	b10b      	cbz	r3, 8008174 <_free_r+0x4c>
 8008170:	42a3      	cmp	r3, r4
 8008172:	d9fa      	bls.n	800816a <_free_r+0x42>
 8008174:	6811      	ldr	r1, [r2, #0]
 8008176:	1850      	adds	r0, r2, r1
 8008178:	42a0      	cmp	r0, r4
 800817a:	d10b      	bne.n	8008194 <_free_r+0x6c>
 800817c:	6820      	ldr	r0, [r4, #0]
 800817e:	4401      	add	r1, r0
 8008180:	1850      	adds	r0, r2, r1
 8008182:	4283      	cmp	r3, r0
 8008184:	6011      	str	r1, [r2, #0]
 8008186:	d1e0      	bne.n	800814a <_free_r+0x22>
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	6053      	str	r3, [r2, #4]
 800818e:	4408      	add	r0, r1
 8008190:	6010      	str	r0, [r2, #0]
 8008192:	e7da      	b.n	800814a <_free_r+0x22>
 8008194:	d902      	bls.n	800819c <_free_r+0x74>
 8008196:	230c      	movs	r3, #12
 8008198:	602b      	str	r3, [r5, #0]
 800819a:	e7d6      	b.n	800814a <_free_r+0x22>
 800819c:	6820      	ldr	r0, [r4, #0]
 800819e:	1821      	adds	r1, r4, r0
 80081a0:	428b      	cmp	r3, r1
 80081a2:	bf04      	itt	eq
 80081a4:	6819      	ldreq	r1, [r3, #0]
 80081a6:	685b      	ldreq	r3, [r3, #4]
 80081a8:	6063      	str	r3, [r4, #4]
 80081aa:	bf04      	itt	eq
 80081ac:	1809      	addeq	r1, r1, r0
 80081ae:	6021      	streq	r1, [r4, #0]
 80081b0:	6054      	str	r4, [r2, #4]
 80081b2:	e7ca      	b.n	800814a <_free_r+0x22>
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
 80081b6:	bf00      	nop
 80081b8:	2000b018 	.word	0x2000b018

080081bc <sbrk_aligned>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	4e0f      	ldr	r6, [pc, #60]	@ (80081fc <sbrk_aligned+0x40>)
 80081c0:	460c      	mov	r4, r1
 80081c2:	6831      	ldr	r1, [r6, #0]
 80081c4:	4605      	mov	r5, r0
 80081c6:	b911      	cbnz	r1, 80081ce <sbrk_aligned+0x12>
 80081c8:	f000 fba6 	bl	8008918 <_sbrk_r>
 80081cc:	6030      	str	r0, [r6, #0]
 80081ce:	4621      	mov	r1, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f000 fba1 	bl	8008918 <_sbrk_r>
 80081d6:	1c43      	adds	r3, r0, #1
 80081d8:	d103      	bne.n	80081e2 <sbrk_aligned+0x26>
 80081da:	f04f 34ff 	mov.w	r4, #4294967295
 80081de:	4620      	mov	r0, r4
 80081e0:	bd70      	pop	{r4, r5, r6, pc}
 80081e2:	1cc4      	adds	r4, r0, #3
 80081e4:	f024 0403 	bic.w	r4, r4, #3
 80081e8:	42a0      	cmp	r0, r4
 80081ea:	d0f8      	beq.n	80081de <sbrk_aligned+0x22>
 80081ec:	1a21      	subs	r1, r4, r0
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 fb92 	bl	8008918 <_sbrk_r>
 80081f4:	3001      	adds	r0, #1
 80081f6:	d1f2      	bne.n	80081de <sbrk_aligned+0x22>
 80081f8:	e7ef      	b.n	80081da <sbrk_aligned+0x1e>
 80081fa:	bf00      	nop
 80081fc:	2000b014 	.word	0x2000b014

08008200 <_malloc_r>:
 8008200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008204:	1ccd      	adds	r5, r1, #3
 8008206:	f025 0503 	bic.w	r5, r5, #3
 800820a:	3508      	adds	r5, #8
 800820c:	2d0c      	cmp	r5, #12
 800820e:	bf38      	it	cc
 8008210:	250c      	movcc	r5, #12
 8008212:	2d00      	cmp	r5, #0
 8008214:	4606      	mov	r6, r0
 8008216:	db01      	blt.n	800821c <_malloc_r+0x1c>
 8008218:	42a9      	cmp	r1, r5
 800821a:	d904      	bls.n	8008226 <_malloc_r+0x26>
 800821c:	230c      	movs	r3, #12
 800821e:	6033      	str	r3, [r6, #0]
 8008220:	2000      	movs	r0, #0
 8008222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082fc <_malloc_r+0xfc>
 800822a:	f000 f869 	bl	8008300 <__malloc_lock>
 800822e:	f8d8 3000 	ldr.w	r3, [r8]
 8008232:	461c      	mov	r4, r3
 8008234:	bb44      	cbnz	r4, 8008288 <_malloc_r+0x88>
 8008236:	4629      	mov	r1, r5
 8008238:	4630      	mov	r0, r6
 800823a:	f7ff ffbf 	bl	80081bc <sbrk_aligned>
 800823e:	1c43      	adds	r3, r0, #1
 8008240:	4604      	mov	r4, r0
 8008242:	d158      	bne.n	80082f6 <_malloc_r+0xf6>
 8008244:	f8d8 4000 	ldr.w	r4, [r8]
 8008248:	4627      	mov	r7, r4
 800824a:	2f00      	cmp	r7, #0
 800824c:	d143      	bne.n	80082d6 <_malloc_r+0xd6>
 800824e:	2c00      	cmp	r4, #0
 8008250:	d04b      	beq.n	80082ea <_malloc_r+0xea>
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	4639      	mov	r1, r7
 8008256:	4630      	mov	r0, r6
 8008258:	eb04 0903 	add.w	r9, r4, r3
 800825c:	f000 fb5c 	bl	8008918 <_sbrk_r>
 8008260:	4581      	cmp	r9, r0
 8008262:	d142      	bne.n	80082ea <_malloc_r+0xea>
 8008264:	6821      	ldr	r1, [r4, #0]
 8008266:	1a6d      	subs	r5, r5, r1
 8008268:	4629      	mov	r1, r5
 800826a:	4630      	mov	r0, r6
 800826c:	f7ff ffa6 	bl	80081bc <sbrk_aligned>
 8008270:	3001      	adds	r0, #1
 8008272:	d03a      	beq.n	80082ea <_malloc_r+0xea>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	442b      	add	r3, r5
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	f8d8 3000 	ldr.w	r3, [r8]
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	bb62      	cbnz	r2, 80082dc <_malloc_r+0xdc>
 8008282:	f8c8 7000 	str.w	r7, [r8]
 8008286:	e00f      	b.n	80082a8 <_malloc_r+0xa8>
 8008288:	6822      	ldr	r2, [r4, #0]
 800828a:	1b52      	subs	r2, r2, r5
 800828c:	d420      	bmi.n	80082d0 <_malloc_r+0xd0>
 800828e:	2a0b      	cmp	r2, #11
 8008290:	d917      	bls.n	80082c2 <_malloc_r+0xc2>
 8008292:	1961      	adds	r1, r4, r5
 8008294:	42a3      	cmp	r3, r4
 8008296:	6025      	str	r5, [r4, #0]
 8008298:	bf18      	it	ne
 800829a:	6059      	strne	r1, [r3, #4]
 800829c:	6863      	ldr	r3, [r4, #4]
 800829e:	bf08      	it	eq
 80082a0:	f8c8 1000 	streq.w	r1, [r8]
 80082a4:	5162      	str	r2, [r4, r5]
 80082a6:	604b      	str	r3, [r1, #4]
 80082a8:	4630      	mov	r0, r6
 80082aa:	f000 f82f 	bl	800830c <__malloc_unlock>
 80082ae:	f104 000b 	add.w	r0, r4, #11
 80082b2:	1d23      	adds	r3, r4, #4
 80082b4:	f020 0007 	bic.w	r0, r0, #7
 80082b8:	1ac2      	subs	r2, r0, r3
 80082ba:	bf1c      	itt	ne
 80082bc:	1a1b      	subne	r3, r3, r0
 80082be:	50a3      	strne	r3, [r4, r2]
 80082c0:	e7af      	b.n	8008222 <_malloc_r+0x22>
 80082c2:	6862      	ldr	r2, [r4, #4]
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	bf0c      	ite	eq
 80082c8:	f8c8 2000 	streq.w	r2, [r8]
 80082cc:	605a      	strne	r2, [r3, #4]
 80082ce:	e7eb      	b.n	80082a8 <_malloc_r+0xa8>
 80082d0:	4623      	mov	r3, r4
 80082d2:	6864      	ldr	r4, [r4, #4]
 80082d4:	e7ae      	b.n	8008234 <_malloc_r+0x34>
 80082d6:	463c      	mov	r4, r7
 80082d8:	687f      	ldr	r7, [r7, #4]
 80082da:	e7b6      	b.n	800824a <_malloc_r+0x4a>
 80082dc:	461a      	mov	r2, r3
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	d1fb      	bne.n	80082dc <_malloc_r+0xdc>
 80082e4:	2300      	movs	r3, #0
 80082e6:	6053      	str	r3, [r2, #4]
 80082e8:	e7de      	b.n	80082a8 <_malloc_r+0xa8>
 80082ea:	230c      	movs	r3, #12
 80082ec:	6033      	str	r3, [r6, #0]
 80082ee:	4630      	mov	r0, r6
 80082f0:	f000 f80c 	bl	800830c <__malloc_unlock>
 80082f4:	e794      	b.n	8008220 <_malloc_r+0x20>
 80082f6:	6005      	str	r5, [r0, #0]
 80082f8:	e7d6      	b.n	80082a8 <_malloc_r+0xa8>
 80082fa:	bf00      	nop
 80082fc:	2000b018 	.word	0x2000b018

08008300 <__malloc_lock>:
 8008300:	4801      	ldr	r0, [pc, #4]	@ (8008308 <__malloc_lock+0x8>)
 8008302:	f7ff bf01 	b.w	8008108 <__retarget_lock_acquire_recursive>
 8008306:	bf00      	nop
 8008308:	2000b010 	.word	0x2000b010

0800830c <__malloc_unlock>:
 800830c:	4801      	ldr	r0, [pc, #4]	@ (8008314 <__malloc_unlock+0x8>)
 800830e:	f7ff befc 	b.w	800810a <__retarget_lock_release_recursive>
 8008312:	bf00      	nop
 8008314:	2000b010 	.word	0x2000b010

08008318 <__ssputs_r>:
 8008318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800831c:	688e      	ldr	r6, [r1, #8]
 800831e:	461f      	mov	r7, r3
 8008320:	42be      	cmp	r6, r7
 8008322:	680b      	ldr	r3, [r1, #0]
 8008324:	4682      	mov	sl, r0
 8008326:	460c      	mov	r4, r1
 8008328:	4690      	mov	r8, r2
 800832a:	d82d      	bhi.n	8008388 <__ssputs_r+0x70>
 800832c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008330:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008334:	d026      	beq.n	8008384 <__ssputs_r+0x6c>
 8008336:	6965      	ldr	r5, [r4, #20]
 8008338:	6909      	ldr	r1, [r1, #16]
 800833a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800833e:	eba3 0901 	sub.w	r9, r3, r1
 8008342:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008346:	1c7b      	adds	r3, r7, #1
 8008348:	444b      	add	r3, r9
 800834a:	106d      	asrs	r5, r5, #1
 800834c:	429d      	cmp	r5, r3
 800834e:	bf38      	it	cc
 8008350:	461d      	movcc	r5, r3
 8008352:	0553      	lsls	r3, r2, #21
 8008354:	d527      	bpl.n	80083a6 <__ssputs_r+0x8e>
 8008356:	4629      	mov	r1, r5
 8008358:	f7ff ff52 	bl	8008200 <_malloc_r>
 800835c:	4606      	mov	r6, r0
 800835e:	b360      	cbz	r0, 80083ba <__ssputs_r+0xa2>
 8008360:	6921      	ldr	r1, [r4, #16]
 8008362:	464a      	mov	r2, r9
 8008364:	f7ff fed2 	bl	800810c <memcpy>
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800836e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008372:	81a3      	strh	r3, [r4, #12]
 8008374:	6126      	str	r6, [r4, #16]
 8008376:	6165      	str	r5, [r4, #20]
 8008378:	444e      	add	r6, r9
 800837a:	eba5 0509 	sub.w	r5, r5, r9
 800837e:	6026      	str	r6, [r4, #0]
 8008380:	60a5      	str	r5, [r4, #8]
 8008382:	463e      	mov	r6, r7
 8008384:	42be      	cmp	r6, r7
 8008386:	d900      	bls.n	800838a <__ssputs_r+0x72>
 8008388:	463e      	mov	r6, r7
 800838a:	6820      	ldr	r0, [r4, #0]
 800838c:	4632      	mov	r2, r6
 800838e:	4641      	mov	r1, r8
 8008390:	f000 faa8 	bl	80088e4 <memmove>
 8008394:	68a3      	ldr	r3, [r4, #8]
 8008396:	1b9b      	subs	r3, r3, r6
 8008398:	60a3      	str	r3, [r4, #8]
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	4433      	add	r3, r6
 800839e:	6023      	str	r3, [r4, #0]
 80083a0:	2000      	movs	r0, #0
 80083a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a6:	462a      	mov	r2, r5
 80083a8:	f000 fac6 	bl	8008938 <_realloc_r>
 80083ac:	4606      	mov	r6, r0
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d1e0      	bne.n	8008374 <__ssputs_r+0x5c>
 80083b2:	6921      	ldr	r1, [r4, #16]
 80083b4:	4650      	mov	r0, sl
 80083b6:	f7ff feb7 	bl	8008128 <_free_r>
 80083ba:	230c      	movs	r3, #12
 80083bc:	f8ca 3000 	str.w	r3, [sl]
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	e7e9      	b.n	80083a2 <__ssputs_r+0x8a>
	...

080083d0 <_svfiprintf_r>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	4698      	mov	r8, r3
 80083d6:	898b      	ldrh	r3, [r1, #12]
 80083d8:	061b      	lsls	r3, r3, #24
 80083da:	b09d      	sub	sp, #116	@ 0x74
 80083dc:	4607      	mov	r7, r0
 80083de:	460d      	mov	r5, r1
 80083e0:	4614      	mov	r4, r2
 80083e2:	d510      	bpl.n	8008406 <_svfiprintf_r+0x36>
 80083e4:	690b      	ldr	r3, [r1, #16]
 80083e6:	b973      	cbnz	r3, 8008406 <_svfiprintf_r+0x36>
 80083e8:	2140      	movs	r1, #64	@ 0x40
 80083ea:	f7ff ff09 	bl	8008200 <_malloc_r>
 80083ee:	6028      	str	r0, [r5, #0]
 80083f0:	6128      	str	r0, [r5, #16]
 80083f2:	b930      	cbnz	r0, 8008402 <_svfiprintf_r+0x32>
 80083f4:	230c      	movs	r3, #12
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	f04f 30ff 	mov.w	r0, #4294967295
 80083fc:	b01d      	add	sp, #116	@ 0x74
 80083fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008402:	2340      	movs	r3, #64	@ 0x40
 8008404:	616b      	str	r3, [r5, #20]
 8008406:	2300      	movs	r3, #0
 8008408:	9309      	str	r3, [sp, #36]	@ 0x24
 800840a:	2320      	movs	r3, #32
 800840c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008410:	f8cd 800c 	str.w	r8, [sp, #12]
 8008414:	2330      	movs	r3, #48	@ 0x30
 8008416:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085b4 <_svfiprintf_r+0x1e4>
 800841a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800841e:	f04f 0901 	mov.w	r9, #1
 8008422:	4623      	mov	r3, r4
 8008424:	469a      	mov	sl, r3
 8008426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800842a:	b10a      	cbz	r2, 8008430 <_svfiprintf_r+0x60>
 800842c:	2a25      	cmp	r2, #37	@ 0x25
 800842e:	d1f9      	bne.n	8008424 <_svfiprintf_r+0x54>
 8008430:	ebba 0b04 	subs.w	fp, sl, r4
 8008434:	d00b      	beq.n	800844e <_svfiprintf_r+0x7e>
 8008436:	465b      	mov	r3, fp
 8008438:	4622      	mov	r2, r4
 800843a:	4629      	mov	r1, r5
 800843c:	4638      	mov	r0, r7
 800843e:	f7ff ff6b 	bl	8008318 <__ssputs_r>
 8008442:	3001      	adds	r0, #1
 8008444:	f000 80a7 	beq.w	8008596 <_svfiprintf_r+0x1c6>
 8008448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800844a:	445a      	add	r2, fp
 800844c:	9209      	str	r2, [sp, #36]	@ 0x24
 800844e:	f89a 3000 	ldrb.w	r3, [sl]
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 809f 	beq.w	8008596 <_svfiprintf_r+0x1c6>
 8008458:	2300      	movs	r3, #0
 800845a:	f04f 32ff 	mov.w	r2, #4294967295
 800845e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008462:	f10a 0a01 	add.w	sl, sl, #1
 8008466:	9304      	str	r3, [sp, #16]
 8008468:	9307      	str	r3, [sp, #28]
 800846a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800846e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008470:	4654      	mov	r4, sl
 8008472:	2205      	movs	r2, #5
 8008474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008478:	484e      	ldr	r0, [pc, #312]	@ (80085b4 <_svfiprintf_r+0x1e4>)
 800847a:	f7f7 feb1 	bl	80001e0 <memchr>
 800847e:	9a04      	ldr	r2, [sp, #16]
 8008480:	b9d8      	cbnz	r0, 80084ba <_svfiprintf_r+0xea>
 8008482:	06d0      	lsls	r0, r2, #27
 8008484:	bf44      	itt	mi
 8008486:	2320      	movmi	r3, #32
 8008488:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800848c:	0711      	lsls	r1, r2, #28
 800848e:	bf44      	itt	mi
 8008490:	232b      	movmi	r3, #43	@ 0x2b
 8008492:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008496:	f89a 3000 	ldrb.w	r3, [sl]
 800849a:	2b2a      	cmp	r3, #42	@ 0x2a
 800849c:	d015      	beq.n	80084ca <_svfiprintf_r+0xfa>
 800849e:	9a07      	ldr	r2, [sp, #28]
 80084a0:	4654      	mov	r4, sl
 80084a2:	2000      	movs	r0, #0
 80084a4:	f04f 0c0a 	mov.w	ip, #10
 80084a8:	4621      	mov	r1, r4
 80084aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ae:	3b30      	subs	r3, #48	@ 0x30
 80084b0:	2b09      	cmp	r3, #9
 80084b2:	d94b      	bls.n	800854c <_svfiprintf_r+0x17c>
 80084b4:	b1b0      	cbz	r0, 80084e4 <_svfiprintf_r+0x114>
 80084b6:	9207      	str	r2, [sp, #28]
 80084b8:	e014      	b.n	80084e4 <_svfiprintf_r+0x114>
 80084ba:	eba0 0308 	sub.w	r3, r0, r8
 80084be:	fa09 f303 	lsl.w	r3, r9, r3
 80084c2:	4313      	orrs	r3, r2
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	46a2      	mov	sl, r4
 80084c8:	e7d2      	b.n	8008470 <_svfiprintf_r+0xa0>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	1d19      	adds	r1, r3, #4
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	9103      	str	r1, [sp, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	bfbb      	ittet	lt
 80084d6:	425b      	neglt	r3, r3
 80084d8:	f042 0202 	orrlt.w	r2, r2, #2
 80084dc:	9307      	strge	r3, [sp, #28]
 80084de:	9307      	strlt	r3, [sp, #28]
 80084e0:	bfb8      	it	lt
 80084e2:	9204      	strlt	r2, [sp, #16]
 80084e4:	7823      	ldrb	r3, [r4, #0]
 80084e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80084e8:	d10a      	bne.n	8008500 <_svfiprintf_r+0x130>
 80084ea:	7863      	ldrb	r3, [r4, #1]
 80084ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ee:	d132      	bne.n	8008556 <_svfiprintf_r+0x186>
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	1d1a      	adds	r2, r3, #4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	9203      	str	r2, [sp, #12]
 80084f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084fc:	3402      	adds	r4, #2
 80084fe:	9305      	str	r3, [sp, #20]
 8008500:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80085c4 <_svfiprintf_r+0x1f4>
 8008504:	7821      	ldrb	r1, [r4, #0]
 8008506:	2203      	movs	r2, #3
 8008508:	4650      	mov	r0, sl
 800850a:	f7f7 fe69 	bl	80001e0 <memchr>
 800850e:	b138      	cbz	r0, 8008520 <_svfiprintf_r+0x150>
 8008510:	9b04      	ldr	r3, [sp, #16]
 8008512:	eba0 000a 	sub.w	r0, r0, sl
 8008516:	2240      	movs	r2, #64	@ 0x40
 8008518:	4082      	lsls	r2, r0
 800851a:	4313      	orrs	r3, r2
 800851c:	3401      	adds	r4, #1
 800851e:	9304      	str	r3, [sp, #16]
 8008520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008524:	4824      	ldr	r0, [pc, #144]	@ (80085b8 <_svfiprintf_r+0x1e8>)
 8008526:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800852a:	2206      	movs	r2, #6
 800852c:	f7f7 fe58 	bl	80001e0 <memchr>
 8008530:	2800      	cmp	r0, #0
 8008532:	d036      	beq.n	80085a2 <_svfiprintf_r+0x1d2>
 8008534:	4b21      	ldr	r3, [pc, #132]	@ (80085bc <_svfiprintf_r+0x1ec>)
 8008536:	bb1b      	cbnz	r3, 8008580 <_svfiprintf_r+0x1b0>
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	3307      	adds	r3, #7
 800853c:	f023 0307 	bic.w	r3, r3, #7
 8008540:	3308      	adds	r3, #8
 8008542:	9303      	str	r3, [sp, #12]
 8008544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008546:	4433      	add	r3, r6
 8008548:	9309      	str	r3, [sp, #36]	@ 0x24
 800854a:	e76a      	b.n	8008422 <_svfiprintf_r+0x52>
 800854c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008550:	460c      	mov	r4, r1
 8008552:	2001      	movs	r0, #1
 8008554:	e7a8      	b.n	80084a8 <_svfiprintf_r+0xd8>
 8008556:	2300      	movs	r3, #0
 8008558:	3401      	adds	r4, #1
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	4619      	mov	r1, r3
 800855e:	f04f 0c0a 	mov.w	ip, #10
 8008562:	4620      	mov	r0, r4
 8008564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008568:	3a30      	subs	r2, #48	@ 0x30
 800856a:	2a09      	cmp	r2, #9
 800856c:	d903      	bls.n	8008576 <_svfiprintf_r+0x1a6>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0c6      	beq.n	8008500 <_svfiprintf_r+0x130>
 8008572:	9105      	str	r1, [sp, #20]
 8008574:	e7c4      	b.n	8008500 <_svfiprintf_r+0x130>
 8008576:	fb0c 2101 	mla	r1, ip, r1, r2
 800857a:	4604      	mov	r4, r0
 800857c:	2301      	movs	r3, #1
 800857e:	e7f0      	b.n	8008562 <_svfiprintf_r+0x192>
 8008580:	ab03      	add	r3, sp, #12
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	462a      	mov	r2, r5
 8008586:	4b0e      	ldr	r3, [pc, #56]	@ (80085c0 <_svfiprintf_r+0x1f0>)
 8008588:	a904      	add	r1, sp, #16
 800858a:	4638      	mov	r0, r7
 800858c:	f3af 8000 	nop.w
 8008590:	1c42      	adds	r2, r0, #1
 8008592:	4606      	mov	r6, r0
 8008594:	d1d6      	bne.n	8008544 <_svfiprintf_r+0x174>
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	065b      	lsls	r3, r3, #25
 800859a:	f53f af2d 	bmi.w	80083f8 <_svfiprintf_r+0x28>
 800859e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085a0:	e72c      	b.n	80083fc <_svfiprintf_r+0x2c>
 80085a2:	ab03      	add	r3, sp, #12
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	462a      	mov	r2, r5
 80085a8:	4b05      	ldr	r3, [pc, #20]	@ (80085c0 <_svfiprintf_r+0x1f0>)
 80085aa:	a904      	add	r1, sp, #16
 80085ac:	4638      	mov	r0, r7
 80085ae:	f000 f879 	bl	80086a4 <_printf_i>
 80085b2:	e7ed      	b.n	8008590 <_svfiprintf_r+0x1c0>
 80085b4:	08011f88 	.word	0x08011f88
 80085b8:	08011f92 	.word	0x08011f92
 80085bc:	00000000 	.word	0x00000000
 80085c0:	08008319 	.word	0x08008319
 80085c4:	08011f8e 	.word	0x08011f8e

080085c8 <_printf_common>:
 80085c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	4616      	mov	r6, r2
 80085ce:	4698      	mov	r8, r3
 80085d0:	688a      	ldr	r2, [r1, #8]
 80085d2:	690b      	ldr	r3, [r1, #16]
 80085d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085d8:	4293      	cmp	r3, r2
 80085da:	bfb8      	it	lt
 80085dc:	4613      	movlt	r3, r2
 80085de:	6033      	str	r3, [r6, #0]
 80085e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085e4:	4607      	mov	r7, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	b10a      	cbz	r2, 80085ee <_printf_common+0x26>
 80085ea:	3301      	adds	r3, #1
 80085ec:	6033      	str	r3, [r6, #0]
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	0699      	lsls	r1, r3, #26
 80085f2:	bf42      	ittt	mi
 80085f4:	6833      	ldrmi	r3, [r6, #0]
 80085f6:	3302      	addmi	r3, #2
 80085f8:	6033      	strmi	r3, [r6, #0]
 80085fa:	6825      	ldr	r5, [r4, #0]
 80085fc:	f015 0506 	ands.w	r5, r5, #6
 8008600:	d106      	bne.n	8008610 <_printf_common+0x48>
 8008602:	f104 0a19 	add.w	sl, r4, #25
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	6832      	ldr	r2, [r6, #0]
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	42ab      	cmp	r3, r5
 800860e:	dc26      	bgt.n	800865e <_printf_common+0x96>
 8008610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008614:	6822      	ldr	r2, [r4, #0]
 8008616:	3b00      	subs	r3, #0
 8008618:	bf18      	it	ne
 800861a:	2301      	movne	r3, #1
 800861c:	0692      	lsls	r2, r2, #26
 800861e:	d42b      	bmi.n	8008678 <_printf_common+0xb0>
 8008620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008624:	4641      	mov	r1, r8
 8008626:	4638      	mov	r0, r7
 8008628:	47c8      	blx	r9
 800862a:	3001      	adds	r0, #1
 800862c:	d01e      	beq.n	800866c <_printf_common+0xa4>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	6922      	ldr	r2, [r4, #16]
 8008632:	f003 0306 	and.w	r3, r3, #6
 8008636:	2b04      	cmp	r3, #4
 8008638:	bf02      	ittt	eq
 800863a:	68e5      	ldreq	r5, [r4, #12]
 800863c:	6833      	ldreq	r3, [r6, #0]
 800863e:	1aed      	subeq	r5, r5, r3
 8008640:	68a3      	ldr	r3, [r4, #8]
 8008642:	bf0c      	ite	eq
 8008644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008648:	2500      	movne	r5, #0
 800864a:	4293      	cmp	r3, r2
 800864c:	bfc4      	itt	gt
 800864e:	1a9b      	subgt	r3, r3, r2
 8008650:	18ed      	addgt	r5, r5, r3
 8008652:	2600      	movs	r6, #0
 8008654:	341a      	adds	r4, #26
 8008656:	42b5      	cmp	r5, r6
 8008658:	d11a      	bne.n	8008690 <_printf_common+0xc8>
 800865a:	2000      	movs	r0, #0
 800865c:	e008      	b.n	8008670 <_printf_common+0xa8>
 800865e:	2301      	movs	r3, #1
 8008660:	4652      	mov	r2, sl
 8008662:	4641      	mov	r1, r8
 8008664:	4638      	mov	r0, r7
 8008666:	47c8      	blx	r9
 8008668:	3001      	adds	r0, #1
 800866a:	d103      	bne.n	8008674 <_printf_common+0xac>
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008674:	3501      	adds	r5, #1
 8008676:	e7c6      	b.n	8008606 <_printf_common+0x3e>
 8008678:	18e1      	adds	r1, r4, r3
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	2030      	movs	r0, #48	@ 0x30
 800867e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008682:	4422      	add	r2, r4
 8008684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800868c:	3302      	adds	r3, #2
 800868e:	e7c7      	b.n	8008620 <_printf_common+0x58>
 8008690:	2301      	movs	r3, #1
 8008692:	4622      	mov	r2, r4
 8008694:	4641      	mov	r1, r8
 8008696:	4638      	mov	r0, r7
 8008698:	47c8      	blx	r9
 800869a:	3001      	adds	r0, #1
 800869c:	d0e6      	beq.n	800866c <_printf_common+0xa4>
 800869e:	3601      	adds	r6, #1
 80086a0:	e7d9      	b.n	8008656 <_printf_common+0x8e>
	...

080086a4 <_printf_i>:
 80086a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	7e0f      	ldrb	r7, [r1, #24]
 80086aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086ac:	2f78      	cmp	r7, #120	@ 0x78
 80086ae:	4691      	mov	r9, r2
 80086b0:	4680      	mov	r8, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	469a      	mov	sl, r3
 80086b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086ba:	d807      	bhi.n	80086cc <_printf_i+0x28>
 80086bc:	2f62      	cmp	r7, #98	@ 0x62
 80086be:	d80a      	bhi.n	80086d6 <_printf_i+0x32>
 80086c0:	2f00      	cmp	r7, #0
 80086c2:	f000 80d2 	beq.w	800886a <_printf_i+0x1c6>
 80086c6:	2f58      	cmp	r7, #88	@ 0x58
 80086c8:	f000 80b9 	beq.w	800883e <_printf_i+0x19a>
 80086cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086d4:	e03a      	b.n	800874c <_printf_i+0xa8>
 80086d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086da:	2b15      	cmp	r3, #21
 80086dc:	d8f6      	bhi.n	80086cc <_printf_i+0x28>
 80086de:	a101      	add	r1, pc, #4	@ (adr r1, 80086e4 <_printf_i+0x40>)
 80086e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086e4:	0800873d 	.word	0x0800873d
 80086e8:	08008751 	.word	0x08008751
 80086ec:	080086cd 	.word	0x080086cd
 80086f0:	080086cd 	.word	0x080086cd
 80086f4:	080086cd 	.word	0x080086cd
 80086f8:	080086cd 	.word	0x080086cd
 80086fc:	08008751 	.word	0x08008751
 8008700:	080086cd 	.word	0x080086cd
 8008704:	080086cd 	.word	0x080086cd
 8008708:	080086cd 	.word	0x080086cd
 800870c:	080086cd 	.word	0x080086cd
 8008710:	08008851 	.word	0x08008851
 8008714:	0800877b 	.word	0x0800877b
 8008718:	0800880b 	.word	0x0800880b
 800871c:	080086cd 	.word	0x080086cd
 8008720:	080086cd 	.word	0x080086cd
 8008724:	08008873 	.word	0x08008873
 8008728:	080086cd 	.word	0x080086cd
 800872c:	0800877b 	.word	0x0800877b
 8008730:	080086cd 	.word	0x080086cd
 8008734:	080086cd 	.word	0x080086cd
 8008738:	08008813 	.word	0x08008813
 800873c:	6833      	ldr	r3, [r6, #0]
 800873e:	1d1a      	adds	r2, r3, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6032      	str	r2, [r6, #0]
 8008744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800874c:	2301      	movs	r3, #1
 800874e:	e09d      	b.n	800888c <_printf_i+0x1e8>
 8008750:	6833      	ldr	r3, [r6, #0]
 8008752:	6820      	ldr	r0, [r4, #0]
 8008754:	1d19      	adds	r1, r3, #4
 8008756:	6031      	str	r1, [r6, #0]
 8008758:	0606      	lsls	r6, r0, #24
 800875a:	d501      	bpl.n	8008760 <_printf_i+0xbc>
 800875c:	681d      	ldr	r5, [r3, #0]
 800875e:	e003      	b.n	8008768 <_printf_i+0xc4>
 8008760:	0645      	lsls	r5, r0, #25
 8008762:	d5fb      	bpl.n	800875c <_printf_i+0xb8>
 8008764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008768:	2d00      	cmp	r5, #0
 800876a:	da03      	bge.n	8008774 <_printf_i+0xd0>
 800876c:	232d      	movs	r3, #45	@ 0x2d
 800876e:	426d      	negs	r5, r5
 8008770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008774:	4859      	ldr	r0, [pc, #356]	@ (80088dc <_printf_i+0x238>)
 8008776:	230a      	movs	r3, #10
 8008778:	e011      	b.n	800879e <_printf_i+0xfa>
 800877a:	6821      	ldr	r1, [r4, #0]
 800877c:	6833      	ldr	r3, [r6, #0]
 800877e:	0608      	lsls	r0, r1, #24
 8008780:	f853 5b04 	ldr.w	r5, [r3], #4
 8008784:	d402      	bmi.n	800878c <_printf_i+0xe8>
 8008786:	0649      	lsls	r1, r1, #25
 8008788:	bf48      	it	mi
 800878a:	b2ad      	uxthmi	r5, r5
 800878c:	2f6f      	cmp	r7, #111	@ 0x6f
 800878e:	4853      	ldr	r0, [pc, #332]	@ (80088dc <_printf_i+0x238>)
 8008790:	6033      	str	r3, [r6, #0]
 8008792:	bf14      	ite	ne
 8008794:	230a      	movne	r3, #10
 8008796:	2308      	moveq	r3, #8
 8008798:	2100      	movs	r1, #0
 800879a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800879e:	6866      	ldr	r6, [r4, #4]
 80087a0:	60a6      	str	r6, [r4, #8]
 80087a2:	2e00      	cmp	r6, #0
 80087a4:	bfa2      	ittt	ge
 80087a6:	6821      	ldrge	r1, [r4, #0]
 80087a8:	f021 0104 	bicge.w	r1, r1, #4
 80087ac:	6021      	strge	r1, [r4, #0]
 80087ae:	b90d      	cbnz	r5, 80087b4 <_printf_i+0x110>
 80087b0:	2e00      	cmp	r6, #0
 80087b2:	d04b      	beq.n	800884c <_printf_i+0x1a8>
 80087b4:	4616      	mov	r6, r2
 80087b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80087ba:	fb03 5711 	mls	r7, r3, r1, r5
 80087be:	5dc7      	ldrb	r7, [r0, r7]
 80087c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087c4:	462f      	mov	r7, r5
 80087c6:	42bb      	cmp	r3, r7
 80087c8:	460d      	mov	r5, r1
 80087ca:	d9f4      	bls.n	80087b6 <_printf_i+0x112>
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d10b      	bne.n	80087e8 <_printf_i+0x144>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	07df      	lsls	r7, r3, #31
 80087d4:	d508      	bpl.n	80087e8 <_printf_i+0x144>
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	6861      	ldr	r1, [r4, #4]
 80087da:	4299      	cmp	r1, r3
 80087dc:	bfde      	ittt	le
 80087de:	2330      	movle	r3, #48	@ 0x30
 80087e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087e8:	1b92      	subs	r2, r2, r6
 80087ea:	6122      	str	r2, [r4, #16]
 80087ec:	f8cd a000 	str.w	sl, [sp]
 80087f0:	464b      	mov	r3, r9
 80087f2:	aa03      	add	r2, sp, #12
 80087f4:	4621      	mov	r1, r4
 80087f6:	4640      	mov	r0, r8
 80087f8:	f7ff fee6 	bl	80085c8 <_printf_common>
 80087fc:	3001      	adds	r0, #1
 80087fe:	d14a      	bne.n	8008896 <_printf_i+0x1f2>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	b004      	add	sp, #16
 8008806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	f043 0320 	orr.w	r3, r3, #32
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	4833      	ldr	r0, [pc, #204]	@ (80088e0 <_printf_i+0x23c>)
 8008814:	2778      	movs	r7, #120	@ 0x78
 8008816:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	6831      	ldr	r1, [r6, #0]
 800881e:	061f      	lsls	r7, r3, #24
 8008820:	f851 5b04 	ldr.w	r5, [r1], #4
 8008824:	d402      	bmi.n	800882c <_printf_i+0x188>
 8008826:	065f      	lsls	r7, r3, #25
 8008828:	bf48      	it	mi
 800882a:	b2ad      	uxthmi	r5, r5
 800882c:	6031      	str	r1, [r6, #0]
 800882e:	07d9      	lsls	r1, r3, #31
 8008830:	bf44      	itt	mi
 8008832:	f043 0320 	orrmi.w	r3, r3, #32
 8008836:	6023      	strmi	r3, [r4, #0]
 8008838:	b11d      	cbz	r5, 8008842 <_printf_i+0x19e>
 800883a:	2310      	movs	r3, #16
 800883c:	e7ac      	b.n	8008798 <_printf_i+0xf4>
 800883e:	4827      	ldr	r0, [pc, #156]	@ (80088dc <_printf_i+0x238>)
 8008840:	e7e9      	b.n	8008816 <_printf_i+0x172>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	f023 0320 	bic.w	r3, r3, #32
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	e7f6      	b.n	800883a <_printf_i+0x196>
 800884c:	4616      	mov	r6, r2
 800884e:	e7bd      	b.n	80087cc <_printf_i+0x128>
 8008850:	6833      	ldr	r3, [r6, #0]
 8008852:	6825      	ldr	r5, [r4, #0]
 8008854:	6961      	ldr	r1, [r4, #20]
 8008856:	1d18      	adds	r0, r3, #4
 8008858:	6030      	str	r0, [r6, #0]
 800885a:	062e      	lsls	r6, r5, #24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	d501      	bpl.n	8008864 <_printf_i+0x1c0>
 8008860:	6019      	str	r1, [r3, #0]
 8008862:	e002      	b.n	800886a <_printf_i+0x1c6>
 8008864:	0668      	lsls	r0, r5, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0x1bc>
 8008868:	8019      	strh	r1, [r3, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	4616      	mov	r6, r2
 8008870:	e7bc      	b.n	80087ec <_printf_i+0x148>
 8008872:	6833      	ldr	r3, [r6, #0]
 8008874:	1d1a      	adds	r2, r3, #4
 8008876:	6032      	str	r2, [r6, #0]
 8008878:	681e      	ldr	r6, [r3, #0]
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	2100      	movs	r1, #0
 800887e:	4630      	mov	r0, r6
 8008880:	f7f7 fcae 	bl	80001e0 <memchr>
 8008884:	b108      	cbz	r0, 800888a <_printf_i+0x1e6>
 8008886:	1b80      	subs	r0, r0, r6
 8008888:	6060      	str	r0, [r4, #4]
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	2300      	movs	r3, #0
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008894:	e7aa      	b.n	80087ec <_printf_i+0x148>
 8008896:	6923      	ldr	r3, [r4, #16]
 8008898:	4632      	mov	r2, r6
 800889a:	4649      	mov	r1, r9
 800889c:	4640      	mov	r0, r8
 800889e:	47d0      	blx	sl
 80088a0:	3001      	adds	r0, #1
 80088a2:	d0ad      	beq.n	8008800 <_printf_i+0x15c>
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	079b      	lsls	r3, r3, #30
 80088a8:	d413      	bmi.n	80088d2 <_printf_i+0x22e>
 80088aa:	68e0      	ldr	r0, [r4, #12]
 80088ac:	9b03      	ldr	r3, [sp, #12]
 80088ae:	4298      	cmp	r0, r3
 80088b0:	bfb8      	it	lt
 80088b2:	4618      	movlt	r0, r3
 80088b4:	e7a6      	b.n	8008804 <_printf_i+0x160>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4632      	mov	r2, r6
 80088ba:	4649      	mov	r1, r9
 80088bc:	4640      	mov	r0, r8
 80088be:	47d0      	blx	sl
 80088c0:	3001      	adds	r0, #1
 80088c2:	d09d      	beq.n	8008800 <_printf_i+0x15c>
 80088c4:	3501      	adds	r5, #1
 80088c6:	68e3      	ldr	r3, [r4, #12]
 80088c8:	9903      	ldr	r1, [sp, #12]
 80088ca:	1a5b      	subs	r3, r3, r1
 80088cc:	42ab      	cmp	r3, r5
 80088ce:	dcf2      	bgt.n	80088b6 <_printf_i+0x212>
 80088d0:	e7eb      	b.n	80088aa <_printf_i+0x206>
 80088d2:	2500      	movs	r5, #0
 80088d4:	f104 0619 	add.w	r6, r4, #25
 80088d8:	e7f5      	b.n	80088c6 <_printf_i+0x222>
 80088da:	bf00      	nop
 80088dc:	08011f99 	.word	0x08011f99
 80088e0:	08011faa 	.word	0x08011faa

080088e4 <memmove>:
 80088e4:	4288      	cmp	r0, r1
 80088e6:	b510      	push	{r4, lr}
 80088e8:	eb01 0402 	add.w	r4, r1, r2
 80088ec:	d902      	bls.n	80088f4 <memmove+0x10>
 80088ee:	4284      	cmp	r4, r0
 80088f0:	4623      	mov	r3, r4
 80088f2:	d807      	bhi.n	8008904 <memmove+0x20>
 80088f4:	1e43      	subs	r3, r0, #1
 80088f6:	42a1      	cmp	r1, r4
 80088f8:	d008      	beq.n	800890c <memmove+0x28>
 80088fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008902:	e7f8      	b.n	80088f6 <memmove+0x12>
 8008904:	4402      	add	r2, r0
 8008906:	4601      	mov	r1, r0
 8008908:	428a      	cmp	r2, r1
 800890a:	d100      	bne.n	800890e <memmove+0x2a>
 800890c:	bd10      	pop	{r4, pc}
 800890e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008916:	e7f7      	b.n	8008908 <memmove+0x24>

08008918 <_sbrk_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d06      	ldr	r5, [pc, #24]	@ (8008934 <_sbrk_r+0x1c>)
 800891c:	2300      	movs	r3, #0
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	f7f9 fbb6 	bl	8002094 <_sbrk>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_sbrk_r+0x1a>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_sbrk_r+0x1a>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	2000b00c 	.word	0x2000b00c

08008938 <_realloc_r>:
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	4680      	mov	r8, r0
 800893e:	4615      	mov	r5, r2
 8008940:	460c      	mov	r4, r1
 8008942:	b921      	cbnz	r1, 800894e <_realloc_r+0x16>
 8008944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008948:	4611      	mov	r1, r2
 800894a:	f7ff bc59 	b.w	8008200 <_malloc_r>
 800894e:	b92a      	cbnz	r2, 800895c <_realloc_r+0x24>
 8008950:	f7ff fbea 	bl	8008128 <_free_r>
 8008954:	2400      	movs	r4, #0
 8008956:	4620      	mov	r0, r4
 8008958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895c:	f000 f81a 	bl	8008994 <_malloc_usable_size_r>
 8008960:	4285      	cmp	r5, r0
 8008962:	4606      	mov	r6, r0
 8008964:	d802      	bhi.n	800896c <_realloc_r+0x34>
 8008966:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800896a:	d8f4      	bhi.n	8008956 <_realloc_r+0x1e>
 800896c:	4629      	mov	r1, r5
 800896e:	4640      	mov	r0, r8
 8008970:	f7ff fc46 	bl	8008200 <_malloc_r>
 8008974:	4607      	mov	r7, r0
 8008976:	2800      	cmp	r0, #0
 8008978:	d0ec      	beq.n	8008954 <_realloc_r+0x1c>
 800897a:	42b5      	cmp	r5, r6
 800897c:	462a      	mov	r2, r5
 800897e:	4621      	mov	r1, r4
 8008980:	bf28      	it	cs
 8008982:	4632      	movcs	r2, r6
 8008984:	f7ff fbc2 	bl	800810c <memcpy>
 8008988:	4621      	mov	r1, r4
 800898a:	4640      	mov	r0, r8
 800898c:	f7ff fbcc 	bl	8008128 <_free_r>
 8008990:	463c      	mov	r4, r7
 8008992:	e7e0      	b.n	8008956 <_realloc_r+0x1e>

08008994 <_malloc_usable_size_r>:
 8008994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008998:	1f18      	subs	r0, r3, #4
 800899a:	2b00      	cmp	r3, #0
 800899c:	bfbc      	itt	lt
 800899e:	580b      	ldrlt	r3, [r1, r0]
 80089a0:	18c0      	addlt	r0, r0, r3
 80089a2:	4770      	bx	lr

080089a4 <_init>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	bf00      	nop
 80089a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089aa:	bc08      	pop	{r3}
 80089ac:	469e      	mov	lr, r3
 80089ae:	4770      	bx	lr

080089b0 <_fini>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	bf00      	nop
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr
