
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000898c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009740  08008b1c  08008b1c  00009b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801225c  0801225c  00014270  2**0
                  CONTENTS
  4 .ARM          00000008  0801225c  0801225c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012264  08012264  00014270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012264  08012264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012268  08012268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  0801226c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad20  20000270  080124dc  00014270  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000af90  080124dc  00014f90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013708  00000000  00000000  000142a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ca  00000000  00000000  000279a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0002b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c21  00000000  00000000  0002c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029064  00000000  00000000  0002cc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016558  00000000  00000000  00055ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edfc5  00000000  00000000  0006c245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a20a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c7c  00000000  00000000  0015a250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015eecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b04 	.word	0x08008b04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08008b04 	.word	0x08008b04

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ringBufferSetup>:
/************************************************************************
* Funkcja: ringBufferSetup()
* (Utworzenie instancji bufora)
************************************************************************/
void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	1e5a      	subs	r2, r3, #1
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	60da      	str	r2, [r3, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <USART_kbhit>:
/************************************************************************
* Funkcja: USART_kbhit()
* (Sprawdza czy w buforze odbiorczym znajdują się dane
* Zwraca 1 jeśli bufor zawiera dane do odczytu)
************************************************************************/
uint8_t USART_kbhit(){
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <USART_kbhit+0x20>)
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <USART_kbhit+0x20>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d101      	bne.n	80005d8 <USART_kbhit+0x14>
		return 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <USART_kbhit+0x16>
	}else{
		return 1;
 80005d8:	2301      	movs	r3, #1
	}
}
 80005da:	4618      	mov	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	2000028c 	.word	0x2000028c

080005e8 <USART_getchar>:
* Jeśli bufor pusty = -1
* Jeśli jest dostępny bajt to funkcja zwraca jesgo wartość
* oraz aktualizuje index RX_Busy tak aby wskazywał na kolejny
* bajt do odczytu)
************************************************************************/
int16_t USART_getchar() {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <USART_getchar+0x4c>)
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <USART_getchar+0x4c>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d013      	beq.n	8000622 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <USART_getchar+0x4c>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <USART_getchar+0x50>)
 8000600:	5cd3      	ldrb	r3, [r2, r3]
 8000602:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <USART_getchar+0x4c>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	3301      	adds	r3, #1
 800060a:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <USART_getchar+0x4c>)
 800060c:	68d2      	ldr	r2, [r2, #12]
 800060e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000612:	fb01 f202 	mul.w	r2, r1, r2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	4a06      	ldr	r2, [pc, #24]	@ (8000634 <USART_getchar+0x4c>)
 800061a:	6053      	str	r3, [r2, #4]
        return tmp;
 800061c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000620:	e001      	b.n	8000626 <USART_getchar+0x3e>
    }
    return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000028c 	.word	0x2000028c
 8000638:	20000aac 	.word	0x20000aac

0800063c <USART_fsend>:
* (Formatuje teskt i zapisuje go do bufora nadawczego. Jeśli
* rejest jest gotowy, funkcja inicjuje przerwanie transmisji
* pierwszego bajru. __disable_irq() oraz __enable_irq() to
* nic innego jak zabezpieczenie kodu przed sekcją krytyczną)
************************************************************************/
void USART_fsend(char* format,...){
 800063c:	b40f      	push	{r0, r1, r2, r3}
 800063e:	b580      	push	{r7, lr}
 8000640:	b0c6      	sub	sp, #280	@ 0x118
 8000642:	af00      	add	r7, sp, #0
	char tmp_rs[258];
	int i;
	volatile int idx;
	va_list arglist;
	  va_start(arglist,format);
 8000644:	f507 7292 	add.w	r2, r7, #292	@ 0x124
 8000648:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800064c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000650:	601a      	str	r2, [r3, #0]
	  vsprintf(tmp_rs,format,arglist);
 8000652:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000656:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800065a:	f107 0010 	add.w	r0, r7, #16
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8000664:	f007 fa1e 	bl	8007aa4 <vsiprintf>
	  va_end(arglist);
	  idx=txRingBuffer.writeIndex;
 8000668:	4b44      	ldr	r3, [pc, #272]	@ (800077c <USART_fsend+0x140>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	461a      	mov	r2, r3
 800066e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000672:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000676:	601a      	str	r2, [r3, #0]
	  for(i=0;i<strlen(tmp_rs);i++){
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800067e:	e02c      	b.n	80006da <USART_fsend+0x9e>
		  USART_TxBuf[idx]=tmp_rs[i];
 8000680:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000684:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800068e:	f5a2 7184 	sub.w	r1, r2, #264	@ 0x108
 8000692:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000696:	440a      	add	r2, r1
 8000698:	7811      	ldrb	r1, [r2, #0]
 800069a:	4a39      	ldr	r2, [pc, #228]	@ (8000780 <USART_fsend+0x144>)
 800069c:	54d1      	strb	r1, [r2, r3]
		  idx++;
 800069e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006b2:	601a      	str	r2, [r3, #0]
		  if(idx >= TX_BUFFER_SIZE)idx=0;
 80006b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006c2:	db05      	blt.n	80006d0 <USART_fsend+0x94>
 80006c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
	  for(i=0;i<strlen(tmp_rs);i++){
 80006d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006d4:	3301      	adds	r3, #1
 80006d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fd80 	bl	80001e4 <strlen>
 80006e4:	4602      	mov	r2, r0
 80006e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d8c8      	bhi.n	8000680 <USART_fsend+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ee:	b672      	cpsid	i
}
 80006f0:	bf00      	nop
	  }
	  __disable_irq();//wyłączamy przerwania
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 80006f2:	4b22      	ldr	r3, [pc, #136]	@ (800077c <USART_fsend+0x140>)
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <USART_fsend+0x140>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d12b      	bne.n	8000756 <USART_fsend+0x11a>
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <USART_fsend+0x148>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000708:	2b80      	cmp	r3, #128	@ 0x80
 800070a:	d124      	bne.n	8000756 <USART_fsend+0x11a>
		  txRingBuffer.writeIndex=idx;
 800070c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000710:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <USART_fsend+0x140>)
 800071a:	609a      	str	r2, [r3, #8]
		  uint8_t tmp=USART_TxBuf[txRingBuffer.readIndex];
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <USART_fsend+0x140>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	4a17      	ldr	r2, [pc, #92]	@ (8000780 <USART_fsend+0x144>)
 8000722:	5cd2      	ldrb	r2, [r2, r3]
 8000724:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000728:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800072c:	701a      	strb	r2, [r3, #0]
		  txRingBuffer.readIndex++;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <USART_fsend+0x140>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	4a11      	ldr	r2, [pc, #68]	@ (800077c <USART_fsend+0x140>)
 8000736:	6053      	str	r3, [r2, #4]
		  if(txRingBuffer.readIndex >= TX_BUFFER_SIZE)txRingBuffer.readIndex=0;
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <USART_fsend+0x140>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000740:	d302      	bcc.n	8000748 <USART_fsend+0x10c>
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <USART_fsend+0x140>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
		  HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	2201      	movs	r2, #1
 800074c:	4619      	mov	r1, r3
 800074e:	480d      	ldr	r0, [pc, #52]	@ (8000784 <USART_fsend+0x148>)
 8000750:	f004 f82c 	bl	80047ac <HAL_UART_Transmit_IT>
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 8000754:	e007      	b.n	8000766 <USART_fsend+0x12a>
	  }else{
		  txRingBuffer.writeIndex=idx;
 8000756:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800075a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <USART_fsend+0x140>)
 8000764:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000766:	b662      	cpsie	i
}
 8000768:	bf00      	nop
	  }
	  __enable_irq();
}
 800076a:	bf00      	nop
 800076c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000770:	46bd      	mov	sp, r7
 8000772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000776:	b004      	add	sp, #16
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	2000029c 	.word	0x2000029c
 8000780:	200002ac 	.word	0x200002ac
 8000784:	2000adb8 	.word	0x2000adb8

08000788 <USART_send_buffer>:

void USART_send_buffer(const uint8_t* data, size_t length) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 8000792:	4b38      	ldr	r3, [pc, #224]	@ (8000874 <USART_send_buffer+0xec>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop

    __disable_irq();

    // Dodaj początek ramki
    USART_TxBuf[idx] = FRAME_START;
 800079c:	4a36      	ldr	r2, [pc, #216]	@ (8000878 <USART_send_buffer+0xf0>)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	4413      	add	r3, r2
 80007a2:	227e      	movs	r2, #126	@ 0x7e
 80007a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3301      	adds	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
    if(idx >= TX_BUFFER_SIZE) idx = 0;
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007b2:	db01      	blt.n	80007b8 <USART_send_buffer+0x30>
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	e014      	b.n	80007e8 <USART_send_buffer+0x60>
        USART_TxBuf[idx] = data[i];
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	4413      	add	r3, r2
 80007c4:	7819      	ldrb	r1, [r3, #0]
 80007c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000878 <USART_send_buffer+0xf0>)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
        idx++;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
        if(idx >= TX_BUFFER_SIZE) idx = 0;
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007dc:	db01      	blt.n	80007e2 <USART_send_buffer+0x5a>
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	3301      	adds	r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3e6      	bcc.n	80007be <USART_send_buffer+0x36>
    }

    // Dodaj koniec ramki
    USART_TxBuf[idx] = FRAME_END;
 80007f0:	4a21      	ldr	r2, [pc, #132]	@ (8000878 <USART_send_buffer+0xf0>)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4413      	add	r3, r2
 80007f6:	2260      	movs	r2, #96	@ 0x60
 80007f8:	701a      	strb	r2, [r3, #0]
    idx++;
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3301      	adds	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
    if(idx >= TX_BUFFER_SIZE) idx = 0;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000806:	db01      	blt.n	800080c <USART_send_buffer+0x84>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <USART_send_buffer+0xec>)
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <USART_send_buffer+0xec>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	d123      	bne.n	8000860 <USART_send_buffer+0xd8>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000818:	4b18      	ldr	r3, [pc, #96]	@ (800087c <USART_send_buffer+0xf4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 8000822:	2b80      	cmp	r3, #128	@ 0x80
 8000824:	d11c      	bne.n	8000860 <USART_send_buffer+0xd8>
        txRingBuffer.writeIndex = idx;
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	4a12      	ldr	r2, [pc, #72]	@ (8000874 <USART_send_buffer+0xec>)
 800082a:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <USART_send_buffer+0xec>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a11      	ldr	r2, [pc, #68]	@ (8000878 <USART_send_buffer+0xf0>)
 8000832:	5cd3      	ldrb	r3, [r2, r3]
 8000834:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex++;
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <USART_send_buffer+0xec>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <USART_send_buffer+0xec>)
 800083e:	6053      	str	r3, [r2, #4]
        if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex = 0;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <USART_send_buffer+0xec>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000848:	d302      	bcc.n	8000850 <USART_send_buffer+0xc8>
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <USART_send_buffer+0xec>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000850:	f107 030f 	add.w	r3, r7, #15
 8000854:	2201      	movs	r2, #1
 8000856:	4619      	mov	r1, r3
 8000858:	4808      	ldr	r0, [pc, #32]	@ (800087c <USART_send_buffer+0xf4>)
 800085a:	f003 ffa7 	bl	80047ac <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 800085e:	e002      	b.n	8000866 <USART_send_buffer+0xde>
    } else {
        txRingBuffer.writeIndex = idx;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	4a04      	ldr	r2, [pc, #16]	@ (8000874 <USART_send_buffer+0xec>)
 8000864:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000866:	b662      	cpsie	i
}
 8000868:	bf00      	nop
    }

    __enable_irq();
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000029c 	.word	0x2000029c
 8000878:	200002ac 	.word	0x200002ac
 800087c:	2000adb8 	.word	0x2000adb8

08000880 <calculateCrc16>:
*      - crc_out[1] = crc & 0xFF (młodszy bajt)
*
* Korzysta z:
*   - crc16_table: Tablica lookup z wstępnie obliczonymi wartościami
************************************************************************/
void calculateCrc16(uint8_t *data, size_t length, char crc_out[2]) {
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	@ 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 800088c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000890:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	e019      	b.n	80008cc <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 80008a2:	8bfb      	ldrh	r3, [r7, #30]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	7dfb      	ldrb	r3, [r7, #23]
 80008ac:	4053      	eors	r3, r2
 80008ae:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 80008b0:	8bfb      	ldrh	r3, [r7, #30]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	7dbb      	ldrb	r3, [r7, #22]
 80008b8:	490f      	ldr	r1, [pc, #60]	@ (80008f8 <calculateCrc16+0x78>)
 80008ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4053      	eors	r3, r2
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d3e1      	bcc.n	8000898 <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF); // bajt po lewej
 80008d4:	8bfb      	ldrh	r3, [r7, #30]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);        // bajt po prawej
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3301      	adds	r3, #1
 80008e4:	8bfa      	ldrh	r2, [r7, #30]
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	701a      	strb	r2, [r3, #0]
}
 80008ea:	bf00      	nop
 80008ec:	3724      	adds	r7, #36	@ 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000000 	.word	0x20000000

080008fc <parseColor>:
* Korzysta z:
*   - color_map: Globalna tablica struktur ColorMap zawierająca:
*   - name: string z nazwą koloru
*   - value: wartość Color_t w formacie RGB565
************************************************************************/
bool parseColor(const char* color_name, Color_t* color) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	e016      	b.n	800093a <parseColor+0x3e>
        if (strcmp(color_name, color_map[i].name) == 0) {
 800090c:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <parseColor+0x50>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000914:	4619      	mov	r1, r3
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fc5a 	bl	80001d0 <strcmp>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d108      	bne.n	8000934 <parseColor+0x38>
            *color = color_map[i].value;
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <parseColor+0x50>)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	4413      	add	r3, r2
 800092a:	889a      	ldrh	r2, [r3, #4]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	801a      	strh	r2, [r3, #0]
            return true;
 8000930:	2301      	movs	r3, #1
 8000932:	e006      	b.n	8000942 <parseColor+0x46>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3301      	adds	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b07      	cmp	r3, #7
 800093e:	d9e5      	bls.n	800090c <parseColor+0x10>
        }
    }
    return false;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	08008bf4 	.word	0x08008bf4

08000950 <resetFrameState>:
* Zmienne globalne:
*   - in_frame: Flaga oznaczająca czy jesteśmy w trakcie odbierania ramki
*   - escape_detected: Flaga oznaczająca wykrycie znaku escape
*   - bx_index: Indeks w buforze odbiorczym
************************************************************************/
static void resetFrameState() {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
    in_frame = false;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <resetFrameState+0x20>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <resetFrameState+0x24>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <resetFrameState+0x28>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	20000cc0 	.word	0x20000cc0
 8000974:	20000cba 	.word	0x20000cba
 8000978:	20000cbc 	.word	0x20000cbc

0800097c <parseParameters>:
*      - Pomija białe znaki
*      - Wyodrębnia token do następnego przecinka
*      - Przetwarza token według odpowiedniego typu
*   4. Zwalnia va_list
************************************************************************/
bool parseParameters(const char* data, const char* format, ...) {
 800097c:	b40e      	push	{r1, r2, r3}
 800097e:	b580      	push	{r7, lr}
 8000980:	b099      	sub	sp, #100	@ 0x64
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
    if (!data || !format) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <parseParameters+0x16>
 800098c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <parseParameters+0x1a>
        return false;
 8000992:	2300      	movs	r3, #0
 8000994:	e0b0      	b.n	8000af8 <parseParameters+0x17c>
    }
    va_list args;
    va_start(args, format);
 8000996:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800099a:	647b      	str	r3, [r7, #68]	@ 0x44

    const char* data_ptr = data;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const char* fmt_ptr = format;
 80009a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    char token[51];
    size_t token_idx;

    while (*fmt_ptr) {
 80009a4:	e09c      	b.n	8000ae0 <parseParameters+0x164>

        while (isspace(*data_ptr)) data_ptr++;
 80009a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009a8:	3301      	adds	r3, #1
 80009aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80009ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	4a55      	ldr	r2, [pc, #340]	@ (8000b08 <parseParameters+0x18c>)
 80009b4:	4413      	add	r3, r2
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f2      	bne.n	80009a6 <parseParameters+0x2a>

        token_idx = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	657b      	str	r3, [r7, #84]	@ 0x54


        while (*data_ptr && *data_ptr != ',' && token_idx < 49) {
 80009c4:	e00a      	b.n	80009dc <parseParameters+0x60>
            token[token_idx++] = *data_ptr++;
 80009c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80009c8:	1c53      	adds	r3, r2, #1
 80009ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80009cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009ce:	1c59      	adds	r1, r3, #1
 80009d0:	6579      	str	r1, [r7, #84]	@ 0x54
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	3360      	adds	r3, #96	@ 0x60
 80009d6:	443b      	add	r3, r7
 80009d8:	f803 2c50 	strb.w	r2, [r3, #-80]
        while (*data_ptr && *data_ptr != ',' && token_idx < 49) {
 80009dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <parseParameters+0x76>
 80009e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b2c      	cmp	r3, #44	@ 0x2c
 80009ea:	d002      	beq.n	80009f2 <parseParameters+0x76>
 80009ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009ee:	2b30      	cmp	r3, #48	@ 0x30
 80009f0:	d9e9      	bls.n	80009c6 <parseParameters+0x4a>
        }
        token[token_idx] = '\0';
 80009f2:	f107 0210 	add.w	r2, r7, #16
 80009f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009f8:	4413      	add	r3, r2
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]


        if (*data_ptr == ',') data_ptr++;
 80009fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a04:	d10c      	bne.n	8000a20 <parseParameters+0xa4>
 8000a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a08:	3301      	adds	r3, #1
 8000a0a:	65fb      	str	r3, [r7, #92]	@ 0x5c

        while (token_idx > 0 && isspace(token[token_idx - 1])) {
 8000a0c:	e008      	b.n	8000a20 <parseParameters+0xa4>
            token[--token_idx] = '\0';
 8000a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a10:	3b01      	subs	r3, #1
 8000a12:	657b      	str	r3, [r7, #84]	@ 0x54
 8000a14:	f107 0210 	add.w	r2, r7, #16
 8000a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
        while (token_idx > 0 && isspace(token[token_idx - 1])) {
 8000a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d00d      	beq.n	8000a42 <parseParameters+0xc6>
 8000a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	3360      	adds	r3, #96	@ 0x60
 8000a2c:	443b      	add	r3, r7
 8000a2e:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a34      	ldr	r2, [pc, #208]	@ (8000b08 <parseParameters+0x18c>)
 8000a36:	4413      	add	r3, r2
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1e5      	bne.n	8000a0e <parseParameters+0x92>
        }
        switch (*fmt_ptr) {
 8000a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b75      	cmp	r3, #117	@ 0x75
 8000a48:	d006      	beq.n	8000a58 <parseParameters+0xdc>
 8000a4a:	2b75      	cmp	r3, #117	@ 0x75
 8000a4c:	dc42      	bgt.n	8000ad4 <parseParameters+0x158>
 8000a4e:	2b73      	cmp	r3, #115	@ 0x73
 8000a50:	d01c      	beq.n	8000a8c <parseParameters+0x110>
 8000a52:	2b74      	cmp	r3, #116	@ 0x74
 8000a54:	d02d      	beq.n	8000ab2 <parseParameters+0x136>
 8000a56:	e03d      	b.n	8000ad4 <parseParameters+0x158>
            case 'u': {
                char* endptr;
                unsigned long val = strtoul(token, &endptr, 10);
 8000a58:	f107 010c 	add.w	r1, r7, #12
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	220a      	movs	r2, #10
 8000a62:	4618      	mov	r0, r3
 8000a64:	f006 fde0 	bl	8007628 <strtoul>
 8000a68:	6538      	str	r0, [r7, #80]	@ 0x50
                if (*endptr || val > 255) {
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <parseParameters+0xfc>
 8000a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a74:	2bff      	cmp	r3, #255	@ 0xff
 8000a76:	d901      	bls.n	8000a7c <parseParameters+0x100>
                    va_end(args);
                    return false;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e03d      	b.n	8000af8 <parseParameters+0x17c>
                }
                *va_arg(args, uint8_t*) = (uint8_t)val;
 8000a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a7e:	1d1a      	adds	r2, r3, #4
 8000a80:	647a      	str	r2, [r7, #68]	@ 0x44
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e026      	b.n	8000ada <parseParameters+0x15e>
                break;
            }
            case 's': {
                Color_t* color_ptr = va_arg(args, Color_t*);
 8000a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a8e:	1d1a      	adds	r2, r3, #4
 8000a90:	647a      	str	r2, [r7, #68]	@ 0x44
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (!parseColor(token, color_ptr)) {
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff2d 	bl	80008fc <parseColor>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f083 0301 	eor.w	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d014      	beq.n	8000ad8 <parseParameters+0x15c>
                    va_end(args);
                    return false;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e022      	b.n	8000af8 <parseParameters+0x17c>
                }
                break;
            }
            case 't': {
                char* ptr = va_arg(args, char*);
 8000ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ab4:	1d1a      	adds	r2, r3, #4
 8000ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
                strncpy(ptr, token, 50);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2232      	movs	r2, #50	@ 0x32
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000ac6:	f007 f811 	bl	8007aec <strncpy>
                ptr[50] = '\0';
 8000aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000acc:	3332      	adds	r3, #50	@ 0x32
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
                break;
 8000ad2:	e002      	b.n	8000ada <parseParameters+0x15e>
            }
            default:
                va_end(args);
                return false;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e00f      	b.n	8000af8 <parseParameters+0x17c>
                break;
 8000ad8:	bf00      	nop
        }
        fmt_ptr++;
 8000ada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000adc:	3301      	adds	r3, #1
 8000ade:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*fmt_ptr) {
 8000ae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f47f af61 	bne.w	80009ac <parseParameters+0x30>
    }
    va_end(args);
    return !*data_ptr;
 8000aea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf0c      	ite	eq
 8000af2:	2301      	moveq	r3, #1
 8000af4:	2300      	movne	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3764      	adds	r7, #100	@ 0x64
 8000afc:	46bd      	mov	sp, r7
 8000afe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b02:	b003      	add	sp, #12
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	08012078 	.word	0x08012078

08000b0c <clearFrame>:
*   - Parametry: (void* ptr, int value, size_t num)
*   - ptr: Wskaźnik na początek bloku pamięci
*   - value: Wartość do wypełnienia (0 dla wyzerowania)
*   - num: Liczba bajtów do wypełnienia
************************************************************************/
void clearFrame(Receive_Frame* frame) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00d      	beq.n	8000b36 <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3305      	adds	r3, #5
 8000b1e:	2280      	movs	r2, #128	@ 0x80
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f006 ffc8 	bl	8007ab8 <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f006 ffc1 	bl	8007ab8 <memset>
    }
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <executeONK>:
*      - Parametry: (x, y, r, color)
*
*   3. prepareFrame(): Wysyła odpowiedź w przypadku błędu
************************************************************************/
static void executeONK(Receive_Frame *frame)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af04      	add	r7, sp, #16
 8000b46:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73bb      	strb	r3, [r7, #14]
 8000b50:	2300      	movs	r3, #0
 8000b52:	737b      	strb	r3, [r7, #13]
 8000b54:	2300      	movs	r3, #0
 8000b56:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	1d58      	adds	r0, r3, #5
 8000b60:	f107 010e 	add.w	r1, r7, #14
 8000b64:	f107 020f 	add.w	r2, r7, #15
 8000b68:	f107 030a 	add.w	r3, r7, #10
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	f107 030d 	add.w	r3, r7, #13
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	4917      	ldr	r1, [pc, #92]	@ (8000bdc <executeONK+0x9c>)
 8000b7e:	f7ff fefd 	bl	800097c <parseParameters>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f083 0301 	eor.w	r3, r3, #1
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d009      	beq.n	8000ba2 <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3305      	adds	r3, #5
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <executeONK+0xa0>)
 8000b96:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <executeONK+0xa4>)
 8000b98:	2167      	movs	r1, #103	@ 0x67
 8000b9a:	2068      	movs	r0, #104	@ 0x68
 8000b9c:	f000 fad8 	bl	8001150 <prepareFrame>
 8000ba0:	e019      	b.n	8000bd6 <executeONK+0x96>
        return;
    }
	switch(filling)
 8000ba2:	7b3b      	ldrb	r3, [r7, #12]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <executeONK+0x6e>
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d00a      	beq.n	8000bc2 <executeONK+0x82>
 8000bac:	e013      	b.n	8000bd6 <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	b218      	sxth	r0, r3
 8000bb2:	7bbb      	ldrb	r3, [r7, #14]
 8000bb4:	b219      	sxth	r1, r3
 8000bb6:	7b7b      	ldrb	r3, [r7, #13]
 8000bb8:	b21a      	sxth	r2, r3
 8000bba:	897b      	ldrh	r3, [r7, #10]
 8000bbc:	f006 f838 	bl	8006c30 <hagl_draw_circle>
		break;
 8000bc0:	e009      	b.n	8000bd6 <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	b218      	sxth	r0, r3
 8000bc6:	7bbb      	ldrb	r3, [r7, #14]
 8000bc8:	b219      	sxth	r1, r3
 8000bca:	7b7b      	ldrb	r3, [r7, #13]
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	897b      	ldrh	r3, [r7, #10]
 8000bd0:	f006 f95d 	bl	8006e8e <hagl_fill_circle>
		break;
 8000bd4:	bf00      	nop
	}
}
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	08008b58 	.word	0x08008b58
 8000be0:	08008b60 	.word	0x08008b60
 8000be4:	08008b74 	.word	0x08008b74

08000be8 <executeONP>:
*   2. hagl_draw_rectangle() / hagl_fill_rectangle():
*      Funkcje HAGL do rysowania prostokątów
*      - Parametry: (x, y, width, height, color)
************************************************************************/
static void executeONP(Receive_Frame *frame)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b089      	sub	sp, #36	@ 0x24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73bb      	strb	r3, [r7, #14]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	737b      	strb	r3, [r7, #13]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	733b      	strb	r3, [r7, #12]
 8000c00:	2300      	movs	r3, #0
 8000c02:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	1d58      	adds	r0, r3, #5
 8000c0c:	f107 010e 	add.w	r1, r7, #14
 8000c10:	f107 020f 	add.w	r2, r7, #15
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	9303      	str	r3, [sp, #12]
 8000c1a:	f107 030b 	add.w	r3, r7, #11
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	f107 030d 	add.w	r3, r7, #13
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	491c      	ldr	r1, [pc, #112]	@ (8000ca0 <executeONP+0xb8>)
 8000c30:	f7ff fea4 	bl	800097c <parseParameters>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f083 0301 	eor.w	r3, r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d009      	beq.n	8000c54 <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3305      	adds	r3, #5
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <executeONP+0xbc>)
 8000c48:	4a17      	ldr	r2, [pc, #92]	@ (8000ca8 <executeONP+0xc0>)
 8000c4a:	2167      	movs	r1, #103	@ 0x67
 8000c4c:	2068      	movs	r0, #104	@ 0x68
 8000c4e:	f000 fa7f 	bl	8001150 <prepareFrame>
 8000c52:	e021      	b.n	8000c98 <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000c54:	7afb      	ldrb	r3, [r7, #11]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <executeONP+0x78>
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d00e      	beq.n	8000c7c <executeONP+0x94>
 8000c5e:	e01b      	b.n	8000c98 <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	b218      	sxth	r0, r3
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	b219      	sxth	r1, r3
 8000c68:	7b7b      	ldrb	r3, [r7, #13]
 8000c6a:	b21a      	sxth	r2, r3
 8000c6c:	7b3b      	ldrb	r3, [r7, #12]
 8000c6e:	b21c      	sxth	r4, r3
 8000c70:	893b      	ldrh	r3, [r7, #8]
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	4623      	mov	r3, r4
 8000c76:	f005 fd2b 	bl	80066d0 <hagl_draw_rectangle>
		break;
 8000c7a:	e00d      	b.n	8000c98 <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	b218      	sxth	r0, r3
 8000c80:	7bbb      	ldrb	r3, [r7, #14]
 8000c82:	b219      	sxth	r1, r3
 8000c84:	7b7b      	ldrb	r3, [r7, #13]
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	7b3b      	ldrb	r3, [r7, #12]
 8000c8a:	b21c      	sxth	r4, r3
 8000c8c:	893b      	ldrh	r3, [r7, #8]
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	4623      	mov	r3, r4
 8000c92:	f005 fda3 	bl	80067dc <hagl_fill_rectangle>
		break;
 8000c96:	bf00      	nop
	}
}
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	08008b78 	.word	0x08008b78
 8000ca4:	08008b60 	.word	0x08008b60
 8000ca8:	08008b74 	.word	0x08008b74

08000cac <executeONT>:
*   2. hagl_draw_triangle() / hagl_fill_triangle():
*      Funkcje HAGL do rysowania trójkątów
*      - Parametry: (x1,y1, x2,y2, x3,y3, color)
************************************************************************/
static void executeONT(Receive_Frame *frame)
{
 8000cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cae:	b08d      	sub	sp, #52	@ 0x34
 8000cb0:	af06      	add	r7, sp, #24
 8000cb2:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75fb      	strb	r3, [r7, #23]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	75bb      	strb	r3, [r7, #22]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	757b      	strb	r3, [r7, #21]
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	753b      	strb	r3, [r7, #20]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	74fb      	strb	r3, [r7, #19]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	74bb      	strb	r3, [r7, #18]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	1d58      	adds	r0, r3, #5
 8000cd8:	f107 0116 	add.w	r1, r7, #22
 8000cdc:	f107 0217 	add.w	r2, r7, #23
 8000ce0:	f107 030e 	add.w	r3, r7, #14
 8000ce4:	9305      	str	r3, [sp, #20]
 8000ce6:	f107 0311 	add.w	r3, r7, #17
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	f107 0312 	add.w	r3, r7, #18
 8000cf0:	9303      	str	r3, [sp, #12]
 8000cf2:	f107 0313 	add.w	r3, r7, #19
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	f107 0315 	add.w	r3, r7, #21
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	460b      	mov	r3, r1
 8000d06:	4924      	ldr	r1, [pc, #144]	@ (8000d98 <executeONT+0xec>)
 8000d08:	f7ff fe38 	bl	800097c <parseParameters>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f083 0301 	eor.w	r3, r3, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d009      	beq.n	8000d2c <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3305      	adds	r3, #5
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <executeONT+0xf0>)
 8000d20:	4a1f      	ldr	r2, [pc, #124]	@ (8000da0 <executeONT+0xf4>)
 8000d22:	2167      	movs	r1, #103	@ 0x67
 8000d24:	2068      	movs	r0, #104	@ 0x68
 8000d26:	f000 fa13 	bl	8001150 <prepareFrame>
 8000d2a:	e031      	b.n	8000d90 <executeONT+0xe4>
        return;
    }
    switch(filling)
 8000d2c:	7c7b      	ldrb	r3, [r7, #17]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <executeONT+0x8c>
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d016      	beq.n	8000d64 <executeONT+0xb8>
 8000d36:	e02b      	b.n	8000d90 <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	b218      	sxth	r0, r3
 8000d3c:	7dbb      	ldrb	r3, [r7, #22]
 8000d3e:	b21c      	sxth	r4, r3
 8000d40:	7d7b      	ldrb	r3, [r7, #21]
 8000d42:	b21d      	sxth	r5, r3
 8000d44:	7d3b      	ldrb	r3, [r7, #20]
 8000d46:	b21e      	sxth	r6, r3
 8000d48:	7cfb      	ldrb	r3, [r7, #19]
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	7cba      	ldrb	r2, [r7, #18]
 8000d4e:	b212      	sxth	r2, r2
 8000d50:	89f9      	ldrh	r1, [r7, #14]
 8000d52:	9102      	str	r1, [sp, #8]
 8000d54:	9201      	str	r2, [sp, #4]
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	4633      	mov	r3, r6
 8000d5a:	462a      	mov	r2, r5
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	f006 fb21 	bl	80073a4 <hagl_draw_triangle>
            break;
 8000d62:	e015      	b.n	8000d90 <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	b218      	sxth	r0, r3
 8000d68:	7dbb      	ldrb	r3, [r7, #22]
 8000d6a:	b21c      	sxth	r4, r3
 8000d6c:	7d7b      	ldrb	r3, [r7, #21]
 8000d6e:	b21d      	sxth	r5, r3
 8000d70:	7d3b      	ldrb	r3, [r7, #20]
 8000d72:	b21e      	sxth	r6, r3
 8000d74:	7cfb      	ldrb	r3, [r7, #19]
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	7cba      	ldrb	r2, [r7, #18]
 8000d7a:	b212      	sxth	r2, r2
 8000d7c:	89f9      	ldrh	r1, [r7, #14]
 8000d7e:	9102      	str	r1, [sp, #8]
 8000d80:	9201      	str	r2, [sp, #4]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	4633      	mov	r3, r6
 8000d86:	462a      	mov	r2, r5
 8000d88:	4621      	mov	r1, r4
 8000d8a:	f006 fb31 	bl	80073f0 <hagl_fill_triangle>
            break;
 8000d8e:	bf00      	nop
    }
}
 8000d90:	371c      	adds	r7, #28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08008b80 	.word	0x08008b80
 8000d9c:	08008b60 	.word	0x08008b60
 8000da0:	08008b74 	.word	0x08008b74

08000da4 <executeONN>:
*      - Parametry: (wtext, x, y, color, font)
*      - Dostępne fonty: font5x7, font5x8, font6x9

************************************************************************/
static void executeONN(Receive_Frame *frame)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b0cb      	sub	sp, #300	@ 0x12c
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000db2:	6018      	str	r0, [r3, #0]
    char text[50] = {0};
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000dba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dbe:	222e      	movs	r2, #46	@ 0x2e
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 fe78 	bl	8007ab8 <memset>
    wchar_t wtext[50] = {0};
 8000dc8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	23c8      	movs	r3, #200	@ 0xc8
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f006 fe6e 	bl	8007ab8 <memset>
    uint8_t x = 0, y = 0, fontSize = 0, speed = 0;
 8000ddc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000de0:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dec:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000df8:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    Color_t color = BLACK;
 8000e06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e0a:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8000e0e:	2200      	movs	r2, #0
 8000e10:	801a      	strh	r2, [r3, #0]

    if (!parseParameters(frame->data, "uuust", &x, &y, &fontSize, &color, text)) {
 8000e12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	1d58      	adds	r0, r3, #5
 8000e1e:	f107 010e 	add.w	r1, r7, #14
 8000e22:	f107 020f 	add.w	r2, r7, #15
 8000e26:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000e2a:	9302      	str	r3, [sp, #8]
 8000e2c:	f107 030a 	add.w	r3, r7, #10
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	f107 030d 	add.w	r3, r7, #13
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4951      	ldr	r1, [pc, #324]	@ (8000f80 <executeONN+0x1dc>)
 8000e3c:	f7ff fd9e 	bl	800097c <parseParameters>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f083 0301 	eor.w	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00d      	beq.n	8000e68 <executeONN+0xc4>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000e4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e50:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3305      	adds	r3, #5
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f84 <executeONN+0x1e0>)
 8000e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8000f88 <executeONN+0x1e4>)
 8000e5e:	2167      	movs	r1, #103	@ 0x67
 8000e60:	2068      	movs	r0, #104	@ 0x68
 8000e62:	f000 f975 	bl	8001150 <prepareFrame>
 8000e66:	e087      	b.n	8000f78 <executeONN+0x1d4>
        return;
    }
    size_t textLen = strlen(text);
 8000e68:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff f9b9 	bl	80001e4 <strlen>
 8000e72:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    for(size_t i = 0; i < textLen && i < 50; i++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000e7c:	e013      	b.n	8000ea6 <executeONN+0x102>
        wtext[i] = (wchar_t)text[i];
 8000e7e:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8000e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000e94:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(size_t i = 0; i < textLen && i < 50; i++) {
 8000e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000ea6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d203      	bcs.n	8000eba <executeONN+0x116>
 8000eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000eb6:	2b31      	cmp	r3, #49	@ 0x31
 8000eb8:	d9e1      	bls.n	8000e7e <executeONN+0xda>
    }
    wtext[textLen] = L'\0';
 8000eba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ec2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    switch(fontSize)
 8000ecc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ed0:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d036      	beq.n	8000f48 <executeONN+0x1a4>
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	dc4c      	bgt.n	8000f78 <executeONN+0x1d4>
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d002      	beq.n	8000ee8 <executeONN+0x144>
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d018      	beq.n	8000f18 <executeONN+0x174>
 8000ee6:	e047      	b.n	8000f78 <executeONN+0x1d4>
    {
        case 1:
            hagl_put_text(wtext, x, y, color, font5x7);
 8000ee8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000eec:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b219      	sxth	r1, r3
 8000ef4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ef8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f04:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	f107 0010 	add.w	r0, r7, #16
 8000f0e:	4c1f      	ldr	r4, [pc, #124]	@ (8000f8c <executeONN+0x1e8>)
 8000f10:	9400      	str	r4, [sp, #0]
 8000f12:	f005 fe05 	bl	8006b20 <hagl_put_text>
            break;
 8000f16:	e02f      	b.n	8000f78 <executeONN+0x1d4>
        case 2:
            hagl_put_text(wtext, x, y, color, font5x8);
 8000f18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f1c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b219      	sxth	r1, r3
 8000f24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f28:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f34:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	f107 0010 	add.w	r0, r7, #16
 8000f3e:	4c14      	ldr	r4, [pc, #80]	@ (8000f90 <executeONN+0x1ec>)
 8000f40:	9400      	str	r4, [sp, #0]
 8000f42:	f005 fded 	bl	8006b20 <hagl_put_text>
            break;
 8000f46:	e017      	b.n	8000f78 <executeONN+0x1d4>
        case 3:
            hagl_put_text(wtext, x, y, color, font6x9);
 8000f48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f4c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b219      	sxth	r1, r3
 8000f54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f58:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f64:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	f107 0010 	add.w	r0, r7, #16
 8000f6e:	4c09      	ldr	r4, [pc, #36]	@ (8000f94 <executeONN+0x1f0>)
 8000f70:	9400      	str	r4, [sp, #0]
 8000f72:	f005 fdd5 	bl	8006b20 <hagl_put_text>
            break;
 8000f76:	bf00      	nop
    }
}
 8000f78:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd90      	pop	{r4, r7, pc}
 8000f80:	08008b8c 	.word	0x08008b8c
 8000f84:	08008b60 	.word	0x08008b60
 8000f88:	08008b74 	.word	0x08008b74
 8000f8c:	08008c34 	.word	0x08008c34
 8000f90:	0800c13c 	.word	0x0800c13c
 8000f94:	0800efe0 	.word	0x0800efe0

08000f98 <executeOFF>:
*     - Używa hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK)
*
*   TODO: Naprawienie problemu z wyłączaniem podświetlenia
************************************************************************/
static void executeOFF(Receive_Frame *frame)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	795b      	ldrb	r3, [r3, #5]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d002      	beq.n	8000fae <executeOFF+0x16>
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d006      	beq.n	8000fba <executeOFF+0x22>
		break;
	case 1:
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK);
		break;
	}
}
 8000fac:	e00e      	b.n	8000fcc <executeOFF+0x34>
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET); //TODO sprawdzić dlaczego nie działa
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <executeOFF+0x3c>)
 8000fb4:	f001 fcf6 	bl	80029a4 <HAL_GPIO_WritePin>
		break;
 8000fb8:	e008      	b.n	8000fcc <executeOFF+0x34>
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2380      	movs	r3, #128	@ 0x80
 8000fc0:	22a0      	movs	r2, #160	@ 0xa0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f005 fc09 	bl	80067dc <hagl_fill_rectangle>
		break;
 8000fca:	bf00      	nop
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	48000400 	.word	0x48000400

08000fd8 <isWithinBounds>:
* Korzysta z:
*   - LCD_WIDTH: Stała określająca szerokość ekranu
*   - LCD_HEIGHT: Stała określająca wysokość ekranu
************************************************************************/
bool isWithinBounds(int x, int y)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <isWithinBounds+0x26>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b9f      	cmp	r3, #159	@ 0x9f
 8000fec:	dc07      	bgt.n	8000ffe <isWithinBounds+0x26>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db04      	blt.n	8000ffe <isWithinBounds+0x26>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ff8:	dc01      	bgt.n	8000ffe <isWithinBounds+0x26>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <isWithinBounds+0x28>
 8000ffe:	2300      	movs	r3, #0
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <parseCoordinates>:
*      - Kolejne z NULL
*
*   3. atoi(): Konwertuje string na int
************************************************************************/
bool parseCoordinates(const char *data, int *x, int *y)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a6      	sub	sp, #152	@ 0x98
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	char *token;
	    char data_copy[MAX_DATA_SIZE];
	    strncpy(data_copy, data, MAX_DATA_SIZE);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2280      	movs	r2, #128	@ 0x80
 8001026:	68f9      	ldr	r1, [r7, #12]
 8001028:	4618      	mov	r0, r3
 800102a:	f006 fd5f 	bl	8007aec <strncpy>

	    token = strtok(data_copy, ",");
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4915      	ldr	r1, [pc, #84]	@ (8001088 <parseCoordinates+0x74>)
 8001034:	4618      	mov	r0, r3
 8001036:	f006 fd6d 	bl	8007b14 <strtok>
 800103a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 800103e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <parseCoordinates+0x36>
	        return false;
 8001046:	2300      	movs	r3, #0
 8001048:	e01a      	b.n	8001080 <parseCoordinates+0x6c>
	    }
	    *x = atoi(token);
 800104a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800104e:	f006 f9f5 	bl	800743c <atoi>
 8001052:	4602      	mov	r2, r0
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	601a      	str	r2, [r3, #0]

	    token = strtok(NULL, ",");
 8001058:	490b      	ldr	r1, [pc, #44]	@ (8001088 <parseCoordinates+0x74>)
 800105a:	2000      	movs	r0, #0
 800105c:	f006 fd5a 	bl	8007b14 <strtok>
 8001060:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8001064:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <parseCoordinates+0x5c>
	        return false;
 800106c:	2300      	movs	r3, #0
 800106e:	e007      	b.n	8001080 <parseCoordinates+0x6c>
	    }
	    *y = atoi(token);
 8001070:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001074:	f006 f9e2 	bl	800743c <atoi>
 8001078:	4602      	mov	r2, r0
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]

	    return true;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3798      	adds	r7, #152	@ 0x98
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	08008b94 	.word	0x08008b94

0800108c <byteStuffing>:
*   '}' 			 	-> "}]"
*   '~'              	-> "}^"
*   '`'              	-> "}&"

************************************************************************/
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	e04b      	b.n	800113a <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b7d      	cmp	r3, #125	@ 0x7d
 80010ac:	d10e      	bne.n	80010cc <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	617a      	str	r2, [r7, #20]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	227d      	movs	r2, #125	@ 0x7d
 80010ba:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	617a      	str	r2, [r7, #20]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	225d      	movs	r2, #93	@ 0x5d
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e033      	b.n	8001134 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b7e      	cmp	r3, #126	@ 0x7e
 80010d6:	d10e      	bne.n	80010f6 <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	617a      	str	r2, [r7, #20]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	227d      	movs	r2, #125	@ 0x7d
 80010e4:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	617a      	str	r2, [r7, #20]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	225e      	movs	r2, #94	@ 0x5e
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e01e      	b.n	8001134 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4413      	add	r3, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b60      	cmp	r3, #96	@ 0x60
 8001100:	d10e      	bne.n	8001120 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	617a      	str	r2, [r7, #20]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	227d      	movs	r2, #125	@ 0x7d
 800110e:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	617a      	str	r2, [r7, #20]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	2226      	movs	r2, #38	@ 0x26
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e009      	b.n	8001134 <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	441a      	add	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	1c59      	adds	r1, r3, #1
 800112a:	6179      	str	r1, [r7, #20]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	440b      	add	r3, r1
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	3301      	adds	r3, #1
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	429a      	cmp	r2, r3
 8001140:	d3af      	bcc.n	80010a2 <byteStuffing+0x16>
        }
    }
    return j;
 8001142:	697b      	ldr	r3, [r7, #20]
}
 8001144:	4618      	mov	r0, r3
 8001146:	371c      	adds	r7, #28
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <prepareFrame>:
*   4. Konwertuje CRC na hex
*   5. Przygotowuje payload
*   6. Wykonuje byte stuffing
*   7. Wysyła ramkę
************************************************************************/
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 8001150:	b408      	push	{r3}
 8001152:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001156:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800115a:	af02      	add	r7, sp, #8
 800115c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8001160:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800116a:	f2a3 23b9 	subw	r3, r3, #697	@ 0x2b9
 800116e:	4602      	mov	r2, r0
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8001176:	f2a3 23ba 	subw	r3, r3, #698	@ 0x2ba
 800117a:	460a      	mov	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	466b      	mov	r3, sp
 8001180:	461e      	mov	r6, r3
    Frame frame = {0};
 8001182:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001186:	228a      	movs	r2, #138	@ 0x8a
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f006 fc94 	bl	8007ab8 <memset>
    frame.sender = sender;
 8001190:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8001194:	f2a3 23b9 	subw	r3, r3, #697	@ 0x2b9
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
    frame.receiver = receiver;
 800119e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80011a2:	f2a3 23ba 	subw	r3, r3, #698	@ 0x2ba
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 80011ac:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80011b0:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 80011b4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80011b8:	1cd0      	adds	r0, r2, #3
 80011ba:	2203      	movs	r2, #3
 80011bc:	6819      	ldr	r1, [r3, #0]
 80011be:	f006 fc95 	bl	8007aec <strncpy>

    va_list args;
    va_start(args, format);
 80011c2:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80011c6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    vsnprintf((char *)frame.data, MAX_DATA_SIZE, format, args);
 80011ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80011ce:	1d98      	adds	r0, r3, #6
 80011d0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80011d4:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	f006 fc3f 	bl	8007a5c <vsniprintf>
    va_end(args);

    size_t data_len = strlen((const char *)frame.data);
 80011de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80011e2:	3306      	adds	r3, #6
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7fe fffd 	bl	80001e4 <strlen>
 80011ea:	f8c7 02c4 	str.w	r0, [r7, #708]	@ 0x2c4

    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 80011ee:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 80011f2:	3305      	adds	r3, #5
 80011f4:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
    uint8_t crc_input[crc_input_len];
 80011f8:	f8d7 12c0 	ldr.w	r1, [r7, #704]	@ 0x2c0
 80011fc:	460b      	mov	r3, r1
 80011fe:	3b01      	subs	r3, #1
 8001200:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8001204:	2300      	movs	r3, #0
 8001206:	6039      	str	r1, [r7, #0]
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	00c3      	lsls	r3, r0, #3
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	00c2      	lsls	r2, r0, #3
 8001220:	2300      	movs	r3, #0
 8001222:	468a      	mov	sl, r1
 8001224:	469b      	mov	fp, r3
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001232:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800123a:	1dcb      	adds	r3, r1, #7
 800123c:	08db      	lsrs	r3, r3, #3
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	ebad 0d03 	sub.w	sp, sp, r3
 8001244:	ab02      	add	r3, sp, #8
 8001246:	3300      	adds	r3, #0
 8001248:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
    crc_input[0] = frame.sender;
 800124c:	f897 2221 	ldrb.w	r2, [r7, #545]	@ 0x221
 8001250:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8001254:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 8001256:	f897 2222 	ldrb.w	r2, [r7, #546]	@ 0x222
 800125a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 800125e:	705a      	strb	r2, [r3, #1]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 8001260:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8001264:	3302      	adds	r3, #2
 8001266:	461a      	mov	r2, r3
 8001268:	f207 2323 	addw	r3, r7, #547	@ 0x223
 800126c:	8819      	ldrh	r1, [r3, #0]
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	8011      	strh	r1, [r2, #0]
 8001272:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, frame.data, data_len);
 8001274:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8001278:	1d58      	adds	r0, r3, #5
 800127a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800127e:	3306      	adds	r3, #6
 8001280:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8001284:	4619      	mov	r1, r3
 8001286:	f006 fd14 	bl	8007cb2 <memcpy>

    char crc_output[2];
    calculateCrc16(crc_input, crc_input_len, crc_output);
 800128a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800128e:	461a      	mov	r2, r3
 8001290:	f8d7 12c0 	ldr.w	r1, [r7, #704]	@ 0x2c0
 8001294:	f8d7 02b8 	ldr.w	r0, [r7, #696]	@ 0x2b8
 8001298:	f7ff faf2 	bl	8000880 <calculateCrc16>

    char crc_hex[5];
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 800129c:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 80012a0:	461a      	mov	r2, r3
 80012a2:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 80012a6:	f507 7004 	add.w	r0, r7, #528	@ 0x210
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001398 <prepareFrame+0x248>)
 80012b0:	2105      	movs	r1, #5
 80012b2:	f006 fb31 	bl	8007918 <sniprintf>

    uint8_t raw_payload[2 + COMMAND_LENGTH + data_len + 4];
 80012b6:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 80012ba:	f103 0109 	add.w	r1, r3, #9
 80012be:	460b      	mov	r3, r1
 80012c0:	3b01      	subs	r3, #1
 80012c2:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80012c6:	2300      	movs	r3, #0
 80012c8:	4688      	mov	r8, r1
 80012ca:	4699      	mov	r9, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012e0:	2300      	movs	r3, #0
 80012e2:	460c      	mov	r4, r1
 80012e4:	461d      	mov	r5, r3
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	00eb      	lsls	r3, r5, #3
 80012f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012f4:	00e2      	lsls	r2, r4, #3
 80012f6:	1dcb      	adds	r3, r1, #7
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001300:	ab02      	add	r3, sp, #8
 8001302:	3300      	adds	r3, #0
 8001304:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    raw_payload[0] = frame.sender;
 8001308:	f897 2221 	ldrb.w	r2, [r7, #545]	@ 0x221
 800130c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8001310:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 8001312:	f897 2222 	ldrb.w	r2, [r7, #546]	@ 0x222
 8001316:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800131a:	705a      	strb	r2, [r3, #1]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 800131c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8001320:	3302      	adds	r3, #2
 8001322:	461a      	mov	r2, r3
 8001324:	f207 2323 	addw	r3, r7, #547	@ 0x223
 8001328:	8819      	ldrh	r1, [r3, #0]
 800132a:	789b      	ldrb	r3, [r3, #2]
 800132c:	8011      	strh	r1, [r2, #0]
 800132e:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, frame.data, data_len);
 8001330:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8001334:	1d58      	adds	r0, r3, #5
 8001336:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800133a:	3306      	adds	r3, #6
 800133c:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8001340:	4619      	mov	r1, r3
 8001342:	f006 fcb6 	bl	8007cb2 <memcpy>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4);
 8001346:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 800134a:	3305      	adds	r3, #5
 800134c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8001350:	4413      	add	r3, r2
 8001352:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001356:	601a      	str	r2, [r3, #0]

    uint8_t stuffed_payload[512];
    size_t stuffed_len = byteStuffing(raw_payload, 2 + COMMAND_LENGTH + data_len + 4, stuffed_payload);
 8001358:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 800135c:	3309      	adds	r3, #9
 800135e:	f107 0210 	add.w	r2, r7, #16
 8001362:	4619      	mov	r1, r3
 8001364:	f8d7 02b0 	ldr.w	r0, [r7, #688]	@ 0x2b0
 8001368:	f7ff fe90 	bl	800108c <byteStuffing>
 800136c:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac

    USART_send_buffer(stuffed_payload, stuffed_len);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	f8d7 12ac 	ldr.w	r1, [r7, #684]	@ 0x2ac
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fa05 	bl	8000788 <USART_send_buffer>
    USART_fsend("\r\n");
 800137e:	4807      	ldr	r0, [pc, #28]	@ (800139c <prepareFrame+0x24c>)
 8001380:	f7ff f95c 	bl	800063c <USART_fsend>
 8001384:	46b5      	mov	sp, r6

}
 8001386:	bf00      	nop
 8001388:	f507 7732 	add.w	r7, r7, #712	@ 0x2c8
 800138c:	46bd      	mov	sp, r7
 800138e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001392:	b001      	add	sp, #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	08008b98 	.word	0x08008b98
 800139c:	08008ba4 	.word	0x08008ba4

080013a0 <decodeFrame>:
*
* Używa:
*   - memcpy: Kopiowanie danych
*   - calculateCrc16: Obliczanie sumy kontrolnej
************************************************************************/
bool decodeFrame(uint8_t *bx, Receive_Frame *frame, uint8_t len) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	4613      	mov	r3, r2
 80013ac:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];
        if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b06      	cmp	r3, #6
 80013b2:	d948      	bls.n	8001446 <decodeFrame+0xa6>
            uint8_t k = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	75fb      	strb	r3, [r7, #23]
            frame->receiver = bx[k++];
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	75fa      	strb	r2, [r7, #23]
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	701a      	strb	r2, [r3, #0]
            frame->sender = bx[k++];
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	75fa      	strb	r2, [r7, #23]
 80013d0:	461a      	mov	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	705a      	strb	r2, [r3, #1]
            memcpy(frame->command, &bx[k],COMMAND_LENGTH);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1c98      	adds	r0, r3, #2
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	4413      	add	r3, r2
 80013e6:	2203      	movs	r2, #3
 80013e8:	4619      	mov	r1, r3
 80013ea:	f006 fc62 	bl	8007cb2 <memcpy>
            k += COMMAND_LENGTH;
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	3303      	adds	r3, #3
 80013f2:	75fb      	strb	r3, [r7, #23]
            uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	3b07      	subs	r3, #7
 80013f8:	75bb      	strb	r3, [r7, #22]
            memcpy(frame->data, &bx[k],data_len);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1d58      	adds	r0, r3, #5
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	7dba      	ldrb	r2, [r7, #22]
 8001406:	4619      	mov	r1, r3
 8001408:	f006 fc53 	bl	8007cb2 <memcpy>
            k += data_len;
 800140c:	7dfa      	ldrb	r2, [r7, #23]
 800140e:	7dbb      	ldrb	r3, [r7, #22]
 8001410:	4413      	add	r3, r2
 8001412:	75fb      	strb	r3, [r7, #23]
            memcpy(incCrc, &bx[k], 2);
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	823b      	strh	r3, [r7, #16]
            calculateCrc16((uint8_t *)frame, k, ownCrc);
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	f107 0214 	add.w	r2, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	68b8      	ldr	r0, [r7, #8]
 800142a:	f7ff fa29 	bl	8000880 <calculateCrc16>
            if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 800142e:	7d3a      	ldrb	r2, [r7, #20]
 8001430:	7c3b      	ldrb	r3, [r7, #16]
 8001432:	429a      	cmp	r2, r3
 8001434:	d103      	bne.n	800143e <decodeFrame+0x9e>
 8001436:	7d7a      	ldrb	r2, [r7, #21]
 8001438:	7c7b      	ldrb	r3, [r7, #17]
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <decodeFrame+0xa2>
            	return false;
 800143e:	2300      	movs	r3, #0
 8001440:	e002      	b.n	8001448 <decodeFrame+0xa8>
            }
            return true;
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <decodeFrame+0xa8>
        }
        return false;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <processReceivedChar>:
* Błędy:
*   - Nieprawidłowe sekwencje escape
*   - Przepełnienie bufora
*   - Nieoczekiwane znaki początku/końca
************************************************************************/
void processReceivedChar(uint8_t received_char) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
    if (received_char == FRAME_START) {
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b7e      	cmp	r3, #126	@ 0x7e
 800145e:	d113      	bne.n	8001488 <processReceivedChar+0x38>
        if (!in_frame) {
 8001460:	4b4b      	ldr	r3, [pc, #300]	@ (8001590 <processReceivedChar+0x140>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	f083 0301 	eor.w	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <processReceivedChar+0x32>
            in_frame = true;
 800146e:	4b48      	ldr	r3, [pc, #288]	@ (8001590 <processReceivedChar+0x140>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
            bx_index = 0;
 8001474:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <processReceivedChar+0x144>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
            escape_detected = false;
 800147a:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <processReceivedChar+0x148>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
    	resetFrameState();
    }
}
 8001480:	e082      	b.n	8001588 <processReceivedChar+0x138>
            resetFrameState();
 8001482:	f7ff fa65 	bl	8000950 <resetFrameState>
}
 8001486:	e07f      	b.n	8001588 <processReceivedChar+0x138>
    } else if (received_char == FRAME_END) {
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b60      	cmp	r3, #96	@ 0x60
 800148c:	d12a      	bne.n	80014e4 <processReceivedChar+0x94>
        if (in_frame) {
 800148e:	4b40      	ldr	r3, [pc, #256]	@ (8001590 <processReceivedChar+0x140>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d01d      	beq.n	80014d2 <processReceivedChar+0x82>
            if (decodeFrame(bx, &ramka, bx_index)) {
 8001496:	4b3f      	ldr	r3, [pc, #252]	@ (8001594 <processReceivedChar+0x144>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	493f      	ldr	r1, [pc, #252]	@ (800159c <processReceivedChar+0x14c>)
 80014a0:	483f      	ldr	r0, [pc, #252]	@ (80015a0 <processReceivedChar+0x150>)
 80014a2:	f7ff ff7d 	bl	80013a0 <decodeFrame>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d009      	beq.n	80014c0 <processReceivedChar+0x70>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 80014ac:	4b3d      	ldr	r3, [pc, #244]	@ (80015a4 <processReceivedChar+0x154>)
 80014ae:	4a3e      	ldr	r2, [pc, #248]	@ (80015a8 <processReceivedChar+0x158>)
 80014b0:	2167      	movs	r1, #103	@ 0x67
 80014b2:	2068      	movs	r0, #104	@ 0x68
 80014b4:	f7ff fe4c 	bl	8001150 <prepareFrame>
                handleCommand(&ramka);
 80014b8:	4838      	ldr	r0, [pc, #224]	@ (800159c <processReceivedChar+0x14c>)
 80014ba:	f000 f879 	bl	80015b0 <handleCommand>
 80014be:	e005      	b.n	80014cc <processReceivedChar+0x7c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80014c0:	4b3a      	ldr	r3, [pc, #232]	@ (80015ac <processReceivedChar+0x15c>)
 80014c2:	4a39      	ldr	r2, [pc, #228]	@ (80015a8 <processReceivedChar+0x158>)
 80014c4:	2167      	movs	r1, #103	@ 0x67
 80014c6:	2068      	movs	r0, #104	@ 0x68
 80014c8:	f7ff fe42 	bl	8001150 <prepareFrame>
            resetFrameState();
 80014cc:	f7ff fa40 	bl	8000950 <resetFrameState>
}
 80014d0:	e05a      	b.n	8001588 <processReceivedChar+0x138>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80014d2:	4b36      	ldr	r3, [pc, #216]	@ (80015ac <processReceivedChar+0x15c>)
 80014d4:	4a34      	ldr	r2, [pc, #208]	@ (80015a8 <processReceivedChar+0x158>)
 80014d6:	2167      	movs	r1, #103	@ 0x67
 80014d8:	2068      	movs	r0, #104	@ 0x68
 80014da:	f7ff fe39 	bl	8001150 <prepareFrame>
            resetFrameState();
 80014de:	f7ff fa37 	bl	8000950 <resetFrameState>
}
 80014e2:	e051      	b.n	8001588 <processReceivedChar+0x138>
    } else if (in_frame) {
 80014e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <processReceivedChar+0x140>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d04b      	beq.n	8001584 <processReceivedChar+0x134>
        if (escape_detected) {
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <processReceivedChar+0x148>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d02f      	beq.n	8001554 <processReceivedChar+0x104>
            if (received_char == FRAME_START_STUFF) {
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b5e      	cmp	r3, #94	@ 0x5e
 80014f8:	d108      	bne.n	800150c <processReceivedChar+0xbc>
                bx[bx_index++] = FRAME_START;
 80014fa:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <processReceivedChar+0x144>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	4924      	ldr	r1, [pc, #144]	@ (8001594 <processReceivedChar+0x144>)
 8001502:	600a      	str	r2, [r1, #0]
 8001504:	4a26      	ldr	r2, [pc, #152]	@ (80015a0 <processReceivedChar+0x150>)
 8001506:	217e      	movs	r1, #126	@ 0x7e
 8001508:	54d1      	strb	r1, [r2, r3]
 800150a:	e01f      	b.n	800154c <processReceivedChar+0xfc>
            } else if (received_char == ESCAPE_CHAR_STUFF) {
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b5d      	cmp	r3, #93	@ 0x5d
 8001510:	d108      	bne.n	8001524 <processReceivedChar+0xd4>
                bx[bx_index++] = ESCAPE_CHAR;
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <processReceivedChar+0x144>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	491e      	ldr	r1, [pc, #120]	@ (8001594 <processReceivedChar+0x144>)
 800151a:	600a      	str	r2, [r1, #0]
 800151c:	4a20      	ldr	r2, [pc, #128]	@ (80015a0 <processReceivedChar+0x150>)
 800151e:	217d      	movs	r1, #125	@ 0x7d
 8001520:	54d1      	strb	r1, [r2, r3]
 8001522:	e013      	b.n	800154c <processReceivedChar+0xfc>
            } else if (received_char == FRAME_END_STUFF) {
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b26      	cmp	r3, #38	@ 0x26
 8001528:	d108      	bne.n	800153c <processReceivedChar+0xec>
                bx[bx_index++] = FRAME_END;
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <processReceivedChar+0x144>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	4918      	ldr	r1, [pc, #96]	@ (8001594 <processReceivedChar+0x144>)
 8001532:	600a      	str	r2, [r1, #0]
 8001534:	4a1a      	ldr	r2, [pc, #104]	@ (80015a0 <processReceivedChar+0x150>)
 8001536:	2160      	movs	r1, #96	@ 0x60
 8001538:	54d1      	strb	r1, [r2, r3]
 800153a:	e007      	b.n	800154c <processReceivedChar+0xfc>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <processReceivedChar+0x15c>)
 800153e:	4a1a      	ldr	r2, [pc, #104]	@ (80015a8 <processReceivedChar+0x158>)
 8001540:	2167      	movs	r1, #103	@ 0x67
 8001542:	2068      	movs	r0, #104	@ 0x68
 8001544:	f7ff fe04 	bl	8001150 <prepareFrame>
                resetFrameState();
 8001548:	f7ff fa02 	bl	8000950 <resetFrameState>
            escape_detected = false;
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <processReceivedChar+0x148>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
}
 8001552:	e019      	b.n	8001588 <processReceivedChar+0x138>
        } else if (received_char == ESCAPE_CHAR) {
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b7d      	cmp	r3, #125	@ 0x7d
 8001558:	d103      	bne.n	8001562 <processReceivedChar+0x112>
            escape_detected = true;
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <processReceivedChar+0x148>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
}
 8001560:	e012      	b.n	8001588 <processReceivedChar+0x138>
            if (bx_index < sizeof(bx)) {
 8001562:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <processReceivedChar+0x144>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800156a:	d208      	bcs.n	800157e <processReceivedChar+0x12e>
                bx[bx_index++] = received_char;
 800156c:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <processReceivedChar+0x144>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <processReceivedChar+0x144>)
 8001574:	600a      	str	r2, [r1, #0]
 8001576:	490a      	ldr	r1, [pc, #40]	@ (80015a0 <processReceivedChar+0x150>)
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	54ca      	strb	r2, [r1, r3]
}
 800157c:	e004      	b.n	8001588 <processReceivedChar+0x138>
            	resetFrameState();
 800157e:	f7ff f9e7 	bl	8000950 <resetFrameState>
}
 8001582:	e001      	b.n	8001588 <processReceivedChar+0x138>
    	resetFrameState();
 8001584:	f7ff f9e4 	bl	8000950 <resetFrameState>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000cc0 	.word	0x20000cc0
 8001594:	20000cbc 	.word	0x20000cbc
 8001598:	20000cba 	.word	0x20000cba
 800159c:	20000cc4 	.word	0x20000cc4
 80015a0:	20000bac 	.word	0x20000bac
 80015a4:	08008ba8 	.word	0x08008ba8
 80015a8:	08008b74 	.word	0x08008b74
 80015ac:	08008bb0 	.word	0x08008bb0

080015b0 <handleCommand>:
*   - Nieznana komenda
*   - Nieprawidłowe współrzędne
*   - Przekroczenie obszaru wyświetlacza
************************************************************************/
void handleCommand(Receive_Frame *frame)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b092      	sub	sp, #72	@ 0x48
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	6078      	str	r0, [r7, #4]
	CommandEntry commandTable[COMMAND_COUNT] = {
 80015b8:	4b44      	ldr	r3, [pc, #272]	@ (80016cc <handleCommand+0x11c>)
 80015ba:	f107 0414 	add.w	r4, r7, #20
 80015be:	461d      	mov	r5, r3
 80015c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015cc:	e884 0003 	stmia.w	r4, {r0, r1}
			{"ONP", executeONP},
			{"ONT", executeONT},
			{"ONN", executeONN},
			{"OFF", executeOFF}
	};
	for (int i = 0; i < COMMAND_COUNT; i++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015d4:	e06a      	b.n	80016ac <handleCommand+0xfc>
	        if (strncmp(frame->command, commandTable[i].command, COMMAND_LENGTH) == 0) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	1c98      	adds	r0, r3, #2
 80015da:	f107 0214 	add.w	r2, r7, #20
 80015de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	2203      	movs	r2, #3
 80015e6:	4619      	mov	r1, r3
 80015e8:	f006 fa6e 	bl	8007ac8 <strncmp>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d159      	bne.n	80016a6 <handleCommand+0xf6>
	        	if (strcmp(commandTable[i].command, "OFF") == 0 && strlen(frame->data) == 1) {
 80015f2:	f107 0214 	add.w	r2, r7, #20
 80015f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	4934      	ldr	r1, [pc, #208]	@ (80016d0 <handleCommand+0x120>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fde6 	bl	80001d0 <strcmp>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d117      	bne.n	800163a <handleCommand+0x8a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3305      	adds	r3, #5
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fde8 	bl	80001e4 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10f      	bne.n	800163a <handleCommand+0x8a>
	        	                lcdClear();
 800161a:	f000 f989 	bl	8001930 <lcdClear>
	        	                commandTable[i].function(frame);
 800161e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	3340      	adds	r3, #64	@ 0x40
 8001624:	443b      	add	r3, r7
 8001626:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
	        	                lcdCopy();
 800162e:	f000 f951 	bl	80018d4 <lcdCopy>
	        	                clearFrame(frame);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fa6a 	bl	8000b0c <clearFrame>
	        	                return;
 8001638:	e044      	b.n	80016c4 <handleCommand+0x114>
	        	}
	            int x, y;
	            if (parseCoordinates(frame->data, &x, &y)) {
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3305      	adds	r3, #5
 800163e:	f107 020c 	add.w	r2, r7, #12
 8001642:	f107 0110 	add.w	r1, r7, #16
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fce4 	bl	8001014 <parseCoordinates>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01f      	beq.n	8001692 <handleCommand+0xe2>
	                if (isWithinBounds(x, y)) {
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fcbd 	bl	8000fd8 <isWithinBounds>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00f      	beq.n	8001684 <handleCommand+0xd4>
	                    lcdClear();
 8001664:	f000 f964 	bl	8001930 <lcdClear>
	                    commandTable[i].function(frame);
 8001668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	3340      	adds	r3, #64	@ 0x40
 800166e:	443b      	add	r3, r7
 8001670:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
	                    lcdCopy();
 8001678:	f000 f92c 	bl	80018d4 <lcdCopy>
	                    clearFrame(frame);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fa45 	bl	8000b0c <clearFrame>
	                    return;
 8001682:	e01f      	b.n	80016c4 <handleCommand+0x114>
	                } else {
	                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "DISPLAY_AREA");
 8001684:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <handleCommand+0x124>)
 8001686:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <handleCommand+0x128>)
 8001688:	2167      	movs	r1, #103	@ 0x67
 800168a:	2068      	movs	r0, #104	@ 0x68
 800168c:	f7ff fd60 	bl	8001150 <prepareFrame>
	                    return;
 8001690:	e018      	b.n	80016c4 <handleCommand+0x114>
	                }
	            } else {
	                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3305      	adds	r3, #5
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <handleCommand+0x12c>)
 800169a:	4a0f      	ldr	r2, [pc, #60]	@ (80016d8 <handleCommand+0x128>)
 800169c:	2167      	movs	r1, #103	@ 0x67
 800169e:	2068      	movs	r0, #104	@ 0x68
 80016a0:	f7ff fd56 	bl	8001150 <prepareFrame>
	                return;
 80016a4:	e00e      	b.n	80016c4 <handleCommand+0x114>
	for (int i = 0; i < COMMAND_COUNT; i++) {
 80016a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016a8:	3301      	adds	r3, #1
 80016aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	dd91      	ble.n	80015d6 <handleCommand+0x26>
	            }
	        }
	    }
	    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3302      	adds	r3, #2
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <handleCommand+0x12c>)
 80016ba:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <handleCommand+0x128>)
 80016bc:	2167      	movs	r1, #103	@ 0x67
 80016be:	2068      	movs	r0, #104	@ 0x68
 80016c0:	f7ff fd46 	bl	8001150 <prepareFrame>
}
 80016c4:	3740      	adds	r7, #64	@ 0x40
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	08008bcc 	.word	0x08008bcc
 80016d0:	08008bb8 	.word	0x08008bb8
 80016d4:	08008bbc 	.word	0x08008bbc
 80016d8:	08008b74 	.word	0x08008b74
 80016dc:	08008b60 	.word	0x08008b60

080016e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <MX_GPIO_Init+0x90>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001770 <MX_GPIO_Init+0x90>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001702:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <MX_GPIO_Init+0x90>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <MX_GPIO_Init+0x90>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a17      	ldr	r2, [pc, #92]	@ (8001770 <MX_GPIO_Init+0x90>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <MX_GPIO_Init+0x90>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <MX_GPIO_Init+0x90>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <MX_GPIO_Init+0x90>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <MX_GPIO_Init+0x90>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f641 0106 	movw	r1, #6150	@ 0x1806
 8001744:	480b      	ldr	r0, [pc, #44]	@ (8001774 <MX_GPIO_Init+0x94>)
 8001746:	f001 f92d 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 800174a:	f641 0306 	movw	r3, #6150	@ 0x1806
 800174e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4619      	mov	r1, r3
 8001762:	4804      	ldr	r0, [pc, #16]	@ (8001774 <MX_GPIO_Init+0x94>)
 8001764:	f000 ff74 	bl	8002650 <HAL_GPIO_Init>

}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000
 8001774:	48000400 	.word	0x48000400

08001778 <lcdCmd>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdCmd(uint8_t cmd)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <lcdCmd+0x44>)
 800178a:	f001 f90b 	bl	80029a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001794:	4809      	ldr	r0, [pc, #36]	@ (80017bc <lcdCmd+0x44>)
 8001796:	f001 f905 	bl	80029a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800179a:	1df9      	adds	r1, r7, #7
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
 80017a0:	2201      	movs	r2, #1
 80017a2:	4807      	ldr	r0, [pc, #28]	@ (80017c0 <lcdCmd+0x48>)
 80017a4:	f002 fcd9 	bl	800415a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ae:	4803      	ldr	r0, [pc, #12]	@ (80017bc <lcdCmd+0x44>)
 80017b0:	f001 f8f8 	bl	80029a4 <HAL_GPIO_WritePin>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	48000400 	.word	0x48000400
 80017c0:	2000ad50 	.word	0x2000ad50

080017c4 <lcdData>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdData(uint8_t data)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017d4:	480c      	ldr	r0, [pc, #48]	@ (8001808 <lcdData+0x44>)
 80017d6:	f001 f8e5 	bl	80029a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017e0:	4809      	ldr	r0, [pc, #36]	@ (8001808 <lcdData+0x44>)
 80017e2:	f001 f8df 	bl	80029a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80017e6:	1df9      	adds	r1, r7, #7
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	2201      	movs	r2, #1
 80017ee:	4807      	ldr	r0, [pc, #28]	@ (800180c <lcdData+0x48>)
 80017f0:	f002 fcb3 	bl	800415a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017fa:	4803      	ldr	r0, [pc, #12]	@ (8001808 <lcdData+0x44>)
 80017fc:	f001 f8d2 	bl	80029a4 <HAL_GPIO_WritePin>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	48000400 	.word	0x48000400
 800180c:	2000ad50 	.word	0x2000ad50

08001810 <lcdSend>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komendy
*   - lcd_data: wysyłanie danych
************************************************************************/
static void lcdSend(uint16_t value)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <lcdSend+0x20>
		lcdCmd(value);
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ffa5 	bl	8001778 <lcdCmd>
	} else {
		lcdData(value);
	}
}
 800182e:	e004      	b.n	800183a <lcdSend+0x2a>
		lcdData(value);
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ffc5 	bl	80017c4 <lcdData>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <lcdData16>:
*   - value: 16-bitowa wartość do wysłania
* Korzysta z:
*   - lcd_data: wysyłanie pojedynczych bajtów
************************************************************************/
static void lcdData16(uint16_t value)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	b29b      	uxth	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ffb5 	bl	80017c4 <lcdData>
	lcdData(value);
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ffb0 	bl	80017c4 <lcdData>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <lcdSetWindow>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komend CASET i RASET
*   - lcd_data16: wysyłanie współrzędnych
************************************************************************/
static void lcdSetWindow(int x, int y, int width, int height)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 800187a:	202a      	movs	r0, #42	@ 0x2a
 800187c:	f7ff ff7c 	bl	8001778 <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	b29b      	uxth	r3, r3
 8001884:	3301      	adds	r3, #1
 8001886:	b29b      	uxth	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ffda 	bl	8001842 <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	b29a      	uxth	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffd1 	bl	8001842 <lcdData16>

  lcdCmd(ST7735S_RASET);
 80018a0:	202b      	movs	r0, #43	@ 0x2b
 80018a2:	f7ff ff69 	bl	8001778 <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3302      	adds	r3, #2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ffc7 	bl	8001842 <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	4413      	add	r3, r2
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ffbc 	bl	8001842 <lcdData16>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <lcdCopy>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdCopy(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	22a0      	movs	r2, #160	@ 0xa0
 80018dc:	2100      	movs	r1, #0
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff ffc4 	bl	800186c <lcdSetWindow>
	lcdCmd(ST7735S_RAMWR);
 80018e4:	202c      	movs	r0, #44	@ 0x2c
 80018e6:	f7ff ff47 	bl	8001778 <lcdCmd>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <lcdCopy+0x50>)
 80018f2:	f001 f857 	bl	80029a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018fc:	4809      	ldr	r0, [pc, #36]	@ (8001924 <lcdCopy+0x50>)
 80018fe:	f001 f851 	bl	80029a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 800190a:	4907      	ldr	r1, [pc, #28]	@ (8001928 <lcdCopy+0x54>)
 800190c:	4807      	ldr	r0, [pc, #28]	@ (800192c <lcdCopy+0x58>)
 800190e:	f002 fc24 	bl	800415a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <lcdCopy+0x50>)
 800191a:	f001 f843 	bl	80029a4 <HAL_GPIO_WritePin>
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	48000400 	.word	0x48000400
 8001928:	20000d4c 	.word	0x20000d4c
 800192c:	2000ad50 	.word	0x2000ad50

08001930 <lcdClear>:
*   2. Przesyła wyzerowany bufor do wyświetlacza
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdClear(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
	lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	22a0      	movs	r2, #160	@ 0xa0
 800193a:	2100      	movs	r1, #0
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff ff95 	bl	800186c <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 8001942:	202c      	movs	r0, #44	@ 0x2c
 8001944:	f7ff ff18 	bl	8001778 <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800194e:	4815      	ldr	r0, [pc, #84]	@ (80019a4 <lcdClear+0x74>)
 8001950:	f001 f828 	bl	80029a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800195a:	4812      	ldr	r0, [pc, #72]	@ (80019a4 <lcdClear+0x74>)
 800195c:	f001 f822 	bl	80029a4 <HAL_GPIO_WritePin>
    for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	e007      	b.n	8001976 <lcdClear+0x46>
        frame_buffer[i] = 0x0000; // Czarny kolor
 8001966:	4a10      	ldr	r2, [pc, #64]	@ (80019a8 <lcdClear+0x78>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2100      	movs	r1, #0
 800196c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3301      	adds	r3, #1
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800197c:	dbf3      	blt.n	8001966 <lcdClear+0x36>
    }
    HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001986:	4908      	ldr	r1, [pc, #32]	@ (80019a8 <lcdClear+0x78>)
 8001988:	4808      	ldr	r0, [pc, #32]	@ (80019ac <lcdClear+0x7c>)
 800198a:	f002 fbe6 	bl	800415a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800198e:	2201      	movs	r2, #1
 8001990:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001994:	4803      	ldr	r0, [pc, #12]	@ (80019a4 <lcdClear+0x74>)
 8001996:	f001 f805 	bl	80029a4 <HAL_GPIO_WritePin>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	48000400 	.word	0x48000400
 80019a8:	20000d4c 	.word	0x20000d4c
 80019ac:	2000ad50 	.word	0x2000ad50

080019b0 <lcdInit>:
*   4. Włącza wyświetlacz i podświetlenie
* Korzysta z:
*   - lcd_send: wysyłanie komend inicjalizacyjnych
*   - HAL_GPIO_WritePin: sterowanie pinami RST i BL
************************************************************************/
void lcdInit(void) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2104      	movs	r1, #4
 80019ba:	4819      	ldr	r0, [pc, #100]	@ (8001a20 <lcdInit+0x70>)
 80019bc:	f000 fff2 	bl	80029a4 <HAL_GPIO_WritePin>
    delay(100);
 80019c0:	2064      	movs	r0, #100	@ 0x64
 80019c2:	f000 f899 	bl	8001af8 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	2104      	movs	r1, #4
 80019ca:	4815      	ldr	r0, [pc, #84]	@ (8001a20 <lcdInit+0x70>)
 80019cc:	f000 ffea 	bl	80029a4 <HAL_GPIO_WritePin>
    delay(100);
 80019d0:	2064      	movs	r0, #100	@ 0x64
 80019d2:	f000 f891 	bl	8001af8 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	e009      	b.n	80019f0 <lcdInit+0x40>
        lcdSend(init_table[i]);
 80019dc:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <lcdInit+0x74>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff13 	bl	8001810 <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3301      	adds	r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b4b      	cmp	r3, #75	@ 0x4b
 80019f4:	d9f2      	bls.n	80019dc <lcdInit+0x2c>
    }
    delay(200);
 80019f6:	20c8      	movs	r0, #200	@ 0xc8
 80019f8:	f000 f87e 	bl	8001af8 <delay>
    lcdCmd(ST7735S_SLPOUT);
 80019fc:	2011      	movs	r0, #17
 80019fe:	f7ff febb 	bl	8001778 <lcdCmd>
    delay(120);
 8001a02:	2078      	movs	r0, #120	@ 0x78
 8001a04:	f000 f878 	bl	8001af8 <delay>
    lcdCmd(ST7735S_DISPON);
 8001a08:	2029      	movs	r0, #41	@ 0x29
 8001a0a:	f7ff feb5 	bl	8001778 <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2102      	movs	r1, #2
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <lcdInit+0x70>)
 8001a14:	f000 ffc6 	bl	80029a4 <HAL_GPIO_WritePin>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	48000400 	.word	0x48000400
 8001a24:	08011f98 	.word	0x08011f98

08001a28 <lcdPutPixel>:
* Parametry:
*   - x, y: Współrzędne piksela
*   - color: Kolor w formacie RGB565
************************************************************************/
void lcdPutPixel(int x, int y, uint16_t color)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	4613      	mov	r3, r2
 8001a34:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	015b      	lsls	r3, r3, #5
 8001a40:	461a      	mov	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	4905      	ldr	r1, [pc, #20]	@ (8001a5c <lcdPutPixel+0x34>)
 8001a48:	88fa      	ldrh	r2, [r7, #6]
 8001a4a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000d4c 	.word	0x20000d4c

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	@ (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	@ (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ffc2 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <delay>:
*   - delayMs: Liczba milisekund do odczekania

* Korzysta z:
*   - tick: Globalna zmienna zwiększana w przerwaniu systemowym
************************************************************************/
void delay(uint32_t delayMs){
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <delay+0x2c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8001b06:	bf00      	nop
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	441a      	add	r2, r3
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <delay+0x2c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d8f8      	bhi.n	8001b08 <delay+0x10>
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	2000ad4c 	.word	0x2000ad4c

08001b28 <waitForFrame>:
*   - USART_kbhit: Sprawdzenie dostępności danych
*   - USART_getchar: Pobranie znaku z UART
*   - processReceivedChar: Przetworzenie odebranego znaku
************************************************************************/
void waitForFrame(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001b2e:	f7fe fd49 	bl	80005c4 <USART_kbhit>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <waitForFrame+0x20>
	        uint8_t received_char = USART_getchar();
 8001b38:	f7fe fd56 	bl	80005e8 <USART_getchar>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(received_char);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fc84 	bl	8001450 <processReceivedChar>
	 }
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b54:	f000 fb77 	bl	8002246 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b58:	f000 f810 	bl	8001b7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001b5c:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <main+0x28>)
 8001b5e:	f7ff ffa9 	bl	8001ab4 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b62:	f7ff fdbd 	bl	80016e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b66:	f000 fa99 	bl	800209c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001b6a:	f000 f85f 	bl	8001c2c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(); // inicjalizacja wyświetlacza
 8001b6e:	f7ff ff1f 	bl	80019b0 <lcdInit>
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
    /* USER CODE END WHILE */

	  waitForFrame(); //czekanie na odbiór ramki
 8001b72:	f7ff ffd9 	bl	8001b28 <waitForFrame>
 8001b76:	e7fc      	b.n	8001b72 <main+0x22>
 8001b78:	00013880 	.word	0x00013880

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b096      	sub	sp, #88	@ 0x58
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	2244      	movs	r2, #68	@ 0x44
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f005 ff94 	bl	8007ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	463b      	mov	r3, r7
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ba2:	f000 ff25 	bl	80029f0 <HAL_PWREx_ControlVoltageScaling>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bac:	f000 f838 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bbc:	2360      	movs	r3, #96	@ 0x60
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001bcc:	2328      	movs	r3, #40	@ 0x28
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 ff5b 	bl	8002a9c <HAL_RCC_OscConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001bec:	f000 f818 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	2104      	movs	r1, #4
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 fb23 	bl	8003254 <HAL_RCC_ClockConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c14:	f000 f804 	bl	8001c20 <Error_Handler>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3758      	adds	r7, #88	@ 0x58
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <Error_Handler+0x8>

08001c2c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <MX_SPI2_Init+0x78>)
 8001c34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c44:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c46:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c52:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c62:	2210      	movs	r2, #16
 8001c64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c78:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <MX_SPI2_Init+0x74>)
 8001c8c:	f002 f9c2 	bl	8004014 <HAL_SPI_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c96:	f7ff ffc3 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000ad50 	.word	0x2000ad50
 8001ca4:	40003800 	.word	0x40003800

08001ca8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a25      	ldr	r2, [pc, #148]	@ (8001d5c <HAL_SPI_MspInit+0xb4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d144      	bne.n	8001d54 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <HAL_SPI_MspInit+0xb8>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	4a24      	ldr	r2, [pc, #144]	@ (8001d60 <HAL_SPI_MspInit+0xb8>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd6:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <HAL_SPI_MspInit+0xb8>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <HAL_SPI_MspInit+0xb8>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d60 <HAL_SPI_MspInit+0xb8>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <HAL_SPI_MspInit+0xb8>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_SPI_MspInit+0xb8>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfe:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_SPI_MspInit+0xb8>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d06:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <HAL_SPI_MspInit+0xb8>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001d12:	2308      	movs	r3, #8
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d22:	2305      	movs	r3, #5
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <HAL_SPI_MspInit+0xbc>)
 8001d2e:	f000 fc8f 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001d32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d44:	2305      	movs	r3, #5
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <HAL_SPI_MspInit+0xc0>)
 8001d50:	f000 fc7e 	bl	8002650 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40003800 	.word	0x40003800
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000800 	.word	0x48000800
 8001d68:	48000400 	.word	0x48000400

08001d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <HAL_MspInit+0x44>)
 8001d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d76:	4a0e      	ldr	r2, [pc, #56]	@ (8001db0 <HAL_MspInit+0x44>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <HAL_MspInit+0x44>)
 8001d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_MspInit+0x44>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	4a08      	ldr	r2, [pc, #32]	@ (8001db0 <HAL_MspInit+0x44>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_MspInit+0x44>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000

08001db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <NMI_Handler+0x4>

08001dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0c:	f000 fa70 	bl	80022f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  tick++; // zwiększanie zmiennej dla funkcji delay()
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <SysTick_Handler+0x18>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a02      	ldr	r2, [pc, #8]	@ (8001e20 <SysTick_Handler+0x18>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000ad4c 	.word	0x2000ad4c

08001e24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e28:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <USART2_IRQHandler+0x10>)
 8001e2a:	f002 fd69 	bl	8004900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000adb8 	.word	0x2000adb8

08001e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return 1;
 8001e3c:	2301      	movs	r3, #1
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_kill>:

int _kill(int pid, int sig)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e52:	f005 ff01 	bl	8007c58 <__errno>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2216      	movs	r2, #22
 8001e5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_exit>:

void _exit (int status)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ffe7 	bl	8001e48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e7a:	bf00      	nop
 8001e7c:	e7fd      	b.n	8001e7a <_exit+0x12>

08001e7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e00a      	b.n	8001ea6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e90:	f3af 8000 	nop.w
 8001e94:	4601      	mov	r1, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	60ba      	str	r2, [r7, #8]
 8001e9c:	b2ca      	uxtb	r2, r1
 8001e9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	dbf0      	blt.n	8001e90 <_read+0x12>
  }

  return len;
 8001eae:	687b      	ldr	r3, [r7, #4]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e009      	b.n	8001ede <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	60ba      	str	r2, [r7, #8]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbf1      	blt.n	8001eca <_write+0x12>
  }
  return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_close>:

int _close(int file)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f18:	605a      	str	r2, [r3, #4]
  return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_isatty>:

int _isatty(int file)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f005 fe66 	bl	8007c58 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20018000 	.word	0x20018000
 8001fb8:	00002000 	.word	0x00002000
 8001fbc:	2000adb4 	.word	0x2000adb4
 8001fc0:	2000af90 	.word	0x2000af90

08001fc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <HAL_UART_TxCpltCallback>:
* Korzysta z:
*   txRingBuffer - struktura bufora kołowego transmisji
*   USART_TxBuf - bufor danych do transmisji
*   HAL_UART_Transmit_IT - funkcja HAL rozpoczynająca transmisję
************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a13      	ldr	r2, [pc, #76]	@ (8002040 <HAL_UART_TxCpltCallback+0x58>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d11e      	bne.n	8002036 <HAL_UART_TxCpltCallback+0x4e>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8001ff8:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_UART_TxCpltCallback+0x5c>)
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <HAL_UART_TxCpltCallback+0x5c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d018      	beq.n	8002036 <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8002004:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <HAL_UART_TxCpltCallback+0x5c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a0f      	ldr	r2, [pc, #60]	@ (8002048 <HAL_UART_TxCpltCallback+0x60>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex++;
 800200e:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <HAL_UART_TxCpltCallback+0x5c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	3301      	adds	r3, #1
 8002014:	4a0b      	ldr	r2, [pc, #44]	@ (8002044 <HAL_UART_TxCpltCallback+0x5c>)
 8002016:	6053      	str	r3, [r2, #4]
		   if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex=0;
 8002018:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <HAL_UART_TxCpltCallback+0x5c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002020:	d302      	bcc.n	8002028 <HAL_UART_TxCpltCallback+0x40>
 8002022:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <HAL_UART_TxCpltCallback+0x5c>)
 8002024:	2200      	movs	r2, #0
 8002026:	605a      	str	r2, [r3, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8002028:	f107 030f 	add.w	r3, r7, #15
 800202c:	2201      	movs	r2, #1
 800202e:	4619      	mov	r1, r3
 8002030:	4803      	ldr	r0, [pc, #12]	@ (8002040 <HAL_UART_TxCpltCallback+0x58>)
 8002032:	f002 fbbb 	bl	80047ac <HAL_UART_Transmit_IT>
	   }
   }
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000adb8 	.word	0x2000adb8
 8002044:	2000029c 	.word	0x2000029c
 8002048:	200002ac 	.word	0x200002ac

0800204c <HAL_UART_RxCpltCallback>:
* Korzysta z:
*   rxRingBuffer - struktura bufora kołowego odbioru
*   USART_RxBuf - bufor danych odebranych
*   HAL_UART_Receive_IT - funkcja HAL rozpoczynająca odbiór
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0e      	ldr	r2, [pc, #56]	@ (8002090 <HAL_UART_RxCpltCallback+0x44>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d114      	bne.n	8002086 <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex++;
 800205c:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <HAL_UART_RxCpltCallback+0x48>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	3301      	adds	r3, #1
 8002062:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <HAL_UART_RxCpltCallback+0x48>)
 8002064:	6093      	str	r3, [r2, #8]
		 if(rxRingBuffer.writeIndex >= RX_BUFFER_SIZE) rxRingBuffer.writeIndex=0;
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_UART_RxCpltCallback+0x48>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2bff      	cmp	r3, #255	@ 0xff
 800206c:	d902      	bls.n	8002074 <HAL_UART_RxCpltCallback+0x28>
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <HAL_UART_RxCpltCallback+0x48>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <HAL_UART_RxCpltCallback+0x48>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a07      	ldr	r2, [pc, #28]	@ (8002098 <HAL_UART_RxCpltCallback+0x4c>)
 800207a:	4413      	add	r3, r2
 800207c:	2201      	movs	r2, #1
 800207e:	4619      	mov	r1, r3
 8002080:	4803      	ldr	r0, [pc, #12]	@ (8002090 <HAL_UART_RxCpltCallback+0x44>)
 8002082:	f002 fbf1 	bl	8004868 <HAL_UART_Receive_IT>

	 }
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000adb8 	.word	0x2000adb8
 8002094:	2000028c 	.word	0x2000028c
 8002098:	20000aac 	.word	0x20000aac

0800209c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002118 <MX_USART2_UART_Init+0x7c>)
 80020a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ae:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b4:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ba:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020c0:	4b14      	ldr	r3, [pc, #80]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020c2:	220c      	movs	r2, #12
 80020c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c6:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020cc:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020da:	2200      	movs	r2, #0
 80020dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020de:	480d      	ldr	r0, [pc, #52]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 80020e0:	f002 fb16 	bl	8004710 <HAL_UART_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020ea:	f7ff fd99 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 80020ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020f2:	490a      	ldr	r1, [pc, #40]	@ (800211c <MX_USART2_UART_Init+0x80>)
 80020f4:	480a      	ldr	r0, [pc, #40]	@ (8002120 <MX_USART2_UART_Init+0x84>)
 80020f6:	f7fe fa4b 	bl	8000590 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 80020fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020fe:	4909      	ldr	r1, [pc, #36]	@ (8002124 <MX_USART2_UART_Init+0x88>)
 8002100:	4809      	ldr	r0, [pc, #36]	@ (8002128 <MX_USART2_UART_Init+0x8c>)
 8002102:	f7fe fa45 	bl	8000590 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 8002106:	2201      	movs	r2, #1
 8002108:	4904      	ldr	r1, [pc, #16]	@ (800211c <MX_USART2_UART_Init+0x80>)
 800210a:	4802      	ldr	r0, [pc, #8]	@ (8002114 <MX_USART2_UART_Init+0x78>)
 800210c:	f002 fbac 	bl	8004868 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2000adb8 	.word	0x2000adb8
 8002118:	40004400 	.word	0x40004400
 800211c:	20000aac 	.word	0x20000aac
 8002120:	2000028c 	.word	0x2000028c
 8002124:	200002ac 	.word	0x200002ac
 8002128:	2000029c 	.word	0x2000029c

0800212c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b0ac      	sub	sp, #176	@ 0xb0
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2288      	movs	r2, #136	@ 0x88
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f005 fcb3 	bl	8007ab8 <memset>
  if(uartHandle->Instance==USART2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a25      	ldr	r2, [pc, #148]	@ (80021ec <HAL_UART_MspInit+0xc0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d143      	bne.n	80021e4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800215c:	2302      	movs	r3, #2
 800215e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002160:	2300      	movs	r3, #0
 8002162:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4618      	mov	r0, r3
 800216a:	f001 fa97 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002174:	f7ff fd54 	bl	8001c20 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002178:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_UART_MspInit+0xc4>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217c:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <HAL_UART_MspInit+0xc4>)
 800217e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002182:	6593      	str	r3, [r2, #88]	@ 0x58
 8002184:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <HAL_UART_MspInit+0xc4>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <HAL_UART_MspInit+0xc4>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002194:	4a16      	ldr	r2, [pc, #88]	@ (80021f0 <HAL_UART_MspInit+0xc4>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <HAL_UART_MspInit+0xc4>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a8:	230c      	movs	r3, #12
 80021aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c0:	2307      	movs	r3, #7
 80021c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021ca:	4619      	mov	r1, r3
 80021cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d0:	f000 fa3e 	bl	8002650 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2100      	movs	r1, #0
 80021d8:	2026      	movs	r0, #38	@ 0x26
 80021da:	f000 f984 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021de:	2026      	movs	r0, #38	@ 0x26
 80021e0:	f000 f99d 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021e4:	bf00      	nop
 80021e6:	37b0      	adds	r7, #176	@ 0xb0
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40004400 	.word	0x40004400
 80021f0:	40021000 	.word	0x40021000

080021f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800222c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f8:	f7ff fee4 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021fc:	480c      	ldr	r0, [pc, #48]	@ (8002230 <LoopForever+0x6>)
  ldr r1, =_edata
 80021fe:	490d      	ldr	r1, [pc, #52]	@ (8002234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002200:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <LoopForever+0xe>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002204:	e002      	b.n	800220c <LoopCopyDataInit>

08002206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220a:	3304      	adds	r3, #4

0800220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002210:	d3f9      	bcc.n	8002206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002212:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002214:	4c0a      	ldr	r4, [pc, #40]	@ (8002240 <LoopForever+0x16>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002218:	e001      	b.n	800221e <LoopFillZerobss>

0800221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800221c:	3204      	adds	r2, #4

0800221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002220:	d3fb      	bcc.n	800221a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002222:	f005 fd1f 	bl	8007c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002226:	f7ff fc93 	bl	8001b50 <main>

0800222a <LoopForever>:

LoopForever:
    b LoopForever
 800222a:	e7fe      	b.n	800222a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800222c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002234:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002238:	0801226c 	.word	0x0801226c
  ldr r2, =_sbss
 800223c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002240:	2000af90 	.word	0x2000af90

08002244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002244:	e7fe      	b.n	8002244 <ADC1_2_IRQHandler>

08002246 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 f93d 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002256:	200f      	movs	r0, #15
 8002258:	f000 f80e 	bl	8002278 <HAL_InitTick>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	71fb      	strb	r3, [r7, #7]
 8002266:	e001      	b.n	800226c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002268:	f7ff fd80 	bl	8001d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800226c:	79fb      	ldrb	r3, [r7, #7]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <HAL_InitTick+0x6c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d023      	beq.n	80022d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800228c:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <HAL_InitTick+0x70>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <HAL_InitTick+0x6c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f949 	bl	800253a <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d809      	bhi.n	80022c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f000 f913 	bl	80024e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022c0:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <HAL_InitTick+0x74>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e007      	b.n	80022d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e004      	b.n	80022d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	e001      	b.n	80022d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000208 	.word	0x20000208
 80022e8:	20000200 	.word	0x20000200
 80022ec:	20000204 	.word	0x20000204

080022f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_IncTick+0x20>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_IncTick+0x24>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <HAL_IncTick+0x24>)
 8002302:	6013      	str	r3, [r2, #0]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000208 	.word	0x20000208
 8002314:	2000ae40 	.word	0x2000ae40

08002318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return uwTick;
 800231c:	4b03      	ldr	r3, [pc, #12]	@ (800232c <HAL_GetTick+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	2000ae40 	.word	0x2000ae40

08002330 <__NVIC_SetPriorityGrouping>:
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	@ (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	@ (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	@ (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff3e 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff8e 	bl	8002424 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5d 	bl	80023d0 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff31 	bl	8002394 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa2 	bl	800248c <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d008      	beq.n	800257c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2204      	movs	r2, #4
 800256e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e022      	b.n	80025c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 020e 	bic.w	r2, r2, #14
 800258a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a0:	f003 021c 	and.w	r2, r3, #28
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	2101      	movs	r1, #1
 80025aa:	fa01 f202 	lsl.w	r2, r1, r2
 80025ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d005      	beq.n	80025f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2204      	movs	r2, #4
 80025ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e029      	b.n	8002646 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 020e 	bic.w	r2, r2, #14
 8002600:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	f003 021c 	and.w	r2, r3, #28
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	2101      	movs	r1, #1
 8002620:	fa01 f202 	lsl.w	r2, r1, r2
 8002624:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
    }
  }
  return status;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265e:	e17f      	b.n	8002960 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	4013      	ands	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8171 	beq.w	800295a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d005      	beq.n	8002690 <HAL_GPIO_Init+0x40>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d130      	bne.n	80026f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c6:	2201      	movs	r2, #1
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 0201 	and.w	r2, r3, #1
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d118      	bne.n	8002730 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002704:	2201      	movs	r2, #1
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	08db      	lsrs	r3, r3, #3
 800271a:	f003 0201 	and.w	r2, r3, #1
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b03      	cmp	r3, #3
 800273a:	d017      	beq.n	800276c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d123      	bne.n	80027c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3208      	adds	r2, #8
 8002780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	08da      	lsrs	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3208      	adds	r2, #8
 80027ba:	6939      	ldr	r1, [r7, #16]
 80027bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0203 	and.w	r2, r3, #3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80ac 	beq.w	800295a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	4b5f      	ldr	r3, [pc, #380]	@ (8002980 <HAL_GPIO_Init+0x330>)
 8002804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002806:	4a5e      	ldr	r2, [pc, #376]	@ (8002980 <HAL_GPIO_Init+0x330>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6613      	str	r3, [r2, #96]	@ 0x60
 800280e:	4b5c      	ldr	r3, [pc, #368]	@ (8002980 <HAL_GPIO_Init+0x330>)
 8002810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800281a:	4a5a      	ldr	r2, [pc, #360]	@ (8002984 <HAL_GPIO_Init+0x334>)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002844:	d025      	beq.n	8002892 <HAL_GPIO_Init+0x242>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4f      	ldr	r2, [pc, #316]	@ (8002988 <HAL_GPIO_Init+0x338>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01f      	beq.n	800288e <HAL_GPIO_Init+0x23e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4e      	ldr	r2, [pc, #312]	@ (800298c <HAL_GPIO_Init+0x33c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x23a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4d      	ldr	r2, [pc, #308]	@ (8002990 <HAL_GPIO_Init+0x340>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x236>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4c      	ldr	r2, [pc, #304]	@ (8002994 <HAL_GPIO_Init+0x344>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x232>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4b      	ldr	r2, [pc, #300]	@ (8002998 <HAL_GPIO_Init+0x348>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x22e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4a      	ldr	r2, [pc, #296]	@ (800299c <HAL_GPIO_Init+0x34c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x22a>
 8002876:	2306      	movs	r3, #6
 8002878:	e00c      	b.n	8002894 <HAL_GPIO_Init+0x244>
 800287a:	2307      	movs	r3, #7
 800287c:	e00a      	b.n	8002894 <HAL_GPIO_Init+0x244>
 800287e:	2305      	movs	r3, #5
 8002880:	e008      	b.n	8002894 <HAL_GPIO_Init+0x244>
 8002882:	2304      	movs	r3, #4
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x244>
 8002886:	2303      	movs	r3, #3
 8002888:	e004      	b.n	8002894 <HAL_GPIO_Init+0x244>
 800288a:	2302      	movs	r3, #2
 800288c:	e002      	b.n	8002894 <HAL_GPIO_Init+0x244>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_GPIO_Init+0x244>
 8002892:	2300      	movs	r3, #0
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	f002 0203 	and.w	r2, r2, #3
 800289a:	0092      	lsls	r2, r2, #2
 800289c:	4093      	lsls	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028a4:	4937      	ldr	r1, [pc, #220]	@ (8002984 <HAL_GPIO_Init+0x334>)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	3302      	adds	r3, #2
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028d6:	4a32      	ldr	r2, [pc, #200]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028dc:	4b30      	ldr	r3, [pc, #192]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002900:	4a27      	ldr	r2, [pc, #156]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002906:	4b26      	ldr	r3, [pc, #152]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800292a:	4a1d      	ldr	r2, [pc, #116]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002954:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3301      	adds	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa22 f303 	lsr.w	r3, r2, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	f47f ae78 	bne.w	8002660 <HAL_GPIO_Init+0x10>
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	48000400 	.word	0x48000400
 800298c:	48000800 	.word	0x48000800
 8002990:	48000c00 	.word	0x48000c00
 8002994:	48001000 	.word	0x48001000
 8002998:	48001400 	.word	0x48001400
 800299c:	48001800 	.word	0x48001800
 80029a0:	40010400 	.word	0x40010400

080029a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
 80029b0:	4613      	mov	r3, r2
 80029b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b4:	787b      	ldrb	r3, [r7, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029c0:	e002      	b.n	80029c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <HAL_PWREx_GetVoltageRange+0x18>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40007000 	.word	0x40007000

080029f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029fe:	d130      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a00:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a0c:	d038      	beq.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a16:	4a1e      	ldr	r2, [pc, #120]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2232      	movs	r2, #50	@ 0x32
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	4a1b      	ldr	r2, [pc, #108]	@ (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	3301      	adds	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a34:	e002      	b.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a3c:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a48:	d102      	bne.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f2      	bne.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a50:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5c:	d110      	bne.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e00f      	b.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a62:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6e:	d007      	beq.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a70:	4b07      	ldr	r3, [pc, #28]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a78:	4a05      	ldr	r2, [pc, #20]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40007000 	.word	0x40007000
 8002a94:	20000200 	.word	0x20000200
 8002a98:	431bde83 	.word	0x431bde83

08002a9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e3ca      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aae:	4b97      	ldr	r3, [pc, #604]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab8:	4b94      	ldr	r3, [pc, #592]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80e4 	beq.w	8002c98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x4a>
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	f040 808b 	bne.w	8002bf4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 8087 	bne.w	8002bf4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ae6:	4b89      	ldr	r3, [pc, #548]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_RCC_OscConfig+0x62>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e3a2      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	4b82      	ldr	r3, [pc, #520]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <HAL_RCC_OscConfig+0x7c>
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b16:	e005      	b.n	8002b24 <HAL_RCC_OscConfig+0x88>
 8002b18:	4b7c      	ldr	r3, [pc, #496]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d223      	bcs.n	8002b70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fd55 	bl	80035dc <RCC_SetFlashLatencyFromMSIRange>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e383      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3c:	4b73      	ldr	r3, [pc, #460]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a72      	ldr	r2, [pc, #456]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b42:	f043 0308 	orr.w	r3, r3, #8
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b70      	ldr	r3, [pc, #448]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	496d      	ldr	r1, [pc, #436]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	4968      	ldr	r1, [pc, #416]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
 8002b6e:	e025      	b.n	8002bbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b70:	4b66      	ldr	r3, [pc, #408]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a65      	ldr	r2, [pc, #404]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b63      	ldr	r3, [pc, #396]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4960      	ldr	r1, [pc, #384]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	495b      	ldr	r1, [pc, #364]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fd15 	bl	80035dc <RCC_SetFlashLatencyFromMSIRange>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e343      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bbc:	f000 fc4a 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b52      	ldr	r3, [pc, #328]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	4950      	ldr	r1, [pc, #320]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8002d14 <HAL_RCC_OscConfig+0x278>)
 8002bda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fb49 	bl	8002278 <HAL_InitTick>
 8002be6:	4603      	mov	r3, r0
 8002be8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d052      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	e327      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d032      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bfc:	4b43      	ldr	r3, [pc, #268]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a42      	ldr	r2, [pc, #264]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c08:	f7ff fb86 	bl	8002318 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c10:	f7ff fb82 	bl	8002318 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e310      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c22:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2e:	4b37      	ldr	r3, [pc, #220]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a36      	ldr	r2, [pc, #216]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b34      	ldr	r3, [pc, #208]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4931      	ldr	r1, [pc, #196]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	492c      	ldr	r1, [pc, #176]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	e01a      	b.n	8002c98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c62:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a29      	ldr	r2, [pc, #164]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c6e:	f7ff fb53 	bl	8002318 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c76:	f7ff fb4f 	bl	8002318 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e2dd      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c88:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x1da>
 8002c94:	e000      	b.n	8002c98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d074      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x21a>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d10e      	bne.n	8002cce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d10b      	bne.n	8002cce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d064      	beq.n	8002d8c <HAL_RCC_OscConfig+0x2f0>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d160      	bne.n	8002d8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e2ba      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x24a>
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	e026      	b.n	8002d34 <HAL_RCC_OscConfig+0x298>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cee:	d115      	bne.n	8002d1c <HAL_RCC_OscConfig+0x280>
 8002cf0:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a05      	ldr	r2, [pc, #20]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a02      	ldr	r2, [pc, #8]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	e014      	b.n	8002d34 <HAL_RCC_OscConfig+0x298>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08012030 	.word	0x08012030
 8002d14:	20000200 	.word	0x20000200
 8002d18:	20000204 	.word	0x20000204
 8002d1c:	4ba0      	ldr	r3, [pc, #640]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a9f      	ldr	r2, [pc, #636]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b9d      	ldr	r3, [pc, #628]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a9c      	ldr	r2, [pc, #624]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7ff faec 	bl	8002318 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7ff fae8 	bl	8002318 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e276      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d56:	4b92      	ldr	r3, [pc, #584]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2a8>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7ff fad8 	bl	8002318 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7ff fad4 	bl	8002318 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e262      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d7e:	4b88      	ldr	r3, [pc, #544]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2d0>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d060      	beq.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_OscConfig+0x310>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d119      	bne.n	8002dda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d116      	bne.n	8002dda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dac:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x328>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e23f      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	4973      	ldr	r1, [pc, #460]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd8:	e040      	b.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d023      	beq.n	8002e2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de2:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6e      	ldr	r2, [pc, #440]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7ff fa93 	bl	8002318 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df6:	f7ff fa8f 	bl	8002318 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e21d      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e08:	4b65      	ldr	r3, [pc, #404]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b62      	ldr	r3, [pc, #392]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	495f      	ldr	r1, [pc, #380]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
 8002e28:	e018      	b.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7ff fa6f 	bl	8002318 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7ff fa6b 	bl	8002318 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1f9      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e50:	4b53      	ldr	r3, [pc, #332]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d03c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01c      	beq.n	8002eaa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e70:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e76:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7ff fa4a 	bl	8002318 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e88:	f7ff fa46 	bl	8002318 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1d4      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e9a:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ef      	beq.n	8002e88 <HAL_RCC_OscConfig+0x3ec>
 8002ea8:	e01b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7ff fa2d 	bl	8002318 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec2:	f7ff fa29 	bl	8002318 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1b7      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed4:	4b32      	ldr	r3, [pc, #200]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ef      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80a6 	beq.w	800303c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b27      	ldr	r3, [pc, #156]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	4a26      	ldr	r2, [pc, #152]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f0c:	4b24      	ldr	r3, [pc, #144]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1c:	4b21      	ldr	r3, [pc, #132]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d118      	bne.n	8002f5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f28:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f34:	f7ff f9f0 	bl	8002318 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3c:	f7ff f9ec 	bl	8002318 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e17a      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d108      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4d8>
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f68:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f72:	e029      	b.n	8002fc8 <HAL_RCC_OscConfig+0x52c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d115      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x50c>
 8002f7c:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f82:	4a07      	ldr	r2, [pc, #28]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	4a03      	ldr	r2, [pc, #12]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f9c:	e014      	b.n	8002fc8 <HAL_RCC_OscConfig+0x52c>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	4b9c      	ldr	r3, [pc, #624]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	4a9b      	ldr	r2, [pc, #620]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fb8:	4b98      	ldr	r3, [pc, #608]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	4a97      	ldr	r2, [pc, #604]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d016      	beq.n	8002ffe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7ff f9a2 	bl	8002318 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7ff f99e 	bl	8002318 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e12a      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fee:	4b8b      	ldr	r3, [pc, #556]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ed      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x53c>
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7ff f98b 	bl	8002318 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7ff f987 	bl	8002318 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e113      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800301c:	4b7f      	ldr	r3, [pc, #508]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ed      	bne.n	8003006 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302a:	7ffb      	ldrb	r3, [r7, #31]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003030:	4b7a      	ldr	r3, [pc, #488]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	4a79      	ldr	r2, [pc, #484]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80fe 	beq.w	8003242 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	2b02      	cmp	r3, #2
 800304c:	f040 80d0 	bne.w	80031f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003050:	4b72      	ldr	r3, [pc, #456]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0203 	and.w	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	429a      	cmp	r2, r3
 8003062:	d130      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	3b01      	subs	r3, #1
 8003070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d127      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003080:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11f      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003090:	2a07      	cmp	r2, #7
 8003092:	bf14      	ite	ne
 8003094:	2201      	movne	r2, #1
 8003096:	2200      	moveq	r2, #0
 8003098:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309a:	4293      	cmp	r3, r2
 800309c:	d113      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	3b01      	subs	r3, #1
 80030ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	3b01      	subs	r3, #1
 80030c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d06e      	beq.n	80031a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d069      	beq.n	80031a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030cc:	4b53      	ldr	r3, [pc, #332]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030d8:	4b50      	ldr	r3, [pc, #320]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0ad      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030e8:	4b4c      	ldr	r3, [pc, #304]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4b      	ldr	r2, [pc, #300]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f4:	f7ff f910 	bl	8002318 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7ff f90c 	bl	8002318 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e09a      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310e:	4b43      	ldr	r3, [pc, #268]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311a:	4b40      	ldr	r3, [pc, #256]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b40      	ldr	r3, [pc, #256]	@ (8003220 <HAL_RCC_OscConfig+0x784>)
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800312a:	3a01      	subs	r2, #1
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003134:	0212      	lsls	r2, r2, #8
 8003136:	4311      	orrs	r1, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800313c:	0852      	lsrs	r2, r2, #1
 800313e:	3a01      	subs	r2, #1
 8003140:	0552      	lsls	r2, r2, #21
 8003142:	4311      	orrs	r1, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003148:	0852      	lsrs	r2, r2, #1
 800314a:	3a01      	subs	r2, #1
 800314c:	0652      	lsls	r2, r2, #25
 800314e:	4311      	orrs	r1, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003154:	0912      	lsrs	r2, r2, #4
 8003156:	0452      	lsls	r2, r2, #17
 8003158:	430a      	orrs	r2, r1
 800315a:	4930      	ldr	r1, [pc, #192]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800315c:	4313      	orrs	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003160:	4b2e      	ldr	r3, [pc, #184]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2d      	ldr	r2, [pc, #180]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800316c:	4b2b      	ldr	r3, [pc, #172]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003176:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003178:	f7ff f8ce 	bl	8002318 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003180:	f7ff f8ca 	bl	8002318 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e058      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	4b22      	ldr	r3, [pc, #136]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800319e:	e050      	b.n	8003242 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e04f      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a4:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d148      	bne.n	8003242 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031b0:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a19      	ldr	r2, [pc, #100]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031bc:	4b17      	ldr	r3, [pc, #92]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4a16      	ldr	r2, [pc, #88]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031c8:	f7ff f8a6 	bl	8002318 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7ff f8a2 	bl	8002318 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e030      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x734>
 80031ee:	e028      	b.n	8003242 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d023      	beq.n	800323e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a08      	ldr	r2, [pc, #32]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7ff f889 	bl	8002318 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003208:	e00c      	b.n	8003224 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7ff f885 	bl	8002318 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d905      	bls.n	8003224 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e013      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
 800321c:	40021000 	.word	0x40021000
 8003220:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_OscConfig+0x7b0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ec      	bne.n	800320a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_RCC_OscConfig+0x7b0>)
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	4905      	ldr	r1, [pc, #20]	@ (800324c <HAL_RCC_OscConfig+0x7b0>)
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_RCC_OscConfig+0x7b4>)
 8003238:	4013      	ands	r3, r2
 800323a:	60cb      	str	r3, [r1, #12]
 800323c:	e001      	b.n	8003242 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	feeefffc 	.word	0xfeeefffc

08003254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0e7      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b75      	ldr	r3, [pc, #468]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d910      	bls.n	8003298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b72      	ldr	r3, [pc, #456]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 0207 	bic.w	r2, r3, #7
 800327e:	4970      	ldr	r1, [pc, #448]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b6e      	ldr	r3, [pc, #440]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0cf      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b66      	ldr	r3, [pc, #408]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d908      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b4:	4b63      	ldr	r3, [pc, #396]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4960      	ldr	r1, [pc, #384]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d04c      	beq.n	800336c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032da:	4b5a      	ldr	r3, [pc, #360]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d121      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0a6      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f2:	4b54      	ldr	r3, [pc, #336]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d115      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e09a      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800330a:	4b4e      	ldr	r3, [pc, #312]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e08e      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331a:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e086      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b46      	ldr	r3, [pc, #280]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4943      	ldr	r1, [pc, #268]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800333c:	f7fe ffec 	bl	8002318 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fe ffe8 	bl	8002318 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e06e      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b3a      	ldr	r3, [pc, #232]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	4b31      	ldr	r3, [pc, #196]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003384:	429a      	cmp	r2, r3
 8003386:	d208      	bcs.n	800339a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b2e      	ldr	r3, [pc, #184]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	492b      	ldr	r1, [pc, #172]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339a:	4b29      	ldr	r3, [pc, #164]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d210      	bcs.n	80033ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a8:	4b25      	ldr	r3, [pc, #148]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 0207 	bic.w	r2, r3, #7
 80033b0:	4923      	ldr	r1, [pc, #140]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b8:	4b21      	ldr	r3, [pc, #132]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e036      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4918      	ldr	r1, [pc, #96]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f4:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4910      	ldr	r1, [pc, #64]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003408:	f000 f824 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	490b      	ldr	r1, [pc, #44]	@ (8003448 <HAL_RCC_ClockConfig+0x1f4>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
 8003424:	4a09      	ldr	r2, [pc, #36]	@ (800344c <HAL_RCC_ClockConfig+0x1f8>)
 8003426:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003428:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <HAL_RCC_ClockConfig+0x1fc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fe ff23 	bl	8002278 <HAL_InitTick>
 8003432:	4603      	mov	r3, r0
 8003434:	72fb      	strb	r3, [r7, #11]

  return status;
 8003436:	7afb      	ldrb	r3, [r7, #11]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40022000 	.word	0x40022000
 8003444:	40021000 	.word	0x40021000
 8003448:	08012030 	.word	0x08012030
 800344c:	20000200 	.word	0x20000200
 8003450:	20000204 	.word	0x20000204

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	@ 0x24
 8003458:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	4b3e      	ldr	r3, [pc, #248]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346c:	4b3b      	ldr	r3, [pc, #236]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x34>
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d121      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d11e      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003488:	4b34      	ldr	r3, [pc, #208]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003494:	4b31      	ldr	r3, [pc, #196]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e005      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034a4:	4b2d      	ldr	r3, [pc, #180]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d102      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034cc:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	e004      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034d8:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x114>)
 80034da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d134      	bne.n	800354c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034e2:	4b1e      	ldr	r3, [pc, #120]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0xa6>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d003      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0xac>
 80034f8:	e005      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x110>)
 80034fc:	617b      	str	r3, [r7, #20]
      break;
 80034fe:	e005      	b.n	800350c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x114>)
 8003502:	617b      	str	r3, [r7, #20]
      break;
 8003504:	e002      	b.n	800350c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	617b      	str	r3, [r7, #20]
      break;
 800350a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	3301      	adds	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	fb03 f202 	mul.w	r2, r3, r2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	0e5b      	lsrs	r3, r3, #25
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	3301      	adds	r3, #1
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800354c:	69bb      	ldr	r3, [r7, #24]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3724      	adds	r7, #36	@ 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	08012048 	.word	0x08012048
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000200 	.word	0x20000200

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003588:	f7ff fff0 	bl	800356c <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4904      	ldr	r1, [pc, #16]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	08012040 	.word	0x08012040

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035b4:	f7ff ffda 	bl	800356c <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0adb      	lsrs	r3, r3, #11
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	08012040 	.word	0x08012040

080035dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035f4:	f7ff f9ee 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 80035f8:	6178      	str	r0, [r7, #20]
 80035fa:	e014      	b.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035fc:	4b25      	ldr	r3, [pc, #148]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	4a24      	ldr	r2, [pc, #144]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003606:	6593      	str	r3, [r2, #88]	@ 0x58
 8003608:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003614:	f7ff f9de 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 8003618:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800361a:	4b1e      	ldr	r3, [pc, #120]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	4a1d      	ldr	r2, [pc, #116]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800362c:	d10b      	bne.n	8003646 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b80      	cmp	r3, #128	@ 0x80
 8003632:	d919      	bls.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2ba0      	cmp	r3, #160	@ 0xa0
 8003638:	d902      	bls.n	8003640 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800363a:	2302      	movs	r3, #2
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	e013      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003640:	2301      	movs	r3, #1
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	e010      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b80      	cmp	r3, #128	@ 0x80
 800364a:	d902      	bls.n	8003652 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800364c:	2303      	movs	r3, #3
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	e00a      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b80      	cmp	r3, #128	@ 0x80
 8003656:	d102      	bne.n	800365e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003658:	2302      	movs	r3, #2
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	e004      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b70      	cmp	r3, #112	@ 0x70
 8003662:	d101      	bne.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 0207 	bic.w	r2, r3, #7
 8003670:	4909      	ldr	r1, [pc, #36]	@ (8003698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003678:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	429a      	cmp	r2, r3
 8003684:	d001      	beq.n	800368a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	40022000 	.word	0x40022000

0800369c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a4:	2300      	movs	r3, #0
 80036a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a8:	2300      	movs	r3, #0
 80036aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d041      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036c0:	d02a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036c6:	d824      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036cc:	d008      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036d2:	d81e      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036dc:	d010      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036de:	e018      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e0:	4b86      	ldr	r3, [pc, #536]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a85      	ldr	r2, [pc, #532]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036ec:	e015      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fabb 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036fe:	e00c      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3320      	adds	r3, #32
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fba6 	bl	8003e58 <RCCEx_PLLSAI2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	74fb      	strb	r3, [r7, #19]
      break;
 8003716:	e000      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003720:	4b76      	ldr	r3, [pc, #472]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372e:	4973      	ldr	r1, [pc, #460]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003736:	e001      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d041      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800374c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003750:	d02a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003752:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003756:	d824      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800375e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003762:	d81e      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800376c:	d010      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800376e:	e018      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003770:	4b62      	ldr	r3, [pc, #392]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a61      	ldr	r2, [pc, #388]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800377c:	e015      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fa73 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800378e:	e00c      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3320      	adds	r3, #32
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fb5e 	bl	8003e58 <RCCEx_PLLSAI2_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037a0:	e003      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	74fb      	strb	r3, [r7, #19]
      break;
 80037a6:	e000      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037b0:	4b52      	ldr	r3, [pc, #328]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037be:	494f      	ldr	r1, [pc, #316]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037c6:	e001      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80a0 	beq.w	800391a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037de:	4b47      	ldr	r3, [pc, #284]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f8:	4a40      	ldr	r2, [pc, #256]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003800:	4b3e      	ldr	r3, [pc, #248]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380c:	2301      	movs	r3, #1
 800380e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003810:	4b3b      	ldr	r3, [pc, #236]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a3a      	ldr	r2, [pc, #232]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800381c:	f7fe fd7c 	bl	8002318 <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003822:	e009      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fe fd78 	bl	8002318 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d902      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	74fb      	strb	r3, [r7, #19]
        break;
 8003836:	e005      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003838:	4b31      	ldr	r3, [pc, #196]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ef      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d15c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800384a:	4b2c      	ldr	r3, [pc, #176]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003854:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01f      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	d019      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003868:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003872:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003874:	4b21      	ldr	r3, [pc, #132]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	4a20      	ldr	r2, [pc, #128]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003884:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388a:	4a1c      	ldr	r2, [pc, #112]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003894:	4a19      	ldr	r2, [pc, #100]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d016      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a6:	f7fe fd37 	bl	8002318 <HAL_GetTick>
 80038aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ac:	e00b      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fe fd33 	bl	8002318 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d902      	bls.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	74fb      	strb	r3, [r7, #19]
            break;
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c6:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ec      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038da:	4b08      	ldr	r3, [pc, #32]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ea:	4904      	ldr	r1, [pc, #16]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038f2:	e009      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
 80038f8:	e006      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003908:	7c7b      	ldrb	r3, [r7, #17]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d105      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390e:	4b9e      	ldr	r3, [pc, #632]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	4a9d      	ldr	r2, [pc, #628]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003918:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003926:	4b98      	ldr	r3, [pc, #608]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392c:	f023 0203 	bic.w	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	4994      	ldr	r1, [pc, #592]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003948:	4b8f      	ldr	r3, [pc, #572]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	f023 020c 	bic.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003956:	498c      	ldr	r1, [pc, #560]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800396a:	4b87      	ldr	r3, [pc, #540]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	4983      	ldr	r1, [pc, #524]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800398c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003992:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	497b      	ldr	r1, [pc, #492]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ae:	4b76      	ldr	r3, [pc, #472]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039bc:	4972      	ldr	r1, [pc, #456]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039de:	496a      	ldr	r1, [pc, #424]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f2:	4b65      	ldr	r3, [pc, #404]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a00:	4961      	ldr	r1, [pc, #388]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a14:	4b5c      	ldr	r3, [pc, #368]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	4959      	ldr	r1, [pc, #356]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a36:	4b54      	ldr	r3, [pc, #336]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	4950      	ldr	r1, [pc, #320]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a58:	4b4b      	ldr	r3, [pc, #300]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a66:	4948      	ldr	r1, [pc, #288]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a7a:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a88:	493f      	ldr	r1, [pc, #252]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d028      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aaa:	4937      	ldr	r1, [pc, #220]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aba:	d106      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abc:	4b32      	ldr	r3, [pc, #200]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a31      	ldr	r2, [pc, #196]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ac6:	60d3      	str	r3, [r2, #12]
 8003ac8:	e011      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ace:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f8c8 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ae4:	7cfb      	ldrb	r3, [r7, #19]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d028      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003afa:	4b23      	ldr	r3, [pc, #140]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	491f      	ldr	r1, [pc, #124]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b18:	d106      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b24:	60d3      	str	r3, [r2, #12]
 8003b26:	e011      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2101      	movs	r1, #1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f899 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02b      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b58:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b66:	4908      	ldr	r1, [pc, #32]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b76:	d109      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b78:	4b03      	ldr	r3, [pc, #12]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a02      	ldr	r2, [pc, #8]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b82:	60d3      	str	r3, [r2, #12]
 8003b84:	e014      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 f867 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d02f      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bca:	4928      	ldr	r1, [pc, #160]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	2102      	movs	r1, #2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f844 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d014      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	74bb      	strb	r3, [r7, #18]
 8003bf6:	e011      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3320      	adds	r3, #32
 8003c06:	2102      	movs	r1, #2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f925 	bl	8003e58 <RCCEx_PLLSAI2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c28:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c36:	490d      	ldr	r1, [pc, #52]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c4a:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c5a:	4904      	ldr	r1, [pc, #16]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c62:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000

08003c70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c7e:	4b75      	ldr	r3, [pc, #468]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d018      	beq.n	8003cbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c8a:	4b72      	ldr	r3, [pc, #456]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0203 	and.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d10d      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ca2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
       ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d047      	beq.n	8003d46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	e044      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d018      	beq.n	8003cf6 <RCCEx_PLLSAI1_Config+0x86>
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d825      	bhi.n	8003d14 <RCCEx_PLLSAI1_Config+0xa4>
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d002      	beq.n	8003cd2 <RCCEx_PLLSAI1_Config+0x62>
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d009      	beq.n	8003ce4 <RCCEx_PLLSAI1_Config+0x74>
 8003cd0:	e020      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cd2:	4b60      	ldr	r3, [pc, #384]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11d      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce2:	e01a      	b.n	8003d1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d116      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf4:	e013      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cf6:	4b57      	ldr	r3, [pc, #348]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d02:	4b54      	ldr	r3, [pc, #336]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d12:	e006      	b.n	8003d22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      break;
 8003d18:	e004      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e002      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d22:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10d      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6819      	ldr	r1, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	4944      	ldr	r1, [pc, #272]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d17d      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d4c:	4b41      	ldr	r3, [pc, #260]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a40      	ldr	r2, [pc, #256]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d58:	f7fe fade 	bl	8002318 <HAL_GetTick>
 8003d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d5e:	e009      	b.n	8003d74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d60:	f7fe fada 	bl	8002318 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d902      	bls.n	8003d74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	73fb      	strb	r3, [r7, #15]
        break;
 8003d72:	e005      	b.n	8003d80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d74:	4b37      	ldr	r3, [pc, #220]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ef      	bne.n	8003d60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d160      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d111      	bne.n	8003db0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d8c:	4b31      	ldr	r3, [pc, #196]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6892      	ldr	r2, [r2, #8]
 8003d9c:	0211      	lsls	r1, r2, #8
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68d2      	ldr	r2, [r2, #12]
 8003da2:	0912      	lsrs	r2, r2, #4
 8003da4:	0452      	lsls	r2, r2, #17
 8003da6:	430a      	orrs	r2, r1
 8003da8:	492a      	ldr	r1, [pc, #168]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	610b      	str	r3, [r1, #16]
 8003dae:	e027      	b.n	8003e00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d112      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db6:	4b27      	ldr	r3, [pc, #156]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dbe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6892      	ldr	r2, [r2, #8]
 8003dc6:	0211      	lsls	r1, r2, #8
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6912      	ldr	r2, [r2, #16]
 8003dcc:	0852      	lsrs	r2, r2, #1
 8003dce:	3a01      	subs	r2, #1
 8003dd0:	0552      	lsls	r2, r2, #21
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	491f      	ldr	r1, [pc, #124]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	610b      	str	r3, [r1, #16]
 8003dda:	e011      	b.n	8003e00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003de4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6892      	ldr	r2, [r2, #8]
 8003dec:	0211      	lsls	r1, r2, #8
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6952      	ldr	r2, [r2, #20]
 8003df2:	0852      	lsrs	r2, r2, #1
 8003df4:	3a01      	subs	r2, #1
 8003df6:	0652      	lsls	r2, r2, #25
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	4916      	ldr	r1, [pc, #88]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e00:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fe fa84 	bl	8002318 <HAL_GetTick>
 8003e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e12:	e009      	b.n	8003e28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e14:	f7fe fa80 	bl	8002318 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d902      	bls.n	8003e28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	73fb      	strb	r3, [r7, #15]
          break;
 8003e26:	e005      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e28:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ef      	beq.n	8003e14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	4904      	ldr	r1, [pc, #16]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000

08003e58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e66:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d018      	beq.n	8003ea4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e72:	4b67      	ldr	r3, [pc, #412]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
       ||
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e8a:	4b61      	ldr	r3, [pc, #388]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
       ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d047      	beq.n	8003f2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e044      	b.n	8003f2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d018      	beq.n	8003ede <RCCEx_PLLSAI2_Config+0x86>
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d825      	bhi.n	8003efc <RCCEx_PLLSAI2_Config+0xa4>
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d002      	beq.n	8003eba <RCCEx_PLLSAI2_Config+0x62>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d009      	beq.n	8003ecc <RCCEx_PLLSAI2_Config+0x74>
 8003eb8:	e020      	b.n	8003efc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eba:	4b55      	ldr	r3, [pc, #340]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eca:	e01a      	b.n	8003f02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ecc:	4b50      	ldr	r3, [pc, #320]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d116      	bne.n	8003f06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003edc:	e013      	b.n	8003f06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ede:	4b4c      	ldr	r3, [pc, #304]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eea:	4b49      	ldr	r3, [pc, #292]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003efa:	e006      	b.n	8003f0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      break;
 8003f00:	e004      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f12:	4b3f      	ldr	r3, [pc, #252]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	430b      	orrs	r3, r1
 8003f28:	4939      	ldr	r1, [pc, #228]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d167      	bne.n	8004004 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f34:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a35      	ldr	r2, [pc, #212]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f40:	f7fe f9ea 	bl	8002318 <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f46:	e009      	b.n	8003f5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f48:	f7fe f9e6 	bl	8002318 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d902      	bls.n	8003f5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	73fb      	strb	r3, [r7, #15]
        break;
 8003f5a:	e005      	b.n	8003f68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ef      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d14a      	bne.n	8004004 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d111      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f74:	4b26      	ldr	r3, [pc, #152]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	0211      	lsls	r1, r2, #8
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68d2      	ldr	r2, [r2, #12]
 8003f8a:	0912      	lsrs	r2, r2, #4
 8003f8c:	0452      	lsls	r2, r2, #17
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	491f      	ldr	r1, [pc, #124]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	614b      	str	r3, [r1, #20]
 8003f96:	e011      	b.n	8003fbc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f98:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003fa0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6892      	ldr	r2, [r2, #8]
 8003fa8:	0211      	lsls	r1, r2, #8
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6912      	ldr	r2, [r2, #16]
 8003fae:	0852      	lsrs	r2, r2, #1
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0652      	lsls	r2, r2, #25
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	4916      	ldr	r1, [pc, #88]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fbc:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a13      	ldr	r2, [pc, #76]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe f9a6 	bl	8002318 <HAL_GetTick>
 8003fcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fce:	e009      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fd0:	f7fe f9a2 	bl	8002318 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d902      	bls.n	8003fe4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	73fb      	strb	r3, [r7, #15]
          break;
 8003fe2:	e005      	b.n	8003ff0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0ef      	beq.n	8003fd0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4904      	ldr	r1, [pc, #16]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004000:	4313      	orrs	r3, r2
 8004002:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000

08004014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e095      	b.n	8004152 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	2b00      	cmp	r3, #0
 800402c:	d108      	bne.n	8004040 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004036:	d009      	beq.n	800404c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	61da      	str	r2, [r3, #28]
 800403e:	e005      	b.n	800404c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fd fe1e 	bl	8001ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004082:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800408c:	d902      	bls.n	8004094 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e002      	b.n	800409a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004094:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004098:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80040a2:	d007      	beq.n	80040b4 <HAL_SPI_Init+0xa0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040ac:	d002      	beq.n	80040b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f6:	ea42 0103 	orr.w	r1, r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	f003 0204 	and.w	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004130:	ea42 0103 	orr.w	r1, r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b088      	sub	sp, #32
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800416a:	f7fe f8d5 	bl	8002318 <HAL_GetTick>
 800416e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d001      	beq.n	8004184 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
 8004182:	e15c      	b.n	800443e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_SPI_Transmit+0x36>
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e154      	b.n	800443e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_SPI_Transmit+0x48>
 800419e:	2302      	movs	r3, #2
 80041a0:	e14d      	b.n	800443e <HAL_SPI_Transmit+0x2e4>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2203      	movs	r2, #3
 80041ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	88fa      	ldrh	r2, [r7, #6]
 80041c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f4:	d10f      	bne.n	8004216 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004204:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004214:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004220:	2b40      	cmp	r3, #64	@ 0x40
 8004222:	d007      	beq.n	8004234 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004232:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800423c:	d952      	bls.n	80042e4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_SPI_Transmit+0xf2>
 8004246:	8b7b      	ldrh	r3, [r7, #26]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d145      	bne.n	80042d8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004250:	881a      	ldrh	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	1c9a      	adds	r2, r3, #2
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004270:	e032      	b.n	80042d8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b02      	cmp	r3, #2
 800427e:	d112      	bne.n	80042a6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	881a      	ldrh	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004290:	1c9a      	adds	r2, r3, #2
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042a4:	e018      	b.n	80042d8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042a6:	f7fe f837 	bl	8002318 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d803      	bhi.n	80042be <HAL_SPI_Transmit+0x164>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d102      	bne.n	80042c4 <HAL_SPI_Transmit+0x16a>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e0b2      	b.n	800443e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1c7      	bne.n	8004272 <HAL_SPI_Transmit+0x118>
 80042e2:	e083      	b.n	80043ec <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_SPI_Transmit+0x198>
 80042ec:	8b7b      	ldrh	r3, [r7, #26]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d177      	bne.n	80043e2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d912      	bls.n	8004322 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004300:	881a      	ldrh	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	1c9a      	adds	r2, r3, #2
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b02      	subs	r3, #2
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004320:	e05f      	b.n	80043e2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004348:	e04b      	b.n	80043e2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b02      	cmp	r3, #2
 8004356:	d12b      	bne.n	80043b0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d912      	bls.n	8004388 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004366:	881a      	ldrh	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004372:	1c9a      	adds	r2, r3, #2
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b02      	subs	r3, #2
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004386:	e02c      	b.n	80043e2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	7812      	ldrb	r2, [r2, #0]
 8004394:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043ae:	e018      	b.n	80043e2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b0:	f7fd ffb2 	bl	8002318 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d803      	bhi.n	80043c8 <HAL_SPI_Transmit+0x26e>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d102      	bne.n	80043ce <HAL_SPI_Transmit+0x274>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e02d      	b.n	800443e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ae      	bne.n	800434a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f947 	bl	8004684 <SPI_EndRxTxTransaction>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800443c:	2300      	movs	r3, #0
  }
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004458:	f7fd ff5e 	bl	8002318 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	4413      	add	r3, r2
 8004466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004468:	f7fd ff56 	bl	8002318 <HAL_GetTick>
 800446c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800446e:	4b39      	ldr	r3, [pc, #228]	@ (8004554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	015b      	lsls	r3, r3, #5
 8004474:	0d1b      	lsrs	r3, r3, #20
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	fb02 f303 	mul.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447e:	e054      	b.n	800452a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d050      	beq.n	800452a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004488:	f7fd ff46 	bl	8002318 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	429a      	cmp	r2, r3
 8004496:	d902      	bls.n	800449e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d13d      	bne.n	800451a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044b6:	d111      	bne.n	80044dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c0:	d004      	beq.n	80044cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ca:	d107      	bne.n	80044dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e4:	d10f      	bne.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e017      	b.n	800454a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3b01      	subs	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4013      	ands	r3, r2
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	bf0c      	ite	eq
 800453a:	2301      	moveq	r3, #1
 800453c:	2300      	movne	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	429a      	cmp	r2, r3
 8004546:	d19b      	bne.n	8004480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000200 	.word	0x20000200

08004558 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	@ 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800456a:	f7fd fed5 	bl	8002318 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	4413      	add	r3, r2
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800457a:	f7fd fecd 	bl	8002318 <HAL_GetTick>
 800457e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004588:	4b3d      	ldr	r3, [pc, #244]	@ (8004680 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	00da      	lsls	r2, r3, #3
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	0d1b      	lsrs	r3, r3, #20
 8004598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045a0:	e060      	b.n	8004664 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045a8:	d107      	bne.n	80045ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d050      	beq.n	8004664 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045c2:	f7fd fea9 	bl	8002318 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d902      	bls.n	80045d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d13d      	bne.n	8004654 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045f0:	d111      	bne.n	8004616 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045fa:	d004      	beq.n	8004606 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004604:	d107      	bne.n	8004616 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004614:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800461e:	d10f      	bne.n	8004640 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800463e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e010      	b.n	8004676 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	3b01      	subs	r3, #1
 8004662:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4013      	ands	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d196      	bne.n	80045a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3728      	adds	r7, #40	@ 0x28
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000200 	.word	0x20000200

08004684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2200      	movs	r2, #0
 8004698:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff ff5b 	bl	8004558 <SPI_WaitFifoStateUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e027      	b.n	8004708 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	2180      	movs	r1, #128	@ 0x80
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fec0 	bl	8004448 <SPI_WaitFlagStateUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e014      	b.n	8004708 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff ff34 	bl	8004558 <SPI_WaitFifoStateUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e000      	b.n	8004708 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e040      	b.n	80047a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fd fcfa 	bl	800212c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2224      	movs	r2, #36	@ 0x24
 800473c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fea6 	bl	80054a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fbeb 	bl	8004f38 <UART_SetConfig>
 8004762:	4603      	mov	r3, r0
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e01b      	b.n	80047a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800477a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800478a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 ff25 	bl	80055ec <UART_CheckIdleState>
 80047a2:	4603      	mov	r3, r0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b08b      	sub	sp, #44	@ 0x2c
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	4613      	mov	r3, r2
 80047b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d147      	bne.n	8004852 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_UART_Transmit_IT+0x22>
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e040      	b.n	8004854 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2221      	movs	r2, #33	@ 0x21
 80047fa:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004804:	d107      	bne.n	8004816 <HAL_UART_Transmit_IT+0x6a>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d103      	bne.n	8004816 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a13      	ldr	r2, [pc, #76]	@ (8004860 <HAL_UART_Transmit_IT+0xb4>)
 8004812:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004814:	e002      	b.n	800481c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a12      	ldr	r2, [pc, #72]	@ (8004864 <HAL_UART_Transmit_IT+0xb8>)
 800481a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	613b      	str	r3, [r7, #16]
   return(result);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	623b      	str	r3, [r7, #32]
 800483c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	69f9      	ldr	r1, [r7, #28]
 8004840:	6a3a      	ldr	r2, [r7, #32]
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	61bb      	str	r3, [r7, #24]
   return(result);
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e6      	bne.n	800481c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	e000      	b.n	8004854 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004852:	2302      	movs	r3, #2
  }
}
 8004854:	4618      	mov	r0, r3
 8004856:	372c      	adds	r7, #44	@ 0x2c
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	08005b4f 	.word	0x08005b4f
 8004864:	08005a99 	.word	0x08005a99

08004868 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	@ 0x28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800487c:	2b20      	cmp	r3, #32
 800487e:	d137      	bne.n	80048f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_UART_Receive_IT+0x24>
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e030      	b.n	80048f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a18      	ldr	r2, [pc, #96]	@ (80048fc <HAL_UART_Receive_IT+0x94>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d01f      	beq.n	80048e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d018      	beq.n	80048e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	613b      	str	r3, [r7, #16]
   return(result);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	69f9      	ldr	r1, [r7, #28]
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e6      	bne.n	80048ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	461a      	mov	r2, r3
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 ff96 	bl	8005818 <UART_Start_Receive_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	e000      	b.n	80048f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3728      	adds	r7, #40	@ 0x28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40008000 	.word	0x40008000

08004900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b0ba      	sub	sp, #232	@ 0xe8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004926:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800492a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800492e:	4013      	ands	r3, r2
 8004930:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d115      	bne.n	8004968 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800493c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00f      	beq.n	8004968 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 82ca 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	4798      	blx	r3
      }
      return;
 8004966:	e2c4      	b.n	8004ef2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004968:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8117 	beq.w	8004ba0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800497e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004982:	4b85      	ldr	r3, [pc, #532]	@ (8004b98 <HAL_UART_IRQHandler+0x298>)
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 810a 	beq.w	8004ba0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800498c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d011      	beq.n	80049bc <HAL_UART_IRQHandler+0xbc>
 8004998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800499c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00b      	beq.n	80049bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2201      	movs	r2, #1
 80049aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b2:	f043 0201 	orr.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d011      	beq.n	80049ec <HAL_UART_IRQHandler+0xec>
 80049c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2202      	movs	r2, #2
 80049da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049e2:	f043 0204 	orr.w	r2, r3, #4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d011      	beq.n	8004a1c <HAL_UART_IRQHandler+0x11c>
 80049f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00b      	beq.n	8004a1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2204      	movs	r2, #4
 8004a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a12:	f043 0202 	orr.w	r2, r3, #2
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d017      	beq.n	8004a58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00b      	beq.n	8004a58 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2208      	movs	r2, #8
 8004a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a4e:	f043 0208 	orr.w	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d012      	beq.n	8004a8a <HAL_UART_IRQHandler+0x18a>
 8004a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 8230 	beq.w	8004ef6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad2:	2b40      	cmp	r3, #64	@ 0x40
 8004ad4:	d005      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ada:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d04f      	beq.n	8004b82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 ff5e 	bl	80059a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af2:	2b40      	cmp	r3, #64	@ 0x40
 8004af4:	d141      	bne.n	8004b7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3308      	adds	r3, #8
 8004afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1d9      	bne.n	8004af6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d013      	beq.n	8004b72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4e:	4a13      	ldr	r2, [pc, #76]	@ (8004b9c <HAL_UART_IRQHandler+0x29c>)
 8004b50:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fd39 	bl	80025ce <HAL_DMA_Abort_IT>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d017      	beq.n	8004b92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00f      	b.n	8004b92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9ca 	bl	8004f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e00b      	b.n	8004b92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9c6 	bl	8004f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	e007      	b.n	8004b92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f9c2 	bl	8004f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004b90:	e1b1      	b.n	8004ef6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b92:	bf00      	nop
    return;
 8004b94:	e1af      	b.n	8004ef6 <HAL_UART_IRQHandler+0x5f6>
 8004b96:	bf00      	nop
 8004b98:	04000120 	.word	0x04000120
 8004b9c:	08005a6d 	.word	0x08005a6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	f040 816a 	bne.w	8004e7e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8163 	beq.w	8004e7e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 815c 	beq.w	8004e7e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2210      	movs	r2, #16
 8004bcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	f040 80d4 	bne.w	8004d86 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80ad 	beq.w	8004d4e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	f080 80a5 	bcs.w	8004d4e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 8086 	bne.w	8004d2c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1da      	bne.n	8004c20 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ca0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e1      	bne.n	8004c6a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3308      	adds	r3, #8
 8004cac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e3      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cf4:	e853 3f00 	ldrex	r3, [r3]
 8004cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cfc:	f023 0310 	bic.w	r3, r3, #16
 8004d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e4      	bne.n	8004cec <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fd fc13 	bl	8002552 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8ea 	bl	8004f20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004d4c:	e0d5      	b.n	8004efa <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	f040 80ce 	bne.w	8004efa <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	f040 80c5 	bne.w	8004efa <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8ce 	bl	8004f20 <HAL_UARTEx_RxEventCallback>
      return;
 8004d84:	e0b9      	b.n	8004efa <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80ab 	beq.w	8004efe <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a6 	beq.w	8004efe <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e4      	bne.n	8004db2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3308      	adds	r3, #8
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	623b      	str	r3, [r7, #32]
   return(result);
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3308      	adds	r3, #8
 8004e08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e3      	bne.n	8004de8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f023 0310 	bic.w	r3, r3, #16
 8004e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	69b9      	ldr	r1, [r7, #24]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	617b      	str	r3, [r7, #20]
   return(result);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e4      	bne.n	8004e34 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e74:	4619      	mov	r1, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f852 	bl	8004f20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e7c:	e03f      	b.n	8004efe <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00e      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x5a8>
 8004e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004e9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f001 f89b 	bl	8005fdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ea6:	e02d      	b.n	8004f04 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01c      	beq.n	8004f02 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4798      	blx	r3
    }
    return;
 8004ed0:	e017      	b.n	8004f02 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d012      	beq.n	8004f04 <HAL_UART_IRQHandler+0x604>
 8004ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00c      	beq.n	8004f04 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fe8f 	bl	8005c0e <UART_EndTransmit_IT>
    return;
 8004ef0:	e008      	b.n	8004f04 <HAL_UART_IRQHandler+0x604>
      return;
 8004ef2:	bf00      	nop
 8004ef4:	e006      	b.n	8004f04 <HAL_UART_IRQHandler+0x604>
    return;
 8004ef6:	bf00      	nop
 8004ef8:	e004      	b.n	8004f04 <HAL_UART_IRQHandler+0x604>
      return;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <HAL_UART_IRQHandler+0x604>
      return;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <HAL_UART_IRQHandler+0x604>
    return;
 8004f02:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f04:	37e8      	adds	r7, #232	@ 0xe8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop

08004f0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f3c:	b08a      	sub	sp, #40	@ 0x28
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	431a      	orrs	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4ba4      	ldr	r3, [pc, #656]	@ (80051f8 <UART_SetConfig+0x2c0>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a99      	ldr	r2, [pc, #612]	@ (80051fc <UART_SetConfig+0x2c4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a90      	ldr	r2, [pc, #576]	@ (8005200 <UART_SetConfig+0x2c8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d126      	bne.n	8005010 <UART_SetConfig+0xd8>
 8004fc2:	4b90      	ldr	r3, [pc, #576]	@ (8005204 <UART_SetConfig+0x2cc>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d81b      	bhi.n	8005008 <UART_SetConfig+0xd0>
 8004fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd8 <UART_SetConfig+0xa0>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08004fe9 	.word	0x08004fe9
 8004fdc:	08004ff9 	.word	0x08004ff9
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fee:	e116      	b.n	800521e <UART_SetConfig+0x2e6>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	e112      	b.n	800521e <UART_SetConfig+0x2e6>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffe:	e10e      	b.n	800521e <UART_SetConfig+0x2e6>
 8005000:	2308      	movs	r3, #8
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005006:	e10a      	b.n	800521e <UART_SetConfig+0x2e6>
 8005008:	2310      	movs	r3, #16
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500e:	e106      	b.n	800521e <UART_SetConfig+0x2e6>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a7c      	ldr	r2, [pc, #496]	@ (8005208 <UART_SetConfig+0x2d0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d138      	bne.n	800508c <UART_SetConfig+0x154>
 800501a:	4b7a      	ldr	r3, [pc, #488]	@ (8005204 <UART_SetConfig+0x2cc>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b0c      	cmp	r3, #12
 8005026:	d82d      	bhi.n	8005084 <UART_SetConfig+0x14c>
 8005028:	a201      	add	r2, pc, #4	@ (adr r2, 8005030 <UART_SetConfig+0xf8>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005065 	.word	0x08005065
 8005034:	08005085 	.word	0x08005085
 8005038:	08005085 	.word	0x08005085
 800503c:	08005085 	.word	0x08005085
 8005040:	08005075 	.word	0x08005075
 8005044:	08005085 	.word	0x08005085
 8005048:	08005085 	.word	0x08005085
 800504c:	08005085 	.word	0x08005085
 8005050:	0800506d 	.word	0x0800506d
 8005054:	08005085 	.word	0x08005085
 8005058:	08005085 	.word	0x08005085
 800505c:	08005085 	.word	0x08005085
 8005060:	0800507d 	.word	0x0800507d
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506a:	e0d8      	b.n	800521e <UART_SetConfig+0x2e6>
 800506c:	2302      	movs	r3, #2
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005072:	e0d4      	b.n	800521e <UART_SetConfig+0x2e6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507a:	e0d0      	b.n	800521e <UART_SetConfig+0x2e6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005082:	e0cc      	b.n	800521e <UART_SetConfig+0x2e6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e0c8      	b.n	800521e <UART_SetConfig+0x2e6>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a5e      	ldr	r2, [pc, #376]	@ (800520c <UART_SetConfig+0x2d4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d125      	bne.n	80050e2 <UART_SetConfig+0x1aa>
 8005096:	4b5b      	ldr	r3, [pc, #364]	@ (8005204 <UART_SetConfig+0x2cc>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80050a0:	2b30      	cmp	r3, #48	@ 0x30
 80050a2:	d016      	beq.n	80050d2 <UART_SetConfig+0x19a>
 80050a4:	2b30      	cmp	r3, #48	@ 0x30
 80050a6:	d818      	bhi.n	80050da <UART_SetConfig+0x1a2>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d00a      	beq.n	80050c2 <UART_SetConfig+0x18a>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d814      	bhi.n	80050da <UART_SetConfig+0x1a2>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <UART_SetConfig+0x182>
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d008      	beq.n	80050ca <UART_SetConfig+0x192>
 80050b8:	e00f      	b.n	80050da <UART_SetConfig+0x1a2>
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c0:	e0ad      	b.n	800521e <UART_SetConfig+0x2e6>
 80050c2:	2302      	movs	r3, #2
 80050c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c8:	e0a9      	b.n	800521e <UART_SetConfig+0x2e6>
 80050ca:	2304      	movs	r3, #4
 80050cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d0:	e0a5      	b.n	800521e <UART_SetConfig+0x2e6>
 80050d2:	2308      	movs	r3, #8
 80050d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d8:	e0a1      	b.n	800521e <UART_SetConfig+0x2e6>
 80050da:	2310      	movs	r3, #16
 80050dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e0:	e09d      	b.n	800521e <UART_SetConfig+0x2e6>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a4a      	ldr	r2, [pc, #296]	@ (8005210 <UART_SetConfig+0x2d8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d125      	bne.n	8005138 <UART_SetConfig+0x200>
 80050ec:	4b45      	ldr	r3, [pc, #276]	@ (8005204 <UART_SetConfig+0x2cc>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050f8:	d016      	beq.n	8005128 <UART_SetConfig+0x1f0>
 80050fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80050fc:	d818      	bhi.n	8005130 <UART_SetConfig+0x1f8>
 80050fe:	2b80      	cmp	r3, #128	@ 0x80
 8005100:	d00a      	beq.n	8005118 <UART_SetConfig+0x1e0>
 8005102:	2b80      	cmp	r3, #128	@ 0x80
 8005104:	d814      	bhi.n	8005130 <UART_SetConfig+0x1f8>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <UART_SetConfig+0x1d8>
 800510a:	2b40      	cmp	r3, #64	@ 0x40
 800510c:	d008      	beq.n	8005120 <UART_SetConfig+0x1e8>
 800510e:	e00f      	b.n	8005130 <UART_SetConfig+0x1f8>
 8005110:	2300      	movs	r3, #0
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005116:	e082      	b.n	800521e <UART_SetConfig+0x2e6>
 8005118:	2302      	movs	r3, #2
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511e:	e07e      	b.n	800521e <UART_SetConfig+0x2e6>
 8005120:	2304      	movs	r3, #4
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005126:	e07a      	b.n	800521e <UART_SetConfig+0x2e6>
 8005128:	2308      	movs	r3, #8
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512e:	e076      	b.n	800521e <UART_SetConfig+0x2e6>
 8005130:	2310      	movs	r3, #16
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005136:	e072      	b.n	800521e <UART_SetConfig+0x2e6>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a35      	ldr	r2, [pc, #212]	@ (8005214 <UART_SetConfig+0x2dc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d12a      	bne.n	8005198 <UART_SetConfig+0x260>
 8005142:	4b30      	ldr	r3, [pc, #192]	@ (8005204 <UART_SetConfig+0x2cc>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800514c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005150:	d01a      	beq.n	8005188 <UART_SetConfig+0x250>
 8005152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005156:	d81b      	bhi.n	8005190 <UART_SetConfig+0x258>
 8005158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800515c:	d00c      	beq.n	8005178 <UART_SetConfig+0x240>
 800515e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005162:	d815      	bhi.n	8005190 <UART_SetConfig+0x258>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <UART_SetConfig+0x238>
 8005168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800516c:	d008      	beq.n	8005180 <UART_SetConfig+0x248>
 800516e:	e00f      	b.n	8005190 <UART_SetConfig+0x258>
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005176:	e052      	b.n	800521e <UART_SetConfig+0x2e6>
 8005178:	2302      	movs	r3, #2
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517e:	e04e      	b.n	800521e <UART_SetConfig+0x2e6>
 8005180:	2304      	movs	r3, #4
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005186:	e04a      	b.n	800521e <UART_SetConfig+0x2e6>
 8005188:	2308      	movs	r3, #8
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800518e:	e046      	b.n	800521e <UART_SetConfig+0x2e6>
 8005190:	2310      	movs	r3, #16
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005196:	e042      	b.n	800521e <UART_SetConfig+0x2e6>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a17      	ldr	r2, [pc, #92]	@ (80051fc <UART_SetConfig+0x2c4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d13a      	bne.n	8005218 <UART_SetConfig+0x2e0>
 80051a2:	4b18      	ldr	r3, [pc, #96]	@ (8005204 <UART_SetConfig+0x2cc>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051b0:	d01a      	beq.n	80051e8 <UART_SetConfig+0x2b0>
 80051b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051b6:	d81b      	bhi.n	80051f0 <UART_SetConfig+0x2b8>
 80051b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051bc:	d00c      	beq.n	80051d8 <UART_SetConfig+0x2a0>
 80051be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c2:	d815      	bhi.n	80051f0 <UART_SetConfig+0x2b8>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <UART_SetConfig+0x298>
 80051c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051cc:	d008      	beq.n	80051e0 <UART_SetConfig+0x2a8>
 80051ce:	e00f      	b.n	80051f0 <UART_SetConfig+0x2b8>
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d6:	e022      	b.n	800521e <UART_SetConfig+0x2e6>
 80051d8:	2302      	movs	r3, #2
 80051da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051de:	e01e      	b.n	800521e <UART_SetConfig+0x2e6>
 80051e0:	2304      	movs	r3, #4
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e6:	e01a      	b.n	800521e <UART_SetConfig+0x2e6>
 80051e8:	2308      	movs	r3, #8
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ee:	e016      	b.n	800521e <UART_SetConfig+0x2e6>
 80051f0:	2310      	movs	r3, #16
 80051f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051f6:	e012      	b.n	800521e <UART_SetConfig+0x2e6>
 80051f8:	efff69f3 	.word	0xefff69f3
 80051fc:	40008000 	.word	0x40008000
 8005200:	40013800 	.word	0x40013800
 8005204:	40021000 	.word	0x40021000
 8005208:	40004400 	.word	0x40004400
 800520c:	40004800 	.word	0x40004800
 8005210:	40004c00 	.word	0x40004c00
 8005214:	40005000 	.word	0x40005000
 8005218:	2310      	movs	r3, #16
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a9f      	ldr	r2, [pc, #636]	@ (80054a0 <UART_SetConfig+0x568>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d17a      	bne.n	800531e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005228:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800522c:	2b08      	cmp	r3, #8
 800522e:	d824      	bhi.n	800527a <UART_SetConfig+0x342>
 8005230:	a201      	add	r2, pc, #4	@ (adr r2, 8005238 <UART_SetConfig+0x300>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	0800525d 	.word	0x0800525d
 800523c:	0800527b 	.word	0x0800527b
 8005240:	08005265 	.word	0x08005265
 8005244:	0800527b 	.word	0x0800527b
 8005248:	0800526b 	.word	0x0800526b
 800524c:	0800527b 	.word	0x0800527b
 8005250:	0800527b 	.word	0x0800527b
 8005254:	0800527b 	.word	0x0800527b
 8005258:	08005273 	.word	0x08005273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800525c:	f7fe f992 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8005260:	61f8      	str	r0, [r7, #28]
        break;
 8005262:	e010      	b.n	8005286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005264:	4b8f      	ldr	r3, [pc, #572]	@ (80054a4 <UART_SetConfig+0x56c>)
 8005266:	61fb      	str	r3, [r7, #28]
        break;
 8005268:	e00d      	b.n	8005286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800526a:	f7fe f8f3 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 800526e:	61f8      	str	r0, [r7, #28]
        break;
 8005270:	e009      	b.n	8005286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005276:	61fb      	str	r3, [r7, #28]
        break;
 8005278:	e005      	b.n	8005286 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005284:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80fb 	beq.w	8005484 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	4413      	add	r3, r2
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	429a      	cmp	r2, r3
 800529c:	d305      	bcc.n	80052aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d903      	bls.n	80052b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052b0:	e0e8      	b.n	8005484 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2200      	movs	r2, #0
 80052b6:	461c      	mov	r4, r3
 80052b8:	4615      	mov	r5, r2
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	022b      	lsls	r3, r5, #8
 80052c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80052c8:	0222      	lsls	r2, r4, #8
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	6849      	ldr	r1, [r1, #4]
 80052ce:	0849      	lsrs	r1, r1, #1
 80052d0:	2000      	movs	r0, #0
 80052d2:	4688      	mov	r8, r1
 80052d4:	4681      	mov	r9, r0
 80052d6:	eb12 0a08 	adds.w	sl, r2, r8
 80052da:	eb43 0b09 	adc.w	fp, r3, r9
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ec:	4650      	mov	r0, sl
 80052ee:	4659      	mov	r1, fp
 80052f0:	f7fa ffd6 	bl	80002a0 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4613      	mov	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005302:	d308      	bcc.n	8005316 <UART_SetConfig+0x3de>
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800530a:	d204      	bcs.n	8005316 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	60da      	str	r2, [r3, #12]
 8005314:	e0b6      	b.n	8005484 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800531c:	e0b2      	b.n	8005484 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005326:	d15e      	bne.n	80053e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005328:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800532c:	2b08      	cmp	r3, #8
 800532e:	d828      	bhi.n	8005382 <UART_SetConfig+0x44a>
 8005330:	a201      	add	r2, pc, #4	@ (adr r2, 8005338 <UART_SetConfig+0x400>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	0800535d 	.word	0x0800535d
 800533c:	08005365 	.word	0x08005365
 8005340:	0800536d 	.word	0x0800536d
 8005344:	08005383 	.word	0x08005383
 8005348:	08005373 	.word	0x08005373
 800534c:	08005383 	.word	0x08005383
 8005350:	08005383 	.word	0x08005383
 8005354:	08005383 	.word	0x08005383
 8005358:	0800537b 	.word	0x0800537b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800535c:	f7fe f912 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8005360:	61f8      	str	r0, [r7, #28]
        break;
 8005362:	e014      	b.n	800538e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005364:	f7fe f924 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8005368:	61f8      	str	r0, [r7, #28]
        break;
 800536a:	e010      	b.n	800538e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800536c:	4b4d      	ldr	r3, [pc, #308]	@ (80054a4 <UART_SetConfig+0x56c>)
 800536e:	61fb      	str	r3, [r7, #28]
        break;
 8005370:	e00d      	b.n	800538e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005372:	f7fe f86f 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8005376:	61f8      	str	r0, [r7, #28]
        break;
 8005378:	e009      	b.n	800538e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800537e:	61fb      	str	r3, [r7, #28]
        break;
 8005380:	e005      	b.n	800538e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800538c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d077      	beq.n	8005484 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	005a      	lsls	r2, r3, #1
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	085b      	lsrs	r3, r3, #1
 800539e:	441a      	add	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b0f      	cmp	r3, #15
 80053ae:	d916      	bls.n	80053de <UART_SetConfig+0x4a6>
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b6:	d212      	bcs.n	80053de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f023 030f 	bic.w	r3, r3, #15
 80053c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	8afb      	ldrh	r3, [r7, #22]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	8afa      	ldrh	r2, [r7, #22]
 80053da:	60da      	str	r2, [r3, #12]
 80053dc:	e052      	b.n	8005484 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053e4:	e04e      	b.n	8005484 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d827      	bhi.n	800543e <UART_SetConfig+0x506>
 80053ee:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <UART_SetConfig+0x4bc>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005419 	.word	0x08005419
 80053f8:	08005421 	.word	0x08005421
 80053fc:	08005429 	.word	0x08005429
 8005400:	0800543f 	.word	0x0800543f
 8005404:	0800542f 	.word	0x0800542f
 8005408:	0800543f 	.word	0x0800543f
 800540c:	0800543f 	.word	0x0800543f
 8005410:	0800543f 	.word	0x0800543f
 8005414:	08005437 	.word	0x08005437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005418:	f7fe f8b4 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 800541c:	61f8      	str	r0, [r7, #28]
        break;
 800541e:	e014      	b.n	800544a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005420:	f7fe f8c6 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8005424:	61f8      	str	r0, [r7, #28]
        break;
 8005426:	e010      	b.n	800544a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005428:	4b1e      	ldr	r3, [pc, #120]	@ (80054a4 <UART_SetConfig+0x56c>)
 800542a:	61fb      	str	r3, [r7, #28]
        break;
 800542c:	e00d      	b.n	800544a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542e:	f7fe f811 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8005432:	61f8      	str	r0, [r7, #28]
        break;
 8005434:	e009      	b.n	800544a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800543a:	61fb      	str	r3, [r7, #28]
        break;
 800543c:	e005      	b.n	800544a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005448:	bf00      	nop
    }

    if (pclk != 0U)
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d019      	beq.n	8005484 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	085a      	lsrs	r2, r3, #1
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	441a      	add	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b0f      	cmp	r3, #15
 8005468:	d909      	bls.n	800547e <UART_SetConfig+0x546>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005470:	d205      	bcs.n	800547e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60da      	str	r2, [r3, #12]
 800547c:	e002      	b.n	8005484 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005490:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005494:	4618      	mov	r0, r3
 8005496:	3728      	adds	r7, #40	@ 0x28
 8005498:	46bd      	mov	sp, r7
 800549a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800549e:	bf00      	nop
 80054a0:	40008000 	.word	0x40008000
 80054a4:	00f42400 	.word	0x00f42400

080054a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01a      	beq.n	80055be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055a6:	d10a      	bne.n	80055be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b098      	sub	sp, #96	@ 0x60
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055fc:	f7fc fe8c 	bl	8002318 <HAL_GetTick>
 8005600:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d12e      	bne.n	800566e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005618:	2200      	movs	r2, #0
 800561a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f88c 	bl	800573c <UART_WaitOnFlagUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d021      	beq.n	800566e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800563e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005648:	647b      	str	r3, [r7, #68]	@ 0x44
 800564a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800564e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e062      	b.n	8005734 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b04      	cmp	r3, #4
 800567a:	d149      	bne.n	8005710 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800567c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005684:	2200      	movs	r2, #0
 8005686:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f856 	bl	800573c <UART_WaitOnFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d03c      	beq.n	8005710 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	623b      	str	r3, [r7, #32]
   return(result);
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80056b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e6      	bne.n	8005696 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3308      	adds	r3, #8
 80056ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0301 	bic.w	r3, r3, #1
 80056de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3308      	adds	r3, #8
 80056e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056e8:	61fa      	str	r2, [r7, #28]
 80056ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	69b9      	ldr	r1, [r7, #24]
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	617b      	str	r3, [r7, #20]
   return(result);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e5      	bne.n	80056c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e011      	b.n	8005734 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3758      	adds	r7, #88	@ 0x58
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574c:	e04f      	b.n	80057ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d04b      	beq.n	80057ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005756:	f7fc fddf 	bl	8002318 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	429a      	cmp	r2, r3
 8005764:	d302      	bcc.n	800576c <UART_WaitOnFlagUntilTimeout+0x30>
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e04e      	b.n	800580e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d037      	beq.n	80057ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b80      	cmp	r3, #128	@ 0x80
 8005782:	d034      	beq.n	80057ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b40      	cmp	r3, #64	@ 0x40
 8005788:	d031      	beq.n	80057ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b08      	cmp	r3, #8
 8005796:	d110      	bne.n	80057ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2208      	movs	r2, #8
 800579e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f8ff 	bl	80059a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2208      	movs	r2, #8
 80057aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e029      	b.n	800580e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057c8:	d111      	bne.n	80057ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f8e5 	bl	80059a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e00f      	b.n	800580e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4013      	ands	r3, r2
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	bf0c      	ite	eq
 80057fe:	2301      	moveq	r3, #1
 8005800:	2300      	movne	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	429a      	cmp	r2, r3
 800580a:	d0a0      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005818:	b480      	push	{r7}
 800581a:	b097      	sub	sp, #92	@ 0x5c
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	88fa      	ldrh	r2, [r7, #6]
 8005830:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584a:	d10e      	bne.n	800586a <UART_Start_Receive_IT+0x52>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <UART_Start_Receive_IT+0x48>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800585a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800585e:	e02d      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	22ff      	movs	r2, #255	@ 0xff
 8005864:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005868:	e028      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10d      	bne.n	800588e <UART_Start_Receive_IT+0x76>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <UART_Start_Receive_IT+0x6c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	22ff      	movs	r2, #255	@ 0xff
 800587e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005882:	e01b      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	227f      	movs	r2, #127	@ 0x7f
 8005888:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800588c:	e016      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005896:	d10d      	bne.n	80058b4 <UART_Start_Receive_IT+0x9c>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <UART_Start_Receive_IT+0x92>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	227f      	movs	r2, #127	@ 0x7f
 80058a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80058a8:	e008      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	223f      	movs	r2, #63	@ 0x3f
 80058ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80058b2:	e003      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2222      	movs	r2, #34	@ 0x22
 80058c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80058ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80058fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e5      	bne.n	80058cc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005908:	d107      	bne.n	800591a <UART_Start_Receive_IT+0x102>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a21      	ldr	r2, [pc, #132]	@ (800599c <UART_Start_Receive_IT+0x184>)
 8005916:	669a      	str	r2, [r3, #104]	@ 0x68
 8005918:	e002      	b.n	8005920 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a20      	ldr	r2, [pc, #128]	@ (80059a0 <UART_Start_Receive_IT+0x188>)
 800591e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d019      	beq.n	800595c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800593c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005946:	637b      	str	r3, [r7, #52]	@ 0x34
 8005948:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800594c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e6      	bne.n	8005928 <UART_Start_Receive_IT+0x110>
 800595a:	e018      	b.n	800598e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	613b      	str	r3, [r7, #16]
   return(result);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f043 0320 	orr.w	r3, r3, #32
 8005970:	653b      	str	r3, [r7, #80]	@ 0x50
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800597a:	623b      	str	r3, [r7, #32]
 800597c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	69f9      	ldr	r1, [r7, #28]
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	61bb      	str	r3, [r7, #24]
   return(result);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e6      	bne.n	800595c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	375c      	adds	r7, #92	@ 0x5c
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	08005e21 	.word	0x08005e21
 80059a0:	08005c65 	.word	0x08005c65

080059a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b095      	sub	sp, #84	@ 0x54
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80059cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e6      	bne.n	80059ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d118      	bne.n	8005a4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f023 0310 	bic.w	r3, r3, #16
 8005a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6979      	ldr	r1, [r7, #20]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	613b      	str	r3, [r7, #16]
   return(result);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e6      	bne.n	8005a1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a60:	bf00      	nop
 8005a62:	3754      	adds	r7, #84	@ 0x54
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff fa3e 	bl	8004f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b08f      	sub	sp, #60	@ 0x3c
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aa4:	2b21      	cmp	r3, #33	@ 0x21
 8005aa6:	d14c      	bne.n	8005b42 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d132      	bne.n	8005b1a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ad4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e6      	bne.n	8005ab4 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6979      	ldr	r1, [r7, #20]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	613b      	str	r3, [r7, #16]
   return(result);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e6      	bne.n	8005ae6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005b18:	e013      	b.n	8005b42 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b1e:	781a      	ldrb	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005b42:	bf00      	nop
 8005b44:	373c      	adds	r7, #60	@ 0x3c
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b091      	sub	sp, #68	@ 0x44
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b5a:	2b21      	cmp	r3, #33	@ 0x21
 8005b5c:	d151      	bne.n	8005c02 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d132      	bne.n	8005bd0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	623b      	str	r3, [r7, #32]
   return(result);
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bba:	61fb      	str	r3, [r7, #28]
 8005bbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	69b9      	ldr	r1, [r7, #24]
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e6      	bne.n	8005b9c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005bce:	e018      	b.n	8005c02 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd8:	881a      	ldrh	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be2:	b292      	uxth	r2, r2
 8005be4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bea:	1c9a      	adds	r2, r3, #2
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005c02:	bf00      	nop
 8005c04:	3744      	adds	r7, #68	@ 0x44
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b088      	sub	sp, #32
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	e853 3f00 	ldrex	r3, [r3]
 8005c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6979      	ldr	r1, [r7, #20]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	613b      	str	r3, [r7, #16]
   return(result);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e6      	bne.n	8005c16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fc f9c7 	bl	8001fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c5a:	bf00      	nop
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b09c      	sub	sp, #112	@ 0x70
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c7c:	2b22      	cmp	r3, #34	@ 0x22
 8005c7e:	f040 80be 	bne.w	8005dfe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c90:	b2d9      	uxtb	r1, r3
 8005c92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9c:	400a      	ands	r2, r1
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f040 80a3 	bne.w	8005e12 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e6      	bne.n	8005ccc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d10:	f023 0301 	bic.w	r3, r3, #1
 8005d14:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e5      	bne.n	8005cfe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a34      	ldr	r2, [pc, #208]	@ (8005e1c <UART_RxISR_8BIT+0x1b8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d01f      	beq.n	8005d90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d018      	beq.n	8005d90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d72:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e6      	bne.n	8005d5e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d12e      	bne.n	8005df6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0310 	bic.w	r3, r3, #16
 8005db2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dbc:	61fb      	str	r3, [r7, #28]
 8005dbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	69b9      	ldr	r1, [r7, #24]
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e6      	bne.n	8005d9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d103      	bne.n	8005de6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2210      	movs	r2, #16
 8005de4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff f896 	bl	8004f20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005df4:	e00d      	b.n	8005e12 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fc f928 	bl	800204c <HAL_UART_RxCpltCallback>
}
 8005dfc:	e009      	b.n	8005e12 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	8b1b      	ldrh	r3, [r3, #24]
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0208 	orr.w	r2, r2, #8
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	831a      	strh	r2, [r3, #24]
}
 8005e12:	bf00      	nop
 8005e14:	3770      	adds	r7, #112	@ 0x70
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40008000 	.word	0x40008000

08005e20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b09c      	sub	sp, #112	@ 0x70
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e38:	2b22      	cmp	r3, #34	@ 0x22
 8005e3a:	f040 80be 	bne.w	8005fba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e4e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005e52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e56:	4013      	ands	r3, r2
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e62:	1c9a      	adds	r2, r3, #2
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f040 80a3 	bne.w	8005fce <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ea6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ea8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005eac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e6      	bne.n	8005e88 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	f023 0301 	bic.w	r3, r3, #1
 8005ed0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005eda:	643a      	str	r2, [r7, #64]	@ 0x40
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ee0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e5      	bne.n	8005eba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a34      	ldr	r2, [pc, #208]	@ (8005fd8 <UART_RxISR_16BIT+0x1b8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d01f      	beq.n	8005f4c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d018      	beq.n	8005f4c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f3a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e6      	bne.n	8005f1a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d12e      	bne.n	8005fb2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f023 0310 	bic.w	r3, r3, #16
 8005f6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	6979      	ldr	r1, [r7, #20]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	e841 2300 	strex	r3, r2, [r1]
 8005f84:	613b      	str	r3, [r7, #16]
   return(result);
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e6      	bne.n	8005f5a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f003 0310 	and.w	r3, r3, #16
 8005f96:	2b10      	cmp	r3, #16
 8005f98:	d103      	bne.n	8005fa2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2210      	movs	r2, #16
 8005fa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fe ffb8 	bl	8004f20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fb0:	e00d      	b.n	8005fce <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fc f84a 	bl	800204c <HAL_UART_RxCpltCallback>
}
 8005fb8:	e009      	b.n	8005fce <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	8b1b      	ldrh	r3, [r3, #24]
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0208 	orr.w	r2, r2, #8
 8005fca:	b292      	uxth	r2, r2
 8005fcc:	831a      	strh	r2, [r3, #24]
}
 8005fce:	bf00      	nop
 8005fd0:	3770      	adds	r7, #112	@ 0x70
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40008000 	.word	0x40008000

08005fdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	7992      	ldrb	r2, [r2, #6]
 8006002:	08d2      	lsrs	r2, r2, #3
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	fb13 f302 	smulbb	r3, r3, r2
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	889b      	ldrh	r3, [r3, #4]
 8006014:	461a      	mov	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	885b      	ldrh	r3, [r3, #2]
 800601a:	fb02 f303 	mul.w	r3, r2, r3
 800601e:	461a      	mov	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	60da      	str	r2, [r3, #12]
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006036:	b490      	push	{r4, r7}
 8006038:	b086      	sub	sp, #24
 800603a:	af00      	add	r7, sp, #0
 800603c:	4604      	mov	r4, r0
 800603e:	4608      	mov	r0, r1
 8006040:	1d39      	adds	r1, r7, #4
 8006042:	e881 000c 	stmia.w	r1, {r2, r3}
 8006046:	4623      	mov	r3, r4
 8006048:	81fb      	strh	r3, [r7, #14]
 800604a:	4603      	mov	r3, r0
 800604c:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006056:	88ba      	ldrh	r2, [r7, #4]
 8006058:	4293      	cmp	r3, r2
 800605a:	da04      	bge.n	8006066 <code+0x30>
        code |= LEFT;
 800605c:	2201      	movs	r2, #1
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	4313      	orrs	r3, r2
 8006062:	75fb      	strb	r3, [r7, #23]
 8006064:	e008      	b.n	8006078 <code+0x42>
    } else if (x0 > window.x1) {
 8006066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800606a:	893a      	ldrh	r2, [r7, #8]
 800606c:	4293      	cmp	r3, r2
 800606e:	dd03      	ble.n	8006078 <code+0x42>
        code |= RIGHT;
 8006070:	2202      	movs	r2, #2
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	4313      	orrs	r3, r2
 8006076:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006078:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	4293      	cmp	r3, r2
 8006080:	da04      	bge.n	800608c <code+0x56>
        code |= BOTTOM;
 8006082:	2204      	movs	r2, #4
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	4313      	orrs	r3, r2
 8006088:	75fb      	strb	r3, [r7, #23]
 800608a:	e008      	b.n	800609e <code+0x68>
    } else if (y0 > window.y1) {
 800608c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006090:	897a      	ldrh	r2, [r7, #10]
 8006092:	4293      	cmp	r3, r2
 8006094:	dd03      	ble.n	800609e <code+0x68>
        code |= TOP;
 8006096:	2208      	movs	r2, #8
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	4313      	orrs	r3, r2
 800609c:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 800609e:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc90      	pop	{r4, r7}
 80060a8:	4770      	bx	lr

080060aa <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b088      	sub	sp, #32
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f9b3 0000 	ldrsh.w	r0, [r3]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80060c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80060c8:	cb0c      	ldmia	r3, {r2, r3}
 80060ca:	f7ff ffb4 	bl	8006036 <code>
 80060ce:	4603      	mov	r3, r0
 80060d0:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f9b3 1000 	ldrsh.w	r1, [r3]
 80060de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80060e2:	cb0c      	ldmia	r3, {r2, r3}
 80060e4:	f7ff ffa7 	bl	8006036 <code>
 80060e8:	4603      	mov	r3, r0
 80060ea:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 80060ec:	2300      	movs	r3, #0
 80060ee:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 80060f0:	7ffa      	ldrb	r2, [r7, #31]
 80060f2:	7fbb      	ldrb	r3, [r7, #30]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d102      	bne.n	8006102 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 80060fc:	2301      	movs	r3, #1
 80060fe:	777b      	strb	r3, [r7, #29]
            break;
 8006100:	e0e9      	b.n	80062d6 <clip_line+0x22c>
        } else if (code0 & code1) {
 8006102:	7ffa      	ldrb	r2, [r7, #31]
 8006104:	7fbb      	ldrb	r3, [r7, #30]
 8006106:	4013      	ands	r3, r2
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	f040 80e2 	bne.w	80062d4 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006118:	7ffb      	ldrb	r3, [r7, #31]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <clip_line+0x78>
 800611e:	7ffb      	ldrb	r3, [r7, #31]
 8006120:	e000      	b.n	8006124 <clip_line+0x7a>
 8006122:	7fbb      	ldrb	r3, [r7, #30]
 8006124:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006126:	2208      	movs	r2, #8
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	4013      	ands	r3, r2
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d024      	beq.n	800617c <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006140:	4619      	mov	r1, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006148:	1acb      	subs	r3, r1, r3
 800614a:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800614c:	4608      	mov	r0, r1
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006154:	1a41      	subs	r1, r0, r1
 8006156:	fb03 f101 	mul.w	r1, r3, r1
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006160:	4618      	mov	r0, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006168:	1ac3      	subs	r3, r0, r3
 800616a:	fb91 f3f3 	sdiv	r3, r1, r3
 800616e:	b29b      	uxth	r3, r3
 8006170:	4413      	add	r3, r2
 8006172:	b29b      	uxth	r3, r3
 8006174:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006176:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006178:	833b      	strh	r3, [r7, #24]
 800617a:	e07f      	b.n	800627c <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 800617c:	2204      	movs	r2, #4
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	4013      	ands	r3, r2
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d024      	beq.n	80061d2 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006196:	4619      	mov	r1, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800619e:	1acb      	subs	r3, r1, r3
 80061a0:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80061a2:	4608      	mov	r0, r1
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80061aa:	1a41      	subs	r1, r0, r1
 80061ac:	fb03 f101 	mul.w	r1, r3, r1
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061b6:	4618      	mov	r0, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061be:	1ac3      	subs	r3, r0, r3
 80061c0:	fb91 f3f3 	sdiv	r3, r1, r3
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 80061cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061ce:	833b      	strh	r3, [r7, #24]
 80061d0:	e054      	b.n	800627c <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 80061d2:	2202      	movs	r2, #2
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	4013      	ands	r3, r2
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d024      	beq.n	8006228 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ec:	4619      	mov	r1, r3
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061f4:	1acb      	subs	r3, r1, r3
 80061f6:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80061f8:	4608      	mov	r0, r1
 80061fa:	68f9      	ldr	r1, [r7, #12]
 80061fc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006200:	1a41      	subs	r1, r0, r1
 8006202:	fb03 f101 	mul.w	r1, r3, r1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800620c:	4618      	mov	r0, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006214:	1ac3      	subs	r3, r0, r3
 8006216:	fb91 f3f3 	sdiv	r3, r1, r3
 800621a:	b29b      	uxth	r3, r3
 800621c:	4413      	add	r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006222:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006224:	837b      	strh	r3, [r7, #26]
 8006226:	e029      	b.n	800627c <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006228:	2201      	movs	r2, #1
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	4013      	ands	r3, r2
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d023      	beq.n	800627c <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800623a:	b29a      	uxth	r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006242:	4619      	mov	r1, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800624a:	1acb      	subs	r3, r1, r3
 800624c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800624e:	4608      	mov	r0, r1
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006256:	1a41      	subs	r1, r0, r1
 8006258:	fb03 f101 	mul.w	r1, r3, r1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006262:	4618      	mov	r0, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800626a:	1ac3      	subs	r3, r0, r3
 800626c:	fb91 f3f3 	sdiv	r3, r1, r3
 8006270:	b29b      	uxth	r3, r3
 8006272:	4413      	add	r3, r2
 8006274:	b29b      	uxth	r3, r3
 8006276:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006278:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800627a:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 800627c:	7dfa      	ldrb	r2, [r7, #23]
 800627e:	7ffb      	ldrb	r3, [r7, #31]
 8006280:	429a      	cmp	r2, r3
 8006282:	d113      	bne.n	80062ac <clip_line+0x202>
                *x0 = x;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8b7a      	ldrh	r2, [r7, #26]
 8006288:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	8b3a      	ldrh	r2, [r7, #24]
 800628e:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f9b3 1000 	ldrsh.w	r1, [r3]
 800629c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80062a0:	cb0c      	ldmia	r3, {r2, r3}
 80062a2:	f7ff fec8 	bl	8006036 <code>
 80062a6:	4603      	mov	r3, r0
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e721      	b.n	80060f0 <clip_line+0x46>
            } else {
                *x1 = x;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8b7a      	ldrh	r2, [r7, #26]
 80062b0:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	8b3a      	ldrh	r2, [r7, #24]
 80062b6:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f9b3 0000 	ldrsh.w	r0, [r3]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80062c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80062c8:	cb0c      	ldmia	r3, {r2, r3}
 80062ca:	f7ff feb4 	bl	8006036 <code>
 80062ce:	4603      	mov	r3, r0
 80062d0:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 80062d2:	e70d      	b.n	80060f0 <clip_line+0x46>
            break;
 80062d4:	bf00      	nop
            }
        }
    }

    return accept;
 80062d6:	7f7b      	ldrb	r3, [r7, #29]
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	3306      	adds	r3, #6
 80062f0:	2208      	movs	r2, #8
 80062f2:	4619      	mov	r1, r3
 80062f4:	f001 fcdd 	bl	8007cb2 <memcpy>
    meta->width = font[FONTX_WIDTH];
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	330e      	adds	r3, #14
 80062fc:	781a      	ldrb	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	330f      	adds	r3, #15
 8006306:	781a      	ldrb	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	3310      	adds	r3, #16
 8006310:	781a      	ldrb	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	72da      	strb	r2, [r3, #11]

    return 0;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b08e      	sub	sp, #56	@ 0x38
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800632c:	f107 0314 	add.w	r3, r7, #20
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff ffd4 	bl	80062e0 <fontx_meta>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 800633e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <fontx_glyph+0x2c>
        return status;
 8006346:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800634a:	e077      	b.n	800643c <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800634c:	7f7a      	ldrb	r2, [r7, #29]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006352:	7fba      	ldrb	r2, [r7, #30]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006358:	7f7b      	ldrb	r3, [r7, #29]
 800635a:	3307      	adds	r3, #7
 800635c:	2b00      	cmp	r3, #0
 800635e:	da00      	bge.n	8006362 <fontx_glyph+0x42>
 8006360:	3307      	adds	r3, #7
 8006362:	10db      	asrs	r3, r3, #3
 8006364:	b2da      	uxtb	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	78da      	ldrb	r2, [r3, #3]
 800636e:	7fbb      	ldrb	r3, [r7, #30]
 8006370:	fb12 f303 	smulbb	r3, r2, r3
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 800637a:	7ffb      	ldrb	r3, [r7, #31]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10f      	bne.n	80063a0 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2bff      	cmp	r3, #255	@ 0xff
 8006384:	d859      	bhi.n	800643a <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	789b      	ldrb	r3, [r3, #2]
 800638a:	461a      	mov	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	fb02 f303 	mul.w	r3, r2, r3
 8006392:	3311      	adds	r3, #17
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	441a      	add	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e04d      	b.n	800643c <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3312      	adds	r3, #18
 80063a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3311      	adds	r3, #17
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 80063b2:	e03d      	b.n	8006430 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80063b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063bc:	3301      	adds	r3, #1
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	4413      	add	r3, r2
 80063c4:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80063c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c8:	3302      	adds	r3, #2
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d0:	3303      	adds	r3, #3
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	4413      	add	r3, r2
 80063d8:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	429a      	cmp	r2, r3
 80063e0:	d31c      	bcc.n	800641c <fontx_glyph+0xfc>
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d818      	bhi.n	800641c <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063f2:	4413      	add	r3, r2
 80063f4:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3311      	adds	r3, #17
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	461a      	mov	r2, r3
                    nc * glyph->size
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	789b      	ldrb	r3, [r3, #2]
 8006404:	4619      	mov	r1, r3
 8006406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006408:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800640c:	4413      	add	r3, r2
 800640e:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	441a      	add	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	e00f      	b.n	800643c <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800641c:	6a3a      	ldr	r2, [r7, #32]
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	1ad2      	subs	r2, r2, r3
 8006422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006424:	4413      	add	r3, r2
 8006426:	3301      	adds	r3, #1
 8006428:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642c:	3304      	adds	r3, #4
 800642e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8006430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006432:	1e5a      	subs	r2, r3, #1
 8006434:	633a      	str	r2, [r7, #48]	@ 0x30
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1bc      	bne.n	80063b4 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800643a:	2301      	movs	r3, #1
 800643c:	4618      	mov	r0, r3
 800643e:	3738      	adds	r7, #56	@ 0x38
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	dd01      	ble.n	800645a <min+0x16>
        return b;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	e000      	b.n	800645c <min+0x18>
    };
    return a;
 800645a:	687b      	ldr	r3, [r7, #4]
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <max>:

static inline int max(int a, int b) {
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	dd01      	ble.n	800647e <max+0x16>
        return a;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	e000      	b.n	8006480 <max+0x18>
    }
    return b;
 800647e:	683b      	ldr	r3, [r7, #0]
}
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	80fb      	strh	r3, [r7, #6]
 8006496:	460b      	mov	r3, r1
 8006498:	80bb      	strh	r3, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800649e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064a2:	4a12      	ldr	r2, [pc, #72]	@ (80064ec <hagl_put_pixel+0x60>)
 80064a4:	8812      	ldrh	r2, [r2, #0]
 80064a6:	4293      	cmp	r3, r2
 80064a8:	db1a      	blt.n	80064e0 <hagl_put_pixel+0x54>
 80064aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064ae:	4a0f      	ldr	r2, [pc, #60]	@ (80064ec <hagl_put_pixel+0x60>)
 80064b0:	8852      	ldrh	r2, [r2, #2]
 80064b2:	4293      	cmp	r3, r2
 80064b4:	db14      	blt.n	80064e0 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80064b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064ba:	4a0c      	ldr	r2, [pc, #48]	@ (80064ec <hagl_put_pixel+0x60>)
 80064bc:	8892      	ldrh	r2, [r2, #4]
 80064be:	4293      	cmp	r3, r2
 80064c0:	dc10      	bgt.n	80064e4 <hagl_put_pixel+0x58>
 80064c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064c6:	4a09      	ldr	r2, [pc, #36]	@ (80064ec <hagl_put_pixel+0x60>)
 80064c8:	88d2      	ldrh	r2, [r2, #6]
 80064ca:	4293      	cmp	r3, r2
 80064cc:	dc0a      	bgt.n	80064e4 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 80064ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80064d6:	887a      	ldrh	r2, [r7, #2]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fb faa5 	bl	8001a28 <lcdPutPixel>
 80064de:	e002      	b.n	80064e6 <hagl_put_pixel+0x5a>
        return;
 80064e0:	bf00      	nop
 80064e2:	e000      	b.n	80064e6 <hagl_put_pixel+0x5a>
        return;
 80064e4:	bf00      	nop
}
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	2000020c 	.word	0x2000020c

080064f0 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 80064f0:	b590      	push	{r4, r7, lr}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	4611      	mov	r1, r2
 80064fc:	461a      	mov	r2, r3
 80064fe:	4623      	mov	r3, r4
 8006500:	80fb      	strh	r3, [r7, #6]
 8006502:	4603      	mov	r3, r0
 8006504:	80bb      	strh	r3, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	807b      	strh	r3, [r7, #2]
 800650a:	4613      	mov	r3, r2
 800650c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800650e:	88fa      	ldrh	r2, [r7, #6]
 8006510:	887b      	ldrh	r3, [r7, #2]
 8006512:	4413      	add	r3, r2
 8006514:	b29b      	uxth	r3, r3
 8006516:	b21a      	sxth	r2, r3
 8006518:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800651c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006520:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006524:	883b      	ldrh	r3, [r7, #0]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	4623      	mov	r3, r4
 800652a:	f000 f827 	bl	800657c <hagl_draw_line>
#endif
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	bd90      	pop	{r4, r7, pc}

08006536 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006536:	b590      	push	{r4, r7, lr}
 8006538:	b085      	sub	sp, #20
 800653a:	af02      	add	r7, sp, #8
 800653c:	4604      	mov	r4, r0
 800653e:	4608      	mov	r0, r1
 8006540:	4611      	mov	r1, r2
 8006542:	461a      	mov	r2, r3
 8006544:	4623      	mov	r3, r4
 8006546:	80fb      	strh	r3, [r7, #6]
 8006548:	4603      	mov	r3, r0
 800654a:	80bb      	strh	r3, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	807b      	strh	r3, [r7, #2]
 8006550:	4613      	mov	r3, r2
 8006552:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006554:	88ba      	ldrh	r2, [r7, #4]
 8006556:	887b      	ldrh	r3, [r7, #2]
 8006558:	4413      	add	r3, r2
 800655a:	b29b      	uxth	r3, r3
 800655c:	b21c      	sxth	r4, r3
 800655e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006562:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006566:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800656a:	883b      	ldrh	r3, [r7, #0]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	4623      	mov	r3, r4
 8006570:	f000 f804 	bl	800657c <hagl_draw_line>
#endif
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	bd90      	pop	{r4, r7, pc}

0800657c <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800657c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657e:	b089      	sub	sp, #36	@ 0x24
 8006580:	af02      	add	r7, sp, #8
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
 8006586:	4611      	mov	r1, r2
 8006588:	461a      	mov	r2, r3
 800658a:	4623      	mov	r3, r4
 800658c:	80fb      	strh	r3, [r7, #6]
 800658e:	4603      	mov	r3, r0
 8006590:	80bb      	strh	r3, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	807b      	strh	r3, [r7, #2]
 8006596:	4613      	mov	r3, r2
 8006598:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 800659a:	463b      	mov	r3, r7
 800659c:	1cba      	adds	r2, r7, #2
 800659e:	1d3d      	adds	r5, r7, #4
 80065a0:	1dbc      	adds	r4, r7, #6
 80065a2:	494a      	ldr	r1, [pc, #296]	@ (80066cc <hagl_draw_line+0x150>)
 80065a4:	466e      	mov	r6, sp
 80065a6:	c903      	ldmia	r1, {r0, r1}
 80065a8:	e886 0003 	stmia.w	r6, {r0, r1}
 80065ac:	4629      	mov	r1, r5
 80065ae:	4620      	mov	r0, r4
 80065b0:	f7ff fd7b 	bl	80060aa <clip_line>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f083 0301 	eor.w	r3, r3, #1
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d17e      	bne.n	80066be <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80065c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065c4:	461a      	mov	r2, r3
 80065c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bfb8      	it	lt
 80065d0:	425b      	neglt	r3, r3
 80065d2:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 80065d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80065d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065dc:	429a      	cmp	r2, r3
 80065de:	da01      	bge.n	80065e4 <hagl_draw_line+0x68>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e001      	b.n	80065e8 <hagl_draw_line+0x6c>
 80065e4:	f04f 33ff 	mov.w	r3, #4294967295
 80065e8:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 80065ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bfb8      	it	lt
 80065fa:	425b      	neglt	r3, r3
 80065fc:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 80065fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006602:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006606:	429a      	cmp	r2, r3
 8006608:	da01      	bge.n	800660e <hagl_draw_line+0x92>
 800660a:	2301      	movs	r3, #1
 800660c:	e001      	b.n	8006612 <hagl_draw_line+0x96>
 800660e:	f04f 33ff 	mov.w	r3, #4294967295
 8006612:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006614:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006618:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800661c:	429a      	cmp	r2, r3
 800661e:	dd06      	ble.n	800662e <hagl_draw_line+0xb2>
 8006620:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006624:	0fda      	lsrs	r2, r3, #31
 8006626:	4413      	add	r3, r2
 8006628:	105b      	asrs	r3, r3, #1
 800662a:	b21b      	sxth	r3, r3
 800662c:	e006      	b.n	800663c <hagl_draw_line+0xc0>
 800662e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006632:	0fda      	lsrs	r2, r3, #31
 8006634:	4413      	add	r3, r2
 8006636:	105b      	asrs	r3, r3, #1
 8006638:	425b      	negs	r3, r3
 800663a:	b21b      	sxth	r3, r3
 800663c:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800663e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006642:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006646:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff ff1f 	bl	800648c <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800664e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006652:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006656:	429a      	cmp	r2, r3
 8006658:	d105      	bne.n	8006666 <hagl_draw_line+0xea>
 800665a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800665e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006662:	429a      	cmp	r2, r3
 8006664:	d02d      	beq.n	80066c2 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006666:	8afb      	ldrh	r3, [r7, #22]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	b29b      	uxth	r3, r3
 800666c:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800666e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006672:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006676:	425b      	negs	r3, r3
 8006678:	429a      	cmp	r2, r3
 800667a:	dd0c      	ble.n	8006696 <hagl_draw_line+0x11a>
            err -= dy;
 800667c:	8afa      	ldrh	r2, [r7, #22]
 800667e:	8a3b      	ldrh	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	b29b      	uxth	r3, r3
 8006684:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8006686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800668a:	b29a      	uxth	r2, r3
 800668c:	8a7b      	ldrh	r3, [r7, #18]
 800668e:	4413      	add	r3, r2
 8006690:	b29b      	uxth	r3, r3
 8006692:	b21b      	sxth	r3, r3
 8006694:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8006696:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800669a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800669e:	429a      	cmp	r2, r3
 80066a0:	dacd      	bge.n	800663e <hagl_draw_line+0xc2>
            err += dx;
 80066a2:	8afa      	ldrh	r2, [r7, #22]
 80066a4:	8abb      	ldrh	r3, [r7, #20]
 80066a6:	4413      	add	r3, r2
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80066ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	89fb      	ldrh	r3, [r7, #14]
 80066b4:	4413      	add	r3, r2
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	b21b      	sxth	r3, r3
 80066ba:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80066bc:	e7bf      	b.n	800663e <hagl_draw_line+0xc2>
        return;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <hagl_draw_line+0x148>
            break;
 80066c2:	bf00      	nop
        }
    }
}
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ca:	bf00      	nop
 80066cc:	2000020c 	.word	0x2000020c

080066d0 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	461a      	mov	r2, r3
 80066de:	4623      	mov	r3, r4
 80066e0:	80fb      	strh	r3, [r7, #6]
 80066e2:	4603      	mov	r3, r0
 80066e4:	80bb      	strh	r3, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	807b      	strh	r3, [r7, #2]
 80066ea:	4613      	mov	r3, r2
 80066ec:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80066ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80066f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	dd0e      	ble.n	8006718 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	887b      	ldrh	r3, [r7, #2]
 80066fe:	4413      	add	r3, r2
 8006700:	b29b      	uxth	r3, r3
 8006702:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006704:	88fa      	ldrh	r2, [r7, #6]
 8006706:	887b      	ldrh	r3, [r7, #2]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	b29b      	uxth	r3, r3
 800670c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800670e:	88fa      	ldrh	r2, [r7, #6]
 8006710:	887b      	ldrh	r3, [r7, #2]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	b29b      	uxth	r3, r3
 8006716:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006718:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800671c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006720:	429a      	cmp	r2, r3
 8006722:	dd0e      	ble.n	8006742 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8006724:	88ba      	ldrh	r2, [r7, #4]
 8006726:	883b      	ldrh	r3, [r7, #0]
 8006728:	4413      	add	r3, r2
 800672a:	b29b      	uxth	r3, r3
 800672c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800672e:	88ba      	ldrh	r2, [r7, #4]
 8006730:	883b      	ldrh	r3, [r7, #0]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	b29b      	uxth	r3, r3
 8006736:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006738:	88ba      	ldrh	r2, [r7, #4]
 800673a:	883b      	ldrh	r3, [r7, #0]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	b29b      	uxth	r3, r3
 8006740:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8006742:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006746:	4a24      	ldr	r2, [pc, #144]	@ (80067d8 <hagl_draw_rectangle+0x108>)
 8006748:	8812      	ldrh	r2, [r2, #0]
 800674a:	4293      	cmp	r3, r2
 800674c:	db3e      	blt.n	80067cc <hagl_draw_rectangle+0xfc>
 800674e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006752:	4a21      	ldr	r2, [pc, #132]	@ (80067d8 <hagl_draw_rectangle+0x108>)
 8006754:	8852      	ldrh	r2, [r2, #2]
 8006756:	4293      	cmp	r3, r2
 8006758:	db38      	blt.n	80067cc <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800675a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800675e:	4a1e      	ldr	r2, [pc, #120]	@ (80067d8 <hagl_draw_rectangle+0x108>)
 8006760:	8892      	ldrh	r2, [r2, #4]
 8006762:	4293      	cmp	r3, r2
 8006764:	dc34      	bgt.n	80067d0 <hagl_draw_rectangle+0x100>
 8006766:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800676a:	4a1b      	ldr	r2, [pc, #108]	@ (80067d8 <hagl_draw_rectangle+0x108>)
 800676c:	88d2      	ldrh	r2, [r2, #6]
 800676e:	4293      	cmp	r3, r2
 8006770:	dc2e      	bgt.n	80067d0 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 8006772:	887a      	ldrh	r2, [r7, #2]
 8006774:	88fb      	ldrh	r3, [r7, #6]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	b29b      	uxth	r3, r3
 800677a:	3301      	adds	r3, #1
 800677c:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 800677e:	883a      	ldrh	r2, [r7, #0]
 8006780:	88bb      	ldrh	r3, [r7, #4]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	b29b      	uxth	r3, r3
 8006786:	3301      	adds	r3, #1
 8006788:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 800678a:	8c3b      	ldrh	r3, [r7, #32]
 800678c:	89fa      	ldrh	r2, [r7, #14]
 800678e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006792:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006796:	f7ff feab 	bl	80064f0 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 800679a:	8c3b      	ldrh	r3, [r7, #32]
 800679c:	89fa      	ldrh	r2, [r7, #14]
 800679e:	f9b7 1000 	ldrsh.w	r1, [r7]
 80067a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80067a6:	f7ff fea3 	bl	80064f0 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 80067aa:	8c3b      	ldrh	r3, [r7, #32]
 80067ac:	89ba      	ldrh	r2, [r7, #12]
 80067ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80067b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80067b6:	f7ff febe 	bl	8006536 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 80067ba:	8c3b      	ldrh	r3, [r7, #32]
 80067bc:	89ba      	ldrh	r2, [r7, #12]
 80067be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80067c2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80067c6:	f7ff feb6 	bl	8006536 <hagl_draw_vline>
 80067ca:	e002      	b.n	80067d2 <hagl_draw_rectangle+0x102>
        return;
 80067cc:	bf00      	nop
 80067ce:	e000      	b.n	80067d2 <hagl_draw_rectangle+0x102>
        return;
 80067d0:	bf00      	nop
}
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd90      	pop	{r4, r7, pc}
 80067d8:	2000020c 	.word	0x2000020c

080067dc <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	4623      	mov	r3, r4
 80067ec:	80fb      	strh	r3, [r7, #6]
 80067ee:	4603      	mov	r3, r0
 80067f0:	80bb      	strh	r3, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	807b      	strh	r3, [r7, #2]
 80067f6:	4613      	mov	r3, r2
 80067f8:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80067fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006802:	429a      	cmp	r2, r3
 8006804:	dd0e      	ble.n	8006824 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8006806:	88fa      	ldrh	r2, [r7, #6]
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	4413      	add	r3, r2
 800680c:	b29b      	uxth	r3, r3
 800680e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006810:	88fa      	ldrh	r2, [r7, #6]
 8006812:	887b      	ldrh	r3, [r7, #2]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	b29b      	uxth	r3, r3
 8006818:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800681a:	88fa      	ldrh	r2, [r7, #6]
 800681c:	887b      	ldrh	r3, [r7, #2]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	b29b      	uxth	r3, r3
 8006822:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006824:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006828:	f9b7 3000 	ldrsh.w	r3, [r7]
 800682c:	429a      	cmp	r2, r3
 800682e:	dd0e      	ble.n	800684e <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8006830:	88ba      	ldrh	r2, [r7, #4]
 8006832:	883b      	ldrh	r3, [r7, #0]
 8006834:	4413      	add	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800683a:	88ba      	ldrh	r2, [r7, #4]
 800683c:	883b      	ldrh	r3, [r7, #0]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	b29b      	uxth	r3, r3
 8006842:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006844:	88ba      	ldrh	r2, [r7, #4]
 8006846:	883b      	ldrh	r3, [r7, #0]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	b29b      	uxth	r3, r3
 800684c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800684e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006852:	4a33      	ldr	r2, [pc, #204]	@ (8006920 <hagl_fill_rectangle+0x144>)
 8006854:	8812      	ldrh	r2, [r2, #0]
 8006856:	4293      	cmp	r3, r2
 8006858:	db5b      	blt.n	8006912 <hagl_fill_rectangle+0x136>
 800685a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800685e:	4a30      	ldr	r2, [pc, #192]	@ (8006920 <hagl_fill_rectangle+0x144>)
 8006860:	8852      	ldrh	r2, [r2, #2]
 8006862:	4293      	cmp	r3, r2
 8006864:	db55      	blt.n	8006912 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800686a:	4a2d      	ldr	r2, [pc, #180]	@ (8006920 <hagl_fill_rectangle+0x144>)
 800686c:	8892      	ldrh	r2, [r2, #4]
 800686e:	4293      	cmp	r3, r2
 8006870:	dc51      	bgt.n	8006916 <hagl_fill_rectangle+0x13a>
 8006872:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006876:	4a2a      	ldr	r2, [pc, #168]	@ (8006920 <hagl_fill_rectangle+0x144>)
 8006878:	88d2      	ldrh	r2, [r2, #6]
 800687a:	4293      	cmp	r3, r2
 800687c:	dc4b      	bgt.n	8006916 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800687e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006882:	4a27      	ldr	r2, [pc, #156]	@ (8006920 <hagl_fill_rectangle+0x144>)
 8006884:	8812      	ldrh	r2, [r2, #0]
 8006886:	4611      	mov	r1, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff fded 	bl	8006468 <max>
 800688e:	4603      	mov	r3, r0
 8006890:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8006892:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006896:	4a22      	ldr	r2, [pc, #136]	@ (8006920 <hagl_fill_rectangle+0x144>)
 8006898:	8852      	ldrh	r2, [r2, #2]
 800689a:	4611      	mov	r1, r2
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fde3 	bl	8006468 <max>
 80068a2:	4603      	mov	r3, r0
 80068a4:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 80068a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80068aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006920 <hagl_fill_rectangle+0x144>)
 80068ac:	8892      	ldrh	r2, [r2, #4]
 80068ae:	4611      	mov	r1, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fdc7 	bl	8006444 <min>
 80068b6:	4603      	mov	r3, r0
 80068b8:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80068ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80068be:	4a18      	ldr	r2, [pc, #96]	@ (8006920 <hagl_fill_rectangle+0x144>)
 80068c0:	88d2      	ldrh	r2, [r2, #6]
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fdbd 	bl	8006444 <min>
 80068ca:	4603      	mov	r3, r0
 80068cc:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80068ce:	887a      	ldrh	r2, [r7, #2]
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3301      	adds	r3, #1
 80068d8:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 80068da:	883a      	ldrh	r2, [r7, #0]
 80068dc:	88bb      	ldrh	r3, [r7, #4]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3301      	adds	r3, #1
 80068e4:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 80068e6:	2300      	movs	r3, #0
 80068e8:	81fb      	strh	r3, [r7, #14]
 80068ea:	e00d      	b.n	8006908 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 80068ec:	88ba      	ldrh	r2, [r7, #4]
 80068ee:	89fb      	ldrh	r3, [r7, #14]
 80068f0:	4413      	add	r3, r2
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	b219      	sxth	r1, r3
 80068f6:	8c3b      	ldrh	r3, [r7, #32]
 80068f8:	89ba      	ldrh	r2, [r7, #12]
 80068fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80068fe:	f7ff fdf7 	bl	80064f0 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8006902:	89fb      	ldrh	r3, [r7, #14]
 8006904:	3301      	adds	r3, #1
 8006906:	81fb      	strh	r3, [r7, #14]
 8006908:	89fa      	ldrh	r2, [r7, #14]
 800690a:	897b      	ldrh	r3, [r7, #10]
 800690c:	429a      	cmp	r2, r3
 800690e:	d3ed      	bcc.n	80068ec <hagl_fill_rectangle+0x110>
 8006910:	e002      	b.n	8006918 <hagl_fill_rectangle+0x13c>
        return;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <hagl_fill_rectangle+0x13c>
        return;
 8006916:	bf00      	nop
#endif
    }
}
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	bd90      	pop	{r4, r7, pc}
 800691e:	bf00      	nop
 8006920:	2000020c 	.word	0x2000020c

08006924 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8006924:	b590      	push	{r4, r7, lr}
 8006926:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8006932:	f844 0c24 	str.w	r0, [r4, #-36]
 8006936:	460c      	mov	r4, r1
 8006938:	4610      	mov	r0, r2
 800693a:	4619      	mov	r1, r3
 800693c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006940:	4622      	mov	r2, r4
 8006942:	f823 2c26 	strh.w	r2, [r3, #-38]
 8006946:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800694a:	4602      	mov	r2, r0
 800694c:	f823 2c28 	strh.w	r2, [r3, #-40]
 8006950:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006954:	460a      	mov	r2, r1
 8006956:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800695a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800695e:	4619      	mov	r1, r3
 8006960:	f107 0310 	add.w	r3, r7, #16
 8006964:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	f851 1c24 	ldr.w	r1, [r1, #-36]
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fcd6 	bl	8006320 <fontx_glyph>
 8006974:	4603      	mov	r3, r0
 8006976:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800697a:	f102 0209 	add.w	r2, r2, #9
 800697e:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8006980:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006984:	f103 0309 	add.w	r3, r3, #9
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <hagl_put_char+0x6e>
        return 0;
 800698e:	2300      	movs	r3, #0
 8006990:	e0c0      	b.n	8006b14 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8006992:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006996:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800699a:	461a      	mov	r2, r3
 800699c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069a0:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80069a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069a8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80069ac:	461a      	mov	r2, r3
 80069ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069b2:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80069b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069ba:	2210      	movs	r2, #16
 80069bc:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80069c0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80069c4:	3a08      	subs	r2, #8
 80069c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069ca:	3b18      	subs	r3, #24
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff fb0e 	bl	8005ff0 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80069d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069d8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80069dc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80069e0:	f102 020c 	add.w	r2, r2, #12
 80069e4:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80069e6:	2300      	movs	r3, #0
 80069e8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80069ec:	f102 020b 	add.w	r2, r2, #11
 80069f0:	7013      	strb	r3, [r2, #0]
 80069f2:	e071      	b.n	8006ad8 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80069f4:	2300      	movs	r3, #0
 80069f6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80069fa:	f102 020a 	add.w	r2, r2, #10
 80069fe:	7013      	strb	r3, [r2, #0]
 8006a00:	e047      	b.n	8006a92 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8006a02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006a06:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b25a      	sxtb	r2, r3
 8006a0e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006a12:	f103 030a 	add.w	r3, r3, #10
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	2180      	movs	r1, #128	@ 0x80
 8006a1e:	fa41 f303 	asr.w	r3, r1, r3
 8006a22:	b25b      	sxtb	r3, r3
 8006a24:	4013      	ands	r3, r2
 8006a26:	b25b      	sxtb	r3, r3
 8006a28:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006a2c:	f102 0208 	add.w	r2, r2, #8
 8006a30:	7013      	strb	r3, [r2, #0]
            if (set) {
 8006a32:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006a36:	f103 0308 	add.w	r3, r3, #8
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d010      	beq.n	8006a62 <hagl_put_char+0x13e>
                *(ptr++) = color;
 8006a40:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006a44:	f103 030c 	add.w	r3, r3, #12
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	1c9a      	adds	r2, r3, #2
 8006a4c:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8006a50:	f101 010c 	add.w	r1, r1, #12
 8006a54:	600a      	str	r2, [r1, #0]
 8006a56:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006a5a:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	e00c      	b.n	8006a7c <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8006a62:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006a66:	f103 030c 	add.w	r3, r3, #12
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	1c9a      	adds	r2, r3, #2
 8006a6e:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8006a72:	f101 010c 	add.w	r1, r1, #12
 8006a76:	600a      	str	r2, [r1, #0]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006a7c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006a80:	f103 030a 	add.w	r3, r3, #10
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006a8c:	f102 020a 	add.w	r2, r2, #10
 8006a90:	7013      	strb	r3, [r2, #0]
 8006a92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006a96:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8006a9a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006a9e:	f102 020a 	add.w	r2, r2, #10
 8006aa2:	7812      	ldrb	r2, [r2, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d3ac      	bcc.n	8006a02 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8006aa8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006aac:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006ab0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006ab4:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006abe:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8006ac2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006ac6:	f103 030b 	add.w	r3, r3, #11
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006ad2:	f102 020b 	add.w	r2, r2, #11
 8006ad6:	7013      	strb	r3, [r2, #0]
 8006ad8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006adc:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8006ae0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006ae4:	f102 020b 	add.w	r2, r2, #11
 8006ae8:	7812      	ldrb	r2, [r2, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d382      	bcc.n	80069f4 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8006aee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006af2:	3b18      	subs	r3, #24
 8006af4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006af8:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8006afc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006b00:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8006b04:	461a      	mov	r2, r3
 8006b06:	f000 f85a 	bl	8006bbe <hagl_blit>

    return bitmap.width;
 8006b0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006b0e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006b12:	b2db      	uxtb	r3, r3
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd90      	pop	{r4, r7, pc}

08006b20 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08c      	sub	sp, #48	@ 0x30
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	4608      	mov	r0, r1
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	817b      	strh	r3, [r7, #10]
 8006b32:	460b      	mov	r3, r1
 8006b34:	813b      	strh	r3, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8006b3a:	897b      	ldrh	r3, [r7, #10]
 8006b3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006b3e:	f107 0314 	add.w	r3, r7, #20
 8006b42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fbcb 	bl	80062e0 <fontx_meta>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 8006b50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <hagl_put_text+0x3c>
        return 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e02c      	b.n	8006bb6 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	1d1a      	adds	r2, r3, #4
 8006b60:	60fa      	str	r2, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	2b0d      	cmp	r3, #13
 8006b6a:	d002      	beq.n	8006b72 <hagl_put_text+0x52>
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2b0a      	cmp	r3, #10
 8006b70:	d108      	bne.n	8006b84 <hagl_put_text+0x64>
            x0 = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8006b76:	7fbb      	ldrb	r3, [r7, #30]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	893b      	ldrh	r3, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	813b      	strh	r3, [r7, #8]
 8006b82:	e010      	b.n	8006ba6 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8006b84:	88f8      	ldrh	r0, [r7, #6]
 8006b86:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006b8a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	4603      	mov	r3, r0
 8006b94:	6a38      	ldr	r0, [r7, #32]
 8006b96:	f7ff fec5 	bl	8006924 <hagl_put_char>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	897b      	ldrh	r3, [r7, #10]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1d6      	bne.n	8006b5c <hagl_put_text+0x3c>

    return x0 - original;
 8006bae:	897a      	ldrh	r2, [r7, #10]
 8006bb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	b29b      	uxth	r3, r3
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3728      	adds	r7, #40	@ 0x28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b086      	sub	sp, #24
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	603a      	str	r2, [r7, #0]
 8006bc8:	80fb      	strh	r3, [r7, #6]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	827b      	strh	r3, [r7, #18]
 8006bd8:	e020      	b.n	8006c1c <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8006bda:	2300      	movs	r3, #0
 8006bdc:	823b      	strh	r3, [r7, #16]
 8006bde:	e015      	b.n	8006c0c <hagl_blit+0x4e>
            color = *(ptr++);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	1c9a      	adds	r2, r3, #2
 8006be4:	617a      	str	r2, [r7, #20]
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8006bea:	88fa      	ldrh	r2, [r7, #6]
 8006bec:	8a3b      	ldrh	r3, [r7, #16]
 8006bee:	4413      	add	r3, r2
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	b218      	sxth	r0, r3
 8006bf4:	88ba      	ldrh	r2, [r7, #4]
 8006bf6:	8a7b      	ldrh	r3, [r7, #18]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	b21b      	sxth	r3, r3
 8006bfe:	89fa      	ldrh	r2, [r7, #14]
 8006c00:	4619      	mov	r1, r3
 8006c02:	f7ff fc43 	bl	800648c <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8006c06:	8a3b      	ldrh	r3, [r7, #16]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	823b      	strh	r3, [r7, #16]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	8a3a      	ldrh	r2, [r7, #16]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d3e4      	bcc.n	8006be0 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8006c16:	8a7b      	ldrh	r3, [r7, #18]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	827b      	strh	r3, [r7, #18]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	885b      	ldrh	r3, [r3, #2]
 8006c20:	8a7a      	ldrh	r2, [r7, #18]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d3d9      	bcc.n	8006bda <hagl_blit+0x1c>
        }
    }
#endif
};
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <hagl_draw_circle>:
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
        0x00
    );
}

void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 8006c30:	b590      	push	{r4, r7, lr}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4604      	mov	r4, r0
 8006c38:	4608      	mov	r0, r1
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4623      	mov	r3, r4
 8006c40:	80fb      	strh	r3, [r7, #6]
 8006c42:	4603      	mov	r3, r0
 8006c44:	80bb      	strh	r3, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	807b      	strh	r3, [r7, #2]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006c52:	887b      	ldrh	r3, [r7, #2]
 8006c54:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006c56:	887b      	ldrh	r3, [r7, #2]
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f1c3 0303 	rsb	r3, r3, #3
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 8006c64:	88fa      	ldrh	r2, [r7, #6]
 8006c66:	89fb      	ldrh	r3, [r7, #14]
 8006c68:	4413      	add	r3, r2
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	b218      	sxth	r0, r3
 8006c6e:	88ba      	ldrh	r2, [r7, #4]
 8006c70:	89bb      	ldrh	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	b21b      	sxth	r3, r3
 8006c78:	883a      	ldrh	r2, [r7, #0]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	f7ff fc06 	bl	800648c <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	89fb      	ldrh	r3, [r7, #14]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	b218      	sxth	r0, r3
 8006c8a:	88ba      	ldrh	r2, [r7, #4]
 8006c8c:	89bb      	ldrh	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	b21b      	sxth	r3, r3
 8006c94:	883a      	ldrh	r2, [r7, #0]
 8006c96:	4619      	mov	r1, r3
 8006c98:	f7ff fbf8 	bl	800648c <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8006c9c:	88fa      	ldrh	r2, [r7, #6]
 8006c9e:	89fb      	ldrh	r3, [r7, #14]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	b218      	sxth	r0, r3
 8006ca6:	88ba      	ldrh	r2, [r7, #4]
 8006ca8:	89bb      	ldrh	r3, [r7, #12]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	b21b      	sxth	r3, r3
 8006cb0:	883a      	ldrh	r2, [r7, #0]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	f7ff fbea 	bl	800648c <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8006cb8:	88fa      	ldrh	r2, [r7, #6]
 8006cba:	89fb      	ldrh	r3, [r7, #14]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	b218      	sxth	r0, r3
 8006cc2:	88ba      	ldrh	r2, [r7, #4]
 8006cc4:	89bb      	ldrh	r3, [r7, #12]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	b21b      	sxth	r3, r3
 8006ccc:	883a      	ldrh	r2, [r7, #0]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f7ff fbdc 	bl	800648c <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8006cd4:	88fa      	ldrh	r2, [r7, #6]
 8006cd6:	89bb      	ldrh	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	b218      	sxth	r0, r3
 8006cde:	88ba      	ldrh	r2, [r7, #4]
 8006ce0:	89fb      	ldrh	r3, [r7, #14]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	b21b      	sxth	r3, r3
 8006ce8:	883a      	ldrh	r2, [r7, #0]
 8006cea:	4619      	mov	r1, r3
 8006cec:	f7ff fbce 	bl	800648c <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	89bb      	ldrh	r3, [r7, #12]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	b218      	sxth	r0, r3
 8006cfa:	88ba      	ldrh	r2, [r7, #4]
 8006cfc:	89fb      	ldrh	r3, [r7, #14]
 8006cfe:	4413      	add	r3, r2
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	b21b      	sxth	r3, r3
 8006d04:	883a      	ldrh	r2, [r7, #0]
 8006d06:	4619      	mov	r1, r3
 8006d08:	f7ff fbc0 	bl	800648c <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8006d0c:	88fa      	ldrh	r2, [r7, #6]
 8006d0e:	89bb      	ldrh	r3, [r7, #12]
 8006d10:	4413      	add	r3, r2
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	b218      	sxth	r0, r3
 8006d16:	88ba      	ldrh	r2, [r7, #4]
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	b21b      	sxth	r3, r3
 8006d20:	883a      	ldrh	r2, [r7, #0]
 8006d22:	4619      	mov	r1, r3
 8006d24:	f7ff fbb2 	bl	800648c <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	89bb      	ldrh	r3, [r7, #12]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	b218      	sxth	r0, r3
 8006d32:	88ba      	ldrh	r2, [r7, #4]
 8006d34:	89fb      	ldrh	r3, [r7, #14]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	b21b      	sxth	r3, r3
 8006d3c:	883a      	ldrh	r2, [r7, #0]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	f7ff fba4 	bl	800648c <hagl_put_pixel>

    while (y >= x) {
 8006d44:	e097      	b.n	8006e76 <hagl_draw_circle+0x246>
        x++;
 8006d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006d52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	dd14      	ble.n	8006d84 <hagl_draw_circle+0x154>
            y--;
 8006d5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006d66:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006d6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	897b      	ldrh	r3, [r7, #10]
 8006d78:	4413      	add	r3, r2
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	330a      	adds	r3, #10
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	817b      	strh	r3, [r7, #10]
 8006d82:	e008      	b.n	8006d96 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8006d84:	89fb      	ldrh	r3, [r7, #14]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	897b      	ldrh	r3, [r7, #10]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3306      	adds	r3, #6
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8006d96:	88fa      	ldrh	r2, [r7, #6]
 8006d98:	89fb      	ldrh	r3, [r7, #14]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	b218      	sxth	r0, r3
 8006da0:	88ba      	ldrh	r2, [r7, #4]
 8006da2:	89bb      	ldrh	r3, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	b21b      	sxth	r3, r3
 8006daa:	883a      	ldrh	r2, [r7, #0]
 8006dac:	4619      	mov	r1, r3
 8006dae:	f7ff fb6d 	bl	800648c <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8006db2:	88fa      	ldrh	r2, [r7, #6]
 8006db4:	89fb      	ldrh	r3, [r7, #14]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	b218      	sxth	r0, r3
 8006dbc:	88ba      	ldrh	r2, [r7, #4]
 8006dbe:	89bb      	ldrh	r3, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	b21b      	sxth	r3, r3
 8006dc6:	883a      	ldrh	r2, [r7, #0]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f7ff fb5f 	bl	800648c <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 8006dce:	88fa      	ldrh	r2, [r7, #6]
 8006dd0:	89fb      	ldrh	r3, [r7, #14]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	b218      	sxth	r0, r3
 8006dd8:	88ba      	ldrh	r2, [r7, #4]
 8006dda:	89bb      	ldrh	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	b21b      	sxth	r3, r3
 8006de2:	883a      	ldrh	r2, [r7, #0]
 8006de4:	4619      	mov	r1, r3
 8006de6:	f7ff fb51 	bl	800648c <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	89fb      	ldrh	r3, [r7, #14]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	b218      	sxth	r0, r3
 8006df4:	88ba      	ldrh	r2, [r7, #4]
 8006df6:	89bb      	ldrh	r3, [r7, #12]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	b21b      	sxth	r3, r3
 8006dfe:	883a      	ldrh	r2, [r7, #0]
 8006e00:	4619      	mov	r1, r3
 8006e02:	f7ff fb43 	bl	800648c <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8006e06:	88fa      	ldrh	r2, [r7, #6]
 8006e08:	89bb      	ldrh	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	b218      	sxth	r0, r3
 8006e10:	88ba      	ldrh	r2, [r7, #4]
 8006e12:	89fb      	ldrh	r3, [r7, #14]
 8006e14:	4413      	add	r3, r2
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	b21b      	sxth	r3, r3
 8006e1a:	883a      	ldrh	r2, [r7, #0]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f7ff fb35 	bl	800648c <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8006e22:	88fa      	ldrh	r2, [r7, #6]
 8006e24:	89bb      	ldrh	r3, [r7, #12]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	b218      	sxth	r0, r3
 8006e2c:	88ba      	ldrh	r2, [r7, #4]
 8006e2e:	89fb      	ldrh	r3, [r7, #14]
 8006e30:	4413      	add	r3, r2
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	b21b      	sxth	r3, r3
 8006e36:	883a      	ldrh	r2, [r7, #0]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	f7ff fb27 	bl	800648c <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	89bb      	ldrh	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	b218      	sxth	r0, r3
 8006e48:	88ba      	ldrh	r2, [r7, #4]
 8006e4a:	89fb      	ldrh	r3, [r7, #14]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	b21b      	sxth	r3, r3
 8006e52:	883a      	ldrh	r2, [r7, #0]
 8006e54:	4619      	mov	r1, r3
 8006e56:	f7ff fb19 	bl	800648c <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8006e5a:	88fa      	ldrh	r2, [r7, #6]
 8006e5c:	89bb      	ldrh	r3, [r7, #12]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	b218      	sxth	r0, r3
 8006e64:	88ba      	ldrh	r2, [r7, #4]
 8006e66:	89fb      	ldrh	r3, [r7, #14]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	b21b      	sxth	r3, r3
 8006e6e:	883a      	ldrh	r2, [r7, #0]
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7ff fb0b 	bl	800648c <hagl_put_pixel>
    while (y >= x) {
 8006e76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006e7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	f6bf af61 	bge.w	8006d46 <hagl_draw_circle+0x116>
    }
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd90      	pop	{r4, r7, pc}

08006e8e <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8006e8e:	b590      	push	{r4, r7, lr}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	4604      	mov	r4, r0
 8006e96:	4608      	mov	r0, r1
 8006e98:	4611      	mov	r1, r2
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	80fb      	strh	r3, [r7, #6]
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	80bb      	strh	r3, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	807b      	strh	r3, [r7, #2]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006eb0:	887b      	ldrh	r3, [r7, #2]
 8006eb2:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006eb4:	887b      	ldrh	r3, [r7, #2]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f1c3 0303 	rsb	r3, r3, #3
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8006ec2:	e067      	b.n	8006f94 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	89fb      	ldrh	r3, [r7, #14]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	b218      	sxth	r0, r3
 8006ece:	88ba      	ldrh	r2, [r7, #4]
 8006ed0:	89bb      	ldrh	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	b219      	sxth	r1, r3
 8006ed8:	89fb      	ldrh	r3, [r7, #14]
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	883b      	ldrh	r3, [r7, #0]
 8006ee0:	f7ff fb06 	bl	80064f0 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8006ee4:	88fa      	ldrh	r2, [r7, #6]
 8006ee6:	89fb      	ldrh	r3, [r7, #14]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	b218      	sxth	r0, r3
 8006eee:	88ba      	ldrh	r2, [r7, #4]
 8006ef0:	89bb      	ldrh	r3, [r7, #12]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	b219      	sxth	r1, r3
 8006ef8:	89fb      	ldrh	r3, [r7, #14]
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	883b      	ldrh	r3, [r7, #0]
 8006f00:	f7ff faf6 	bl	80064f0 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8006f04:	88fa      	ldrh	r2, [r7, #6]
 8006f06:	89bb      	ldrh	r3, [r7, #12]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	b218      	sxth	r0, r3
 8006f0e:	88ba      	ldrh	r2, [r7, #4]
 8006f10:	89fb      	ldrh	r3, [r7, #14]
 8006f12:	4413      	add	r3, r2
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	b219      	sxth	r1, r3
 8006f18:	89bb      	ldrh	r3, [r7, #12]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	883b      	ldrh	r3, [r7, #0]
 8006f20:	f7ff fae6 	bl	80064f0 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8006f24:	88fa      	ldrh	r2, [r7, #6]
 8006f26:	89bb      	ldrh	r3, [r7, #12]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	b218      	sxth	r0, r3
 8006f2e:	88ba      	ldrh	r2, [r7, #4]
 8006f30:	89fb      	ldrh	r3, [r7, #14]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	b219      	sxth	r1, r3
 8006f38:	89bb      	ldrh	r3, [r7, #12]
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	883b      	ldrh	r3, [r7, #0]
 8006f40:	f7ff fad6 	bl	80064f0 <hagl_draw_hline>
        x++;
 8006f44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006f50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	dd14      	ble.n	8006f82 <hagl_fill_circle+0xf4>
            y--;
 8006f58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006f64:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006f68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	897b      	ldrh	r3, [r7, #10]
 8006f76:	4413      	add	r3, r2
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	330a      	adds	r3, #10
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	817b      	strh	r3, [r7, #10]
 8006f80:	e008      	b.n	8006f94 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8006f82:	89fb      	ldrh	r3, [r7, #14]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	897b      	ldrh	r3, [r7, #10]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	3306      	adds	r3, #6
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8006f94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006f98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	da91      	bge.n	8006ec4 <hagl_fill_circle+0x36>
        }
    }
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd90      	pop	{r4, r7, pc}

08006faa <hagl_draw_polygon>:
        hagl_draw_hline(x0 - wx, y0 + wy, wx * 2, color);
    }
}


void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8006faa:	b590      	push	{r4, r7, lr}
 8006fac:	b087      	sub	sp, #28
 8006fae:	af02      	add	r7, sp, #8
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	6039      	str	r1, [r7, #0]
 8006fb4:	80fb      	strh	r3, [r7, #6]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8006fba:	2300      	movs	r3, #0
 8006fbc:	81fb      	strh	r3, [r7, #14]
 8006fbe:	e02a      	b.n	8007016 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8006fc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	4413      	add	r3, r2
        hagl_draw_line(
 8006fca:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8006fce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	3302      	adds	r3, #2
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	4413      	add	r3, r2
        hagl_draw_line(
 8006fda:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8006fde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	4413      	add	r3, r2
        hagl_draw_line(
 8006fea:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8006fee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	3306      	adds	r3, #6
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	4413      	add	r3, r2
        hagl_draw_line(
 8006ffa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006ffe:	88bb      	ldrh	r3, [r7, #4]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	4613      	mov	r3, r2
 8007004:	4622      	mov	r2, r4
 8007006:	f7ff fab9 	bl	800657c <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 800700a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800700e:	b29b      	uxth	r3, r3
 8007010:	3301      	adds	r3, #1
 8007012:	b29b      	uxth	r3, r3
 8007014:	81fb      	strh	r3, [r7, #14]
 8007016:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800701a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800701e:	3b01      	subs	r3, #1
 8007020:	429a      	cmp	r2, r3
 8007022:	dbcd      	blt.n	8006fc0 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	3302      	adds	r3, #2
    hagl_draw_line(
 800702e:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8007032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007036:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800703a:	3b01      	subs	r3, #1
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	4413      	add	r3, r2
    hagl_draw_line(
 8007042:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	3b02      	subs	r3, #2
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4413      	add	r3, r2
    hagl_draw_line(
 8007052:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007056:	88bb      	ldrh	r3, [r7, #4]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4613      	mov	r3, r2
 800705c:	4622      	mov	r2, r4
 800705e:	f7ff fa8d 	bl	800657c <hagl_draw_line>
        color
    );
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	bd90      	pop	{r4, r7, pc}

0800706a <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 800706a:	b580      	push	{r7, lr}
 800706c:	b0ac      	sub	sp, #176	@ 0xb0
 800706e:	af00      	add	r7, sp, #0
 8007070:	4603      	mov	r3, r0
 8007072:	6039      	str	r1, [r7, #0]
 8007074:	80fb      	strh	r3, [r7, #6]
 8007076:	4613      	mov	r3, r2
 8007078:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 800707a:	2380      	movs	r3, #128	@ 0x80
 800707c:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007086:	2300      	movs	r3, #0
 8007088:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 800708c:	e02e      	b.n	80070ec <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 800708e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	3302      	adds	r3, #2
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	4413      	add	r3, r2
 800709a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800709e:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 80070a2:	429a      	cmp	r2, r3
 80070a4:	dd08      	ble.n	80070b8 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 80070a6:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	3302      	adds	r3, #2
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	4413      	add	r3, r2
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 80070b8:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	3302      	adds	r3, #2
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	4413      	add	r3, r2
 80070c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070c8:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 80070cc:	429a      	cmp	r2, r3
 80070ce:	da08      	bge.n	80070e2 <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 80070d0:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	3302      	adds	r3, #2
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 80070e2:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80070e6:	3301      	adds	r3, #1
 80070e8:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 80070ec:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 80070f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	dbca      	blt.n	800708e <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 80070f8:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 80070fc:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007100:	e144      	b.n	800738c <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	3b01      	subs	r3, #1
 800710c:	b29b      	uxth	r3, r3
 800710e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007112:	2300      	movs	r3, #0
 8007114:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007118:	e0a6      	b.n	8007268 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 800711a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	4413      	add	r3, r2
 8007124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007130:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007134:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	3302      	adds	r3, #2
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	4413      	add	r3, r2
 8007140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007144:	ee07 3a90 	vmov	s15, r3
 8007148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800714c:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007150:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	4413      	add	r3, r2
 800715a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007166:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 800716a:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	3302      	adds	r3, #2
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	4413      	add	r3, r2
 8007176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007182:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007186:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007192:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800719a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719e:	d50c      	bpl.n	80071ba <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 80071a0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071ac:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80071b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b8:	da19      	bge.n	80071ee <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 80071ba:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 80071c6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80071ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d2:	d53e      	bpl.n	8007252 <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 80071d4:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80071d8:	ee07 3a90 	vmov	s15, r3
 80071dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071e0:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80071e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ec:	db31      	blt.n	8007252 <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 80071ee:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071fa:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80071fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007202:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007206:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800720a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800720e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007212:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007216:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800721a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800721e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007222:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800722a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800722e:	ee17 3a90 	vmov	r3, s15
 8007232:	b21a      	sxth	r2, r3
 8007234:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007238:	b292      	uxth	r2, r2
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	33b0      	adds	r3, #176	@ 0xb0
 800723e:	443b      	add	r3, r7
 8007240:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007244:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007248:	b29b      	uxth	r3, r3
 800724a:	3301      	adds	r3, #1
 800724c:	b29b      	uxth	r3, r3
 800724e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007252:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007256:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 800725a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 800725e:	b29b      	uxth	r3, r3
 8007260:	3301      	adds	r3, #1
 8007262:	b29b      	uxth	r3, r3
 8007264:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007268:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 800726c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007270:	429a      	cmp	r2, r3
 8007272:	f6ff af52 	blt.w	800711a <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 800727c:	e046      	b.n	800730c <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 800727e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	33b0      	adds	r3, #176	@ 0xb0
 8007286:	443b      	add	r3, r7
 8007288:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 800728c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007290:	3301      	adds	r3, #1
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	33b0      	adds	r3, #176	@ 0xb0
 8007296:	443b      	add	r3, r7
 8007298:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800729c:	429a      	cmp	r2, r3
 800729e:	d92e      	bls.n	80072fe <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 80072a0:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	33b0      	adds	r3, #176	@ 0xb0
 80072a8:	443b      	add	r3, r7
 80072aa:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80072ae:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 80072b2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072b6:	3301      	adds	r3, #1
 80072b8:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	33b0      	adds	r3, #176	@ 0xb0
 80072c0:	443b      	add	r3, r7
 80072c2:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 80072c6:	0053      	lsls	r3, r2, #1
 80072c8:	33b0      	adds	r3, #176	@ 0xb0
 80072ca:	443b      	add	r3, r7
 80072cc:	460a      	mov	r2, r1
 80072ce:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 80072d2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072d6:	3301      	adds	r3, #1
 80072d8:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	33b0      	adds	r3, #176	@ 0xb0
 80072e0:	443b      	add	r3, r7
 80072e2:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 80072e6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00e      	beq.n	800730c <hagl_fill_polygon+0x2a2>
                    i--;
 80072ee:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 80072fc:	e006      	b.n	800730c <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 80072fe:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007302:	b29b      	uxth	r3, r3
 8007304:	3301      	adds	r3, #1
 8007306:	b29b      	uxth	r3, r3
 8007308:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 800730c:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007310:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007314:	3b01      	subs	r3, #1
 8007316:	429a      	cmp	r2, r3
 8007318:	dbb1      	blt.n	800727e <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 800731a:	2300      	movs	r3, #0
 800731c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007320:	e027      	b.n	8007372 <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007322:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007326:	3301      	adds	r3, #1
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	33b0      	adds	r3, #176	@ 0xb0
 800732c:	443b      	add	r3, r7
 800732e:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007332:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	33b0      	adds	r3, #176	@ 0xb0
 800733a:	443b      	add	r3, r7
 800733c:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	b29b      	uxth	r3, r3
 8007344:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007348:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	33b0      	adds	r3, #176	@ 0xb0
 8007350:	443b      	add	r3, r7
 8007352:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007356:	b218      	sxth	r0, r3
 8007358:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 800735c:	88bb      	ldrh	r3, [r7, #4]
 800735e:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8007362:	f7ff f8c5 	bl	80064f0 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007366:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800736a:	3302      	adds	r3, #2
 800736c:	b29b      	uxth	r3, r3
 800736e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007372:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007376:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 800737a:	429a      	cmp	r2, r3
 800737c:	dbd1      	blt.n	8007322 <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 800737e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007382:	b29b      	uxth	r3, r3
 8007384:	3301      	adds	r3, #1
 8007386:	b29b      	uxth	r3, r3
 8007388:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 800738c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8007390:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007394:	429a      	cmp	r2, r3
 8007396:	f6ff aeb4 	blt.w	8007102 <hagl_fill_polygon+0x98>
        }
    }
}
 800739a:	bf00      	nop
 800739c:	bf00      	nop
 800739e:	37b0      	adds	r7, #176	@ 0xb0
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 80073a4:	b590      	push	{r4, r7, lr}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4623      	mov	r3, r4
 80073b4:	80fb      	strh	r3, [r7, #6]
 80073b6:	4603      	mov	r3, r0
 80073b8:	80bb      	strh	r3, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	807b      	strh	r3, [r7, #2]
 80073be:	4613      	mov	r3, r2
 80073c0:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	81bb      	strh	r3, [r7, #12]
 80073c6:	88bb      	ldrh	r3, [r7, #4]
 80073c8:	81fb      	strh	r3, [r7, #14]
 80073ca:	887b      	ldrh	r3, [r7, #2]
 80073cc:	823b      	strh	r3, [r7, #16]
 80073ce:	883b      	ldrh	r3, [r7, #0]
 80073d0:	827b      	strh	r3, [r7, #18]
 80073d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80073d4:	82bb      	strh	r3, [r7, #20]
 80073d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80073d8:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 80073da:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80073dc:	f107 030c 	add.w	r3, r7, #12
 80073e0:	4619      	mov	r1, r3
 80073e2:	2003      	movs	r0, #3
 80073e4:	f7ff fde1 	bl	8006faa <hagl_draw_polygon>
};
 80073e8:	bf00      	nop
 80073ea:	371c      	adds	r7, #28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd90      	pop	{r4, r7, pc}

080073f0 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 80073f0:	b590      	push	{r4, r7, lr}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4604      	mov	r4, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	461a      	mov	r2, r3
 80073fe:	4623      	mov	r3, r4
 8007400:	80fb      	strh	r3, [r7, #6]
 8007402:	4603      	mov	r3, r0
 8007404:	80bb      	strh	r3, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	807b      	strh	r3, [r7, #2]
 800740a:	4613      	mov	r3, r2
 800740c:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	81bb      	strh	r3, [r7, #12]
 8007412:	88bb      	ldrh	r3, [r7, #4]
 8007414:	81fb      	strh	r3, [r7, #14]
 8007416:	887b      	ldrh	r3, [r7, #2]
 8007418:	823b      	strh	r3, [r7, #16]
 800741a:	883b      	ldrh	r3, [r7, #0]
 800741c:	827b      	strh	r3, [r7, #18]
 800741e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007420:	82bb      	strh	r3, [r7, #20]
 8007422:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007424:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007426:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007428:	f107 030c 	add.w	r3, r7, #12
 800742c:	4619      	mov	r1, r3
 800742e:	2003      	movs	r0, #3
 8007430:	f7ff fe1b 	bl	800706a <hagl_fill_polygon>
}
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	bd90      	pop	{r4, r7, pc}

0800743c <atoi>:
 800743c:	220a      	movs	r2, #10
 800743e:	2100      	movs	r1, #0
 8007440:	f000 b87a 	b.w	8007538 <strtol>

08007444 <_strtol_l.constprop.0>:
 8007444:	2b24      	cmp	r3, #36	@ 0x24
 8007446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744a:	4686      	mov	lr, r0
 800744c:	4690      	mov	r8, r2
 800744e:	d801      	bhi.n	8007454 <_strtol_l.constprop.0+0x10>
 8007450:	2b01      	cmp	r3, #1
 8007452:	d106      	bne.n	8007462 <_strtol_l.constprop.0+0x1e>
 8007454:	f000 fc00 	bl	8007c58 <__errno>
 8007458:	2316      	movs	r3, #22
 800745a:	6003      	str	r3, [r0, #0]
 800745c:	2000      	movs	r0, #0
 800745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007462:	4834      	ldr	r0, [pc, #208]	@ (8007534 <_strtol_l.constprop.0+0xf0>)
 8007464:	460d      	mov	r5, r1
 8007466:	462a      	mov	r2, r5
 8007468:	f815 4b01 	ldrb.w	r4, [r5], #1
 800746c:	5d06      	ldrb	r6, [r0, r4]
 800746e:	f016 0608 	ands.w	r6, r6, #8
 8007472:	d1f8      	bne.n	8007466 <_strtol_l.constprop.0+0x22>
 8007474:	2c2d      	cmp	r4, #45	@ 0x2d
 8007476:	d12d      	bne.n	80074d4 <_strtol_l.constprop.0+0x90>
 8007478:	782c      	ldrb	r4, [r5, #0]
 800747a:	2601      	movs	r6, #1
 800747c:	1c95      	adds	r5, r2, #2
 800747e:	f033 0210 	bics.w	r2, r3, #16
 8007482:	d109      	bne.n	8007498 <_strtol_l.constprop.0+0x54>
 8007484:	2c30      	cmp	r4, #48	@ 0x30
 8007486:	d12a      	bne.n	80074de <_strtol_l.constprop.0+0x9a>
 8007488:	782a      	ldrb	r2, [r5, #0]
 800748a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800748e:	2a58      	cmp	r2, #88	@ 0x58
 8007490:	d125      	bne.n	80074de <_strtol_l.constprop.0+0x9a>
 8007492:	786c      	ldrb	r4, [r5, #1]
 8007494:	2310      	movs	r3, #16
 8007496:	3502      	adds	r5, #2
 8007498:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800749c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074a0:	2200      	movs	r2, #0
 80074a2:	fbbc f9f3 	udiv	r9, ip, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80074ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80074b0:	2f09      	cmp	r7, #9
 80074b2:	d81b      	bhi.n	80074ec <_strtol_l.constprop.0+0xa8>
 80074b4:	463c      	mov	r4, r7
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	dd27      	ble.n	800750a <_strtol_l.constprop.0+0xc6>
 80074ba:	1c57      	adds	r7, r2, #1
 80074bc:	d007      	beq.n	80074ce <_strtol_l.constprop.0+0x8a>
 80074be:	4581      	cmp	r9, r0
 80074c0:	d320      	bcc.n	8007504 <_strtol_l.constprop.0+0xc0>
 80074c2:	d101      	bne.n	80074c8 <_strtol_l.constprop.0+0x84>
 80074c4:	45a2      	cmp	sl, r4
 80074c6:	db1d      	blt.n	8007504 <_strtol_l.constprop.0+0xc0>
 80074c8:	fb00 4003 	mla	r0, r0, r3, r4
 80074cc:	2201      	movs	r2, #1
 80074ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074d2:	e7eb      	b.n	80074ac <_strtol_l.constprop.0+0x68>
 80074d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80074d6:	bf04      	itt	eq
 80074d8:	782c      	ldrbeq	r4, [r5, #0]
 80074da:	1c95      	addeq	r5, r2, #2
 80074dc:	e7cf      	b.n	800747e <_strtol_l.constprop.0+0x3a>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1da      	bne.n	8007498 <_strtol_l.constprop.0+0x54>
 80074e2:	2c30      	cmp	r4, #48	@ 0x30
 80074e4:	bf0c      	ite	eq
 80074e6:	2308      	moveq	r3, #8
 80074e8:	230a      	movne	r3, #10
 80074ea:	e7d5      	b.n	8007498 <_strtol_l.constprop.0+0x54>
 80074ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80074f0:	2f19      	cmp	r7, #25
 80074f2:	d801      	bhi.n	80074f8 <_strtol_l.constprop.0+0xb4>
 80074f4:	3c37      	subs	r4, #55	@ 0x37
 80074f6:	e7de      	b.n	80074b6 <_strtol_l.constprop.0+0x72>
 80074f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80074fc:	2f19      	cmp	r7, #25
 80074fe:	d804      	bhi.n	800750a <_strtol_l.constprop.0+0xc6>
 8007500:	3c57      	subs	r4, #87	@ 0x57
 8007502:	e7d8      	b.n	80074b6 <_strtol_l.constprop.0+0x72>
 8007504:	f04f 32ff 	mov.w	r2, #4294967295
 8007508:	e7e1      	b.n	80074ce <_strtol_l.constprop.0+0x8a>
 800750a:	1c53      	adds	r3, r2, #1
 800750c:	d108      	bne.n	8007520 <_strtol_l.constprop.0+0xdc>
 800750e:	2322      	movs	r3, #34	@ 0x22
 8007510:	f8ce 3000 	str.w	r3, [lr]
 8007514:	4660      	mov	r0, ip
 8007516:	f1b8 0f00 	cmp.w	r8, #0
 800751a:	d0a0      	beq.n	800745e <_strtol_l.constprop.0+0x1a>
 800751c:	1e69      	subs	r1, r5, #1
 800751e:	e006      	b.n	800752e <_strtol_l.constprop.0+0xea>
 8007520:	b106      	cbz	r6, 8007524 <_strtol_l.constprop.0+0xe0>
 8007522:	4240      	negs	r0, r0
 8007524:	f1b8 0f00 	cmp.w	r8, #0
 8007528:	d099      	beq.n	800745e <_strtol_l.constprop.0+0x1a>
 800752a:	2a00      	cmp	r2, #0
 800752c:	d1f6      	bne.n	800751c <_strtol_l.constprop.0+0xd8>
 800752e:	f8c8 1000 	str.w	r1, [r8]
 8007532:	e794      	b.n	800745e <_strtol_l.constprop.0+0x1a>
 8007534:	08012079 	.word	0x08012079

08007538 <strtol>:
 8007538:	4613      	mov	r3, r2
 800753a:	460a      	mov	r2, r1
 800753c:	4601      	mov	r1, r0
 800753e:	4802      	ldr	r0, [pc, #8]	@ (8007548 <strtol+0x10>)
 8007540:	6800      	ldr	r0, [r0, #0]
 8007542:	f7ff bf7f 	b.w	8007444 <_strtol_l.constprop.0>
 8007546:	bf00      	nop
 8007548:	20000220 	.word	0x20000220

0800754c <_strtoul_l.constprop.0>:
 800754c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007550:	4e34      	ldr	r6, [pc, #208]	@ (8007624 <_strtoul_l.constprop.0+0xd8>)
 8007552:	4686      	mov	lr, r0
 8007554:	460d      	mov	r5, r1
 8007556:	4628      	mov	r0, r5
 8007558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800755c:	5d37      	ldrb	r7, [r6, r4]
 800755e:	f017 0708 	ands.w	r7, r7, #8
 8007562:	d1f8      	bne.n	8007556 <_strtoul_l.constprop.0+0xa>
 8007564:	2c2d      	cmp	r4, #45	@ 0x2d
 8007566:	d12f      	bne.n	80075c8 <_strtoul_l.constprop.0+0x7c>
 8007568:	782c      	ldrb	r4, [r5, #0]
 800756a:	2701      	movs	r7, #1
 800756c:	1c85      	adds	r5, r0, #2
 800756e:	f033 0010 	bics.w	r0, r3, #16
 8007572:	d109      	bne.n	8007588 <_strtoul_l.constprop.0+0x3c>
 8007574:	2c30      	cmp	r4, #48	@ 0x30
 8007576:	d12c      	bne.n	80075d2 <_strtoul_l.constprop.0+0x86>
 8007578:	7828      	ldrb	r0, [r5, #0]
 800757a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800757e:	2858      	cmp	r0, #88	@ 0x58
 8007580:	d127      	bne.n	80075d2 <_strtoul_l.constprop.0+0x86>
 8007582:	786c      	ldrb	r4, [r5, #1]
 8007584:	2310      	movs	r3, #16
 8007586:	3502      	adds	r5, #2
 8007588:	f04f 38ff 	mov.w	r8, #4294967295
 800758c:	2600      	movs	r6, #0
 800758e:	fbb8 f8f3 	udiv	r8, r8, r3
 8007592:	fb03 f908 	mul.w	r9, r3, r8
 8007596:	ea6f 0909 	mvn.w	r9, r9
 800759a:	4630      	mov	r0, r6
 800759c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80075a0:	f1bc 0f09 	cmp.w	ip, #9
 80075a4:	d81c      	bhi.n	80075e0 <_strtoul_l.constprop.0+0x94>
 80075a6:	4664      	mov	r4, ip
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	dd2a      	ble.n	8007602 <_strtoul_l.constprop.0+0xb6>
 80075ac:	f1b6 3fff 	cmp.w	r6, #4294967295
 80075b0:	d007      	beq.n	80075c2 <_strtoul_l.constprop.0+0x76>
 80075b2:	4580      	cmp	r8, r0
 80075b4:	d322      	bcc.n	80075fc <_strtoul_l.constprop.0+0xb0>
 80075b6:	d101      	bne.n	80075bc <_strtoul_l.constprop.0+0x70>
 80075b8:	45a1      	cmp	r9, r4
 80075ba:	db1f      	blt.n	80075fc <_strtoul_l.constprop.0+0xb0>
 80075bc:	fb00 4003 	mla	r0, r0, r3, r4
 80075c0:	2601      	movs	r6, #1
 80075c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075c6:	e7e9      	b.n	800759c <_strtoul_l.constprop.0+0x50>
 80075c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80075ca:	bf04      	itt	eq
 80075cc:	782c      	ldrbeq	r4, [r5, #0]
 80075ce:	1c85      	addeq	r5, r0, #2
 80075d0:	e7cd      	b.n	800756e <_strtoul_l.constprop.0+0x22>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1d8      	bne.n	8007588 <_strtoul_l.constprop.0+0x3c>
 80075d6:	2c30      	cmp	r4, #48	@ 0x30
 80075d8:	bf0c      	ite	eq
 80075da:	2308      	moveq	r3, #8
 80075dc:	230a      	movne	r3, #10
 80075de:	e7d3      	b.n	8007588 <_strtoul_l.constprop.0+0x3c>
 80075e0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80075e4:	f1bc 0f19 	cmp.w	ip, #25
 80075e8:	d801      	bhi.n	80075ee <_strtoul_l.constprop.0+0xa2>
 80075ea:	3c37      	subs	r4, #55	@ 0x37
 80075ec:	e7dc      	b.n	80075a8 <_strtoul_l.constprop.0+0x5c>
 80075ee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80075f2:	f1bc 0f19 	cmp.w	ip, #25
 80075f6:	d804      	bhi.n	8007602 <_strtoul_l.constprop.0+0xb6>
 80075f8:	3c57      	subs	r4, #87	@ 0x57
 80075fa:	e7d5      	b.n	80075a8 <_strtoul_l.constprop.0+0x5c>
 80075fc:	f04f 36ff 	mov.w	r6, #4294967295
 8007600:	e7df      	b.n	80075c2 <_strtoul_l.constprop.0+0x76>
 8007602:	1c73      	adds	r3, r6, #1
 8007604:	d106      	bne.n	8007614 <_strtoul_l.constprop.0+0xc8>
 8007606:	2322      	movs	r3, #34	@ 0x22
 8007608:	f8ce 3000 	str.w	r3, [lr]
 800760c:	4630      	mov	r0, r6
 800760e:	b932      	cbnz	r2, 800761e <_strtoul_l.constprop.0+0xd2>
 8007610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007614:	b107      	cbz	r7, 8007618 <_strtoul_l.constprop.0+0xcc>
 8007616:	4240      	negs	r0, r0
 8007618:	2a00      	cmp	r2, #0
 800761a:	d0f9      	beq.n	8007610 <_strtoul_l.constprop.0+0xc4>
 800761c:	b106      	cbz	r6, 8007620 <_strtoul_l.constprop.0+0xd4>
 800761e:	1e69      	subs	r1, r5, #1
 8007620:	6011      	str	r1, [r2, #0]
 8007622:	e7f5      	b.n	8007610 <_strtoul_l.constprop.0+0xc4>
 8007624:	08012079 	.word	0x08012079

08007628 <strtoul>:
 8007628:	4613      	mov	r3, r2
 800762a:	460a      	mov	r2, r1
 800762c:	4601      	mov	r1, r0
 800762e:	4802      	ldr	r0, [pc, #8]	@ (8007638 <strtoul+0x10>)
 8007630:	6800      	ldr	r0, [r0, #0]
 8007632:	f7ff bf8b 	b.w	800754c <_strtoul_l.constprop.0>
 8007636:	bf00      	nop
 8007638:	20000220 	.word	0x20000220

0800763c <__sflush_r>:
 800763c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007644:	0716      	lsls	r6, r2, #28
 8007646:	4605      	mov	r5, r0
 8007648:	460c      	mov	r4, r1
 800764a:	d454      	bmi.n	80076f6 <__sflush_r+0xba>
 800764c:	684b      	ldr	r3, [r1, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	dc02      	bgt.n	8007658 <__sflush_r+0x1c>
 8007652:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	dd48      	ble.n	80076ea <__sflush_r+0xae>
 8007658:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800765a:	2e00      	cmp	r6, #0
 800765c:	d045      	beq.n	80076ea <__sflush_r+0xae>
 800765e:	2300      	movs	r3, #0
 8007660:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007664:	682f      	ldr	r7, [r5, #0]
 8007666:	6a21      	ldr	r1, [r4, #32]
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	d030      	beq.n	80076ce <__sflush_r+0x92>
 800766c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	0759      	lsls	r1, r3, #29
 8007672:	d505      	bpl.n	8007680 <__sflush_r+0x44>
 8007674:	6863      	ldr	r3, [r4, #4]
 8007676:	1ad2      	subs	r2, r2, r3
 8007678:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800767a:	b10b      	cbz	r3, 8007680 <__sflush_r+0x44>
 800767c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	2300      	movs	r3, #0
 8007682:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007684:	6a21      	ldr	r1, [r4, #32]
 8007686:	4628      	mov	r0, r5
 8007688:	47b0      	blx	r6
 800768a:	1c43      	adds	r3, r0, #1
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	d106      	bne.n	800769e <__sflush_r+0x62>
 8007690:	6829      	ldr	r1, [r5, #0]
 8007692:	291d      	cmp	r1, #29
 8007694:	d82b      	bhi.n	80076ee <__sflush_r+0xb2>
 8007696:	4a2a      	ldr	r2, [pc, #168]	@ (8007740 <__sflush_r+0x104>)
 8007698:	410a      	asrs	r2, r1
 800769a:	07d6      	lsls	r6, r2, #31
 800769c:	d427      	bmi.n	80076ee <__sflush_r+0xb2>
 800769e:	2200      	movs	r2, #0
 80076a0:	6062      	str	r2, [r4, #4]
 80076a2:	04d9      	lsls	r1, r3, #19
 80076a4:	6922      	ldr	r2, [r4, #16]
 80076a6:	6022      	str	r2, [r4, #0]
 80076a8:	d504      	bpl.n	80076b4 <__sflush_r+0x78>
 80076aa:	1c42      	adds	r2, r0, #1
 80076ac:	d101      	bne.n	80076b2 <__sflush_r+0x76>
 80076ae:	682b      	ldr	r3, [r5, #0]
 80076b0:	b903      	cbnz	r3, 80076b4 <__sflush_r+0x78>
 80076b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80076b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076b6:	602f      	str	r7, [r5, #0]
 80076b8:	b1b9      	cbz	r1, 80076ea <__sflush_r+0xae>
 80076ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076be:	4299      	cmp	r1, r3
 80076c0:	d002      	beq.n	80076c8 <__sflush_r+0x8c>
 80076c2:	4628      	mov	r0, r5
 80076c4:	f000 fb22 	bl	8007d0c <_free_r>
 80076c8:	2300      	movs	r3, #0
 80076ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80076cc:	e00d      	b.n	80076ea <__sflush_r+0xae>
 80076ce:	2301      	movs	r3, #1
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b0      	blx	r6
 80076d4:	4602      	mov	r2, r0
 80076d6:	1c50      	adds	r0, r2, #1
 80076d8:	d1c9      	bne.n	800766e <__sflush_r+0x32>
 80076da:	682b      	ldr	r3, [r5, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0c6      	beq.n	800766e <__sflush_r+0x32>
 80076e0:	2b1d      	cmp	r3, #29
 80076e2:	d001      	beq.n	80076e8 <__sflush_r+0xac>
 80076e4:	2b16      	cmp	r3, #22
 80076e6:	d11e      	bne.n	8007726 <__sflush_r+0xea>
 80076e8:	602f      	str	r7, [r5, #0]
 80076ea:	2000      	movs	r0, #0
 80076ec:	e022      	b.n	8007734 <__sflush_r+0xf8>
 80076ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076f2:	b21b      	sxth	r3, r3
 80076f4:	e01b      	b.n	800772e <__sflush_r+0xf2>
 80076f6:	690f      	ldr	r7, [r1, #16]
 80076f8:	2f00      	cmp	r7, #0
 80076fa:	d0f6      	beq.n	80076ea <__sflush_r+0xae>
 80076fc:	0793      	lsls	r3, r2, #30
 80076fe:	680e      	ldr	r6, [r1, #0]
 8007700:	bf08      	it	eq
 8007702:	694b      	ldreq	r3, [r1, #20]
 8007704:	600f      	str	r7, [r1, #0]
 8007706:	bf18      	it	ne
 8007708:	2300      	movne	r3, #0
 800770a:	eba6 0807 	sub.w	r8, r6, r7
 800770e:	608b      	str	r3, [r1, #8]
 8007710:	f1b8 0f00 	cmp.w	r8, #0
 8007714:	dde9      	ble.n	80076ea <__sflush_r+0xae>
 8007716:	6a21      	ldr	r1, [r4, #32]
 8007718:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800771a:	4643      	mov	r3, r8
 800771c:	463a      	mov	r2, r7
 800771e:	4628      	mov	r0, r5
 8007720:	47b0      	blx	r6
 8007722:	2800      	cmp	r0, #0
 8007724:	dc08      	bgt.n	8007738 <__sflush_r+0xfc>
 8007726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800772a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800772e:	81a3      	strh	r3, [r4, #12]
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007738:	4407      	add	r7, r0
 800773a:	eba8 0800 	sub.w	r8, r8, r0
 800773e:	e7e7      	b.n	8007710 <__sflush_r+0xd4>
 8007740:	dfbffffe 	.word	0xdfbffffe

08007744 <_fflush_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	690b      	ldr	r3, [r1, #16]
 8007748:	4605      	mov	r5, r0
 800774a:	460c      	mov	r4, r1
 800774c:	b913      	cbnz	r3, 8007754 <_fflush_r+0x10>
 800774e:	2500      	movs	r5, #0
 8007750:	4628      	mov	r0, r5
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	b118      	cbz	r0, 800775e <_fflush_r+0x1a>
 8007756:	6a03      	ldr	r3, [r0, #32]
 8007758:	b90b      	cbnz	r3, 800775e <_fflush_r+0x1a>
 800775a:	f000 f8a7 	bl	80078ac <__sinit>
 800775e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0f3      	beq.n	800774e <_fflush_r+0xa>
 8007766:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007768:	07d0      	lsls	r0, r2, #31
 800776a:	d404      	bmi.n	8007776 <_fflush_r+0x32>
 800776c:	0599      	lsls	r1, r3, #22
 800776e:	d402      	bmi.n	8007776 <_fflush_r+0x32>
 8007770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007772:	f000 fa9c 	bl	8007cae <__retarget_lock_acquire_recursive>
 8007776:	4628      	mov	r0, r5
 8007778:	4621      	mov	r1, r4
 800777a:	f7ff ff5f 	bl	800763c <__sflush_r>
 800777e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007780:	07da      	lsls	r2, r3, #31
 8007782:	4605      	mov	r5, r0
 8007784:	d4e4      	bmi.n	8007750 <_fflush_r+0xc>
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	059b      	lsls	r3, r3, #22
 800778a:	d4e1      	bmi.n	8007750 <_fflush_r+0xc>
 800778c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800778e:	f000 fa8f 	bl	8007cb0 <__retarget_lock_release_recursive>
 8007792:	e7dd      	b.n	8007750 <_fflush_r+0xc>

08007794 <std>:
 8007794:	2300      	movs	r3, #0
 8007796:	b510      	push	{r4, lr}
 8007798:	4604      	mov	r4, r0
 800779a:	e9c0 3300 	strd	r3, r3, [r0]
 800779e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077a2:	6083      	str	r3, [r0, #8]
 80077a4:	8181      	strh	r1, [r0, #12]
 80077a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80077a8:	81c2      	strh	r2, [r0, #14]
 80077aa:	6183      	str	r3, [r0, #24]
 80077ac:	4619      	mov	r1, r3
 80077ae:	2208      	movs	r2, #8
 80077b0:	305c      	adds	r0, #92	@ 0x5c
 80077b2:	f000 f981 	bl	8007ab8 <memset>
 80077b6:	4b0d      	ldr	r3, [pc, #52]	@ (80077ec <std+0x58>)
 80077b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80077ba:	4b0d      	ldr	r3, [pc, #52]	@ (80077f0 <std+0x5c>)
 80077bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077be:	4b0d      	ldr	r3, [pc, #52]	@ (80077f4 <std+0x60>)
 80077c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077c2:	4b0d      	ldr	r3, [pc, #52]	@ (80077f8 <std+0x64>)
 80077c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80077c6:	4b0d      	ldr	r3, [pc, #52]	@ (80077fc <std+0x68>)
 80077c8:	6224      	str	r4, [r4, #32]
 80077ca:	429c      	cmp	r4, r3
 80077cc:	d006      	beq.n	80077dc <std+0x48>
 80077ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077d2:	4294      	cmp	r4, r2
 80077d4:	d002      	beq.n	80077dc <std+0x48>
 80077d6:	33d0      	adds	r3, #208	@ 0xd0
 80077d8:	429c      	cmp	r4, r3
 80077da:	d105      	bne.n	80077e8 <std+0x54>
 80077dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e4:	f000 ba62 	b.w	8007cac <__retarget_lock_init_recursive>
 80077e8:	bd10      	pop	{r4, pc}
 80077ea:	bf00      	nop
 80077ec:	08007981 	.word	0x08007981
 80077f0:	080079a3 	.word	0x080079a3
 80077f4:	080079db 	.word	0x080079db
 80077f8:	080079ff 	.word	0x080079ff
 80077fc:	2000ae44 	.word	0x2000ae44

08007800 <stdio_exit_handler>:
 8007800:	4a02      	ldr	r2, [pc, #8]	@ (800780c <stdio_exit_handler+0xc>)
 8007802:	4903      	ldr	r1, [pc, #12]	@ (8007810 <stdio_exit_handler+0x10>)
 8007804:	4803      	ldr	r0, [pc, #12]	@ (8007814 <stdio_exit_handler+0x14>)
 8007806:	f000 b869 	b.w	80078dc <_fwalk_sglue>
 800780a:	bf00      	nop
 800780c:	20000214 	.word	0x20000214
 8007810:	08007745 	.word	0x08007745
 8007814:	20000224 	.word	0x20000224

08007818 <cleanup_stdio>:
 8007818:	6841      	ldr	r1, [r0, #4]
 800781a:	4b0c      	ldr	r3, [pc, #48]	@ (800784c <cleanup_stdio+0x34>)
 800781c:	4299      	cmp	r1, r3
 800781e:	b510      	push	{r4, lr}
 8007820:	4604      	mov	r4, r0
 8007822:	d001      	beq.n	8007828 <cleanup_stdio+0x10>
 8007824:	f7ff ff8e 	bl	8007744 <_fflush_r>
 8007828:	68a1      	ldr	r1, [r4, #8]
 800782a:	4b09      	ldr	r3, [pc, #36]	@ (8007850 <cleanup_stdio+0x38>)
 800782c:	4299      	cmp	r1, r3
 800782e:	d002      	beq.n	8007836 <cleanup_stdio+0x1e>
 8007830:	4620      	mov	r0, r4
 8007832:	f7ff ff87 	bl	8007744 <_fflush_r>
 8007836:	68e1      	ldr	r1, [r4, #12]
 8007838:	4b06      	ldr	r3, [pc, #24]	@ (8007854 <cleanup_stdio+0x3c>)
 800783a:	4299      	cmp	r1, r3
 800783c:	d004      	beq.n	8007848 <cleanup_stdio+0x30>
 800783e:	4620      	mov	r0, r4
 8007840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007844:	f7ff bf7e 	b.w	8007744 <_fflush_r>
 8007848:	bd10      	pop	{r4, pc}
 800784a:	bf00      	nop
 800784c:	2000ae44 	.word	0x2000ae44
 8007850:	2000aeac 	.word	0x2000aeac
 8007854:	2000af14 	.word	0x2000af14

08007858 <global_stdio_init.part.0>:
 8007858:	b510      	push	{r4, lr}
 800785a:	4b0b      	ldr	r3, [pc, #44]	@ (8007888 <global_stdio_init.part.0+0x30>)
 800785c:	4c0b      	ldr	r4, [pc, #44]	@ (800788c <global_stdio_init.part.0+0x34>)
 800785e:	4a0c      	ldr	r2, [pc, #48]	@ (8007890 <global_stdio_init.part.0+0x38>)
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	4620      	mov	r0, r4
 8007864:	2200      	movs	r2, #0
 8007866:	2104      	movs	r1, #4
 8007868:	f7ff ff94 	bl	8007794 <std>
 800786c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007870:	2201      	movs	r2, #1
 8007872:	2109      	movs	r1, #9
 8007874:	f7ff ff8e 	bl	8007794 <std>
 8007878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800787c:	2202      	movs	r2, #2
 800787e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007882:	2112      	movs	r1, #18
 8007884:	f7ff bf86 	b.w	8007794 <std>
 8007888:	2000af7c 	.word	0x2000af7c
 800788c:	2000ae44 	.word	0x2000ae44
 8007890:	08007801 	.word	0x08007801

08007894 <__sfp_lock_acquire>:
 8007894:	4801      	ldr	r0, [pc, #4]	@ (800789c <__sfp_lock_acquire+0x8>)
 8007896:	f000 ba0a 	b.w	8007cae <__retarget_lock_acquire_recursive>
 800789a:	bf00      	nop
 800789c:	2000af85 	.word	0x2000af85

080078a0 <__sfp_lock_release>:
 80078a0:	4801      	ldr	r0, [pc, #4]	@ (80078a8 <__sfp_lock_release+0x8>)
 80078a2:	f000 ba05 	b.w	8007cb0 <__retarget_lock_release_recursive>
 80078a6:	bf00      	nop
 80078a8:	2000af85 	.word	0x2000af85

080078ac <__sinit>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	4604      	mov	r4, r0
 80078b0:	f7ff fff0 	bl	8007894 <__sfp_lock_acquire>
 80078b4:	6a23      	ldr	r3, [r4, #32]
 80078b6:	b11b      	cbz	r3, 80078c0 <__sinit+0x14>
 80078b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078bc:	f7ff bff0 	b.w	80078a0 <__sfp_lock_release>
 80078c0:	4b04      	ldr	r3, [pc, #16]	@ (80078d4 <__sinit+0x28>)
 80078c2:	6223      	str	r3, [r4, #32]
 80078c4:	4b04      	ldr	r3, [pc, #16]	@ (80078d8 <__sinit+0x2c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1f5      	bne.n	80078b8 <__sinit+0xc>
 80078cc:	f7ff ffc4 	bl	8007858 <global_stdio_init.part.0>
 80078d0:	e7f2      	b.n	80078b8 <__sinit+0xc>
 80078d2:	bf00      	nop
 80078d4:	08007819 	.word	0x08007819
 80078d8:	2000af7c 	.word	0x2000af7c

080078dc <_fwalk_sglue>:
 80078dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e0:	4607      	mov	r7, r0
 80078e2:	4688      	mov	r8, r1
 80078e4:	4614      	mov	r4, r2
 80078e6:	2600      	movs	r6, #0
 80078e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ec:	f1b9 0901 	subs.w	r9, r9, #1
 80078f0:	d505      	bpl.n	80078fe <_fwalk_sglue+0x22>
 80078f2:	6824      	ldr	r4, [r4, #0]
 80078f4:	2c00      	cmp	r4, #0
 80078f6:	d1f7      	bne.n	80078e8 <_fwalk_sglue+0xc>
 80078f8:	4630      	mov	r0, r6
 80078fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078fe:	89ab      	ldrh	r3, [r5, #12]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d907      	bls.n	8007914 <_fwalk_sglue+0x38>
 8007904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007908:	3301      	adds	r3, #1
 800790a:	d003      	beq.n	8007914 <_fwalk_sglue+0x38>
 800790c:	4629      	mov	r1, r5
 800790e:	4638      	mov	r0, r7
 8007910:	47c0      	blx	r8
 8007912:	4306      	orrs	r6, r0
 8007914:	3568      	adds	r5, #104	@ 0x68
 8007916:	e7e9      	b.n	80078ec <_fwalk_sglue+0x10>

08007918 <sniprintf>:
 8007918:	b40c      	push	{r2, r3}
 800791a:	b530      	push	{r4, r5, lr}
 800791c:	4b17      	ldr	r3, [pc, #92]	@ (800797c <sniprintf+0x64>)
 800791e:	1e0c      	subs	r4, r1, #0
 8007920:	681d      	ldr	r5, [r3, #0]
 8007922:	b09d      	sub	sp, #116	@ 0x74
 8007924:	da08      	bge.n	8007938 <sniprintf+0x20>
 8007926:	238b      	movs	r3, #139	@ 0x8b
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	f04f 30ff 	mov.w	r0, #4294967295
 800792e:	b01d      	add	sp, #116	@ 0x74
 8007930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007934:	b002      	add	sp, #8
 8007936:	4770      	bx	lr
 8007938:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800793c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007940:	bf14      	ite	ne
 8007942:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007946:	4623      	moveq	r3, r4
 8007948:	9304      	str	r3, [sp, #16]
 800794a:	9307      	str	r3, [sp, #28]
 800794c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007950:	9002      	str	r0, [sp, #8]
 8007952:	9006      	str	r0, [sp, #24]
 8007954:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007958:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800795a:	ab21      	add	r3, sp, #132	@ 0x84
 800795c:	a902      	add	r1, sp, #8
 800795e:	4628      	mov	r0, r5
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	f000 fb2f 	bl	8007fc4 <_svfiprintf_r>
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	bfbc      	itt	lt
 800796a:	238b      	movlt	r3, #139	@ 0x8b
 800796c:	602b      	strlt	r3, [r5, #0]
 800796e:	2c00      	cmp	r4, #0
 8007970:	d0dd      	beq.n	800792e <sniprintf+0x16>
 8007972:	9b02      	ldr	r3, [sp, #8]
 8007974:	2200      	movs	r2, #0
 8007976:	701a      	strb	r2, [r3, #0]
 8007978:	e7d9      	b.n	800792e <sniprintf+0x16>
 800797a:	bf00      	nop
 800797c:	20000220 	.word	0x20000220

08007980 <__sread>:
 8007980:	b510      	push	{r4, lr}
 8007982:	460c      	mov	r4, r1
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	f000 f942 	bl	8007c10 <_read_r>
 800798c:	2800      	cmp	r0, #0
 800798e:	bfab      	itete	ge
 8007990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007992:	89a3      	ldrhlt	r3, [r4, #12]
 8007994:	181b      	addge	r3, r3, r0
 8007996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800799a:	bfac      	ite	ge
 800799c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800799e:	81a3      	strhlt	r3, [r4, #12]
 80079a0:	bd10      	pop	{r4, pc}

080079a2 <__swrite>:
 80079a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a6:	461f      	mov	r7, r3
 80079a8:	898b      	ldrh	r3, [r1, #12]
 80079aa:	05db      	lsls	r3, r3, #23
 80079ac:	4605      	mov	r5, r0
 80079ae:	460c      	mov	r4, r1
 80079b0:	4616      	mov	r6, r2
 80079b2:	d505      	bpl.n	80079c0 <__swrite+0x1e>
 80079b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b8:	2302      	movs	r3, #2
 80079ba:	2200      	movs	r2, #0
 80079bc:	f000 f916 	bl	8007bec <_lseek_r>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	4632      	mov	r2, r6
 80079ce:	463b      	mov	r3, r7
 80079d0:	4628      	mov	r0, r5
 80079d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079d6:	f000 b92d 	b.w	8007c34 <_write_r>

080079da <__sseek>:
 80079da:	b510      	push	{r4, lr}
 80079dc:	460c      	mov	r4, r1
 80079de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e2:	f000 f903 	bl	8007bec <_lseek_r>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	bf15      	itete	ne
 80079ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079f6:	81a3      	strheq	r3, [r4, #12]
 80079f8:	bf18      	it	ne
 80079fa:	81a3      	strhne	r3, [r4, #12]
 80079fc:	bd10      	pop	{r4, pc}

080079fe <__sclose>:
 80079fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a02:	f000 b8e3 	b.w	8007bcc <_close_r>

08007a06 <_vsniprintf_r>:
 8007a06:	b530      	push	{r4, r5, lr}
 8007a08:	4614      	mov	r4, r2
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	b09b      	sub	sp, #108	@ 0x6c
 8007a0e:	4605      	mov	r5, r0
 8007a10:	461a      	mov	r2, r3
 8007a12:	da05      	bge.n	8007a20 <_vsniprintf_r+0x1a>
 8007a14:	238b      	movs	r3, #139	@ 0x8b
 8007a16:	6003      	str	r3, [r0, #0]
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	b01b      	add	sp, #108	@ 0x6c
 8007a1e:	bd30      	pop	{r4, r5, pc}
 8007a20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a24:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007a28:	bf14      	ite	ne
 8007a2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a2e:	4623      	moveq	r3, r4
 8007a30:	9302      	str	r3, [sp, #8]
 8007a32:	9305      	str	r3, [sp, #20]
 8007a34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a38:	9100      	str	r1, [sp, #0]
 8007a3a:	9104      	str	r1, [sp, #16]
 8007a3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007a40:	4669      	mov	r1, sp
 8007a42:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007a44:	f000 fabe 	bl	8007fc4 <_svfiprintf_r>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	bfbc      	itt	lt
 8007a4c:	238b      	movlt	r3, #139	@ 0x8b
 8007a4e:	602b      	strlt	r3, [r5, #0]
 8007a50:	2c00      	cmp	r4, #0
 8007a52:	d0e3      	beq.n	8007a1c <_vsniprintf_r+0x16>
 8007a54:	9b00      	ldr	r3, [sp, #0]
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	e7df      	b.n	8007a1c <_vsniprintf_r+0x16>

08007a5c <vsniprintf>:
 8007a5c:	b507      	push	{r0, r1, r2, lr}
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	4613      	mov	r3, r2
 8007a62:	460a      	mov	r2, r1
 8007a64:	4601      	mov	r1, r0
 8007a66:	4803      	ldr	r0, [pc, #12]	@ (8007a74 <vsniprintf+0x18>)
 8007a68:	6800      	ldr	r0, [r0, #0]
 8007a6a:	f7ff ffcc 	bl	8007a06 <_vsniprintf_r>
 8007a6e:	b003      	add	sp, #12
 8007a70:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a74:	20000220 	.word	0x20000220

08007a78 <_vsiprintf_r>:
 8007a78:	b500      	push	{lr}
 8007a7a:	b09b      	sub	sp, #108	@ 0x6c
 8007a7c:	9100      	str	r1, [sp, #0]
 8007a7e:	9104      	str	r1, [sp, #16]
 8007a80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a84:	9105      	str	r1, [sp, #20]
 8007a86:	9102      	str	r1, [sp, #8]
 8007a88:	4905      	ldr	r1, [pc, #20]	@ (8007aa0 <_vsiprintf_r+0x28>)
 8007a8a:	9103      	str	r1, [sp, #12]
 8007a8c:	4669      	mov	r1, sp
 8007a8e:	f000 fa99 	bl	8007fc4 <_svfiprintf_r>
 8007a92:	9b00      	ldr	r3, [sp, #0]
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
 8007a98:	b01b      	add	sp, #108	@ 0x6c
 8007a9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a9e:	bf00      	nop
 8007aa0:	ffff0208 	.word	0xffff0208

08007aa4 <vsiprintf>:
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	460a      	mov	r2, r1
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	4802      	ldr	r0, [pc, #8]	@ (8007ab4 <vsiprintf+0x10>)
 8007aac:	6800      	ldr	r0, [r0, #0]
 8007aae:	f7ff bfe3 	b.w	8007a78 <_vsiprintf_r>
 8007ab2:	bf00      	nop
 8007ab4:	20000220 	.word	0x20000220

08007ab8 <memset>:
 8007ab8:	4402      	add	r2, r0
 8007aba:	4603      	mov	r3, r0
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d100      	bne.n	8007ac2 <memset+0xa>
 8007ac0:	4770      	bx	lr
 8007ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac6:	e7f9      	b.n	8007abc <memset+0x4>

08007ac8 <strncmp>:
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	b16a      	cbz	r2, 8007ae8 <strncmp+0x20>
 8007acc:	3901      	subs	r1, #1
 8007ace:	1884      	adds	r4, r0, r2
 8007ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ad4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d103      	bne.n	8007ae4 <strncmp+0x1c>
 8007adc:	42a0      	cmp	r0, r4
 8007ade:	d001      	beq.n	8007ae4 <strncmp+0x1c>
 8007ae0:	2a00      	cmp	r2, #0
 8007ae2:	d1f5      	bne.n	8007ad0 <strncmp+0x8>
 8007ae4:	1ad0      	subs	r0, r2, r3
 8007ae6:	bd10      	pop	{r4, pc}
 8007ae8:	4610      	mov	r0, r2
 8007aea:	e7fc      	b.n	8007ae6 <strncmp+0x1e>

08007aec <strncpy>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	3901      	subs	r1, #1
 8007af0:	4603      	mov	r3, r0
 8007af2:	b132      	cbz	r2, 8007b02 <strncpy+0x16>
 8007af4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007af8:	f803 4b01 	strb.w	r4, [r3], #1
 8007afc:	3a01      	subs	r2, #1
 8007afe:	2c00      	cmp	r4, #0
 8007b00:	d1f7      	bne.n	8007af2 <strncpy+0x6>
 8007b02:	441a      	add	r2, r3
 8007b04:	2100      	movs	r1, #0
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d100      	bne.n	8007b0c <strncpy+0x20>
 8007b0a:	bd10      	pop	{r4, pc}
 8007b0c:	f803 1b01 	strb.w	r1, [r3], #1
 8007b10:	e7f9      	b.n	8007b06 <strncpy+0x1a>
	...

08007b14 <strtok>:
 8007b14:	4b16      	ldr	r3, [pc, #88]	@ (8007b70 <strtok+0x5c>)
 8007b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1a:	681f      	ldr	r7, [r3, #0]
 8007b1c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007b1e:	4605      	mov	r5, r0
 8007b20:	460e      	mov	r6, r1
 8007b22:	b9ec      	cbnz	r4, 8007b60 <strtok+0x4c>
 8007b24:	2050      	movs	r0, #80	@ 0x50
 8007b26:	f000 f93b 	bl	8007da0 <malloc>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	6478      	str	r0, [r7, #68]	@ 0x44
 8007b2e:	b920      	cbnz	r0, 8007b3a <strtok+0x26>
 8007b30:	4b10      	ldr	r3, [pc, #64]	@ (8007b74 <strtok+0x60>)
 8007b32:	4811      	ldr	r0, [pc, #68]	@ (8007b78 <strtok+0x64>)
 8007b34:	215b      	movs	r1, #91	@ 0x5b
 8007b36:	f000 f8cb 	bl	8007cd0 <__assert_func>
 8007b3a:	e9c0 4400 	strd	r4, r4, [r0]
 8007b3e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007b42:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007b46:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007b4a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007b4e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007b52:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007b56:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007b5a:	6184      	str	r4, [r0, #24]
 8007b5c:	7704      	strb	r4, [r0, #28]
 8007b5e:	6244      	str	r4, [r0, #36]	@ 0x24
 8007b60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b62:	4631      	mov	r1, r6
 8007b64:	4628      	mov	r0, r5
 8007b66:	2301      	movs	r3, #1
 8007b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6c:	f000 b806 	b.w	8007b7c <__strtok_r>
 8007b70:	20000220 	.word	0x20000220
 8007b74:	08012179 	.word	0x08012179
 8007b78:	08012190 	.word	0x08012190

08007b7c <__strtok_r>:
 8007b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b7e:	4604      	mov	r4, r0
 8007b80:	b908      	cbnz	r0, 8007b86 <__strtok_r+0xa>
 8007b82:	6814      	ldr	r4, [r2, #0]
 8007b84:	b144      	cbz	r4, 8007b98 <__strtok_r+0x1c>
 8007b86:	4620      	mov	r0, r4
 8007b88:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007b92:	b91e      	cbnz	r6, 8007b9c <__strtok_r+0x20>
 8007b94:	b965      	cbnz	r5, 8007bb0 <__strtok_r+0x34>
 8007b96:	6015      	str	r5, [r2, #0]
 8007b98:	2000      	movs	r0, #0
 8007b9a:	e005      	b.n	8007ba8 <__strtok_r+0x2c>
 8007b9c:	42b5      	cmp	r5, r6
 8007b9e:	d1f6      	bne.n	8007b8e <__strtok_r+0x12>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1f0      	bne.n	8007b86 <__strtok_r+0xa>
 8007ba4:	6014      	str	r4, [r2, #0]
 8007ba6:	7003      	strb	r3, [r0, #0]
 8007ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007baa:	461c      	mov	r4, r3
 8007bac:	e00c      	b.n	8007bc8 <__strtok_r+0x4c>
 8007bae:	b915      	cbnz	r5, 8007bb6 <__strtok_r+0x3a>
 8007bb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bb4:	460e      	mov	r6, r1
 8007bb6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007bba:	42ab      	cmp	r3, r5
 8007bbc:	d1f7      	bne.n	8007bae <__strtok_r+0x32>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0f3      	beq.n	8007baa <__strtok_r+0x2e>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007bc8:	6014      	str	r4, [r2, #0]
 8007bca:	e7ed      	b.n	8007ba8 <__strtok_r+0x2c>

08007bcc <_close_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d06      	ldr	r5, [pc, #24]	@ (8007be8 <_close_r+0x1c>)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	602b      	str	r3, [r5, #0]
 8007bd8:	f7fa f98a 	bl	8001ef0 <_close>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_close_r+0x1a>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_close_r+0x1a>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	2000af80 	.word	0x2000af80

08007bec <_lseek_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d07      	ldr	r5, [pc, #28]	@ (8007c0c <_lseek_r+0x20>)
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	602a      	str	r2, [r5, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f7fa f99f 	bl	8001f3e <_lseek>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_lseek_r+0x1e>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_lseek_r+0x1e>
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	2000af80 	.word	0x2000af80

08007c10 <_read_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d07      	ldr	r5, [pc, #28]	@ (8007c30 <_read_r+0x20>)
 8007c14:	4604      	mov	r4, r0
 8007c16:	4608      	mov	r0, r1
 8007c18:	4611      	mov	r1, r2
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	602a      	str	r2, [r5, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f7fa f92d 	bl	8001e7e <_read>
 8007c24:	1c43      	adds	r3, r0, #1
 8007c26:	d102      	bne.n	8007c2e <_read_r+0x1e>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	b103      	cbz	r3, 8007c2e <_read_r+0x1e>
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	bd38      	pop	{r3, r4, r5, pc}
 8007c30:	2000af80 	.word	0x2000af80

08007c34 <_write_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4d07      	ldr	r5, [pc, #28]	@ (8007c54 <_write_r+0x20>)
 8007c38:	4604      	mov	r4, r0
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	602a      	str	r2, [r5, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f7fa f938 	bl	8001eb8 <_write>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d102      	bne.n	8007c52 <_write_r+0x1e>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	b103      	cbz	r3, 8007c52 <_write_r+0x1e>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	2000af80 	.word	0x2000af80

08007c58 <__errno>:
 8007c58:	4b01      	ldr	r3, [pc, #4]	@ (8007c60 <__errno+0x8>)
 8007c5a:	6818      	ldr	r0, [r3, #0]
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20000220 	.word	0x20000220

08007c64 <__libc_init_array>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4d0d      	ldr	r5, [pc, #52]	@ (8007c9c <__libc_init_array+0x38>)
 8007c68:	4c0d      	ldr	r4, [pc, #52]	@ (8007ca0 <__libc_init_array+0x3c>)
 8007c6a:	1b64      	subs	r4, r4, r5
 8007c6c:	10a4      	asrs	r4, r4, #2
 8007c6e:	2600      	movs	r6, #0
 8007c70:	42a6      	cmp	r6, r4
 8007c72:	d109      	bne.n	8007c88 <__libc_init_array+0x24>
 8007c74:	4d0b      	ldr	r5, [pc, #44]	@ (8007ca4 <__libc_init_array+0x40>)
 8007c76:	4c0c      	ldr	r4, [pc, #48]	@ (8007ca8 <__libc_init_array+0x44>)
 8007c78:	f000 ff44 	bl	8008b04 <_init>
 8007c7c:	1b64      	subs	r4, r4, r5
 8007c7e:	10a4      	asrs	r4, r4, #2
 8007c80:	2600      	movs	r6, #0
 8007c82:	42a6      	cmp	r6, r4
 8007c84:	d105      	bne.n	8007c92 <__libc_init_array+0x2e>
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8c:	4798      	blx	r3
 8007c8e:	3601      	adds	r6, #1
 8007c90:	e7ee      	b.n	8007c70 <__libc_init_array+0xc>
 8007c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c96:	4798      	blx	r3
 8007c98:	3601      	adds	r6, #1
 8007c9a:	e7f2      	b.n	8007c82 <__libc_init_array+0x1e>
 8007c9c:	08012264 	.word	0x08012264
 8007ca0:	08012264 	.word	0x08012264
 8007ca4:	08012264 	.word	0x08012264
 8007ca8:	08012268 	.word	0x08012268

08007cac <__retarget_lock_init_recursive>:
 8007cac:	4770      	bx	lr

08007cae <__retarget_lock_acquire_recursive>:
 8007cae:	4770      	bx	lr

08007cb0 <__retarget_lock_release_recursive>:
 8007cb0:	4770      	bx	lr

08007cb2 <memcpy>:
 8007cb2:	440a      	add	r2, r1
 8007cb4:	4291      	cmp	r1, r2
 8007cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cba:	d100      	bne.n	8007cbe <memcpy+0xc>
 8007cbc:	4770      	bx	lr
 8007cbe:	b510      	push	{r4, lr}
 8007cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cc8:	4291      	cmp	r1, r2
 8007cca:	d1f9      	bne.n	8007cc0 <memcpy+0xe>
 8007ccc:	bd10      	pop	{r4, pc}
	...

08007cd0 <__assert_func>:
 8007cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cd2:	4614      	mov	r4, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4b09      	ldr	r3, [pc, #36]	@ (8007cfc <__assert_func+0x2c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4605      	mov	r5, r0
 8007cdc:	68d8      	ldr	r0, [r3, #12]
 8007cde:	b954      	cbnz	r4, 8007cf6 <__assert_func+0x26>
 8007ce0:	4b07      	ldr	r3, [pc, #28]	@ (8007d00 <__assert_func+0x30>)
 8007ce2:	461c      	mov	r4, r3
 8007ce4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ce8:	9100      	str	r1, [sp, #0]
 8007cea:	462b      	mov	r3, r5
 8007cec:	4905      	ldr	r1, [pc, #20]	@ (8007d04 <__assert_func+0x34>)
 8007cee:	f000 fbf3 	bl	80084d8 <fiprintf>
 8007cf2:	f000 fcb1 	bl	8008658 <abort>
 8007cf6:	4b04      	ldr	r3, [pc, #16]	@ (8007d08 <__assert_func+0x38>)
 8007cf8:	e7f4      	b.n	8007ce4 <__assert_func+0x14>
 8007cfa:	bf00      	nop
 8007cfc:	20000220 	.word	0x20000220
 8007d00:	08012225 	.word	0x08012225
 8007d04:	080121f7 	.word	0x080121f7
 8007d08:	080121ea 	.word	0x080121ea

08007d0c <_free_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4605      	mov	r5, r0
 8007d10:	2900      	cmp	r1, #0
 8007d12:	d041      	beq.n	8007d98 <_free_r+0x8c>
 8007d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d18:	1f0c      	subs	r4, r1, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bfb8      	it	lt
 8007d1e:	18e4      	addlt	r4, r4, r3
 8007d20:	f000 f8e8 	bl	8007ef4 <__malloc_lock>
 8007d24:	4a1d      	ldr	r2, [pc, #116]	@ (8007d9c <_free_r+0x90>)
 8007d26:	6813      	ldr	r3, [r2, #0]
 8007d28:	b933      	cbnz	r3, 8007d38 <_free_r+0x2c>
 8007d2a:	6063      	str	r3, [r4, #4]
 8007d2c:	6014      	str	r4, [r2, #0]
 8007d2e:	4628      	mov	r0, r5
 8007d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d34:	f000 b8e4 	b.w	8007f00 <__malloc_unlock>
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d908      	bls.n	8007d4e <_free_r+0x42>
 8007d3c:	6820      	ldr	r0, [r4, #0]
 8007d3e:	1821      	adds	r1, r4, r0
 8007d40:	428b      	cmp	r3, r1
 8007d42:	bf01      	itttt	eq
 8007d44:	6819      	ldreq	r1, [r3, #0]
 8007d46:	685b      	ldreq	r3, [r3, #4]
 8007d48:	1809      	addeq	r1, r1, r0
 8007d4a:	6021      	streq	r1, [r4, #0]
 8007d4c:	e7ed      	b.n	8007d2a <_free_r+0x1e>
 8007d4e:	461a      	mov	r2, r3
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	b10b      	cbz	r3, 8007d58 <_free_r+0x4c>
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d9fa      	bls.n	8007d4e <_free_r+0x42>
 8007d58:	6811      	ldr	r1, [r2, #0]
 8007d5a:	1850      	adds	r0, r2, r1
 8007d5c:	42a0      	cmp	r0, r4
 8007d5e:	d10b      	bne.n	8007d78 <_free_r+0x6c>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	4401      	add	r1, r0
 8007d64:	1850      	adds	r0, r2, r1
 8007d66:	4283      	cmp	r3, r0
 8007d68:	6011      	str	r1, [r2, #0]
 8007d6a:	d1e0      	bne.n	8007d2e <_free_r+0x22>
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	6053      	str	r3, [r2, #4]
 8007d72:	4408      	add	r0, r1
 8007d74:	6010      	str	r0, [r2, #0]
 8007d76:	e7da      	b.n	8007d2e <_free_r+0x22>
 8007d78:	d902      	bls.n	8007d80 <_free_r+0x74>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	e7d6      	b.n	8007d2e <_free_r+0x22>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	1821      	adds	r1, r4, r0
 8007d84:	428b      	cmp	r3, r1
 8007d86:	bf04      	itt	eq
 8007d88:	6819      	ldreq	r1, [r3, #0]
 8007d8a:	685b      	ldreq	r3, [r3, #4]
 8007d8c:	6063      	str	r3, [r4, #4]
 8007d8e:	bf04      	itt	eq
 8007d90:	1809      	addeq	r1, r1, r0
 8007d92:	6021      	streq	r1, [r4, #0]
 8007d94:	6054      	str	r4, [r2, #4]
 8007d96:	e7ca      	b.n	8007d2e <_free_r+0x22>
 8007d98:	bd38      	pop	{r3, r4, r5, pc}
 8007d9a:	bf00      	nop
 8007d9c:	2000af8c 	.word	0x2000af8c

08007da0 <malloc>:
 8007da0:	4b02      	ldr	r3, [pc, #8]	@ (8007dac <malloc+0xc>)
 8007da2:	4601      	mov	r1, r0
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	f000 b825 	b.w	8007df4 <_malloc_r>
 8007daa:	bf00      	nop
 8007dac:	20000220 	.word	0x20000220

08007db0 <sbrk_aligned>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	4e0f      	ldr	r6, [pc, #60]	@ (8007df0 <sbrk_aligned+0x40>)
 8007db4:	460c      	mov	r4, r1
 8007db6:	6831      	ldr	r1, [r6, #0]
 8007db8:	4605      	mov	r5, r0
 8007dba:	b911      	cbnz	r1, 8007dc2 <sbrk_aligned+0x12>
 8007dbc:	f000 fc3c 	bl	8008638 <_sbrk_r>
 8007dc0:	6030      	str	r0, [r6, #0]
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f000 fc37 	bl	8008638 <_sbrk_r>
 8007dca:	1c43      	adds	r3, r0, #1
 8007dcc:	d103      	bne.n	8007dd6 <sbrk_aligned+0x26>
 8007dce:	f04f 34ff 	mov.w	r4, #4294967295
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
 8007dd6:	1cc4      	adds	r4, r0, #3
 8007dd8:	f024 0403 	bic.w	r4, r4, #3
 8007ddc:	42a0      	cmp	r0, r4
 8007dde:	d0f8      	beq.n	8007dd2 <sbrk_aligned+0x22>
 8007de0:	1a21      	subs	r1, r4, r0
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 fc28 	bl	8008638 <_sbrk_r>
 8007de8:	3001      	adds	r0, #1
 8007dea:	d1f2      	bne.n	8007dd2 <sbrk_aligned+0x22>
 8007dec:	e7ef      	b.n	8007dce <sbrk_aligned+0x1e>
 8007dee:	bf00      	nop
 8007df0:	2000af88 	.word	0x2000af88

08007df4 <_malloc_r>:
 8007df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df8:	1ccd      	adds	r5, r1, #3
 8007dfa:	f025 0503 	bic.w	r5, r5, #3
 8007dfe:	3508      	adds	r5, #8
 8007e00:	2d0c      	cmp	r5, #12
 8007e02:	bf38      	it	cc
 8007e04:	250c      	movcc	r5, #12
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	4606      	mov	r6, r0
 8007e0a:	db01      	blt.n	8007e10 <_malloc_r+0x1c>
 8007e0c:	42a9      	cmp	r1, r5
 8007e0e:	d904      	bls.n	8007e1a <_malloc_r+0x26>
 8007e10:	230c      	movs	r3, #12
 8007e12:	6033      	str	r3, [r6, #0]
 8007e14:	2000      	movs	r0, #0
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ef0 <_malloc_r+0xfc>
 8007e1e:	f000 f869 	bl	8007ef4 <__malloc_lock>
 8007e22:	f8d8 3000 	ldr.w	r3, [r8]
 8007e26:	461c      	mov	r4, r3
 8007e28:	bb44      	cbnz	r4, 8007e7c <_malloc_r+0x88>
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7ff ffbf 	bl	8007db0 <sbrk_aligned>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	4604      	mov	r4, r0
 8007e36:	d158      	bne.n	8007eea <_malloc_r+0xf6>
 8007e38:	f8d8 4000 	ldr.w	r4, [r8]
 8007e3c:	4627      	mov	r7, r4
 8007e3e:	2f00      	cmp	r7, #0
 8007e40:	d143      	bne.n	8007eca <_malloc_r+0xd6>
 8007e42:	2c00      	cmp	r4, #0
 8007e44:	d04b      	beq.n	8007ede <_malloc_r+0xea>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	4639      	mov	r1, r7
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	eb04 0903 	add.w	r9, r4, r3
 8007e50:	f000 fbf2 	bl	8008638 <_sbrk_r>
 8007e54:	4581      	cmp	r9, r0
 8007e56:	d142      	bne.n	8007ede <_malloc_r+0xea>
 8007e58:	6821      	ldr	r1, [r4, #0]
 8007e5a:	1a6d      	subs	r5, r5, r1
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7ff ffa6 	bl	8007db0 <sbrk_aligned>
 8007e64:	3001      	adds	r0, #1
 8007e66:	d03a      	beq.n	8007ede <_malloc_r+0xea>
 8007e68:	6823      	ldr	r3, [r4, #0]
 8007e6a:	442b      	add	r3, r5
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	bb62      	cbnz	r2, 8007ed0 <_malloc_r+0xdc>
 8007e76:	f8c8 7000 	str.w	r7, [r8]
 8007e7a:	e00f      	b.n	8007e9c <_malloc_r+0xa8>
 8007e7c:	6822      	ldr	r2, [r4, #0]
 8007e7e:	1b52      	subs	r2, r2, r5
 8007e80:	d420      	bmi.n	8007ec4 <_malloc_r+0xd0>
 8007e82:	2a0b      	cmp	r2, #11
 8007e84:	d917      	bls.n	8007eb6 <_malloc_r+0xc2>
 8007e86:	1961      	adds	r1, r4, r5
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	6025      	str	r5, [r4, #0]
 8007e8c:	bf18      	it	ne
 8007e8e:	6059      	strne	r1, [r3, #4]
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	bf08      	it	eq
 8007e94:	f8c8 1000 	streq.w	r1, [r8]
 8007e98:	5162      	str	r2, [r4, r5]
 8007e9a:	604b      	str	r3, [r1, #4]
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f000 f82f 	bl	8007f00 <__malloc_unlock>
 8007ea2:	f104 000b 	add.w	r0, r4, #11
 8007ea6:	1d23      	adds	r3, r4, #4
 8007ea8:	f020 0007 	bic.w	r0, r0, #7
 8007eac:	1ac2      	subs	r2, r0, r3
 8007eae:	bf1c      	itt	ne
 8007eb0:	1a1b      	subne	r3, r3, r0
 8007eb2:	50a3      	strne	r3, [r4, r2]
 8007eb4:	e7af      	b.n	8007e16 <_malloc_r+0x22>
 8007eb6:	6862      	ldr	r2, [r4, #4]
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	bf0c      	ite	eq
 8007ebc:	f8c8 2000 	streq.w	r2, [r8]
 8007ec0:	605a      	strne	r2, [r3, #4]
 8007ec2:	e7eb      	b.n	8007e9c <_malloc_r+0xa8>
 8007ec4:	4623      	mov	r3, r4
 8007ec6:	6864      	ldr	r4, [r4, #4]
 8007ec8:	e7ae      	b.n	8007e28 <_malloc_r+0x34>
 8007eca:	463c      	mov	r4, r7
 8007ecc:	687f      	ldr	r7, [r7, #4]
 8007ece:	e7b6      	b.n	8007e3e <_malloc_r+0x4a>
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d1fb      	bne.n	8007ed0 <_malloc_r+0xdc>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	6053      	str	r3, [r2, #4]
 8007edc:	e7de      	b.n	8007e9c <_malloc_r+0xa8>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	6033      	str	r3, [r6, #0]
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 f80c 	bl	8007f00 <__malloc_unlock>
 8007ee8:	e794      	b.n	8007e14 <_malloc_r+0x20>
 8007eea:	6005      	str	r5, [r0, #0]
 8007eec:	e7d6      	b.n	8007e9c <_malloc_r+0xa8>
 8007eee:	bf00      	nop
 8007ef0:	2000af8c 	.word	0x2000af8c

08007ef4 <__malloc_lock>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	@ (8007efc <__malloc_lock+0x8>)
 8007ef6:	f7ff beda 	b.w	8007cae <__retarget_lock_acquire_recursive>
 8007efa:	bf00      	nop
 8007efc:	2000af84 	.word	0x2000af84

08007f00 <__malloc_unlock>:
 8007f00:	4801      	ldr	r0, [pc, #4]	@ (8007f08 <__malloc_unlock+0x8>)
 8007f02:	f7ff bed5 	b.w	8007cb0 <__retarget_lock_release_recursive>
 8007f06:	bf00      	nop
 8007f08:	2000af84 	.word	0x2000af84

08007f0c <__ssputs_r>:
 8007f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	688e      	ldr	r6, [r1, #8]
 8007f12:	461f      	mov	r7, r3
 8007f14:	42be      	cmp	r6, r7
 8007f16:	680b      	ldr	r3, [r1, #0]
 8007f18:	4682      	mov	sl, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	4690      	mov	r8, r2
 8007f1e:	d82d      	bhi.n	8007f7c <__ssputs_r+0x70>
 8007f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f28:	d026      	beq.n	8007f78 <__ssputs_r+0x6c>
 8007f2a:	6965      	ldr	r5, [r4, #20]
 8007f2c:	6909      	ldr	r1, [r1, #16]
 8007f2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f32:	eba3 0901 	sub.w	r9, r3, r1
 8007f36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f3a:	1c7b      	adds	r3, r7, #1
 8007f3c:	444b      	add	r3, r9
 8007f3e:	106d      	asrs	r5, r5, #1
 8007f40:	429d      	cmp	r5, r3
 8007f42:	bf38      	it	cc
 8007f44:	461d      	movcc	r5, r3
 8007f46:	0553      	lsls	r3, r2, #21
 8007f48:	d527      	bpl.n	8007f9a <__ssputs_r+0x8e>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	f7ff ff52 	bl	8007df4 <_malloc_r>
 8007f50:	4606      	mov	r6, r0
 8007f52:	b360      	cbz	r0, 8007fae <__ssputs_r+0xa2>
 8007f54:	6921      	ldr	r1, [r4, #16]
 8007f56:	464a      	mov	r2, r9
 8007f58:	f7ff feab 	bl	8007cb2 <memcpy>
 8007f5c:	89a3      	ldrh	r3, [r4, #12]
 8007f5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f66:	81a3      	strh	r3, [r4, #12]
 8007f68:	6126      	str	r6, [r4, #16]
 8007f6a:	6165      	str	r5, [r4, #20]
 8007f6c:	444e      	add	r6, r9
 8007f6e:	eba5 0509 	sub.w	r5, r5, r9
 8007f72:	6026      	str	r6, [r4, #0]
 8007f74:	60a5      	str	r5, [r4, #8]
 8007f76:	463e      	mov	r6, r7
 8007f78:	42be      	cmp	r6, r7
 8007f7a:	d900      	bls.n	8007f7e <__ssputs_r+0x72>
 8007f7c:	463e      	mov	r6, r7
 8007f7e:	6820      	ldr	r0, [r4, #0]
 8007f80:	4632      	mov	r2, r6
 8007f82:	4641      	mov	r1, r8
 8007f84:	f000 fb1c 	bl	80085c0 <memmove>
 8007f88:	68a3      	ldr	r3, [r4, #8]
 8007f8a:	1b9b      	subs	r3, r3, r6
 8007f8c:	60a3      	str	r3, [r4, #8]
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	4433      	add	r3, r6
 8007f92:	6023      	str	r3, [r4, #0]
 8007f94:	2000      	movs	r0, #0
 8007f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9a:	462a      	mov	r2, r5
 8007f9c:	f000 fb63 	bl	8008666 <_realloc_r>
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d1e0      	bne.n	8007f68 <__ssputs_r+0x5c>
 8007fa6:	6921      	ldr	r1, [r4, #16]
 8007fa8:	4650      	mov	r0, sl
 8007faa:	f7ff feaf 	bl	8007d0c <_free_r>
 8007fae:	230c      	movs	r3, #12
 8007fb0:	f8ca 3000 	str.w	r3, [sl]
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fba:	81a3      	strh	r3, [r4, #12]
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	e7e9      	b.n	8007f96 <__ssputs_r+0x8a>
	...

08007fc4 <_svfiprintf_r>:
 8007fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	4698      	mov	r8, r3
 8007fca:	898b      	ldrh	r3, [r1, #12]
 8007fcc:	061b      	lsls	r3, r3, #24
 8007fce:	b09d      	sub	sp, #116	@ 0x74
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	460d      	mov	r5, r1
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	d510      	bpl.n	8007ffa <_svfiprintf_r+0x36>
 8007fd8:	690b      	ldr	r3, [r1, #16]
 8007fda:	b973      	cbnz	r3, 8007ffa <_svfiprintf_r+0x36>
 8007fdc:	2140      	movs	r1, #64	@ 0x40
 8007fde:	f7ff ff09 	bl	8007df4 <_malloc_r>
 8007fe2:	6028      	str	r0, [r5, #0]
 8007fe4:	6128      	str	r0, [r5, #16]
 8007fe6:	b930      	cbnz	r0, 8007ff6 <_svfiprintf_r+0x32>
 8007fe8:	230c      	movs	r3, #12
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff0:	b01d      	add	sp, #116	@ 0x74
 8007ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff6:	2340      	movs	r3, #64	@ 0x40
 8007ff8:	616b      	str	r3, [r5, #20]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ffe:	2320      	movs	r3, #32
 8008000:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008004:	f8cd 800c 	str.w	r8, [sp, #12]
 8008008:	2330      	movs	r3, #48	@ 0x30
 800800a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081a8 <_svfiprintf_r+0x1e4>
 800800e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008012:	f04f 0901 	mov.w	r9, #1
 8008016:	4623      	mov	r3, r4
 8008018:	469a      	mov	sl, r3
 800801a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800801e:	b10a      	cbz	r2, 8008024 <_svfiprintf_r+0x60>
 8008020:	2a25      	cmp	r2, #37	@ 0x25
 8008022:	d1f9      	bne.n	8008018 <_svfiprintf_r+0x54>
 8008024:	ebba 0b04 	subs.w	fp, sl, r4
 8008028:	d00b      	beq.n	8008042 <_svfiprintf_r+0x7e>
 800802a:	465b      	mov	r3, fp
 800802c:	4622      	mov	r2, r4
 800802e:	4629      	mov	r1, r5
 8008030:	4638      	mov	r0, r7
 8008032:	f7ff ff6b 	bl	8007f0c <__ssputs_r>
 8008036:	3001      	adds	r0, #1
 8008038:	f000 80a7 	beq.w	800818a <_svfiprintf_r+0x1c6>
 800803c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800803e:	445a      	add	r2, fp
 8008040:	9209      	str	r2, [sp, #36]	@ 0x24
 8008042:	f89a 3000 	ldrb.w	r3, [sl]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 809f 	beq.w	800818a <_svfiprintf_r+0x1c6>
 800804c:	2300      	movs	r3, #0
 800804e:	f04f 32ff 	mov.w	r2, #4294967295
 8008052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008056:	f10a 0a01 	add.w	sl, sl, #1
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	9307      	str	r3, [sp, #28]
 800805e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008062:	931a      	str	r3, [sp, #104]	@ 0x68
 8008064:	4654      	mov	r4, sl
 8008066:	2205      	movs	r2, #5
 8008068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800806c:	484e      	ldr	r0, [pc, #312]	@ (80081a8 <_svfiprintf_r+0x1e4>)
 800806e:	f7f8 f8c7 	bl	8000200 <memchr>
 8008072:	9a04      	ldr	r2, [sp, #16]
 8008074:	b9d8      	cbnz	r0, 80080ae <_svfiprintf_r+0xea>
 8008076:	06d0      	lsls	r0, r2, #27
 8008078:	bf44      	itt	mi
 800807a:	2320      	movmi	r3, #32
 800807c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008080:	0711      	lsls	r1, r2, #28
 8008082:	bf44      	itt	mi
 8008084:	232b      	movmi	r3, #43	@ 0x2b
 8008086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800808a:	f89a 3000 	ldrb.w	r3, [sl]
 800808e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008090:	d015      	beq.n	80080be <_svfiprintf_r+0xfa>
 8008092:	9a07      	ldr	r2, [sp, #28]
 8008094:	4654      	mov	r4, sl
 8008096:	2000      	movs	r0, #0
 8008098:	f04f 0c0a 	mov.w	ip, #10
 800809c:	4621      	mov	r1, r4
 800809e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080a2:	3b30      	subs	r3, #48	@ 0x30
 80080a4:	2b09      	cmp	r3, #9
 80080a6:	d94b      	bls.n	8008140 <_svfiprintf_r+0x17c>
 80080a8:	b1b0      	cbz	r0, 80080d8 <_svfiprintf_r+0x114>
 80080aa:	9207      	str	r2, [sp, #28]
 80080ac:	e014      	b.n	80080d8 <_svfiprintf_r+0x114>
 80080ae:	eba0 0308 	sub.w	r3, r0, r8
 80080b2:	fa09 f303 	lsl.w	r3, r9, r3
 80080b6:	4313      	orrs	r3, r2
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	46a2      	mov	sl, r4
 80080bc:	e7d2      	b.n	8008064 <_svfiprintf_r+0xa0>
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	1d19      	adds	r1, r3, #4
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	9103      	str	r1, [sp, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	bfbb      	ittet	lt
 80080ca:	425b      	neglt	r3, r3
 80080cc:	f042 0202 	orrlt.w	r2, r2, #2
 80080d0:	9307      	strge	r3, [sp, #28]
 80080d2:	9307      	strlt	r3, [sp, #28]
 80080d4:	bfb8      	it	lt
 80080d6:	9204      	strlt	r2, [sp, #16]
 80080d8:	7823      	ldrb	r3, [r4, #0]
 80080da:	2b2e      	cmp	r3, #46	@ 0x2e
 80080dc:	d10a      	bne.n	80080f4 <_svfiprintf_r+0x130>
 80080de:	7863      	ldrb	r3, [r4, #1]
 80080e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080e2:	d132      	bne.n	800814a <_svfiprintf_r+0x186>
 80080e4:	9b03      	ldr	r3, [sp, #12]
 80080e6:	1d1a      	adds	r2, r3, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	9203      	str	r2, [sp, #12]
 80080ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080f0:	3402      	adds	r4, #2
 80080f2:	9305      	str	r3, [sp, #20]
 80080f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081b8 <_svfiprintf_r+0x1f4>
 80080f8:	7821      	ldrb	r1, [r4, #0]
 80080fa:	2203      	movs	r2, #3
 80080fc:	4650      	mov	r0, sl
 80080fe:	f7f8 f87f 	bl	8000200 <memchr>
 8008102:	b138      	cbz	r0, 8008114 <_svfiprintf_r+0x150>
 8008104:	9b04      	ldr	r3, [sp, #16]
 8008106:	eba0 000a 	sub.w	r0, r0, sl
 800810a:	2240      	movs	r2, #64	@ 0x40
 800810c:	4082      	lsls	r2, r0
 800810e:	4313      	orrs	r3, r2
 8008110:	3401      	adds	r4, #1
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008118:	4824      	ldr	r0, [pc, #144]	@ (80081ac <_svfiprintf_r+0x1e8>)
 800811a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800811e:	2206      	movs	r2, #6
 8008120:	f7f8 f86e 	bl	8000200 <memchr>
 8008124:	2800      	cmp	r0, #0
 8008126:	d036      	beq.n	8008196 <_svfiprintf_r+0x1d2>
 8008128:	4b21      	ldr	r3, [pc, #132]	@ (80081b0 <_svfiprintf_r+0x1ec>)
 800812a:	bb1b      	cbnz	r3, 8008174 <_svfiprintf_r+0x1b0>
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	3307      	adds	r3, #7
 8008130:	f023 0307 	bic.w	r3, r3, #7
 8008134:	3308      	adds	r3, #8
 8008136:	9303      	str	r3, [sp, #12]
 8008138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800813a:	4433      	add	r3, r6
 800813c:	9309      	str	r3, [sp, #36]	@ 0x24
 800813e:	e76a      	b.n	8008016 <_svfiprintf_r+0x52>
 8008140:	fb0c 3202 	mla	r2, ip, r2, r3
 8008144:	460c      	mov	r4, r1
 8008146:	2001      	movs	r0, #1
 8008148:	e7a8      	b.n	800809c <_svfiprintf_r+0xd8>
 800814a:	2300      	movs	r3, #0
 800814c:	3401      	adds	r4, #1
 800814e:	9305      	str	r3, [sp, #20]
 8008150:	4619      	mov	r1, r3
 8008152:	f04f 0c0a 	mov.w	ip, #10
 8008156:	4620      	mov	r0, r4
 8008158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800815c:	3a30      	subs	r2, #48	@ 0x30
 800815e:	2a09      	cmp	r2, #9
 8008160:	d903      	bls.n	800816a <_svfiprintf_r+0x1a6>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0c6      	beq.n	80080f4 <_svfiprintf_r+0x130>
 8008166:	9105      	str	r1, [sp, #20]
 8008168:	e7c4      	b.n	80080f4 <_svfiprintf_r+0x130>
 800816a:	fb0c 2101 	mla	r1, ip, r1, r2
 800816e:	4604      	mov	r4, r0
 8008170:	2301      	movs	r3, #1
 8008172:	e7f0      	b.n	8008156 <_svfiprintf_r+0x192>
 8008174:	ab03      	add	r3, sp, #12
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	462a      	mov	r2, r5
 800817a:	4b0e      	ldr	r3, [pc, #56]	@ (80081b4 <_svfiprintf_r+0x1f0>)
 800817c:	a904      	add	r1, sp, #16
 800817e:	4638      	mov	r0, r7
 8008180:	f3af 8000 	nop.w
 8008184:	1c42      	adds	r2, r0, #1
 8008186:	4606      	mov	r6, r0
 8008188:	d1d6      	bne.n	8008138 <_svfiprintf_r+0x174>
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	065b      	lsls	r3, r3, #25
 800818e:	f53f af2d 	bmi.w	8007fec <_svfiprintf_r+0x28>
 8008192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008194:	e72c      	b.n	8007ff0 <_svfiprintf_r+0x2c>
 8008196:	ab03      	add	r3, sp, #12
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	462a      	mov	r2, r5
 800819c:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <_svfiprintf_r+0x1f0>)
 800819e:	a904      	add	r1, sp, #16
 80081a0:	4638      	mov	r0, r7
 80081a2:	f000 f879 	bl	8008298 <_printf_i>
 80081a6:	e7ed      	b.n	8008184 <_svfiprintf_r+0x1c0>
 80081a8:	08012226 	.word	0x08012226
 80081ac:	08012230 	.word	0x08012230
 80081b0:	00000000 	.word	0x00000000
 80081b4:	08007f0d 	.word	0x08007f0d
 80081b8:	0801222c 	.word	0x0801222c

080081bc <_printf_common>:
 80081bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c0:	4616      	mov	r6, r2
 80081c2:	4698      	mov	r8, r3
 80081c4:	688a      	ldr	r2, [r1, #8]
 80081c6:	690b      	ldr	r3, [r1, #16]
 80081c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081cc:	4293      	cmp	r3, r2
 80081ce:	bfb8      	it	lt
 80081d0:	4613      	movlt	r3, r2
 80081d2:	6033      	str	r3, [r6, #0]
 80081d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081d8:	4607      	mov	r7, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	b10a      	cbz	r2, 80081e2 <_printf_common+0x26>
 80081de:	3301      	adds	r3, #1
 80081e0:	6033      	str	r3, [r6, #0]
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	0699      	lsls	r1, r3, #26
 80081e6:	bf42      	ittt	mi
 80081e8:	6833      	ldrmi	r3, [r6, #0]
 80081ea:	3302      	addmi	r3, #2
 80081ec:	6033      	strmi	r3, [r6, #0]
 80081ee:	6825      	ldr	r5, [r4, #0]
 80081f0:	f015 0506 	ands.w	r5, r5, #6
 80081f4:	d106      	bne.n	8008204 <_printf_common+0x48>
 80081f6:	f104 0a19 	add.w	sl, r4, #25
 80081fa:	68e3      	ldr	r3, [r4, #12]
 80081fc:	6832      	ldr	r2, [r6, #0]
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	42ab      	cmp	r3, r5
 8008202:	dc26      	bgt.n	8008252 <_printf_common+0x96>
 8008204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008208:	6822      	ldr	r2, [r4, #0]
 800820a:	3b00      	subs	r3, #0
 800820c:	bf18      	it	ne
 800820e:	2301      	movne	r3, #1
 8008210:	0692      	lsls	r2, r2, #26
 8008212:	d42b      	bmi.n	800826c <_printf_common+0xb0>
 8008214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008218:	4641      	mov	r1, r8
 800821a:	4638      	mov	r0, r7
 800821c:	47c8      	blx	r9
 800821e:	3001      	adds	r0, #1
 8008220:	d01e      	beq.n	8008260 <_printf_common+0xa4>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	6922      	ldr	r2, [r4, #16]
 8008226:	f003 0306 	and.w	r3, r3, #6
 800822a:	2b04      	cmp	r3, #4
 800822c:	bf02      	ittt	eq
 800822e:	68e5      	ldreq	r5, [r4, #12]
 8008230:	6833      	ldreq	r3, [r6, #0]
 8008232:	1aed      	subeq	r5, r5, r3
 8008234:	68a3      	ldr	r3, [r4, #8]
 8008236:	bf0c      	ite	eq
 8008238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800823c:	2500      	movne	r5, #0
 800823e:	4293      	cmp	r3, r2
 8008240:	bfc4      	itt	gt
 8008242:	1a9b      	subgt	r3, r3, r2
 8008244:	18ed      	addgt	r5, r5, r3
 8008246:	2600      	movs	r6, #0
 8008248:	341a      	adds	r4, #26
 800824a:	42b5      	cmp	r5, r6
 800824c:	d11a      	bne.n	8008284 <_printf_common+0xc8>
 800824e:	2000      	movs	r0, #0
 8008250:	e008      	b.n	8008264 <_printf_common+0xa8>
 8008252:	2301      	movs	r3, #1
 8008254:	4652      	mov	r2, sl
 8008256:	4641      	mov	r1, r8
 8008258:	4638      	mov	r0, r7
 800825a:	47c8      	blx	r9
 800825c:	3001      	adds	r0, #1
 800825e:	d103      	bne.n	8008268 <_printf_common+0xac>
 8008260:	f04f 30ff 	mov.w	r0, #4294967295
 8008264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008268:	3501      	adds	r5, #1
 800826a:	e7c6      	b.n	80081fa <_printf_common+0x3e>
 800826c:	18e1      	adds	r1, r4, r3
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	2030      	movs	r0, #48	@ 0x30
 8008272:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008276:	4422      	add	r2, r4
 8008278:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800827c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008280:	3302      	adds	r3, #2
 8008282:	e7c7      	b.n	8008214 <_printf_common+0x58>
 8008284:	2301      	movs	r3, #1
 8008286:	4622      	mov	r2, r4
 8008288:	4641      	mov	r1, r8
 800828a:	4638      	mov	r0, r7
 800828c:	47c8      	blx	r9
 800828e:	3001      	adds	r0, #1
 8008290:	d0e6      	beq.n	8008260 <_printf_common+0xa4>
 8008292:	3601      	adds	r6, #1
 8008294:	e7d9      	b.n	800824a <_printf_common+0x8e>
	...

08008298 <_printf_i>:
 8008298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800829c:	7e0f      	ldrb	r7, [r1, #24]
 800829e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082a0:	2f78      	cmp	r7, #120	@ 0x78
 80082a2:	4691      	mov	r9, r2
 80082a4:	4680      	mov	r8, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	469a      	mov	sl, r3
 80082aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082ae:	d807      	bhi.n	80082c0 <_printf_i+0x28>
 80082b0:	2f62      	cmp	r7, #98	@ 0x62
 80082b2:	d80a      	bhi.n	80082ca <_printf_i+0x32>
 80082b4:	2f00      	cmp	r7, #0
 80082b6:	f000 80d2 	beq.w	800845e <_printf_i+0x1c6>
 80082ba:	2f58      	cmp	r7, #88	@ 0x58
 80082bc:	f000 80b9 	beq.w	8008432 <_printf_i+0x19a>
 80082c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082c8:	e03a      	b.n	8008340 <_printf_i+0xa8>
 80082ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082ce:	2b15      	cmp	r3, #21
 80082d0:	d8f6      	bhi.n	80082c0 <_printf_i+0x28>
 80082d2:	a101      	add	r1, pc, #4	@ (adr r1, 80082d8 <_printf_i+0x40>)
 80082d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082d8:	08008331 	.word	0x08008331
 80082dc:	08008345 	.word	0x08008345
 80082e0:	080082c1 	.word	0x080082c1
 80082e4:	080082c1 	.word	0x080082c1
 80082e8:	080082c1 	.word	0x080082c1
 80082ec:	080082c1 	.word	0x080082c1
 80082f0:	08008345 	.word	0x08008345
 80082f4:	080082c1 	.word	0x080082c1
 80082f8:	080082c1 	.word	0x080082c1
 80082fc:	080082c1 	.word	0x080082c1
 8008300:	080082c1 	.word	0x080082c1
 8008304:	08008445 	.word	0x08008445
 8008308:	0800836f 	.word	0x0800836f
 800830c:	080083ff 	.word	0x080083ff
 8008310:	080082c1 	.word	0x080082c1
 8008314:	080082c1 	.word	0x080082c1
 8008318:	08008467 	.word	0x08008467
 800831c:	080082c1 	.word	0x080082c1
 8008320:	0800836f 	.word	0x0800836f
 8008324:	080082c1 	.word	0x080082c1
 8008328:	080082c1 	.word	0x080082c1
 800832c:	08008407 	.word	0x08008407
 8008330:	6833      	ldr	r3, [r6, #0]
 8008332:	1d1a      	adds	r2, r3, #4
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6032      	str	r2, [r6, #0]
 8008338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800833c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008340:	2301      	movs	r3, #1
 8008342:	e09d      	b.n	8008480 <_printf_i+0x1e8>
 8008344:	6833      	ldr	r3, [r6, #0]
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	1d19      	adds	r1, r3, #4
 800834a:	6031      	str	r1, [r6, #0]
 800834c:	0606      	lsls	r6, r0, #24
 800834e:	d501      	bpl.n	8008354 <_printf_i+0xbc>
 8008350:	681d      	ldr	r5, [r3, #0]
 8008352:	e003      	b.n	800835c <_printf_i+0xc4>
 8008354:	0645      	lsls	r5, r0, #25
 8008356:	d5fb      	bpl.n	8008350 <_printf_i+0xb8>
 8008358:	f9b3 5000 	ldrsh.w	r5, [r3]
 800835c:	2d00      	cmp	r5, #0
 800835e:	da03      	bge.n	8008368 <_printf_i+0xd0>
 8008360:	232d      	movs	r3, #45	@ 0x2d
 8008362:	426d      	negs	r5, r5
 8008364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008368:	4859      	ldr	r0, [pc, #356]	@ (80084d0 <_printf_i+0x238>)
 800836a:	230a      	movs	r3, #10
 800836c:	e011      	b.n	8008392 <_printf_i+0xfa>
 800836e:	6821      	ldr	r1, [r4, #0]
 8008370:	6833      	ldr	r3, [r6, #0]
 8008372:	0608      	lsls	r0, r1, #24
 8008374:	f853 5b04 	ldr.w	r5, [r3], #4
 8008378:	d402      	bmi.n	8008380 <_printf_i+0xe8>
 800837a:	0649      	lsls	r1, r1, #25
 800837c:	bf48      	it	mi
 800837e:	b2ad      	uxthmi	r5, r5
 8008380:	2f6f      	cmp	r7, #111	@ 0x6f
 8008382:	4853      	ldr	r0, [pc, #332]	@ (80084d0 <_printf_i+0x238>)
 8008384:	6033      	str	r3, [r6, #0]
 8008386:	bf14      	ite	ne
 8008388:	230a      	movne	r3, #10
 800838a:	2308      	moveq	r3, #8
 800838c:	2100      	movs	r1, #0
 800838e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008392:	6866      	ldr	r6, [r4, #4]
 8008394:	60a6      	str	r6, [r4, #8]
 8008396:	2e00      	cmp	r6, #0
 8008398:	bfa2      	ittt	ge
 800839a:	6821      	ldrge	r1, [r4, #0]
 800839c:	f021 0104 	bicge.w	r1, r1, #4
 80083a0:	6021      	strge	r1, [r4, #0]
 80083a2:	b90d      	cbnz	r5, 80083a8 <_printf_i+0x110>
 80083a4:	2e00      	cmp	r6, #0
 80083a6:	d04b      	beq.n	8008440 <_printf_i+0x1a8>
 80083a8:	4616      	mov	r6, r2
 80083aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80083ae:	fb03 5711 	mls	r7, r3, r1, r5
 80083b2:	5dc7      	ldrb	r7, [r0, r7]
 80083b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083b8:	462f      	mov	r7, r5
 80083ba:	42bb      	cmp	r3, r7
 80083bc:	460d      	mov	r5, r1
 80083be:	d9f4      	bls.n	80083aa <_printf_i+0x112>
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d10b      	bne.n	80083dc <_printf_i+0x144>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	07df      	lsls	r7, r3, #31
 80083c8:	d508      	bpl.n	80083dc <_printf_i+0x144>
 80083ca:	6923      	ldr	r3, [r4, #16]
 80083cc:	6861      	ldr	r1, [r4, #4]
 80083ce:	4299      	cmp	r1, r3
 80083d0:	bfde      	ittt	le
 80083d2:	2330      	movle	r3, #48	@ 0x30
 80083d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083dc:	1b92      	subs	r2, r2, r6
 80083de:	6122      	str	r2, [r4, #16]
 80083e0:	f8cd a000 	str.w	sl, [sp]
 80083e4:	464b      	mov	r3, r9
 80083e6:	aa03      	add	r2, sp, #12
 80083e8:	4621      	mov	r1, r4
 80083ea:	4640      	mov	r0, r8
 80083ec:	f7ff fee6 	bl	80081bc <_printf_common>
 80083f0:	3001      	adds	r0, #1
 80083f2:	d14a      	bne.n	800848a <_printf_i+0x1f2>
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	b004      	add	sp, #16
 80083fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	f043 0320 	orr.w	r3, r3, #32
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	4833      	ldr	r0, [pc, #204]	@ (80084d4 <_printf_i+0x23c>)
 8008408:	2778      	movs	r7, #120	@ 0x78
 800840a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	6831      	ldr	r1, [r6, #0]
 8008412:	061f      	lsls	r7, r3, #24
 8008414:	f851 5b04 	ldr.w	r5, [r1], #4
 8008418:	d402      	bmi.n	8008420 <_printf_i+0x188>
 800841a:	065f      	lsls	r7, r3, #25
 800841c:	bf48      	it	mi
 800841e:	b2ad      	uxthmi	r5, r5
 8008420:	6031      	str	r1, [r6, #0]
 8008422:	07d9      	lsls	r1, r3, #31
 8008424:	bf44      	itt	mi
 8008426:	f043 0320 	orrmi.w	r3, r3, #32
 800842a:	6023      	strmi	r3, [r4, #0]
 800842c:	b11d      	cbz	r5, 8008436 <_printf_i+0x19e>
 800842e:	2310      	movs	r3, #16
 8008430:	e7ac      	b.n	800838c <_printf_i+0xf4>
 8008432:	4827      	ldr	r0, [pc, #156]	@ (80084d0 <_printf_i+0x238>)
 8008434:	e7e9      	b.n	800840a <_printf_i+0x172>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	f023 0320 	bic.w	r3, r3, #32
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	e7f6      	b.n	800842e <_printf_i+0x196>
 8008440:	4616      	mov	r6, r2
 8008442:	e7bd      	b.n	80083c0 <_printf_i+0x128>
 8008444:	6833      	ldr	r3, [r6, #0]
 8008446:	6825      	ldr	r5, [r4, #0]
 8008448:	6961      	ldr	r1, [r4, #20]
 800844a:	1d18      	adds	r0, r3, #4
 800844c:	6030      	str	r0, [r6, #0]
 800844e:	062e      	lsls	r6, r5, #24
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	d501      	bpl.n	8008458 <_printf_i+0x1c0>
 8008454:	6019      	str	r1, [r3, #0]
 8008456:	e002      	b.n	800845e <_printf_i+0x1c6>
 8008458:	0668      	lsls	r0, r5, #25
 800845a:	d5fb      	bpl.n	8008454 <_printf_i+0x1bc>
 800845c:	8019      	strh	r1, [r3, #0]
 800845e:	2300      	movs	r3, #0
 8008460:	6123      	str	r3, [r4, #16]
 8008462:	4616      	mov	r6, r2
 8008464:	e7bc      	b.n	80083e0 <_printf_i+0x148>
 8008466:	6833      	ldr	r3, [r6, #0]
 8008468:	1d1a      	adds	r2, r3, #4
 800846a:	6032      	str	r2, [r6, #0]
 800846c:	681e      	ldr	r6, [r3, #0]
 800846e:	6862      	ldr	r2, [r4, #4]
 8008470:	2100      	movs	r1, #0
 8008472:	4630      	mov	r0, r6
 8008474:	f7f7 fec4 	bl	8000200 <memchr>
 8008478:	b108      	cbz	r0, 800847e <_printf_i+0x1e6>
 800847a:	1b80      	subs	r0, r0, r6
 800847c:	6060      	str	r0, [r4, #4]
 800847e:	6863      	ldr	r3, [r4, #4]
 8008480:	6123      	str	r3, [r4, #16]
 8008482:	2300      	movs	r3, #0
 8008484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008488:	e7aa      	b.n	80083e0 <_printf_i+0x148>
 800848a:	6923      	ldr	r3, [r4, #16]
 800848c:	4632      	mov	r2, r6
 800848e:	4649      	mov	r1, r9
 8008490:	4640      	mov	r0, r8
 8008492:	47d0      	blx	sl
 8008494:	3001      	adds	r0, #1
 8008496:	d0ad      	beq.n	80083f4 <_printf_i+0x15c>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	079b      	lsls	r3, r3, #30
 800849c:	d413      	bmi.n	80084c6 <_printf_i+0x22e>
 800849e:	68e0      	ldr	r0, [r4, #12]
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	4298      	cmp	r0, r3
 80084a4:	bfb8      	it	lt
 80084a6:	4618      	movlt	r0, r3
 80084a8:	e7a6      	b.n	80083f8 <_printf_i+0x160>
 80084aa:	2301      	movs	r3, #1
 80084ac:	4632      	mov	r2, r6
 80084ae:	4649      	mov	r1, r9
 80084b0:	4640      	mov	r0, r8
 80084b2:	47d0      	blx	sl
 80084b4:	3001      	adds	r0, #1
 80084b6:	d09d      	beq.n	80083f4 <_printf_i+0x15c>
 80084b8:	3501      	adds	r5, #1
 80084ba:	68e3      	ldr	r3, [r4, #12]
 80084bc:	9903      	ldr	r1, [sp, #12]
 80084be:	1a5b      	subs	r3, r3, r1
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	dcf2      	bgt.n	80084aa <_printf_i+0x212>
 80084c4:	e7eb      	b.n	800849e <_printf_i+0x206>
 80084c6:	2500      	movs	r5, #0
 80084c8:	f104 0619 	add.w	r6, r4, #25
 80084cc:	e7f5      	b.n	80084ba <_printf_i+0x222>
 80084ce:	bf00      	nop
 80084d0:	08012237 	.word	0x08012237
 80084d4:	08012248 	.word	0x08012248

080084d8 <fiprintf>:
 80084d8:	b40e      	push	{r1, r2, r3}
 80084da:	b503      	push	{r0, r1, lr}
 80084dc:	4601      	mov	r1, r0
 80084de:	ab03      	add	r3, sp, #12
 80084e0:	4805      	ldr	r0, [pc, #20]	@ (80084f8 <fiprintf+0x20>)
 80084e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084e6:	6800      	ldr	r0, [r0, #0]
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	f000 f913 	bl	8008714 <_vfiprintf_r>
 80084ee:	b002      	add	sp, #8
 80084f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084f4:	b003      	add	sp, #12
 80084f6:	4770      	bx	lr
 80084f8:	20000220 	.word	0x20000220

080084fc <__swhatbuf_r>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	460c      	mov	r4, r1
 8008500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008504:	2900      	cmp	r1, #0
 8008506:	b096      	sub	sp, #88	@ 0x58
 8008508:	4615      	mov	r5, r2
 800850a:	461e      	mov	r6, r3
 800850c:	da0d      	bge.n	800852a <__swhatbuf_r+0x2e>
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008514:	f04f 0100 	mov.w	r1, #0
 8008518:	bf14      	ite	ne
 800851a:	2340      	movne	r3, #64	@ 0x40
 800851c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008520:	2000      	movs	r0, #0
 8008522:	6031      	str	r1, [r6, #0]
 8008524:	602b      	str	r3, [r5, #0]
 8008526:	b016      	add	sp, #88	@ 0x58
 8008528:	bd70      	pop	{r4, r5, r6, pc}
 800852a:	466a      	mov	r2, sp
 800852c:	f000 f862 	bl	80085f4 <_fstat_r>
 8008530:	2800      	cmp	r0, #0
 8008532:	dbec      	blt.n	800850e <__swhatbuf_r+0x12>
 8008534:	9901      	ldr	r1, [sp, #4]
 8008536:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800853a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800853e:	4259      	negs	r1, r3
 8008540:	4159      	adcs	r1, r3
 8008542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008546:	e7eb      	b.n	8008520 <__swhatbuf_r+0x24>

08008548 <__smakebuf_r>:
 8008548:	898b      	ldrh	r3, [r1, #12]
 800854a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800854c:	079d      	lsls	r5, r3, #30
 800854e:	4606      	mov	r6, r0
 8008550:	460c      	mov	r4, r1
 8008552:	d507      	bpl.n	8008564 <__smakebuf_r+0x1c>
 8008554:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	6123      	str	r3, [r4, #16]
 800855c:	2301      	movs	r3, #1
 800855e:	6163      	str	r3, [r4, #20]
 8008560:	b003      	add	sp, #12
 8008562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008564:	ab01      	add	r3, sp, #4
 8008566:	466a      	mov	r2, sp
 8008568:	f7ff ffc8 	bl	80084fc <__swhatbuf_r>
 800856c:	9f00      	ldr	r7, [sp, #0]
 800856e:	4605      	mov	r5, r0
 8008570:	4639      	mov	r1, r7
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff fc3e 	bl	8007df4 <_malloc_r>
 8008578:	b948      	cbnz	r0, 800858e <__smakebuf_r+0x46>
 800857a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857e:	059a      	lsls	r2, r3, #22
 8008580:	d4ee      	bmi.n	8008560 <__smakebuf_r+0x18>
 8008582:	f023 0303 	bic.w	r3, r3, #3
 8008586:	f043 0302 	orr.w	r3, r3, #2
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	e7e2      	b.n	8008554 <__smakebuf_r+0xc>
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	6020      	str	r0, [r4, #0]
 8008592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008596:	81a3      	strh	r3, [r4, #12]
 8008598:	9b01      	ldr	r3, [sp, #4]
 800859a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800859e:	b15b      	cbz	r3, 80085b8 <__smakebuf_r+0x70>
 80085a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085a4:	4630      	mov	r0, r6
 80085a6:	f000 f837 	bl	8008618 <_isatty_r>
 80085aa:	b128      	cbz	r0, 80085b8 <__smakebuf_r+0x70>
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	f023 0303 	bic.w	r3, r3, #3
 80085b2:	f043 0301 	orr.w	r3, r3, #1
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	431d      	orrs	r5, r3
 80085bc:	81a5      	strh	r5, [r4, #12]
 80085be:	e7cf      	b.n	8008560 <__smakebuf_r+0x18>

080085c0 <memmove>:
 80085c0:	4288      	cmp	r0, r1
 80085c2:	b510      	push	{r4, lr}
 80085c4:	eb01 0402 	add.w	r4, r1, r2
 80085c8:	d902      	bls.n	80085d0 <memmove+0x10>
 80085ca:	4284      	cmp	r4, r0
 80085cc:	4623      	mov	r3, r4
 80085ce:	d807      	bhi.n	80085e0 <memmove+0x20>
 80085d0:	1e43      	subs	r3, r0, #1
 80085d2:	42a1      	cmp	r1, r4
 80085d4:	d008      	beq.n	80085e8 <memmove+0x28>
 80085d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085de:	e7f8      	b.n	80085d2 <memmove+0x12>
 80085e0:	4402      	add	r2, r0
 80085e2:	4601      	mov	r1, r0
 80085e4:	428a      	cmp	r2, r1
 80085e6:	d100      	bne.n	80085ea <memmove+0x2a>
 80085e8:	bd10      	pop	{r4, pc}
 80085ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085f2:	e7f7      	b.n	80085e4 <memmove+0x24>

080085f4 <_fstat_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4d07      	ldr	r5, [pc, #28]	@ (8008614 <_fstat_r+0x20>)
 80085f8:	2300      	movs	r3, #0
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	f7f9 fc81 	bl	8001f08 <_fstat>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	d102      	bne.n	8008610 <_fstat_r+0x1c>
 800860a:	682b      	ldr	r3, [r5, #0]
 800860c:	b103      	cbz	r3, 8008610 <_fstat_r+0x1c>
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	bd38      	pop	{r3, r4, r5, pc}
 8008612:	bf00      	nop
 8008614:	2000af80 	.word	0x2000af80

08008618 <_isatty_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4d06      	ldr	r5, [pc, #24]	@ (8008634 <_isatty_r+0x1c>)
 800861c:	2300      	movs	r3, #0
 800861e:	4604      	mov	r4, r0
 8008620:	4608      	mov	r0, r1
 8008622:	602b      	str	r3, [r5, #0]
 8008624:	f7f9 fc80 	bl	8001f28 <_isatty>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d102      	bne.n	8008632 <_isatty_r+0x1a>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	b103      	cbz	r3, 8008632 <_isatty_r+0x1a>
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	2000af80 	.word	0x2000af80

08008638 <_sbrk_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4d06      	ldr	r5, [pc, #24]	@ (8008654 <_sbrk_r+0x1c>)
 800863c:	2300      	movs	r3, #0
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	602b      	str	r3, [r5, #0]
 8008644:	f7f9 fc88 	bl	8001f58 <_sbrk>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_sbrk_r+0x1a>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_sbrk_r+0x1a>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	2000af80 	.word	0x2000af80

08008658 <abort>:
 8008658:	b508      	push	{r3, lr}
 800865a:	2006      	movs	r0, #6
 800865c:	f000 fa2e 	bl	8008abc <raise>
 8008660:	2001      	movs	r0, #1
 8008662:	f7f9 fc01 	bl	8001e68 <_exit>

08008666 <_realloc_r>:
 8008666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800866a:	4680      	mov	r8, r0
 800866c:	4615      	mov	r5, r2
 800866e:	460c      	mov	r4, r1
 8008670:	b921      	cbnz	r1, 800867c <_realloc_r+0x16>
 8008672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008676:	4611      	mov	r1, r2
 8008678:	f7ff bbbc 	b.w	8007df4 <_malloc_r>
 800867c:	b92a      	cbnz	r2, 800868a <_realloc_r+0x24>
 800867e:	f7ff fb45 	bl	8007d0c <_free_r>
 8008682:	2400      	movs	r4, #0
 8008684:	4620      	mov	r0, r4
 8008686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800868a:	f000 fa33 	bl	8008af4 <_malloc_usable_size_r>
 800868e:	4285      	cmp	r5, r0
 8008690:	4606      	mov	r6, r0
 8008692:	d802      	bhi.n	800869a <_realloc_r+0x34>
 8008694:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008698:	d8f4      	bhi.n	8008684 <_realloc_r+0x1e>
 800869a:	4629      	mov	r1, r5
 800869c:	4640      	mov	r0, r8
 800869e:	f7ff fba9 	bl	8007df4 <_malloc_r>
 80086a2:	4607      	mov	r7, r0
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d0ec      	beq.n	8008682 <_realloc_r+0x1c>
 80086a8:	42b5      	cmp	r5, r6
 80086aa:	462a      	mov	r2, r5
 80086ac:	4621      	mov	r1, r4
 80086ae:	bf28      	it	cs
 80086b0:	4632      	movcs	r2, r6
 80086b2:	f7ff fafe 	bl	8007cb2 <memcpy>
 80086b6:	4621      	mov	r1, r4
 80086b8:	4640      	mov	r0, r8
 80086ba:	f7ff fb27 	bl	8007d0c <_free_r>
 80086be:	463c      	mov	r4, r7
 80086c0:	e7e0      	b.n	8008684 <_realloc_r+0x1e>

080086c2 <__sfputc_r>:
 80086c2:	6893      	ldr	r3, [r2, #8]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	b410      	push	{r4}
 80086ca:	6093      	str	r3, [r2, #8]
 80086cc:	da08      	bge.n	80086e0 <__sfputc_r+0x1e>
 80086ce:	6994      	ldr	r4, [r2, #24]
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	db01      	blt.n	80086d8 <__sfputc_r+0x16>
 80086d4:	290a      	cmp	r1, #10
 80086d6:	d103      	bne.n	80086e0 <__sfputc_r+0x1e>
 80086d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086dc:	f000 b932 	b.w	8008944 <__swbuf_r>
 80086e0:	6813      	ldr	r3, [r2, #0]
 80086e2:	1c58      	adds	r0, r3, #1
 80086e4:	6010      	str	r0, [r2, #0]
 80086e6:	7019      	strb	r1, [r3, #0]
 80086e8:	4608      	mov	r0, r1
 80086ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <__sfputs_r>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	4606      	mov	r6, r0
 80086f4:	460f      	mov	r7, r1
 80086f6:	4614      	mov	r4, r2
 80086f8:	18d5      	adds	r5, r2, r3
 80086fa:	42ac      	cmp	r4, r5
 80086fc:	d101      	bne.n	8008702 <__sfputs_r+0x12>
 80086fe:	2000      	movs	r0, #0
 8008700:	e007      	b.n	8008712 <__sfputs_r+0x22>
 8008702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008706:	463a      	mov	r2, r7
 8008708:	4630      	mov	r0, r6
 800870a:	f7ff ffda 	bl	80086c2 <__sfputc_r>
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	d1f3      	bne.n	80086fa <__sfputs_r+0xa>
 8008712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008714 <_vfiprintf_r>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	460d      	mov	r5, r1
 800871a:	b09d      	sub	sp, #116	@ 0x74
 800871c:	4614      	mov	r4, r2
 800871e:	4698      	mov	r8, r3
 8008720:	4606      	mov	r6, r0
 8008722:	b118      	cbz	r0, 800872c <_vfiprintf_r+0x18>
 8008724:	6a03      	ldr	r3, [r0, #32]
 8008726:	b90b      	cbnz	r3, 800872c <_vfiprintf_r+0x18>
 8008728:	f7ff f8c0 	bl	80078ac <__sinit>
 800872c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800872e:	07d9      	lsls	r1, r3, #31
 8008730:	d405      	bmi.n	800873e <_vfiprintf_r+0x2a>
 8008732:	89ab      	ldrh	r3, [r5, #12]
 8008734:	059a      	lsls	r2, r3, #22
 8008736:	d402      	bmi.n	800873e <_vfiprintf_r+0x2a>
 8008738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800873a:	f7ff fab8 	bl	8007cae <__retarget_lock_acquire_recursive>
 800873e:	89ab      	ldrh	r3, [r5, #12]
 8008740:	071b      	lsls	r3, r3, #28
 8008742:	d501      	bpl.n	8008748 <_vfiprintf_r+0x34>
 8008744:	692b      	ldr	r3, [r5, #16]
 8008746:	b99b      	cbnz	r3, 8008770 <_vfiprintf_r+0x5c>
 8008748:	4629      	mov	r1, r5
 800874a:	4630      	mov	r0, r6
 800874c:	f000 f938 	bl	80089c0 <__swsetup_r>
 8008750:	b170      	cbz	r0, 8008770 <_vfiprintf_r+0x5c>
 8008752:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008754:	07dc      	lsls	r4, r3, #31
 8008756:	d504      	bpl.n	8008762 <_vfiprintf_r+0x4e>
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	b01d      	add	sp, #116	@ 0x74
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008762:	89ab      	ldrh	r3, [r5, #12]
 8008764:	0598      	lsls	r0, r3, #22
 8008766:	d4f7      	bmi.n	8008758 <_vfiprintf_r+0x44>
 8008768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800876a:	f7ff faa1 	bl	8007cb0 <__retarget_lock_release_recursive>
 800876e:	e7f3      	b.n	8008758 <_vfiprintf_r+0x44>
 8008770:	2300      	movs	r3, #0
 8008772:	9309      	str	r3, [sp, #36]	@ 0x24
 8008774:	2320      	movs	r3, #32
 8008776:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800877a:	f8cd 800c 	str.w	r8, [sp, #12]
 800877e:	2330      	movs	r3, #48	@ 0x30
 8008780:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008930 <_vfiprintf_r+0x21c>
 8008784:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008788:	f04f 0901 	mov.w	r9, #1
 800878c:	4623      	mov	r3, r4
 800878e:	469a      	mov	sl, r3
 8008790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008794:	b10a      	cbz	r2, 800879a <_vfiprintf_r+0x86>
 8008796:	2a25      	cmp	r2, #37	@ 0x25
 8008798:	d1f9      	bne.n	800878e <_vfiprintf_r+0x7a>
 800879a:	ebba 0b04 	subs.w	fp, sl, r4
 800879e:	d00b      	beq.n	80087b8 <_vfiprintf_r+0xa4>
 80087a0:	465b      	mov	r3, fp
 80087a2:	4622      	mov	r2, r4
 80087a4:	4629      	mov	r1, r5
 80087a6:	4630      	mov	r0, r6
 80087a8:	f7ff ffa2 	bl	80086f0 <__sfputs_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	f000 80a7 	beq.w	8008900 <_vfiprintf_r+0x1ec>
 80087b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087b4:	445a      	add	r2, fp
 80087b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80087b8:	f89a 3000 	ldrb.w	r3, [sl]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 809f 	beq.w	8008900 <_vfiprintf_r+0x1ec>
 80087c2:	2300      	movs	r3, #0
 80087c4:	f04f 32ff 	mov.w	r2, #4294967295
 80087c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087cc:	f10a 0a01 	add.w	sl, sl, #1
 80087d0:	9304      	str	r3, [sp, #16]
 80087d2:	9307      	str	r3, [sp, #28]
 80087d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80087da:	4654      	mov	r4, sl
 80087dc:	2205      	movs	r2, #5
 80087de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e2:	4853      	ldr	r0, [pc, #332]	@ (8008930 <_vfiprintf_r+0x21c>)
 80087e4:	f7f7 fd0c 	bl	8000200 <memchr>
 80087e8:	9a04      	ldr	r2, [sp, #16]
 80087ea:	b9d8      	cbnz	r0, 8008824 <_vfiprintf_r+0x110>
 80087ec:	06d1      	lsls	r1, r2, #27
 80087ee:	bf44      	itt	mi
 80087f0:	2320      	movmi	r3, #32
 80087f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087f6:	0713      	lsls	r3, r2, #28
 80087f8:	bf44      	itt	mi
 80087fa:	232b      	movmi	r3, #43	@ 0x2b
 80087fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008800:	f89a 3000 	ldrb.w	r3, [sl]
 8008804:	2b2a      	cmp	r3, #42	@ 0x2a
 8008806:	d015      	beq.n	8008834 <_vfiprintf_r+0x120>
 8008808:	9a07      	ldr	r2, [sp, #28]
 800880a:	4654      	mov	r4, sl
 800880c:	2000      	movs	r0, #0
 800880e:	f04f 0c0a 	mov.w	ip, #10
 8008812:	4621      	mov	r1, r4
 8008814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008818:	3b30      	subs	r3, #48	@ 0x30
 800881a:	2b09      	cmp	r3, #9
 800881c:	d94b      	bls.n	80088b6 <_vfiprintf_r+0x1a2>
 800881e:	b1b0      	cbz	r0, 800884e <_vfiprintf_r+0x13a>
 8008820:	9207      	str	r2, [sp, #28]
 8008822:	e014      	b.n	800884e <_vfiprintf_r+0x13a>
 8008824:	eba0 0308 	sub.w	r3, r0, r8
 8008828:	fa09 f303 	lsl.w	r3, r9, r3
 800882c:	4313      	orrs	r3, r2
 800882e:	9304      	str	r3, [sp, #16]
 8008830:	46a2      	mov	sl, r4
 8008832:	e7d2      	b.n	80087da <_vfiprintf_r+0xc6>
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	1d19      	adds	r1, r3, #4
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	9103      	str	r1, [sp, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfbb      	ittet	lt
 8008840:	425b      	neglt	r3, r3
 8008842:	f042 0202 	orrlt.w	r2, r2, #2
 8008846:	9307      	strge	r3, [sp, #28]
 8008848:	9307      	strlt	r3, [sp, #28]
 800884a:	bfb8      	it	lt
 800884c:	9204      	strlt	r2, [sp, #16]
 800884e:	7823      	ldrb	r3, [r4, #0]
 8008850:	2b2e      	cmp	r3, #46	@ 0x2e
 8008852:	d10a      	bne.n	800886a <_vfiprintf_r+0x156>
 8008854:	7863      	ldrb	r3, [r4, #1]
 8008856:	2b2a      	cmp	r3, #42	@ 0x2a
 8008858:	d132      	bne.n	80088c0 <_vfiprintf_r+0x1ac>
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	1d1a      	adds	r2, r3, #4
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	9203      	str	r2, [sp, #12]
 8008862:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008866:	3402      	adds	r4, #2
 8008868:	9305      	str	r3, [sp, #20]
 800886a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008940 <_vfiprintf_r+0x22c>
 800886e:	7821      	ldrb	r1, [r4, #0]
 8008870:	2203      	movs	r2, #3
 8008872:	4650      	mov	r0, sl
 8008874:	f7f7 fcc4 	bl	8000200 <memchr>
 8008878:	b138      	cbz	r0, 800888a <_vfiprintf_r+0x176>
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	eba0 000a 	sub.w	r0, r0, sl
 8008880:	2240      	movs	r2, #64	@ 0x40
 8008882:	4082      	lsls	r2, r0
 8008884:	4313      	orrs	r3, r2
 8008886:	3401      	adds	r4, #1
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800888e:	4829      	ldr	r0, [pc, #164]	@ (8008934 <_vfiprintf_r+0x220>)
 8008890:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008894:	2206      	movs	r2, #6
 8008896:	f7f7 fcb3 	bl	8000200 <memchr>
 800889a:	2800      	cmp	r0, #0
 800889c:	d03f      	beq.n	800891e <_vfiprintf_r+0x20a>
 800889e:	4b26      	ldr	r3, [pc, #152]	@ (8008938 <_vfiprintf_r+0x224>)
 80088a0:	bb1b      	cbnz	r3, 80088ea <_vfiprintf_r+0x1d6>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	3307      	adds	r3, #7
 80088a6:	f023 0307 	bic.w	r3, r3, #7
 80088aa:	3308      	adds	r3, #8
 80088ac:	9303      	str	r3, [sp, #12]
 80088ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b0:	443b      	add	r3, r7
 80088b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088b4:	e76a      	b.n	800878c <_vfiprintf_r+0x78>
 80088b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088ba:	460c      	mov	r4, r1
 80088bc:	2001      	movs	r0, #1
 80088be:	e7a8      	b.n	8008812 <_vfiprintf_r+0xfe>
 80088c0:	2300      	movs	r3, #0
 80088c2:	3401      	adds	r4, #1
 80088c4:	9305      	str	r3, [sp, #20]
 80088c6:	4619      	mov	r1, r3
 80088c8:	f04f 0c0a 	mov.w	ip, #10
 80088cc:	4620      	mov	r0, r4
 80088ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088d2:	3a30      	subs	r2, #48	@ 0x30
 80088d4:	2a09      	cmp	r2, #9
 80088d6:	d903      	bls.n	80088e0 <_vfiprintf_r+0x1cc>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0c6      	beq.n	800886a <_vfiprintf_r+0x156>
 80088dc:	9105      	str	r1, [sp, #20]
 80088de:	e7c4      	b.n	800886a <_vfiprintf_r+0x156>
 80088e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80088e4:	4604      	mov	r4, r0
 80088e6:	2301      	movs	r3, #1
 80088e8:	e7f0      	b.n	80088cc <_vfiprintf_r+0x1b8>
 80088ea:	ab03      	add	r3, sp, #12
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	462a      	mov	r2, r5
 80088f0:	4b12      	ldr	r3, [pc, #72]	@ (800893c <_vfiprintf_r+0x228>)
 80088f2:	a904      	add	r1, sp, #16
 80088f4:	4630      	mov	r0, r6
 80088f6:	f3af 8000 	nop.w
 80088fa:	4607      	mov	r7, r0
 80088fc:	1c78      	adds	r0, r7, #1
 80088fe:	d1d6      	bne.n	80088ae <_vfiprintf_r+0x19a>
 8008900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008902:	07d9      	lsls	r1, r3, #31
 8008904:	d405      	bmi.n	8008912 <_vfiprintf_r+0x1fe>
 8008906:	89ab      	ldrh	r3, [r5, #12]
 8008908:	059a      	lsls	r2, r3, #22
 800890a:	d402      	bmi.n	8008912 <_vfiprintf_r+0x1fe>
 800890c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800890e:	f7ff f9cf 	bl	8007cb0 <__retarget_lock_release_recursive>
 8008912:	89ab      	ldrh	r3, [r5, #12]
 8008914:	065b      	lsls	r3, r3, #25
 8008916:	f53f af1f 	bmi.w	8008758 <_vfiprintf_r+0x44>
 800891a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800891c:	e71e      	b.n	800875c <_vfiprintf_r+0x48>
 800891e:	ab03      	add	r3, sp, #12
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	462a      	mov	r2, r5
 8008924:	4b05      	ldr	r3, [pc, #20]	@ (800893c <_vfiprintf_r+0x228>)
 8008926:	a904      	add	r1, sp, #16
 8008928:	4630      	mov	r0, r6
 800892a:	f7ff fcb5 	bl	8008298 <_printf_i>
 800892e:	e7e4      	b.n	80088fa <_vfiprintf_r+0x1e6>
 8008930:	08012226 	.word	0x08012226
 8008934:	08012230 	.word	0x08012230
 8008938:	00000000 	.word	0x00000000
 800893c:	080086f1 	.word	0x080086f1
 8008940:	0801222c 	.word	0x0801222c

08008944 <__swbuf_r>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	460e      	mov	r6, r1
 8008948:	4614      	mov	r4, r2
 800894a:	4605      	mov	r5, r0
 800894c:	b118      	cbz	r0, 8008956 <__swbuf_r+0x12>
 800894e:	6a03      	ldr	r3, [r0, #32]
 8008950:	b90b      	cbnz	r3, 8008956 <__swbuf_r+0x12>
 8008952:	f7fe ffab 	bl	80078ac <__sinit>
 8008956:	69a3      	ldr	r3, [r4, #24]
 8008958:	60a3      	str	r3, [r4, #8]
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	071a      	lsls	r2, r3, #28
 800895e:	d501      	bpl.n	8008964 <__swbuf_r+0x20>
 8008960:	6923      	ldr	r3, [r4, #16]
 8008962:	b943      	cbnz	r3, 8008976 <__swbuf_r+0x32>
 8008964:	4621      	mov	r1, r4
 8008966:	4628      	mov	r0, r5
 8008968:	f000 f82a 	bl	80089c0 <__swsetup_r>
 800896c:	b118      	cbz	r0, 8008976 <__swbuf_r+0x32>
 800896e:	f04f 37ff 	mov.w	r7, #4294967295
 8008972:	4638      	mov	r0, r7
 8008974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	6922      	ldr	r2, [r4, #16]
 800897a:	1a98      	subs	r0, r3, r2
 800897c:	6963      	ldr	r3, [r4, #20]
 800897e:	b2f6      	uxtb	r6, r6
 8008980:	4283      	cmp	r3, r0
 8008982:	4637      	mov	r7, r6
 8008984:	dc05      	bgt.n	8008992 <__swbuf_r+0x4e>
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f7fe fedb 	bl	8007744 <_fflush_r>
 800898e:	2800      	cmp	r0, #0
 8008990:	d1ed      	bne.n	800896e <__swbuf_r+0x2a>
 8008992:	68a3      	ldr	r3, [r4, #8]
 8008994:	3b01      	subs	r3, #1
 8008996:	60a3      	str	r3, [r4, #8]
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	6022      	str	r2, [r4, #0]
 800899e:	701e      	strb	r6, [r3, #0]
 80089a0:	6962      	ldr	r2, [r4, #20]
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d004      	beq.n	80089b2 <__swbuf_r+0x6e>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	07db      	lsls	r3, r3, #31
 80089ac:	d5e1      	bpl.n	8008972 <__swbuf_r+0x2e>
 80089ae:	2e0a      	cmp	r6, #10
 80089b0:	d1df      	bne.n	8008972 <__swbuf_r+0x2e>
 80089b2:	4621      	mov	r1, r4
 80089b4:	4628      	mov	r0, r5
 80089b6:	f7fe fec5 	bl	8007744 <_fflush_r>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d0d9      	beq.n	8008972 <__swbuf_r+0x2e>
 80089be:	e7d6      	b.n	800896e <__swbuf_r+0x2a>

080089c0 <__swsetup_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4b29      	ldr	r3, [pc, #164]	@ (8008a68 <__swsetup_r+0xa8>)
 80089c4:	4605      	mov	r5, r0
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	460c      	mov	r4, r1
 80089ca:	b118      	cbz	r0, 80089d4 <__swsetup_r+0x14>
 80089cc:	6a03      	ldr	r3, [r0, #32]
 80089ce:	b90b      	cbnz	r3, 80089d4 <__swsetup_r+0x14>
 80089d0:	f7fe ff6c 	bl	80078ac <__sinit>
 80089d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d8:	0719      	lsls	r1, r3, #28
 80089da:	d422      	bmi.n	8008a22 <__swsetup_r+0x62>
 80089dc:	06da      	lsls	r2, r3, #27
 80089de:	d407      	bmi.n	80089f0 <__swsetup_r+0x30>
 80089e0:	2209      	movs	r2, #9
 80089e2:	602a      	str	r2, [r5, #0]
 80089e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e8:	81a3      	strh	r3, [r4, #12]
 80089ea:	f04f 30ff 	mov.w	r0, #4294967295
 80089ee:	e033      	b.n	8008a58 <__swsetup_r+0x98>
 80089f0:	0758      	lsls	r0, r3, #29
 80089f2:	d512      	bpl.n	8008a1a <__swsetup_r+0x5a>
 80089f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089f6:	b141      	cbz	r1, 8008a0a <__swsetup_r+0x4a>
 80089f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089fc:	4299      	cmp	r1, r3
 80089fe:	d002      	beq.n	8008a06 <__swsetup_r+0x46>
 8008a00:	4628      	mov	r0, r5
 8008a02:	f7ff f983 	bl	8007d0c <_free_r>
 8008a06:	2300      	movs	r3, #0
 8008a08:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	2300      	movs	r3, #0
 8008a14:	6063      	str	r3, [r4, #4]
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f043 0308 	orr.w	r3, r3, #8
 8008a20:	81a3      	strh	r3, [r4, #12]
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	b94b      	cbnz	r3, 8008a3a <__swsetup_r+0x7a>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a30:	d003      	beq.n	8008a3a <__swsetup_r+0x7a>
 8008a32:	4621      	mov	r1, r4
 8008a34:	4628      	mov	r0, r5
 8008a36:	f7ff fd87 	bl	8008548 <__smakebuf_r>
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	f013 0201 	ands.w	r2, r3, #1
 8008a42:	d00a      	beq.n	8008a5a <__swsetup_r+0x9a>
 8008a44:	2200      	movs	r2, #0
 8008a46:	60a2      	str	r2, [r4, #8]
 8008a48:	6962      	ldr	r2, [r4, #20]
 8008a4a:	4252      	negs	r2, r2
 8008a4c:	61a2      	str	r2, [r4, #24]
 8008a4e:	6922      	ldr	r2, [r4, #16]
 8008a50:	b942      	cbnz	r2, 8008a64 <__swsetup_r+0xa4>
 8008a52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a56:	d1c5      	bne.n	80089e4 <__swsetup_r+0x24>
 8008a58:	bd38      	pop	{r3, r4, r5, pc}
 8008a5a:	0799      	lsls	r1, r3, #30
 8008a5c:	bf58      	it	pl
 8008a5e:	6962      	ldrpl	r2, [r4, #20]
 8008a60:	60a2      	str	r2, [r4, #8]
 8008a62:	e7f4      	b.n	8008a4e <__swsetup_r+0x8e>
 8008a64:	2000      	movs	r0, #0
 8008a66:	e7f7      	b.n	8008a58 <__swsetup_r+0x98>
 8008a68:	20000220 	.word	0x20000220

08008a6c <_raise_r>:
 8008a6c:	291f      	cmp	r1, #31
 8008a6e:	b538      	push	{r3, r4, r5, lr}
 8008a70:	4605      	mov	r5, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	d904      	bls.n	8008a80 <_raise_r+0x14>
 8008a76:	2316      	movs	r3, #22
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a82:	b112      	cbz	r2, 8008a8a <_raise_r+0x1e>
 8008a84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a88:	b94b      	cbnz	r3, 8008a9e <_raise_r+0x32>
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f000 f830 	bl	8008af0 <_getpid_r>
 8008a90:	4622      	mov	r2, r4
 8008a92:	4601      	mov	r1, r0
 8008a94:	4628      	mov	r0, r5
 8008a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9a:	f000 b817 	b.w	8008acc <_kill_r>
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d00a      	beq.n	8008ab8 <_raise_r+0x4c>
 8008aa2:	1c59      	adds	r1, r3, #1
 8008aa4:	d103      	bne.n	8008aae <_raise_r+0x42>
 8008aa6:	2316      	movs	r3, #22
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	2001      	movs	r0, #1
 8008aac:	e7e7      	b.n	8008a7e <_raise_r+0x12>
 8008aae:	2100      	movs	r1, #0
 8008ab0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4798      	blx	r3
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e7e0      	b.n	8008a7e <_raise_r+0x12>

08008abc <raise>:
 8008abc:	4b02      	ldr	r3, [pc, #8]	@ (8008ac8 <raise+0xc>)
 8008abe:	4601      	mov	r1, r0
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	f7ff bfd3 	b.w	8008a6c <_raise_r>
 8008ac6:	bf00      	nop
 8008ac8:	20000220 	.word	0x20000220

08008acc <_kill_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d07      	ldr	r5, [pc, #28]	@ (8008aec <_kill_r+0x20>)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	f7f9 f9b5 	bl	8001e48 <_kill>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	d102      	bne.n	8008ae8 <_kill_r+0x1c>
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	b103      	cbz	r3, 8008ae8 <_kill_r+0x1c>
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	bd38      	pop	{r3, r4, r5, pc}
 8008aea:	bf00      	nop
 8008aec:	2000af80 	.word	0x2000af80

08008af0 <_getpid_r>:
 8008af0:	f7f9 b9a2 	b.w	8001e38 <_getpid>

08008af4 <_malloc_usable_size_r>:
 8008af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af8:	1f18      	subs	r0, r3, #4
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	bfbc      	itt	lt
 8008afe:	580b      	ldrlt	r3, [r1, r0]
 8008b00:	18c0      	addlt	r0, r0, r3
 8008b02:	4770      	bx	lr

08008b04 <_init>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	bf00      	nop
 8008b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0a:	bc08      	pop	{r3}
 8008b0c:	469e      	mov	lr, r3
 8008b0e:	4770      	bx	lr

08008b10 <_fini>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr
