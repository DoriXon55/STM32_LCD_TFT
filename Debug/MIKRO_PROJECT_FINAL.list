
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008858  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009600  080089e8  080089e8  000099e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fe8  08011fe8  00013264  2**0
                  CONTENTS
  4 .ARM          00000008  08011fe8  08011fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ff0  08011ff0  00013264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ff0  08011ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011ff4  08011ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  08011ff8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000adb8  20000264  0801225c  00013264  2**2
                  ALLOC
 10 ._user_heap_stack 00001304  2000b01c  0801225c  0001401c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fc1  00000000  00000000  00013294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a8  00000000  00000000  00026255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00029800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc6  00000000  00000000  0002a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289df  00000000  00000000  0002b32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001645c  00000000  00000000  00053d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec313  00000000  00000000  0006a169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015647c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d0  00000000  00000000  001564c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089d0 	.word	0x080089d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	080089d0 	.word	0x080089d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ringBufferSetup>:
/************************************************************************
* Funkcja: ringBufferSetup()
* (Utworzenie instancji bufora)
************************************************************************/
void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	60da      	str	r2, [r3, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <USART_kbhit>:
/************************************************************************
* Funkcja: USART_kbhit()
* (Sprawdza czy w buforze odbiorczym znajdują się dane
* Zwraca 1 jeśli bufor zawiera dane do odczytu)
************************************************************************/
uint8_t USART_kbhit(){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <USART_kbhit+0x20>)
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <USART_kbhit+0x20>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d101      	bne.n	80005b4 <USART_kbhit+0x14>
		return 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e000      	b.n	80005b6 <USART_kbhit+0x16>
	}else{
		return 1;
 80005b4:	2301      	movs	r3, #1
	}
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000280 	.word	0x20000280

080005c4 <USART_getchar>:
* Jeśli bufor pusty = -1
* Jeśli jest dostępny bajt to funkcja zwraca jesgo wartość
* oraz aktualizuje index RX_Busy tak aby wskazywał na kolejny
* bajt do odczytu)
************************************************************************/
int16_t USART_getchar() {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <USART_getchar+0x4c>)
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <USART_getchar+0x4c>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d013      	beq.n	80005fe <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <USART_getchar+0x4c>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <USART_getchar+0x50>)
 80005dc:	5cd3      	ldrb	r3, [r2, r3]
 80005de:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <USART_getchar+0x4c>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <USART_getchar+0x4c>)
 80005e8:	68d2      	ldr	r2, [r2, #12]
 80005ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80005ee:	fb01 f202 	mul.w	r2, r1, r2
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <USART_getchar+0x4c>)
 80005f6:	6053      	str	r3, [r2, #4]
        return tmp;
 80005f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005fc:	e001      	b.n	8000602 <USART_getchar+0x3e>
    }
    return -1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000280 	.word	0x20000280
 8000614:	20000a04 	.word	0x20000a04

08000618 <USART_sendFrame>:
*    - bufor był pusty (writeIndex == readIndex)
*    - rejestr nadawczy jest gotowy (TXE = 1)
* 6. Aktualizuje wskaźnik zapisu w buforze kołowym
* 7. Włącza przerwania
************************************************************************/
void USART_sendFrame(const uint8_t* data, size_t length) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 8000622:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <USART_sendFrame+0xb4>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop

    __disable_irq();
    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	e016      	b.n	8000660 <USART_sendFrame+0x48>
        USART_TxBuf[idx] = data[i];
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	4413      	add	r3, r2
 8000638:	7819      	ldrb	r1, [r3, #0]
 800063a:	4a25      	ldr	r2, [pc, #148]	@ (80006d0 <USART_sendFrame+0xb8>)
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4413      	add	r3, r2
 8000640:	460a      	mov	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
        idx = (idx + 1) % txRingBuffer.mask;
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	3301      	adds	r3, #1
 8000648:	461a      	mov	r2, r3
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <USART_sendFrame+0xb4>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	fbb2 f1f3 	udiv	r1, r2, r3
 8000652:	fb01 f303 	mul.w	r3, r1, r3
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	3301      	adds	r3, #1
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d3e4      	bcc.n	8000632 <USART_sendFrame+0x1a>
    }

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <USART_sendFrame+0xb4>)
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <USART_sendFrame+0xb4>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	429a      	cmp	r2, r3
 8000672:	d122      	bne.n	80006ba <USART_sendFrame+0xa2>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <USART_sendFrame+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 800067e:	2b80      	cmp	r3, #128	@ 0x80
 8000680:	d11b      	bne.n	80006ba <USART_sendFrame+0xa2>
        txRingBuffer.writeIndex = idx;
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <USART_sendFrame+0xb4>)
 8000686:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8000688:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <USART_sendFrame+0xb4>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a10      	ldr	r2, [pc, #64]	@ (80006d0 <USART_sendFrame+0xb8>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) % txRingBuffer.mask;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <USART_sendFrame+0xb4>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <USART_sendFrame+0xb4>)
 800069a:	68d2      	ldr	r2, [r2, #12]
 800069c:	fbb3 f1f2 	udiv	r1, r3, r2
 80006a0:	fb01 f202 	mul.w	r2, r1, r2
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	4a09      	ldr	r2, [pc, #36]	@ (80006cc <USART_sendFrame+0xb4>)
 80006a8:	6053      	str	r3, [r2, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006aa:	f107 030f 	add.w	r3, r7, #15
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <USART_sendFrame+0xbc>)
 80006b4:	f004 fdb0 	bl	8005218 <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006b8:	e002      	b.n	80006c0 <USART_sendFrame+0xa8>
    } else {
        txRingBuffer.writeIndex = idx;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4a03      	ldr	r2, [pc, #12]	@ (80006cc <USART_sendFrame+0xb4>)
 80006be:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006c0:	b662      	cpsie	i
}
 80006c2:	bf00      	nop
    }

    __enable_irq();
}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000290 	.word	0x20000290
 80006d0:	200002a0 	.word	0x200002a0
 80006d4:	2000ae48 	.word	0x2000ae48

080006d8 <calculateCrc16>:
*      - crc_out[1] = crc & 0xFF (młodszy bajt)
*
* Korzysta z:
*   - crc16_table: Tablica lookup z wstępnie obliczonymi wartościami
************************************************************************/
void calculateCrc16(uint8_t *data, size_t length, uint8_t crc_out[2]) {
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	@ 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF;
 80006e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006e8:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	e019      	b.n	8000724 <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte;
 80006fa:	8bfb      	ldrh	r3, [r7, #30]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b2da      	uxtb	r2, r3
 8000702:	7dfb      	ldrb	r3, [r7, #23]
 8000704:	4053      	eors	r3, r2
 8000706:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index];
 8000708:	8bfb      	ldrh	r3, [r7, #30]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b21a      	sxth	r2, r3
 800070e:	7dbb      	ldrb	r3, [r7, #22]
 8000710:	490f      	ldr	r1, [pc, #60]	@ (8000750 <calculateCrc16+0x78>)
 8000712:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000716:	b21b      	sxth	r3, r3
 8000718:	4053      	eors	r3, r2
 800071a:	b21b      	sxth	r3, r3
 800071c:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	3301      	adds	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	429a      	cmp	r2, r3
 800072a:	d3e1      	bcc.n	80006f0 <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF);
 800072c:	8bfb      	ldrh	r3, [r7, #30]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	b29b      	uxth	r3, r3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3301      	adds	r3, #1
 800073c:	8bfa      	ldrh	r2, [r7, #30]
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3724      	adds	r7, #36	@ 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_DMA_Init+0x38>)
 800075c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800075e:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <MX_DMA_Init+0x38>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6493      	str	r3, [r2, #72]	@ 0x48
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_DMA_Init+0x38>)
 8000768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2102      	movs	r1, #2
 8000776:	200f      	movs	r0, #15
 8000778:	f001 ff67 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800077c:	200f      	movs	r0, #15
 800077e:	f001 ff80 	bl	8002682 <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <resetFrameState>:
* Zmienne globalne:
*   - in_frame: Flaga oznaczająca czy jesteśmy w trakcie odbierania ramki
*   - escape_detected: Flaga oznaczająca wykrycie znaku escape
*   - bx_index: Indeks w buforze odbiorczym
************************************************************************/
static void resetFrameState() {
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
    in_frame = false;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <resetFrameState+0x20>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <resetFrameState+0x24>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <resetFrameState+0x28>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	20000c28 	.word	0x20000c28
 80007b4:	20000c22 	.word	0x20000c22
 80007b8:	20000c24 	.word	0x20000c24

080007bc <stopAnimation>:

static void stopAnimation(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	text.isScrolling = false;
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <stopAnimation+0x18>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000cb4 	.word	0x20000cb4

080007d8 <isWithinBounds>:
* Korzysta z:
*   - LCD_WIDTH: Stała określająca szerokość ekranu
*   - LCD_HEIGHT: Stała określająca wysokość ekranu
************************************************************************/
static bool isWithinBounds(int x, int y)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <isWithinBounds+0x26>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b9f      	cmp	r3, #159	@ 0x9f
 80007ec:	dc07      	bgt.n	80007fe <isWithinBounds+0x26>
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db04      	blt.n	80007fe <isWithinBounds+0x26>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007f8:	dc01      	bgt.n	80007fe <isWithinBounds+0x26>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <isWithinBounds+0x28>
 80007fe:	2300      	movs	r3, #0
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <safeCompare>:

static bool safeCompare(const char* str1, const char* str2, size_t len)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
	if(str1 == NULL || str2 == NULL)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <safeCompare+0x18>
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <safeCompare+0x1c>
	{
		return false;
 800082a:	2300      	movs	r3, #0
 800082c:	e00a      	b.n	8000844 <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f007 fc28 	bl	8008088 <memcmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <isValidTriangle>:



static bool isValidTriangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t x3, int16_t y3) {
 800084c:	b490      	push	{r4, r7}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	4604      	mov	r4, r0
 8000854:	4608      	mov	r0, r1
 8000856:	4611      	mov	r1, r2
 8000858:	461a      	mov	r2, r3
 800085a:	4623      	mov	r3, r4
 800085c:	80fb      	strh	r3, [r7, #6]
 800085e:	4603      	mov	r3, r0
 8000860:	80bb      	strh	r3, [r7, #4]
 8000862:	460b      	mov	r3, r1
 8000864:	807b      	strh	r3, [r7, #2]
 8000866:	4613      	mov	r3, r2
 8000868:	803b      	strh	r3, [r7, #0]
    // Obliczamy kwadraty długości boków
    int32_t a2 = (int32_t)(x2 - x1) * (x2 - x1) + (int32_t)(y2 - y1) * (y2 - y1);
 800086a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800086e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000878:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800087c:	1a8a      	subs	r2, r1, r2
 800087e:	fb03 f202 	mul.w	r2, r3, r2
 8000882:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000886:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800088a:	1acb      	subs	r3, r1, r3
 800088c:	f9b7 0000 	ldrsh.w	r0, [r7]
 8000890:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000894:	1a41      	subs	r1, r0, r1
 8000896:	fb01 f303 	mul.w	r3, r1, r3
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
    int32_t b2 = (int32_t)(x3 - x2) * (x3 - x2) + (int32_t)(y3 - y2) * (y3 - y2);
 800089e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80008a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80008ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008b0:	1a8a      	subs	r2, r1, r2
 80008b2:	fb03 f202 	mul.w	r2, r3, r2
 80008b6:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 80008ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 80008c4:	f9b7 1000 	ldrsh.w	r1, [r7]
 80008c8:	1a41      	subs	r1, r0, r1
 80008ca:	fb01 f303 	mul.w	r3, r1, r3
 80008ce:	4413      	add	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
    int32_t c2 = (int32_t)(x1 - x3) * (x1 - x3) + (int32_t)(y1 - y3) * (y1 - y3);
 80008d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80008e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80008e4:	1a8a      	subs	r2, r1, r2
 80008e6:	fb03 f202 	mul.w	r2, r3, r2
 80008ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80008f2:	1acb      	subs	r3, r1, r3
 80008f4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80008f8:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 80008fc:	1a41      	subs	r1, r0, r1
 80008fe:	fb01 f303 	mul.w	r3, r1, r3
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]

    // Sprawdzamy nierówność trójkąta używając kwadratów długości
    // Jeśli a² + b² ≤ c² (lub podobnie dla innych kombinacji),
    // to trójkąt nie może istnieć
    if (a2 + b2 <= c2 || b2 + c2 <= a2 || c2 + a2 <= b2) {
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	4413      	add	r3, r2
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	429a      	cmp	r2, r3
 8000910:	da0b      	bge.n	800092a <isValidTriangle+0xde>
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	429a      	cmp	r2, r3
 800091c:	da05      	bge.n	800092a <isValidTriangle+0xde>
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	4413      	add	r3, r2
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	429a      	cmp	r2, r3
 8000928:	db01      	blt.n	800092e <isValidTriangle+0xe2>
        return false;
 800092a:	2300      	movs	r3, #0
 800092c:	e01f      	b.n	800096e <isValidTriangle+0x122>
    }

    // Sprawdzamy czy punkty nie leżą na jednej linii
    int32_t cross = (int32_t)(x2 - x1) * (y3 - y1) - (int32_t)(y2 - y1) * (x3 - x1);
 800092e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 800093c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000940:	1a8a      	subs	r2, r1, r2
 8000942:	fb03 f202 	mul.w	r2, r3, r2
 8000946:	f9b7 1000 	ldrsh.w	r1, [r7]
 800094a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800094e:	1acb      	subs	r3, r1, r3
 8000950:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8000954:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000958:	1a41      	subs	r1, r0, r1
 800095a:	fb01 f303 	mul.w	r3, r1, r3
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	60bb      	str	r3, [r7, #8]
    if (cross == 0) {
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <isValidTriangle+0x120>
        return false;
 8000968:	2300      	movs	r3, #0
 800096a:	e000      	b.n	800096e <isValidTriangle+0x122>
    }

    return true;
 800096c:	2301      	movs	r3, #1
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc90      	pop	{r4, r7}
 8000976:	4770      	bx	lr

08000978 <sendStatus>:
*   - color_map: Globalna tablica struktur ColorMap zawierająca:
*   - name: string z nazwą koloru
*   - value: wartość Color_t w formacie RGB565
************************************************************************/

void sendStatus(StatusCode_t status) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af02      	add	r7, sp, #8
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
    if(status < STATUS_COUNT) {
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b09      	cmp	r3, #9
 8000986:	d80a      	bhi.n	800099e <sendStatus+0x26>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "%s", STATUS_MESSAGES[status]);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <sendStatus+0x30>)
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <sendStatus+0x34>)
 8000994:	4a06      	ldr	r2, [pc, #24]	@ (80009b0 <sendStatus+0x38>)
 8000996:	2167      	movs	r1, #103	@ 0x67
 8000998:	2068      	movs	r0, #104	@ 0x68
 800099a:	f000 fba3 	bl	80010e4 <prepareFrame>
    }
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	08008b08 	.word	0x08008b08
 80009ac:	08008ab0 	.word	0x08008ab0
 80009b0:	08008ab4 	.word	0x08008ab4

080009b4 <parseColor>:



bool parseColor(const char* color_name, Color_t* color) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
    if (color_name == NULL || color == NULL) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <parseColor+0x16>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <parseColor+0x1a>
        return false;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e026      	b.n	8000a1c <parseColor+0x68>
    }

    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	e01f      	b.n	8000a14 <parseColor+0x60>
        size_t color_len = strlen(color_map[i].name); // Get the expected color name length
 80009d4:	4a13      	ldr	r2, [pc, #76]	@ (8000a24 <parseColor+0x70>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fbf7 	bl	80001d0 <strlen>
 80009e2:	60b8      	str	r0, [r7, #8]
        if (safeCompare(color_name, color_map[i].name, color_len)) {
 80009e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <parseColor+0x70>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	4619      	mov	r1, r3
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff0e 	bl	8000812 <safeCompare>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d008      	beq.n	8000a0e <parseColor+0x5a>
            *color = color_map[i].value;
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <parseColor+0x70>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	889a      	ldrh	r2, [r3, #4]
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	801a      	strh	r2, [r3, #0]
            return true;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e006      	b.n	8000a1c <parseColor+0x68>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b07      	cmp	r3, #7
 8000a18:	d9dc      	bls.n	80009d4 <parseColor+0x20>
        }
    }
    return false;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08008b30 	.word	0x08008b30

08000a28 <parseParameters>:
*      - Pomija białe znaki
*      - Wyodrębnia token do następnego przecinka
*      - Przetwarza token według odpowiedniego typu
*   4. Zwalnia va_list
************************************************************************/
bool parseParameters(const uint8_t* data, const char* format, ...) {
 8000a28:	b40e      	push	{r1, r2, r3}
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b099      	sub	sp, #100	@ 0x64
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
    if (!data || !format) {
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <parseParameters+0x16>
 8000a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <parseParameters+0x1a>
        return false;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e0b0      	b.n	8000ba4 <parseParameters+0x17c>
    }
    va_list args;
    va_start(args, format);
 8000a42:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const uint8_t* data_ptr = data;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const char* fmt_ptr = format;
 8000a4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t token[51];
    size_t token_idx = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	657b      	str	r3, [r7, #84]	@ 0x54

    // Store scrollSpeed for text length validation
    uint8_t scrollSpeed = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    bool hasScrollSpeed = false;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

    while (*fmt_ptr) {
 8000a60:	e09a      	b.n	8000b98 <parseParameters+0x170>
        switch (*fmt_ptr) {
 8000a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b75      	cmp	r3, #117	@ 0x75
 8000a68:	d007      	beq.n	8000a7a <parseParameters+0x52>
 8000a6a:	2b75      	cmp	r3, #117	@ 0x75
 8000a6c:	f300 808c 	bgt.w	8000b88 <parseParameters+0x160>
 8000a70:	2b73      	cmp	r3, #115	@ 0x73
 8000a72:	d023      	beq.n	8000abc <parseParameters+0x94>
 8000a74:	2b74      	cmp	r3, #116	@ 0x74
 8000a76:	d054      	beq.n	8000b22 <parseParameters+0xfa>
 8000a78:	e086      	b.n	8000b88 <parseParameters+0x160>
            case 'u': {
                uint8_t* value_ptr = va_arg(args, uint8_t*);
 8000a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a7c:	1d1a      	adds	r2, r3, #4
 8000a7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
                *value_ptr = *data_ptr++;  // Bezpośrednio odczytaj bajt
 8000a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a8e:	701a      	strb	r2, [r3, #0]

                // Store scrollSpeed for later validation
                if (!hasScrollSpeed) {
 8000a90:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000a94:	f083 0301 	eor.w	r3, r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d006      	beq.n	8000aac <parseParameters+0x84>
                    scrollSpeed = *value_ptr;
 8000a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                    hasScrollSpeed = true;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
                }

                // Jeśli następny znak to przecinek, pomiń go
                if (*data_ptr == ',') {
 8000aac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ab2:	d16b      	bne.n	8000b8c <parseParameters+0x164>
                    data_ptr++;
 8000ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
                break;
 8000aba:	e067      	b.n	8000b8c <parseParameters+0x164>
            }
            case 's': {
                // Zbierz znaki do przecinka
                token_idx = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	657b      	str	r3, [r7, #84]	@ 0x54
                while (*data_ptr && *data_ptr != ',' && token_idx <= 10) {
 8000ac0:	e00a      	b.n	8000ad8 <parseParameters+0xb0>
                    token[token_idx++] = *data_ptr++;
 8000ac2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000ac4:	1c53      	adds	r3, r2, #1
 8000ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aca:	1c59      	adds	r1, r3, #1
 8000acc:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	3360      	adds	r3, #96	@ 0x60
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && *data_ptr != ',' && token_idx <= 10) {
 8000ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d006      	beq.n	8000aee <parseParameters+0xc6>
 8000ae0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ae6:	d002      	beq.n	8000aee <parseParameters+0xc6>
 8000ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aea:	2b0a      	cmp	r3, #10
 8000aec:	d9e9      	bls.n	8000ac2 <parseParameters+0x9a>
                }
                if (*data_ptr == ',') data_ptr++;
 8000aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000af4:	d102      	bne.n	8000afc <parseParameters+0xd4>
 8000af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000af8:	3301      	adds	r3, #1
 8000afa:	65fb      	str	r3, [r7, #92]	@ 0x5c

                Color_t* color_ptr = va_arg(args, Color_t*);
 8000afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000afe:	1d1a      	adds	r2, r3, #4
 8000b00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	643b      	str	r3, [r7, #64]	@ 0x40
                if (!parseColor((char*)token, color_ptr)) {
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff51 	bl	80009b4 <parseColor>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f083 0301 	eor.w	r3, r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d038      	beq.n	8000b90 <parseParameters+0x168>
                    va_end(args);
                    return false;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e040      	b.n	8000ba4 <parseParameters+0x17c>
                }
                break;
            }
            case 't': {
                token_idx = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	657b      	str	r3, [r7, #84]	@ 0x54
                while (*data_ptr && token_idx < 50) {
 8000b26:	e00a      	b.n	8000b3e <parseParameters+0x116>
                    token[token_idx++] = *data_ptr++;
 8000b28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000b2a:	1c53      	adds	r3, r2, #1
 8000b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b30:	1c59      	adds	r1, r3, #1
 8000b32:	6579      	str	r1, [r7, #84]	@ 0x54
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	3360      	adds	r3, #96	@ 0x60
 8000b38:	443b      	add	r3, r7
 8000b3a:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && token_idx < 50) {
 8000b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <parseParameters+0x124>
 8000b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b48:	2b31      	cmp	r3, #49	@ 0x31
 8000b4a:	d9ed      	bls.n	8000b28 <parseParameters+0x100>
                }

                size_t maxLength = (scrollSpeed == 0) ? 25 : 50;
 8000b4c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <parseParameters+0x130>
 8000b54:	2319      	movs	r3, #25
 8000b56:	e000      	b.n	8000b5a <parseParameters+0x132>
 8000b58:	2332      	movs	r3, #50	@ 0x32
 8000b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (token_idx > maxLength) {
 8000b5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d904      	bls.n	8000b6e <parseParameters+0x146>
                    va_end(args);
                    sendStatus(ERR_TOO_MUCH_TEXT);
 8000b64:	2008      	movs	r0, #8
 8000b66:	f7ff ff07 	bl	8000978 <sendStatus>
                    return false;  // Tekst jest za długi
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e01a      	b.n	8000ba4 <parseParameters+0x17c>
                }

                char* text_ptr = va_arg(args, char*);
 8000b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b70:	1d1a      	adds	r2, r3, #4
 8000b72:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	647b      	str	r3, [r7, #68]	@ 0x44
                memcpy(text_ptr, token, token_idx);
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000b7e:	4619      	mov	r1, r3
 8000b80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000b82:	f007 fad9 	bl	8008138 <memcpy>
                break;
 8000b86:	e004      	b.n	8000b92 <parseParameters+0x16a>
            }
            default:
                va_end(args);
                return false;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e00b      	b.n	8000ba4 <parseParameters+0x17c>
                break;
 8000b8c:	bf00      	nop
 8000b8e:	e000      	b.n	8000b92 <parseParameters+0x16a>
                break;
 8000b90:	bf00      	nop
        }
        fmt_ptr++;
 8000b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b94:	3301      	adds	r3, #1
 8000b96:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*fmt_ptr) {
 8000b98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f47f af60 	bne.w	8000a62 <parseParameters+0x3a>
    }

    va_end(args);
    return true;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3764      	adds	r7, #100	@ 0x64
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bae:	b003      	add	sp, #12
 8000bb0:	4770      	bx	lr

08000bb2 <clearFrame>:
*   - Parametry: (void* ptr, int value, size_t num)
*   - ptr: Wskaźnik na początek bloku pamięci
*   - value: Wartość do wypełnienia (0 dla wyzerowania)
*   - num: Liczba bajtów do wypełnienia
************************************************************************/
void clearFrame(Frame* frame) {
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00d      	beq.n	8000bdc <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3305      	adds	r3, #5
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 fa6d 	bl	80080a8 <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f007 fa66 	bl	80080a8 <memset>
    }
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <executeONK>:
*      - Parametry: (x, y, r, color)
*
*   3. prepareFrame(): Wysyła odpowiedź w przypadku błędu
************************************************************************/
static void executeONK(Frame *frame)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af04      	add	r7, sp, #16
 8000bea:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73bb      	strb	r3, [r7, #14]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	737b      	strb	r3, [r7, #13]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	1d58      	adds	r0, r3, #5
 8000c04:	f107 010e 	add.w	r1, r7, #14
 8000c08:	f107 020f 	add.w	r2, r7, #15
 8000c0c:	f107 030a 	add.w	r3, r7, #10
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	f107 030d 	add.w	r3, r7, #13
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4914      	ldr	r1, [pc, #80]	@ (8000c74 <executeONK+0x90>)
 8000c22:	f7ff ff01 	bl	8000a28 <parseParameters>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f083 0301 	eor.w	r3, r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <executeONK+0x56>
    {
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000c32:	2009      	movs	r0, #9
 8000c34:	f7ff fea0 	bl	8000978 <sendStatus>
 8000c38:	e019      	b.n	8000c6e <executeONK+0x8a>
        return;
    }
	switch(filling)
 8000c3a:	7b3b      	ldrb	r3, [r7, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <executeONK+0x62>
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d00a      	beq.n	8000c5a <executeONK+0x76>
 8000c44:	e013      	b.n	8000c6e <executeONK+0x8a>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	b218      	sxth	r0, r3
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	b219      	sxth	r1, r3
 8000c4e:	7b7b      	ldrb	r3, [r7, #13]
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	897b      	ldrh	r3, [r7, #10]
 8000c54:	f006 fdd8 	bl	8007808 <hagl_draw_circle>
		break;
 8000c58:	e009      	b.n	8000c6e <executeONK+0x8a>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	b218      	sxth	r0, r3
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	b219      	sxth	r1, r3
 8000c62:	7b7b      	ldrb	r3, [r7, #13]
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	897b      	ldrh	r3, [r7, #10]
 8000c68:	f006 fefd 	bl	8007a66 <hagl_fill_circle>
		break;
 8000c6c:	bf00      	nop
	}
}
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08008ab8 	.word	0x08008ab8

08000c78 <executeONP>:
*   2. hagl_draw_rectangle() / hagl_fill_rectangle():
*      Funkcje HAGL do rysowania prostokątów
*      - Parametry: (x, y, width, height, color)
************************************************************************/
static void executeONP(Frame *frame)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b089      	sub	sp, #36	@ 0x24
 8000c7c:	af04      	add	r7, sp, #16
 8000c7e:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	2300      	movs	r3, #0
 8000c86:	73bb      	strb	r3, [r7, #14]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	737b      	strb	r3, [r7, #13]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	733b      	strb	r3, [r7, #12]
 8000c90:	2300      	movs	r3, #0
 8000c92:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	1d58      	adds	r0, r3, #5
 8000c9c:	f107 010e 	add.w	r1, r7, #14
 8000ca0:	f107 020f 	add.w	r2, r7, #15
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	9303      	str	r3, [sp, #12]
 8000caa:	f107 030b 	add.w	r3, r7, #11
 8000cae:	9302      	str	r3, [sp, #8]
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	f107 030d 	add.w	r3, r7, #13
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	4919      	ldr	r1, [pc, #100]	@ (8000d24 <executeONP+0xac>)
 8000cc0:	f7ff feb2 	bl	8000a28 <parseParameters>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <executeONP+0x60>
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000cd0:	2009      	movs	r0, #9
 8000cd2:	f7ff fe51 	bl	8000978 <sendStatus>
 8000cd6:	e021      	b.n	8000d1c <executeONP+0xa4>
		return;
	}

	switch(filling)
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <executeONP+0x6c>
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d00e      	beq.n	8000d00 <executeONP+0x88>
 8000ce2:	e01b      	b.n	8000d1c <executeONP+0xa4>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	b218      	sxth	r0, r3
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	b219      	sxth	r1, r3
 8000cec:	7b7b      	ldrb	r3, [r7, #13]
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	7b3b      	ldrb	r3, [r7, #12]
 8000cf2:	b21c      	sxth	r4, r3
 8000cf4:	893b      	ldrh	r3, [r7, #8]
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	4623      	mov	r3, r4
 8000cfa:	f006 fa1f 	bl	800713c <hagl_draw_rectangle>
		break;
 8000cfe:	e00d      	b.n	8000d1c <executeONP+0xa4>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	b218      	sxth	r0, r3
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	b219      	sxth	r1, r3
 8000d08:	7b7b      	ldrb	r3, [r7, #13]
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	7b3b      	ldrb	r3, [r7, #12]
 8000d0e:	b21c      	sxth	r4, r3
 8000d10:	893b      	ldrh	r3, [r7, #8]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4623      	mov	r3, r4
 8000d16:	f006 fa97 	bl	8007248 <hagl_fill_rectangle>
		break;
 8000d1a:	bf00      	nop
	}
}
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08008ac0 	.word	0x08008ac0

08000d28 <executeONT>:
*   2. hagl_draw_triangle() / hagl_fill_triangle():
*      Funkcje HAGL do rysowania trójkątów
*      - Parametry: (x1,y1, x2,y2, x3,y3, color)
************************************************************************/
static void executeONT(Frame *frame)
{
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	b08d      	sub	sp, #52	@ 0x34
 8000d2c:	af06      	add	r7, sp, #24
 8000d2e:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	75fb      	strb	r3, [r7, #23]
 8000d34:	2300      	movs	r3, #0
 8000d36:	75bb      	strb	r3, [r7, #22]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	757b      	strb	r3, [r7, #21]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	753b      	strb	r3, [r7, #20]
 8000d40:	2300      	movs	r3, #0
 8000d42:	74fb      	strb	r3, [r7, #19]
 8000d44:	2300      	movs	r3, #0
 8000d46:	74bb      	strb	r3, [r7, #18]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1d58      	adds	r0, r3, #5
 8000d54:	f107 0116 	add.w	r1, r7, #22
 8000d58:	f107 0217 	add.w	r2, r7, #23
 8000d5c:	f107 030e 	add.w	r3, r7, #14
 8000d60:	9305      	str	r3, [sp, #20]
 8000d62:	f107 0311 	add.w	r3, r7, #17
 8000d66:	9304      	str	r3, [sp, #16]
 8000d68:	f107 0312 	add.w	r3, r7, #18
 8000d6c:	9303      	str	r3, [sp, #12]
 8000d6e:	f107 0313 	add.w	r3, r7, #19
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	f107 0315 	add.w	r3, r7, #21
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	460b      	mov	r3, r1
 8000d82:	492f      	ldr	r1, [pc, #188]	@ (8000e40 <executeONT+0x118>)
 8000d84:	f7ff fe50 	bl	8000a28 <parseParameters>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f083 0301 	eor.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <executeONT+0x74>
    {
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000d94:	2009      	movs	r0, #9
 8000d96:	f7ff fdef 	bl	8000978 <sendStatus>
        return;
 8000d9a:	e04d      	b.n	8000e38 <executeONT+0x110>
    }
    if (!isValidTriangle(x1, y1, x2, y2, x3, y3)) {
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	b218      	sxth	r0, r3
 8000da0:	7dbb      	ldrb	r3, [r7, #22]
 8000da2:	b219      	sxth	r1, r3
 8000da4:	7d7b      	ldrb	r3, [r7, #21]
 8000da6:	b21c      	sxth	r4, r3
 8000da8:	7d3b      	ldrb	r3, [r7, #20]
 8000daa:	b21d      	sxth	r5, r3
 8000dac:	7cfb      	ldrb	r3, [r7, #19]
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	7cba      	ldrb	r2, [r7, #18]
 8000db2:	b212      	sxth	r2, r2
 8000db4:	9201      	str	r2, [sp, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	462b      	mov	r3, r5
 8000dba:	4622      	mov	r2, r4
 8000dbc:	f7ff fd46 	bl	800084c <isValidTriangle>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f083 0301 	eor.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <executeONT+0xac>
    	sendStatus(ERR_INVALID_TRIANGLE);
 8000dcc:	2007      	movs	r0, #7
 8000dce:	f7ff fdd3 	bl	8000978 <sendStatus>
            return;
 8000dd2:	e031      	b.n	8000e38 <executeONT+0x110>
    }
    switch(filling)
 8000dd4:	7c7b      	ldrb	r3, [r7, #17]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <executeONT+0xb8>
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d016      	beq.n	8000e0c <executeONT+0xe4>
 8000dde:	e02b      	b.n	8000e38 <executeONT+0x110>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	b218      	sxth	r0, r3
 8000de4:	7dbb      	ldrb	r3, [r7, #22]
 8000de6:	b21c      	sxth	r4, r3
 8000de8:	7d7b      	ldrb	r3, [r7, #21]
 8000dea:	b21d      	sxth	r5, r3
 8000dec:	7d3b      	ldrb	r3, [r7, #20]
 8000dee:	b21e      	sxth	r6, r3
 8000df0:	7cfb      	ldrb	r3, [r7, #19]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	7cba      	ldrb	r2, [r7, #18]
 8000df6:	b212      	sxth	r2, r2
 8000df8:	89f9      	ldrh	r1, [r7, #14]
 8000dfa:	9102      	str	r1, [sp, #8]
 8000dfc:	9201      	str	r2, [sp, #4]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	4633      	mov	r3, r6
 8000e02:	462a      	mov	r2, r5
 8000e04:	4621      	mov	r1, r4
 8000e06:	f007 f8b9 	bl	8007f7c <hagl_draw_triangle>
            break;
 8000e0a:	e015      	b.n	8000e38 <executeONT+0x110>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	b218      	sxth	r0, r3
 8000e10:	7dbb      	ldrb	r3, [r7, #22]
 8000e12:	b21c      	sxth	r4, r3
 8000e14:	7d7b      	ldrb	r3, [r7, #21]
 8000e16:	b21d      	sxth	r5, r3
 8000e18:	7d3b      	ldrb	r3, [r7, #20]
 8000e1a:	b21e      	sxth	r6, r3
 8000e1c:	7cfb      	ldrb	r3, [r7, #19]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	7cba      	ldrb	r2, [r7, #18]
 8000e22:	b212      	sxth	r2, r2
 8000e24:	89f9      	ldrh	r1, [r7, #14]
 8000e26:	9102      	str	r1, [sp, #8]
 8000e28:	9201      	str	r2, [sp, #4]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	4633      	mov	r3, r6
 8000e2e:	462a      	mov	r2, r5
 8000e30:	4621      	mov	r1, r4
 8000e32:	f007 f8c9 	bl	8007fc8 <hagl_fill_triangle>
            break;
 8000e36:	bf00      	nop
    }
}
 8000e38:	371c      	adds	r7, #28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08008ac8 	.word	0x08008ac8

08000e44 <executeONN>:
*      - Parametry: (wtext, x, y, color, font)
*      - Dostępne fonty: font5x7, font5x8, font6x9

************************************************************************/
static void executeONN(Frame *frame)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	@ 0x50
 8000e48:	af04      	add	r7, sp, #16
 8000e4a:	6078      	str	r0, [r7, #4]
    const char charText[50] = {0};
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	222e      	movs	r2, #46	@ 0x2e
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f007 f925 	bl	80080a8 <memset>
    if (!parseParameters(frame->data, "uuuust", &text.x, &text.y, &text.fontSize, &text.scrollSpeed, &text.color, charText)) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1d58      	adds	r0, r3, #5
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	9303      	str	r3, [sp, #12]
 8000e68:	4b48      	ldr	r3, [pc, #288]	@ (8000f8c <executeONN+0x148>)
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	4b48      	ldr	r3, [pc, #288]	@ (8000f90 <executeONN+0x14c>)
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	4b48      	ldr	r3, [pc, #288]	@ (8000f94 <executeONN+0x150>)
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4b48      	ldr	r3, [pc, #288]	@ (8000f98 <executeONN+0x154>)
 8000e76:	4a49      	ldr	r2, [pc, #292]	@ (8000f9c <executeONN+0x158>)
 8000e78:	4949      	ldr	r1, [pc, #292]	@ (8000fa0 <executeONN+0x15c>)
 8000e7a:	f7ff fdd5 	bl	8000a28 <parseParameters>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <executeONN+0x4e>
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000e8a:	2009      	movs	r0, #9
 8000e8c:	f7ff fd74 	bl	8000978 <sendStatus>
 8000e90:	e079      	b.n	8000f86 <executeONN+0x142>
        return;
    }

    // Zapisz początkowe pozycje
    memset(text.displayText, 0, sizeof(text.displayText));
 8000e92:	22c8      	movs	r2, #200	@ 0xc8
 8000e94:	2100      	movs	r1, #0
 8000e96:	4843      	ldr	r0, [pc, #268]	@ (8000fa4 <executeONN+0x160>)
 8000e98:	f007 f906 	bl	80080a8 <memset>
    text.startX = text.x;
 8000e9c:	4b41      	ldr	r3, [pc, #260]	@ (8000fa4 <executeONN+0x160>)
 8000e9e:	f9b3 20c8 	ldrsh.w	r2, [r3, #200]	@ 0xc8
 8000ea2:	4b40      	ldr	r3, [pc, #256]	@ (8000fa4 <executeONN+0x160>)
 8000ea4:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    text.startY = text.y;  // Ta wartość będzie używana do stałej pozycji Y
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <executeONN+0x160>)
 8000eaa:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 8000eae:	4b3d      	ldr	r3, [pc, #244]	@ (8000fa4 <executeONN+0x160>)
 8000eb0:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
    text.textLength = 0;
 8000eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa4 <executeONN+0x160>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    text.firstIteration = true;
 8000ebc:	4b39      	ldr	r3, [pc, #228]	@ (8000fa4 <executeONN+0x160>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
    // Konwersja tekstu
    while (charText[text.textLength] && text.textLength < 50) {
 8000ec4:	e015      	b.n	8000ef2 <executeONN+0xae>
        text.displayText[text.textLength] = (wchar_t)charText[text.textLength];
 8000ec6:	4b37      	ldr	r3, [pc, #220]	@ (8000fa4 <executeONN+0x160>)
 8000ec8:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000ecc:	3340      	adds	r3, #64	@ 0x40
 8000ece:	443b      	add	r3, r7
 8000ed0:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8000ed4:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <executeONN+0x160>)
 8000ed6:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b31      	ldr	r3, [pc, #196]	@ (8000fa4 <executeONN+0x160>)
 8000ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        text.textLength++;
 8000ee2:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <executeONN+0x160>)
 8000ee4:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <executeONN+0x160>)
 8000eee:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    while (charText[text.textLength] && text.textLength < 50) {
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <executeONN+0x160>)
 8000ef4:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000ef8:	3340      	adds	r3, #64	@ 0x40
 8000efa:	443b      	add	r3, r7
 8000efc:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <executeONN+0xca>
 8000f04:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <executeONN+0x160>)
 8000f06:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8000f0a:	2b31      	cmp	r3, #49	@ 0x31
 8000f0c:	d9db      	bls.n	8000ec6 <executeONN+0x82>
    }

    text.isScrolling = (text.scrollSpeed > 0);
 8000f0e:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <executeONN+0x160>)
 8000f10:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <executeONN+0x160>)
 8000f20:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    text.lastUpdate = HAL_GetTick();
 8000f24:	f001 faaa 	bl	800247c <HAL_GetTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <executeONN+0x160>)
 8000f2c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    const uint8_t* font;
    switch(text.fontSize) {
 8000f30:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <executeONN+0x160>)
 8000f32:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d00c      	beq.n	8000f54 <executeONN+0x110>
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	dc0d      	bgt.n	8000f5a <executeONN+0x116>
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d002      	beq.n	8000f48 <executeONN+0x104>
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d003      	beq.n	8000f4e <executeONN+0x10a>
 8000f46:	e008      	b.n	8000f5a <executeONN+0x116>
        case 1: font = font5x7; break;
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <executeONN+0x164>)
 8000f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f4c:	e007      	b.n	8000f5e <executeONN+0x11a>
        case 2: font = font5x8; break;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <executeONN+0x168>)
 8000f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f52:	e004      	b.n	8000f5e <executeONN+0x11a>
        case 3: font = font6x9; break;
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <executeONN+0x16c>)
 8000f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f58:	e001      	b.n	8000f5e <executeONN+0x11a>
        default: font = font5x7;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <executeONN+0x164>)
 8000f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    if(!text.scrollSpeed) {
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <executeONN+0x160>)
 8000f60:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10e      	bne.n	8000f86 <executeONN+0x142>
        hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8000f68:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <executeONN+0x160>)
 8000f6a:	f9b3 10c8 	ldrsh.w	r1, [r3, #200]	@ 0xc8
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <executeONN+0x160>)
 8000f70:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <executeONN+0x160>)
 8000f76:	f8b3 00d2 	ldrh.w	r0, [r3, #210]	@ 0xd2
 8000f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <executeONN+0x160>)
 8000f82:	f006 fbf2 	bl	800776a <hagl_put_text>
    }
}
 8000f86:	3740      	adds	r7, #64	@ 0x40
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000d86 	.word	0x20000d86
 8000f90:	20000d85 	.word	0x20000d85
 8000f94:	20000d84 	.word	0x20000d84
 8000f98:	20000d7e 	.word	0x20000d7e
 8000f9c:	20000d7c 	.word	0x20000d7c
 8000fa0:	08008ad4 	.word	0x08008ad4
 8000fa4:	20000cb4 	.word	0x20000cb4
 8000fa8:	08008b70 	.word	0x08008b70
 8000fac:	0800c078 	.word	0x0800c078
 8000fb0:	0800ef1c 	.word	0x0800ef1c

08000fb4 <executeOFF>:
*   case 1: Czyszczenie ekranu
*     - Używa hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK)
*
************************************************************************/
static void executeOFF(Frame *frame)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	795b      	ldrb	r3, [r3, #5]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <executeOFF+0x16>
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d006      	beq.n	8000fd6 <executeOFF+0x22>
 8000fc8:	e008      	b.n	8000fdc <executeOFF+0x28>
	{
	case 0:
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <executeOFF+0x38>)
 8000fd0:	f001 ff92 	bl	8002ef8 <HAL_GPIO_WritePin>
		break;
 8000fd4:	e006      	b.n	8000fe4 <executeOFF+0x30>
	case 1:
		lcdClear();
 8000fd6:	f000 fda5 	bl	8001b24 <lcdClear>
		break;
 8000fda:	e003      	b.n	8000fe4 <executeOFF+0x30>
	default:
    	sendStatus(ERR_WRONG_OFF_DATA);
 8000fdc:	2005      	movs	r0, #5
 8000fde:	f7ff fccb 	bl	8000978 <sendStatus>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	48000400 	.word	0x48000400

08000ff0 <parseCoordinates>:
*      - Kolejne z NULL
*
*   3. atoi(): Konwertuje string na int
************************************************************************/
bool parseCoordinates(const uint8_t* data, int* x, int* y)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	 *x = data[0];  // Pierwszy bajt to x
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	601a      	str	r2, [r3, #0]
	 *y = data[2];  // Drugi bajt to y
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3302      	adds	r3, #2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
    return true;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <byteStuffing>:
*   '}' 			 	-> "}]"
*   '~'              	-> "}^"
*   '`'              	-> "}&"

************************************************************************/
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	e04b      	b.n	80010ce <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001040:	d10e      	bne.n	8001060 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	617a      	str	r2, [r7, #20]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	227d      	movs	r2, #125	@ 0x7d
 800104e:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	617a      	str	r2, [r7, #20]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	225d      	movs	r2, #93	@ 0x5d
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	e033      	b.n	80010c8 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b7e      	cmp	r3, #126	@ 0x7e
 800106a:	d10e      	bne.n	800108a <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	617a      	str	r2, [r7, #20]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	227d      	movs	r2, #125	@ 0x7d
 8001078:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	617a      	str	r2, [r7, #20]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	225e      	movs	r2, #94	@ 0x5e
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e01e      	b.n	80010c8 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b60      	cmp	r3, #96	@ 0x60
 8001094:	d10e      	bne.n	80010b4 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	617a      	str	r2, [r7, #20]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	227d      	movs	r2, #125	@ 0x7d
 80010a2:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	617a      	str	r2, [r7, #20]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	2226      	movs	r2, #38	@ 0x26
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e009      	b.n	80010c8 <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	441a      	add	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	1c59      	adds	r1, r3, #1
 80010be:	6179      	str	r1, [r7, #20]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	440b      	add	r3, r1
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	3301      	adds	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3af      	bcc.n	8001036 <byteStuffing+0x16>
        }
    }
    return j;
 80010d6:	697b      	ldr	r3, [r7, #20]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <prepareFrame>:
*   4. Konwertuje CRC na hex
*   5. Przygotowuje payload
*   6. Wykonuje byte stuffing
*   7. Wysyła ramkę
************************************************************************/
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 80010e4:	b408      	push	{r3}
 80010e6:	b580      	push	{r7, lr}
 80010e8:	f2ad 4d64 	subw	sp, sp, #1124	@ 0x464
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80010f2:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80010fc:	f2a3 4359 	subw	r3, r3, #1113	@ 0x459
 8001100:	4602      	mov	r2, r0
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001108:	f2a3 435a 	subw	r3, r3, #1114	@ 0x45a
 800110c:	460a      	mov	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
    Frame frame = {0};
 8001110:	f507 7371 	add.w	r3, r7, #964	@ 0x3c4
 8001114:	2285      	movs	r2, #133	@ 0x85
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f006 ffc5 	bl	80080a8 <memset>
    frame.sender = sender;
 800111e:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001122:	f2a3 4359 	subw	r3, r3, #1113	@ 0x459
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	f887 33c4 	strb.w	r3, [r7, #964]	@ 0x3c4
    frame.receiver = receiver;
 800112c:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001130:	f2a3 435a 	subw	r3, r3, #1114	@ 0x45a
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	f887 33c5 	strb.w	r3, [r7, #965]	@ 0x3c5
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 800113a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800113e:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8001142:	f507 7271 	add.w	r2, r7, #964	@ 0x3c4
 8001146:	1c90      	adds	r0, r2, #2
 8001148:	2203      	movs	r2, #3
 800114a:	6819      	ldr	r1, [r3, #0]
 800114c:	f006 ffb4 	bl	80080b8 <strncpy>

    // Stały bufor na sformatowane dane
    uint8_t formattedData[MAX_DATA_SIZE];
    va_list args;
    va_start(args, format);
 8001150:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 8001154:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001158:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800115c:	601a      	str	r2, [r3, #0]
    vsnprintf((char *)formattedData, MAX_DATA_SIZE, format, args);
 800115e:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001162:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001166:	f507 7051 	add.w	r0, r7, #836	@ 0x344
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8d7 246c 	ldr.w	r2, [r7, #1132]	@ 0x46c
 8001170:	2180      	movs	r1, #128	@ 0x80
 8001172:	f006 ff7b 	bl	800806c <vsniprintf>
    va_end(args);

    size_t dataLen = strlen((char *)formattedData);
 8001176:	f507 7351 	add.w	r3, r7, #836	@ 0x344
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f828 	bl	80001d0 <strlen>
 8001180:	f8c7 045c 	str.w	r0, [r7, #1116]	@ 0x45c

    // Bufor na dane do obliczenia CRC
    uint8_t crcInput[MAX_FRAME_WITHOUT_STUFFING];
    size_t crcInputLen = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458

    // Przygotowanie danych do CRC
    crcInput[crcInputLen++] = frame.sender;
 800118a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	f8c7 2458 	str.w	r2, [r7, #1112]	@ 0x458
 8001194:	f897 13c4 	ldrb.w	r1, [r7, #964]	@ 0x3c4
 8001198:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 800119c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80011a0:	54d1      	strb	r1, [r2, r3]
    crcInput[crcInputLen++] = frame.receiver;
 80011a2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	f8c7 2458 	str.w	r2, [r7, #1112]	@ 0x458
 80011ac:	f897 13c5 	ldrb.w	r1, [r7, #965]	@ 0x3c5
 80011b0:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80011b4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80011b8:	54d1      	strb	r1, [r2, r3]
    memcpy(crcInput + crcInputLen, frame.command, COMMAND_LENGTH);
 80011ba:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80011be:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80011c2:	4413      	add	r3, r2
 80011c4:	461a      	mov	r2, r3
 80011c6:	f207 33c6 	addw	r3, r7, #966	@ 0x3c6
 80011ca:	8819      	ldrh	r1, [r3, #0]
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	8011      	strh	r1, [r2, #0]
 80011d0:	7093      	strb	r3, [r2, #2]
    crcInputLen += COMMAND_LENGTH;
 80011d2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80011d6:	3303      	adds	r3, #3
 80011d8:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
    memcpy(crcInput + crcInputLen, formattedData, dataLen);
 80011dc:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80011e0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80011e4:	4413      	add	r3, r2
 80011e6:	f507 7151 	add.w	r1, r7, #836	@ 0x344
 80011ea:	f8d7 245c 	ldr.w	r2, [r7, #1116]	@ 0x45c
 80011ee:	4618      	mov	r0, r3
 80011f0:	f006 ffa2 	bl	8008138 <memcpy>
    crcInputLen += dataLen;
 80011f4:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 80011f8:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 80011fc:	4413      	add	r3, r2
 80011fe:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458

    // Obliczenie CRC
    uint8_t crcOutput[2];
    calculateCrc16(crcInput, crcInputLen, crcOutput);
 8001202:	f507 722d 	add.w	r2, r7, #692	@ 0x2b4
 8001206:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800120a:	f8d7 1458 	ldr.w	r1, [r7, #1112]	@ 0x458
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fa62 	bl	80006d8 <calculateCrc16>

    // Przygotowanie surowej ramki
    uint8_t rawPayload[MAX_FRAME_WITHOUT_STUFFING];
    size_t rawPayloadLen = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454

    rawPayload[rawPayloadLen++] = frame.sender;
 800121a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	f8c7 2454 	str.w	r2, [r7, #1108]	@ 0x454
 8001224:	f897 13c4 	ldrb.w	r1, [r7, #964]	@ 0x3c4
 8001228:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 800122c:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8001230:	54d1      	strb	r1, [r2, r3]
    rawPayload[rawPayloadLen++] = frame.receiver;
 8001232:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	f8c7 2454 	str.w	r2, [r7, #1108]	@ 0x454
 800123c:	f897 13c5 	ldrb.w	r1, [r7, #965]	@ 0x3c5
 8001240:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 8001244:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8001248:	54d1      	strb	r1, [r2, r3]
    memcpy(rawPayload + rawPayloadLen, frame.command, COMMAND_LENGTH);
 800124a:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800124e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001252:	4413      	add	r3, r2
 8001254:	461a      	mov	r2, r3
 8001256:	f207 33c6 	addw	r3, r7, #966	@ 0x3c6
 800125a:	8819      	ldrh	r1, [r3, #0]
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	8011      	strh	r1, [r2, #0]
 8001260:	7093      	strb	r3, [r2, #2]
    rawPayloadLen += COMMAND_LENGTH;
 8001262:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001266:	3303      	adds	r3, #3
 8001268:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
    memcpy(rawPayload + rawPayloadLen, formattedData, dataLen);
 800126c:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8001270:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001274:	4413      	add	r3, r2
 8001276:	f507 7151 	add.w	r1, r7, #836	@ 0x344
 800127a:	f8d7 245c 	ldr.w	r2, [r7, #1116]	@ 0x45c
 800127e:	4618      	mov	r0, r3
 8001280:	f006 ff5a 	bl	8008138 <memcpy>
    rawPayloadLen += dataLen;
 8001284:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 8001288:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 800128c:	4413      	add	r3, r2
 800128e:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454

    rawPayload[rawPayloadLen++] = crcOutput[0];
 8001292:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	f8c7 2454 	str.w	r2, [r7, #1108]	@ 0x454
 800129c:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80012a0:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80012a4:	7811      	ldrb	r1, [r2, #0]
 80012a6:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80012aa:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 80012ae:	54d1      	strb	r1, [r2, r3]
    rawPayload[rawPayloadLen++] = crcOutput[1];
 80012b0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	f8c7 2454 	str.w	r2, [r7, #1108]	@ 0x454
 80012ba:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80012be:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80012c2:	7851      	ldrb	r1, [r2, #1]
 80012c4:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80012c8:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 80012cc:	54d1      	strb	r1, [r2, r3]

    uint8_t stuffedPayload[MAX_FRAME_LEN];
    size_t stuffedLen = byteStuffing(rawPayload, rawPayloadLen, stuffedPayload);
 80012ce:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80012d2:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 80012d6:	f8d7 1454 	ldr.w	r1, [r7, #1108]	@ 0x454
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fea0 	bl	8001020 <byteStuffing>
 80012e0:	f8c7 0450 	str.w	r0, [r7, #1104]	@ 0x450

    uint8_t finalFrame[MAX_FRAME_LEN + 2];
    size_t finalLen = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c

    finalFrame[finalLen++] = FRAME_START;
 80012ea:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	f8c7 244c 	str.w	r2, [r7, #1100]	@ 0x44c
 80012f4:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80012f8:	f2a2 4254 	subw	r2, r2, #1108	@ 0x454
 80012fc:	217e      	movs	r1, #126	@ 0x7e
 80012fe:	54d1      	strb	r1, [r2, r3]
    memcpy(finalFrame + finalLen, stuffedPayload, stuffedLen);
 8001300:	f107 020c 	add.w	r2, r7, #12
 8001304:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001308:	4413      	add	r3, r2
 800130a:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 800130e:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8001312:	4618      	mov	r0, r3
 8001314:	f006 ff10 	bl	8008138 <memcpy>
    finalLen += stuffedLen;
 8001318:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 800131c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001320:	4413      	add	r3, r2
 8001322:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
    finalFrame[finalLen++] = FRAME_END;
 8001326:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	f8c7 244c 	str.w	r2, [r7, #1100]	@ 0x44c
 8001330:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 8001334:	f2a2 4254 	subw	r2, r2, #1108	@ 0x454
 8001338:	2160      	movs	r1, #96	@ 0x60
 800133a:	54d1      	strb	r1, [r2, r3]
    USART_sendFrame(finalFrame, finalLen);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f967 	bl	8000618 <USART_sendFrame>
}
 800134a:	bf00      	nop
 800134c:	f207 4764 	addw	r7, r7, #1124	@ 0x464
 8001350:	46bd      	mov	sp, r7
 8001352:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001356:	b001      	add	sp, #4
 8001358:	4770      	bx	lr

0800135a <decodeFrame>:
*
* Używa:
*   - memcpy: Kopiowanie danych
*   - calculateCrc16: Obliczanie sumy kontrolnej
************************************************************************/
bool decodeFrame(uint8_t *bx, Frame *frame, uint8_t len) {
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	4613      	mov	r3, r2
 8001366:	71fb      	strb	r3, [r7, #7]
    uint8_t ownCrc[2];
    uint8_t incCrc[2];

    if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_WITHOUT_STUFFING) {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b06      	cmp	r3, #6
 800136c:	d95c      	bls.n	8001428 <decodeFrame+0xce>
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b87      	cmp	r3, #135	@ 0x87
 8001372:	d859      	bhi.n	8001428 <decodeFrame+0xce>
        uint8_t k = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	75fb      	strb	r3, [r7, #23]
        frame->sender = bx[k++];
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	75fa      	strb	r2, [r7, #23]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	701a      	strb	r2, [r3, #0]
        frame->receiver = bx[k++];
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	75fa      	strb	r2, [r7, #23]
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	781a      	ldrb	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	705a      	strb	r2, [r3, #1]
        if(frame->sender != 'g')
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b67      	cmp	r3, #103	@ 0x67
 80013a2:	d004      	beq.n	80013ae <decodeFrame+0x54>
        {
        	sendStatus(ERR_WRONG_SENDER);
 80013a4:	2002      	movs	r0, #2
 80013a6:	f7ff fae7 	bl	8000978 <sendStatus>
        	return false;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e03d      	b.n	800142a <decodeFrame+0xd0>
        }


        memcpy(frame->command, &bx[k], COMMAND_LENGTH);
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1c98      	adds	r0, r3, #2
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	2203      	movs	r2, #3
 80013ba:	4619      	mov	r1, r3
 80013bc:	f006 febc 	bl	8008138 <memcpy>
        k += COMMAND_LENGTH;
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	3303      	adds	r3, #3
 80013c4:	75fb      	strb	r3, [r7, #23]

        uint8_t data_len = len - MIN_DECODED_FRAME_LEN; //to sprawdzic
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	3b07      	subs	r3, #7
 80013ca:	75bb      	strb	r3, [r7, #22]
        memcpy(frame->data, &bx[k], data_len);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1d58      	adds	r0, r3, #5
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	7dba      	ldrb	r2, [r7, #22]
 80013d8:	4619      	mov	r1, r3
 80013da:	f006 fead 	bl	8008138 <memcpy>
        frame->data[data_len] = '\0';
 80013de:	7dbb      	ldrb	r3, [r7, #22]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	2200      	movs	r2, #0
 80013e6:	715a      	strb	r2, [r3, #5]
        k += data_len;
 80013e8:	7dfa      	ldrb	r2, [r7, #23]
 80013ea:	7dbb      	ldrb	r3, [r7, #22]
 80013ec:	4413      	add	r3, r2
 80013ee:	75fb      	strb	r3, [r7, #23]

        memcpy(incCrc, &bx[k], 2);
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4413      	add	r3, r2
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	823b      	strh	r3, [r7, #16]
        calculateCrc16((uint8_t *)frame, k, ownCrc);
 80013fc:	7dfb      	ldrb	r3, [r7, #23]
 80013fe:	f107 0214 	add.w	r2, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	68b8      	ldr	r0, [r7, #8]
 8001406:	f7ff f967 	bl	80006d8 <calculateCrc16>
        if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 800140a:	7d3a      	ldrb	r2, [r7, #20]
 800140c:	7c3b      	ldrb	r3, [r7, #16]
 800140e:	429a      	cmp	r2, r3
 8001410:	d103      	bne.n	800141a <decodeFrame+0xc0>
 8001412:	7d7a      	ldrb	r2, [r7, #21]
 8001414:	7c7b      	ldrb	r3, [r7, #17]
 8001416:	429a      	cmp	r2, r3
 8001418:	d004      	beq.n	8001424 <decodeFrame+0xca>
        	sendStatus(ERR_WRONG_CRC);
 800141a:	2003      	movs	r0, #3
 800141c:	f7ff faac 	bl	8000978 <sendStatus>
            return false;
 8001420:	2300      	movs	r3, #0
 8001422:	e002      	b.n	800142a <decodeFrame+0xd0>
        }
        return true;
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <decodeFrame+0xd0>
    }
    return false;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <processReceivedChar>:
*   - Nieprawidłowe sekwencje escape
*   - Przepełnienie bufora
*   - Nieoczekiwane znaki początku/końca
************************************************************************/

void processReceivedChar(uint8_t received_char) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
    if (received_char == FRAME_START) {
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b7e      	cmp	r3, #126	@ 0x7e
 8001442:	d112      	bne.n	800146a <processReceivedChar+0x36>
    	if(in_frame) {
 8001444:	4b49      	ldr	r3, [pc, #292]	@ (800156c <processReceivedChar+0x138>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <processReceivedChar+0x22>
    		resetFrameState();
 800144c:	f7ff f9a0 	bl	8000790 <resetFrameState>
    		in_frame = true;
 8001450:	4b46      	ldr	r3, [pc, #280]	@ (800156c <processReceivedChar+0x138>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
    	}
    	in_frame = true;
 8001456:	4b45      	ldr	r3, [pc, #276]	@ (800156c <processReceivedChar+0x138>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
    	bx_index = 0;
 800145c:	4b44      	ldr	r3, [pc, #272]	@ (8001570 <processReceivedChar+0x13c>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
    	escape_detected = false;
 8001462:	4b44      	ldr	r3, [pc, #272]	@ (8001574 <processReceivedChar+0x140>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
    } else {
    	sendStatus(ERR_FAIL);
    	resetFrameState();
    }
   }
}
 8001468:	e07c      	b.n	8001564 <processReceivedChar+0x130>
    } else if (received_char == FRAME_END && escape_detected == false) {
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b60      	cmp	r3, #96	@ 0x60
 800146e:	d12a      	bne.n	80014c6 <processReceivedChar+0x92>
 8001470:	4b40      	ldr	r3, [pc, #256]	@ (8001574 <processReceivedChar+0x140>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d023      	beq.n	80014c6 <processReceivedChar+0x92>
        if (in_frame) {
 800147e:	4b3b      	ldr	r3, [pc, #236]	@ (800156c <processReceivedChar+0x138>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d019      	beq.n	80014ba <processReceivedChar+0x86>
            if (decodeFrame(bx, &frame, bx_index)) {
 8001486:	4b3a      	ldr	r3, [pc, #232]	@ (8001570 <processReceivedChar+0x13c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	493a      	ldr	r1, [pc, #232]	@ (8001578 <processReceivedChar+0x144>)
 8001490:	483a      	ldr	r0, [pc, #232]	@ (800157c <processReceivedChar+0x148>)
 8001492:	f7ff ff62 	bl	800135a <decodeFrame>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <processReceivedChar+0x7a>
            	stopAnimation();
 800149c:	f7ff f98e 	bl	80007bc <stopAnimation>
            	sendStatus(ERR_GOOD);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff fa69 	bl	8000978 <sendStatus>
                handleCommand(&frame);
 80014a6:	4834      	ldr	r0, [pc, #208]	@ (8001578 <processReceivedChar+0x144>)
 80014a8:	f000 f86a 	bl	8001580 <handleCommand>
 80014ac:	e002      	b.n	80014b4 <processReceivedChar+0x80>
            	sendStatus(ERR_FAIL);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7ff fa62 	bl	8000978 <sendStatus>
            resetFrameState();
 80014b4:	f7ff f96c 	bl	8000790 <resetFrameState>
        if (in_frame) {
 80014b8:	e054      	b.n	8001564 <processReceivedChar+0x130>
        	sendStatus(ERR_FAIL);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff fa5c 	bl	8000978 <sendStatus>
            resetFrameState();
 80014c0:	f7ff f966 	bl	8000790 <resetFrameState>
        if (in_frame) {
 80014c4:	e04e      	b.n	8001564 <processReceivedChar+0x130>
    } else if (in_frame) {
 80014c6:	4b29      	ldr	r3, [pc, #164]	@ (800156c <processReceivedChar+0x138>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d04a      	beq.n	8001564 <processReceivedChar+0x130>
    	if(bx_index < MAX_FRAME_WITHOUT_STUFFING) {
 80014ce:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <processReceivedChar+0x13c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b86      	cmp	r3, #134	@ 0x86
 80014d4:	dc40      	bgt.n	8001558 <processReceivedChar+0x124>
        if (escape_detected) {
 80014d6:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <processReceivedChar+0x140>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d02c      	beq.n	8001538 <processReceivedChar+0x104>
            if (received_char == FRAME_START_STUFF) {
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b5e      	cmp	r3, #94	@ 0x5e
 80014e2:	d108      	bne.n	80014f6 <processReceivedChar+0xc2>
                bx[bx_index++] = FRAME_START;
 80014e4:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <processReceivedChar+0x13c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	4921      	ldr	r1, [pc, #132]	@ (8001570 <processReceivedChar+0x13c>)
 80014ec:	600a      	str	r2, [r1, #0]
 80014ee:	4a23      	ldr	r2, [pc, #140]	@ (800157c <processReceivedChar+0x148>)
 80014f0:	217e      	movs	r1, #126	@ 0x7e
 80014f2:	54d1      	strb	r1, [r2, r3]
 80014f4:	e01c      	b.n	8001530 <processReceivedChar+0xfc>
            } else if (received_char == ESCAPE_CHAR_STUFF) {
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b5d      	cmp	r3, #93	@ 0x5d
 80014fa:	d108      	bne.n	800150e <processReceivedChar+0xda>
                bx[bx_index++] = ESCAPE_CHAR;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <processReceivedChar+0x13c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	491b      	ldr	r1, [pc, #108]	@ (8001570 <processReceivedChar+0x13c>)
 8001504:	600a      	str	r2, [r1, #0]
 8001506:	4a1d      	ldr	r2, [pc, #116]	@ (800157c <processReceivedChar+0x148>)
 8001508:	217d      	movs	r1, #125	@ 0x7d
 800150a:	54d1      	strb	r1, [r2, r3]
 800150c:	e010      	b.n	8001530 <processReceivedChar+0xfc>
            } else if (received_char == FRAME_END_STUFF) {
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b26      	cmp	r3, #38	@ 0x26
 8001512:	d108      	bne.n	8001526 <processReceivedChar+0xf2>
                bx[bx_index++] = FRAME_END;
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <processReceivedChar+0x13c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	4915      	ldr	r1, [pc, #84]	@ (8001570 <processReceivedChar+0x13c>)
 800151c:	600a      	str	r2, [r1, #0]
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <processReceivedChar+0x148>)
 8001520:	2160      	movs	r1, #96	@ 0x60
 8001522:	54d1      	strb	r1, [r2, r3]
 8001524:	e004      	b.n	8001530 <processReceivedChar+0xfc>
            	sendStatus(ERR_FAIL);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fa26 	bl	8000978 <sendStatus>
                resetFrameState();
 800152c:	f7ff f930 	bl	8000790 <resetFrameState>
            escape_detected = false;
 8001530:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <processReceivedChar+0x140>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
}
 8001536:	e015      	b.n	8001564 <processReceivedChar+0x130>
        } else if (received_char == ESCAPE_CHAR) {
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b7d      	cmp	r3, #125	@ 0x7d
 800153c:	d103      	bne.n	8001546 <processReceivedChar+0x112>
            escape_detected = true;
 800153e:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <processReceivedChar+0x140>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
}
 8001544:	e00e      	b.n	8001564 <processReceivedChar+0x130>
        	bx[bx_index++] = received_char;
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <processReceivedChar+0x13c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	4908      	ldr	r1, [pc, #32]	@ (8001570 <processReceivedChar+0x13c>)
 800154e:	600a      	str	r2, [r1, #0]
 8001550:	490a      	ldr	r1, [pc, #40]	@ (800157c <processReceivedChar+0x148>)
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	54ca      	strb	r2, [r1, r3]
}
 8001556:	e005      	b.n	8001564 <processReceivedChar+0x130>
    	sendStatus(ERR_FAIL);
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff fa0d 	bl	8000978 <sendStatus>
    	resetFrameState();
 800155e:	f7ff f917 	bl	8000790 <resetFrameState>
}
 8001562:	e7ff      	b.n	8001564 <processReceivedChar+0x130>
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000c28 	.word	0x20000c28
 8001570:	20000c24 	.word	0x20000c24
 8001574:	20000c22 	.word	0x20000c22
 8001578:	20000c2c 	.word	0x20000c2c
 800157c:	20000b14 	.word	0x20000b14

08001580 <handleCommand>:
* Błędy:
*   - Nieznana komenda
*   - Nieprawidłowe współrzędne
*   - Przekroczenie obszaru wyświetlacza
************************************************************************/
void handleCommand(Frame *frame) {
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b090      	sub	sp, #64	@ 0x40
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    if (frame == NULL) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d076      	beq.n	800167c <handleCommand+0xfc>
        return;
    }
    CommandEntry commandTable[COMMAND_COUNT] = {
 800158e:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <handleCommand+0x104>)
 8001590:	f107 0414 	add.w	r4, r7, #20
 8001594:	461d      	mov	r5, r3
 8001596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800159a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800159e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015a2:	e884 0003 	stmia.w	r4, {r0, r1}
        {"ONP", executeONP},
        {"ONT", executeONT},
        {"ONN", executeONN},
        {"OFF", executeOFF}
    };
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2102      	movs	r1, #2
 80015aa:	4837      	ldr	r0, [pc, #220]	@ (8001688 <handleCommand+0x108>)
 80015ac:	f001 fca4 	bl	8002ef8 <HAL_GPIO_WritePin>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015b4:	e05e      	b.n	8001674 <handleCommand+0xf4>
            if (safeCompare(frame->command, commandTable[i].command, COMMAND_LENGTH)) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1c98      	adds	r0, r3, #2
 80015ba:	f107 0214 	add.w	r2, r7, #20
 80015be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	2203      	movs	r2, #3
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff f923 	bl	8000812 <safeCompare>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d04d      	beq.n	800166e <handleCommand+0xee>
                if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 80015d2:	f107 0214 	add.w	r2, r7, #20
 80015d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	2203      	movs	r2, #3
 80015de:	492b      	ldr	r1, [pc, #172]	@ (800168c <handleCommand+0x10c>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff f916 	bl	8000812 <safeCompare>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00f      	beq.n	800160c <handleCommand+0x8c>
                    lcdClear();
 80015ec:	f000 fa9a 	bl	8001b24 <lcdClear>
                    commandTable[i].function(frame);
 80015f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	3340      	adds	r3, #64	@ 0x40
 80015f6:	443b      	add	r3, r7
 80015f8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	4798      	blx	r3
                    lcdCopy();
 8001600:	f000 fa64 	bl	8001acc <lcdCopy>
                    clearFrame(frame);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fad4 	bl	8000bb2 <clearFrame>
                    return;
 800160a:	e038      	b.n	800167e <handleCommand+0xfe>
                }

                int x, y;
                if (parseCoordinates(frame->data, &x, &y)) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3305      	adds	r3, #5
 8001610:	f107 020c 	add.w	r2, r7, #12
 8001614:	f107 0110 	add.w	r1, r7, #16
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fce9 	bl	8000ff0 <parseCoordinates>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01c      	beq.n	800165e <handleCommand+0xde>
                    if (isWithinBounds(x, y)) {
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f8d4 	bl	80007d8 <isWithinBounds>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00f      	beq.n	8001656 <handleCommand+0xd6>
                        lcdClear();
 8001636:	f000 fa75 	bl	8001b24 <lcdClear>
                        commandTable[i].function(frame);
 800163a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	3340      	adds	r3, #64	@ 0x40
 8001640:	443b      	add	r3, r7
 8001642:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
                        lcdCopy();
 800164a:	f000 fa3f 	bl	8001acc <lcdCopy>
                        clearFrame(frame);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff faaf 	bl	8000bb2 <clearFrame>
                        return;
 8001654:	e013      	b.n	800167e <handleCommand+0xfe>
                    } else {
                    sendStatus(ERR_DISPLAY_AREA);
 8001656:	2004      	movs	r0, #4
 8001658:	f7ff f98e 	bl	8000978 <sendStatus>
                    return;
 800165c:	e00f      	b.n	800167e <handleCommand+0xfe>
                }
            } else {
            	lcdClear();
 800165e:	f000 fa61 	bl	8001b24 <lcdClear>
            	lcdCopy();
 8001662:	f000 fa33 	bl	8001acc <lcdCopy>
            	sendStatus(ERR_NOT_RECOGNIZED);
 8001666:	2009      	movs	r0, #9
 8001668:	f7ff f986 	bl	8000978 <sendStatus>
            	return;
 800166c:	e007      	b.n	800167e <handleCommand+0xfe>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 800166e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001670:	3301      	adds	r3, #1
 8001672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001676:	2b04      	cmp	r3, #4
 8001678:	dd9d      	ble.n	80015b6 <handleCommand+0x36>
 800167a:	e000      	b.n	800167e <handleCommand+0xfe>
        return;
 800167c:	bf00      	nop
            }
        }
    }
}
 800167e:	3740      	adds	r7, #64	@ 0x40
 8001680:	46bd      	mov	sp, r7
 8001682:	bdb0      	pop	{r4, r5, r7, pc}
 8001684:	08008ae0 	.word	0x08008ae0
 8001688:	48000400 	.word	0x48000400
 800168c:	08008adc 	.word	0x08008adc

08001690 <updateScrollingText>:



void updateScrollingText(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af02      	add	r7, sp, #8
    if (!text.isScrolling || text.scrollSpeed == 0) {
 8001696:	4b5d      	ldr	r3, [pc, #372]	@ (800180c <updateScrollingText+0x17c>)
 8001698:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800169c:	f083 0301 	eor.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 80ae 	bne.w	8001804 <updateScrollingText+0x174>
 80016a8:	4b58      	ldr	r3, [pc, #352]	@ (800180c <updateScrollingText+0x17c>)
 80016aa:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80a8 	beq.w	8001804 <updateScrollingText+0x174>
        return;
    }

    uint32_t currentTime = HAL_GetTick();
 80016b4:	f000 fee2 	bl	800247c <HAL_GetTick>
 80016b8:	6078      	str	r0, [r7, #4]
    if ((currentTime - text.lastUpdate) >= (256 - text.scrollSpeed)) {
 80016ba:	4b54      	ldr	r3, [pc, #336]	@ (800180c <updateScrollingText+0x17c>)
 80016bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4a51      	ldr	r2, [pc, #324]	@ (800180c <updateScrollingText+0x17c>)
 80016c6:	f892 20d1 	ldrb.w	r2, [r2, #209]	@ 0xd1
 80016ca:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80016ce:	4293      	cmp	r3, r2
 80016d0:	f0c0 8099 	bcc.w	8001806 <updateScrollingText+0x176>
        text.lastUpdate = currentTime;
 80016d4:	4a4d      	ldr	r2, [pc, #308]	@ (800180c <updateScrollingText+0x17c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

        uint8_t charWidth;
        uint8_t charHeight;
        const uint8_t* font;
        switch(text.fontSize) {
 80016dc:	4b4b      	ldr	r3, [pc, #300]	@ (800180c <updateScrollingText+0x17c>)
 80016de:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d014      	beq.n	8001710 <updateScrollingText+0x80>
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	dc19      	bgt.n	800171e <updateScrollingText+0x8e>
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d002      	beq.n	80016f4 <updateScrollingText+0x64>
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d007      	beq.n	8001702 <updateScrollingText+0x72>
 80016f2:	e014      	b.n	800171e <updateScrollingText+0x8e>
            case 1: charWidth = 5; charHeight = 7; font=font5x7; break;
 80016f4:	2305      	movs	r3, #5
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	2307      	movs	r3, #7
 80016fa:	73bb      	strb	r3, [r7, #14]
 80016fc:	4b44      	ldr	r3, [pc, #272]	@ (8001810 <updateScrollingText+0x180>)
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	e014      	b.n	800172c <updateScrollingText+0x9c>
            case 2: charWidth = 5; charHeight = 8; font=font5x8; break;
 8001702:	2305      	movs	r3, #5
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	2308      	movs	r3, #8
 8001708:	73bb      	strb	r3, [r7, #14]
 800170a:	4b42      	ldr	r3, [pc, #264]	@ (8001814 <updateScrollingText+0x184>)
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	e00d      	b.n	800172c <updateScrollingText+0x9c>
            case 3: charWidth = 6; charHeight = 9; font=font6x9; break;
 8001710:	2306      	movs	r3, #6
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	2309      	movs	r3, #9
 8001716:	73bb      	strb	r3, [r7, #14]
 8001718:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <updateScrollingText+0x188>)
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	e006      	b.n	800172c <updateScrollingText+0x9c>
            default: charWidth = 5; charHeight = 7; font=font5x7; break;
 800171e:	2305      	movs	r3, #5
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	2307      	movs	r3, #7
 8001724:	73bb      	strb	r3, [r7, #14]
 8001726:	4b3a      	ldr	r3, [pc, #232]	@ (8001810 <updateScrollingText+0x180>)
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	bf00      	nop
        }

        // Oblicz całkowitą szerokość tekstu
        int16_t textWidth = text.textLength * charWidth;
 800172c:	4b37      	ldr	r3, [pc, #220]	@ (800180c <updateScrollingText+0x17c>)
 800172e:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8001732:	461a      	mov	r2, r3
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	b29b      	uxth	r3, r3
 8001738:	fb12 f303 	smulbb	r3, r2, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	807b      	strh	r3, [r7, #2]

        // Przewijanie od lewej do prawej
        if (!text.firstIteration) {
 8001740:	4b32      	ldr	r3, [pc, #200]	@ (800180c <updateScrollingText+0x17c>)
 8001742:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 8001746:	f083 0301 	eor.w	r3, r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d034      	beq.n	80017ba <updateScrollingText+0x12a>
            text.x+=text.textLength;  // Przesuwamy w prawo
 8001750:	4b2e      	ldr	r3, [pc, #184]	@ (800180c <updateScrollingText+0x17c>)
 8001752:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8001756:	b29b      	uxth	r3, r3
 8001758:	4a2c      	ldr	r2, [pc, #176]	@ (800180c <updateScrollingText+0x17c>)
 800175a:	f892 20d4 	ldrb.w	r2, [r2, #212]	@ 0xd4
 800175e:	4413      	add	r3, r2
 8001760:	b29b      	uxth	r3, r3
 8001762:	b21a      	sxth	r2, r3
 8001764:	4b29      	ldr	r3, [pc, #164]	@ (800180c <updateScrollingText+0x17c>)
 8001766:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8

            // Jeśli tekst całkowicie wyszedł z prawej strony
            if (text.x > LCD_WIDTH) {
 800176a:	4b28      	ldr	r3, [pc, #160]	@ (800180c <updateScrollingText+0x17c>)
 800176c:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8001770:	2ba0      	cmp	r3, #160	@ 0xa0
 8001772:	dd33      	ble.n	80017dc <updateScrollingText+0x14c>
                text.x = -textWidth; // Wróć na lewą stronę
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	425b      	negs	r3, r3
 8001778:	b29b      	uxth	r3, r3
 800177a:	b21a      	sxth	r2, r3
 800177c:	4b23      	ldr	r3, [pc, #140]	@ (800180c <updateScrollingText+0x17c>)
 800177e:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
                text.y += charHeight; // Przejdź do następnej linii
 8001782:	4b22      	ldr	r3, [pc, #136]	@ (800180c <updateScrollingText+0x17c>)
 8001784:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 8001788:	b29a      	uxth	r2, r3
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	b29b      	uxth	r3, r3
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	b21a      	sxth	r2, r3
 8001794:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <updateScrollingText+0x17c>)
 8001796:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca

                // Jeśli doszliśmy do dołu ekranu
                if (text.y >= LCD_HEIGHT - charHeight) {
 800179a:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <updateScrollingText+0x17c>)
 800179c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 80017a0:	461a      	mov	r2, r3
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80017a8:	429a      	cmp	r2, r3
 80017aa:	db17      	blt.n	80017dc <updateScrollingText+0x14c>
                    text.y = text.startY; // Wróć na początkową wysokość
 80017ac:	4b17      	ldr	r3, [pc, #92]	@ (800180c <updateScrollingText+0x17c>)
 80017ae:	f9b3 20ce 	ldrsh.w	r2, [r3, #206]	@ 0xce
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <updateScrollingText+0x17c>)
 80017b4:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
 80017b8:	e010      	b.n	80017dc <updateScrollingText+0x14c>
                }
            }
        } else {
            // Pierwsza iteracja - start z lewej strony
            text.x = -textWidth;
 80017ba:	887b      	ldrh	r3, [r7, #2]
 80017bc:	425b      	negs	r3, r3
 80017be:	b29b      	uxth	r3, r3
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <updateScrollingText+0x17c>)
 80017c4:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
            text.y = text.startY;
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <updateScrollingText+0x17c>)
 80017ca:	f9b3 20ce 	ldrsh.w	r2, [r3, #206]	@ 0xce
 80017ce:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <updateScrollingText+0x17c>)
 80017d0:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
            text.firstIteration = false;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <updateScrollingText+0x17c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
        }
            lcdClear();
 80017dc:	f000 f9a2 	bl	8001b24 <lcdClear>
            hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <updateScrollingText+0x17c>)
 80017e2:	f9b3 10c8 	ldrsh.w	r1, [r3, #200]	@ 0xc8
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <updateScrollingText+0x17c>)
 80017e8:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 80017ec:	4b07      	ldr	r3, [pc, #28]	@ (800180c <updateScrollingText+0x17c>)
 80017ee:	f8b3 00d2 	ldrh.w	r0, [r3, #210]	@ 0xd2
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4603      	mov	r3, r0
 80017f8:	4804      	ldr	r0, [pc, #16]	@ (800180c <updateScrollingText+0x17c>)
 80017fa:	f005 ffb6 	bl	800776a <hagl_put_text>
            lcdCopy();
 80017fe:	f000 f965 	bl	8001acc <lcdCopy>
 8001802:	e000      	b.n	8001806 <updateScrollingText+0x176>
        return;
 8001804:	bf00      	nop
    }
}
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000cb4 	.word	0x20000cb4
 8001810:	08008b70 	.word	0x08008b70
 8001814:	0800c078 	.word	0x0800c078
 8001818:	0800ef1c 	.word	0x0800ef1c

0800181c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	@ 0x28
 8001820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	4b4a      	ldr	r3, [pc, #296]	@ (800195c <MX_GPIO_Init+0x140>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	4a49      	ldr	r2, [pc, #292]	@ (800195c <MX_GPIO_Init+0x140>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183e:	4b47      	ldr	r3, [pc, #284]	@ (800195c <MX_GPIO_Init+0x140>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	4b44      	ldr	r3, [pc, #272]	@ (800195c <MX_GPIO_Init+0x140>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	4a43      	ldr	r2, [pc, #268]	@ (800195c <MX_GPIO_Init+0x140>)
 8001850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001856:	4b41      	ldr	r3, [pc, #260]	@ (800195c <MX_GPIO_Init+0x140>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	4b3e      	ldr	r3, [pc, #248]	@ (800195c <MX_GPIO_Init+0x140>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	4a3d      	ldr	r2, [pc, #244]	@ (800195c <MX_GPIO_Init+0x140>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186e:	4b3b      	ldr	r3, [pc, #236]	@ (800195c <MX_GPIO_Init+0x140>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b38      	ldr	r3, [pc, #224]	@ (800195c <MX_GPIO_Init+0x140>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	4a37      	ldr	r2, [pc, #220]	@ (800195c <MX_GPIO_Init+0x140>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001886:	4b35      	ldr	r3, [pc, #212]	@ (800195c <MX_GPIO_Init+0x140>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	4b32      	ldr	r3, [pc, #200]	@ (800195c <MX_GPIO_Init+0x140>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a31      	ldr	r2, [pc, #196]	@ (800195c <MX_GPIO_Init+0x140>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b2f      	ldr	r3, [pc, #188]	@ (800195c <MX_GPIO_Init+0x140>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f641 0106 	movw	r1, #6150	@ 0x1806
 80018b0:	482b      	ldr	r0, [pc, #172]	@ (8001960 <MX_GPIO_Init+0x144>)
 80018b2:	f001 fb21 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80018b6:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80018ba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018bc:	2303      	movs	r3, #3
 80018be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4826      	ldr	r0, [pc, #152]	@ (8001964 <MX_GPIO_Init+0x148>)
 80018cc:	f001 f96a 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d0:	2303      	movs	r3, #3
 80018d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d4:	2303      	movs	r3, #3
 80018d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4821      	ldr	r0, [pc, #132]	@ (8001968 <MX_GPIO_Init+0x14c>)
 80018e4:	f001 f95e 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80018e8:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 80018ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ee:	2303      	movs	r3, #3
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001900:	f001 f950 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001904:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 8001908:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190a:	2303      	movs	r3, #3
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4811      	ldr	r0, [pc, #68]	@ (8001960 <MX_GPIO_Init+0x144>)
 800191a:	f001 f943 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 800191e:	f641 0306 	movw	r3, #6150	@ 0x1806
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	480a      	ldr	r0, [pc, #40]	@ (8001960 <MX_GPIO_Init+0x144>)
 8001938:	f001 f934 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800193c:	2304      	movs	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001940:	2303      	movs	r3, #3
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4807      	ldr	r0, [pc, #28]	@ (800196c <MX_GPIO_Init+0x150>)
 8001950:	f001 f928 	bl	8002ba4 <HAL_GPIO_Init>

}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	@ 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800
 8001968:	48001c00 	.word	0x48001c00
 800196c:	48000c00 	.word	0x48000c00

08001970 <lcdCmd>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdCmd(uint8_t cmd)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001980:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <lcdCmd+0x44>)
 8001982:	f001 fab9 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800198c:	4809      	ldr	r0, [pc, #36]	@ (80019b4 <lcdCmd+0x44>)
 800198e:	f001 fab3 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001992:	1df9      	adds	r1, r7, #7
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
 8001998:	2201      	movs	r2, #1
 800199a:	4807      	ldr	r0, [pc, #28]	@ (80019b8 <lcdCmd+0x48>)
 800199c:	f002 fe87 	bl	80046ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019a6:	4803      	ldr	r0, [pc, #12]	@ (80019b4 <lcdCmd+0x44>)
 80019a8:	f001 faa6 	bl	8002ef8 <HAL_GPIO_WritePin>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	48000400 	.word	0x48000400
 80019b8:	2000ad98 	.word	0x2000ad98

080019bc <lcdData>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdData(uint8_t data)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <lcdData+0x44>)
 80019ce:	f001 fa93 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019d8:	4809      	ldr	r0, [pc, #36]	@ (8001a00 <lcdData+0x44>)
 80019da:	f001 fa8d 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80019de:	1df9      	adds	r1, r7, #7
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	2201      	movs	r2, #1
 80019e6:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <lcdData+0x48>)
 80019e8:	f002 fe61 	bl	80046ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019f2:	4803      	ldr	r0, [pc, #12]	@ (8001a00 <lcdData+0x44>)
 80019f4:	f001 fa80 	bl	8002ef8 <HAL_GPIO_WritePin>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	48000400 	.word	0x48000400
 8001a04:	2000ad98 	.word	0x2000ad98

08001a08 <lcdSend>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komendy
*   - lcd_data: wysyłanie danych
************************************************************************/
static void lcdSend(uint16_t value)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <lcdSend+0x20>
		lcdCmd(value);
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ffa5 	bl	8001970 <lcdCmd>
	} else {
		lcdData(value);
	}
}
 8001a26:	e004      	b.n	8001a32 <lcdSend+0x2a>
		lcdData(value);
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ffc5 	bl	80019bc <lcdData>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <lcdData16>:
*   - value: 16-bitowa wartość do wysłania
* Korzysta z:
*   - lcd_data: wysyłanie pojedynczych bajtów
************************************************************************/
static void lcdData16(uint16_t value)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ffb5 	bl	80019bc <lcdData>
	lcdData(value);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ffb0 	bl	80019bc <lcdData>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <lcdSetWindow>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komend CASET i RASET
*   - lcd_data16: wysyłanie współrzędnych
************************************************************************/
static void lcdSetWindow(int x, int y, int width, int height)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 8001a72:	202a      	movs	r0, #42	@ 0x2a
 8001a74:	f7ff ff7c 	bl	8001970 <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ffda 	bl	8001a3a <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ffd1 	bl	8001a3a <lcdData16>

  lcdCmd(ST7735S_RASET);
 8001a98:	202b      	movs	r0, #43	@ 0x2b
 8001a9a:	f7ff ff69 	bl	8001970 <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ffc7 	bl	8001a3a <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ffbc 	bl	8001a3a <lcdData16>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <lcdCopy>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdCopy(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) {
 8001ad0:	f000 f894 	bl	8001bfc <lcdIsBusy>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d11b      	bne.n	8001b12 <lcdCopy+0x46>
        return;
    }

    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	22a0      	movs	r2, #160	@ 0xa0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff ffbf 	bl	8001a64 <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 8001ae6:	202c      	movs	r0, #44	@ 0x2c
 8001ae8:	f7ff ff42 	bl	8001970 <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001af2:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <lcdCopy+0x4c>)
 8001af4:	f001 fa00 	bl	8002ef8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001afe:	4806      	ldr	r0, [pc, #24]	@ (8001b18 <lcdCopy+0x4c>)
 8001b00:	f001 f9fa 	bl	8002ef8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer));
 8001b04:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001b08:	4904      	ldr	r1, [pc, #16]	@ (8001b1c <lcdCopy+0x50>)
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <lcdCopy+0x54>)
 8001b0c:	f002 ff46 	bl	800499c <HAL_SPI_Transmit_DMA>
 8001b10:	e000      	b.n	8001b14 <lcdCopy+0x48>
        return;
 8001b12:	bf00      	nop
}
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	20000d90 	.word	0x20000d90
 8001b20:	2000ad98 	.word	0x2000ad98

08001b24 <lcdClear>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdClear(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001b28:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <lcdClear+0x14>)
 8001b30:	f006 faba 	bl	80080a8 <memset>
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000d90 	.word	0x20000d90

08001b3c <lcdInit>:
*   4. Włącza wyświetlacz i podświetlenie
* Korzysta z:
*   - lcd_send: wysyłanie komend inicjalizacyjnych
*   - HAL_GPIO_WritePin: sterowanie pinami RST i BL
************************************************************************/
void lcdInit(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2104      	movs	r1, #4
 8001b46:	481c      	ldr	r0, [pc, #112]	@ (8001bb8 <lcdInit+0x7c>)
 8001b48:	f001 f9d6 	bl	8002ef8 <HAL_GPIO_WritePin>
    delay(100);
 8001b4c:	2064      	movs	r0, #100	@ 0x64
 8001b4e:	f000 f8c9 	bl	8001ce4 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	2104      	movs	r1, #4
 8001b56:	4818      	ldr	r0, [pc, #96]	@ (8001bb8 <lcdInit+0x7c>)
 8001b58:	f001 f9ce 	bl	8002ef8 <HAL_GPIO_WritePin>
    delay(100);
 8001b5c:	2064      	movs	r0, #100	@ 0x64
 8001b5e:	f000 f8c1 	bl	8001ce4 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	e009      	b.n	8001b7c <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001b68:	4a14      	ldr	r2, [pc, #80]	@ (8001bbc <lcdInit+0x80>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff49 	bl	8001a08 <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b4b      	cmp	r3, #75	@ 0x4b
 8001b80:	d9f2      	bls.n	8001b68 <lcdInit+0x2c>
    }
    delay(200);
 8001b82:	20c8      	movs	r0, #200	@ 0xc8
 8001b84:	f000 f8ae 	bl	8001ce4 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001b88:	2011      	movs	r0, #17
 8001b8a:	f7ff fef1 	bl	8001970 <lcdCmd>
    delay(120);
 8001b8e:	2078      	movs	r0, #120	@ 0x78
 8001b90:	f000 f8a8 	bl	8001ce4 <delay>
    lcdCmd(ST7735S_DISPON);
 8001b94:	2029      	movs	r0, #41	@ 0x29
 8001b96:	f7ff feeb 	bl	8001970 <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	4806      	ldr	r0, [pc, #24]	@ (8001bb8 <lcdInit+0x7c>)
 8001ba0:	f001 f9aa 	bl	8002ef8 <HAL_GPIO_WritePin>
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001ba4:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4805      	ldr	r0, [pc, #20]	@ (8001bc0 <lcdInit+0x84>)
 8001bac:	f006 fa7c 	bl	80080a8 <memset>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	08011ed4 	.word	0x08011ed4
 8001bc0:	20000d90 	.word	0x20000d90

08001bc4 <lcdPutPixel>:
* Parametry:
*   - x, y: Współrzędne piksela
*   - color: Kolor w formacie RGB565
************************************************************************/
void lcdPutPixel(int x, int y, uint16_t color)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	80fb      	strh	r3, [r7, #6]
        frameBuffer[y * LCD_WIDTH + x] = color;
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	015b      	lsls	r3, r3, #5
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4413      	add	r3, r2
 8001be2:	4905      	ldr	r1, [pc, #20]	@ (8001bf8 <lcdPutPixel+0x34>)
 8001be4:	88fa      	ldrh	r2, [r7, #6]
 8001be6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000d90 	.word	0x20000d90

08001bfc <lcdIsBusy>:
bool lcdIsBusy(void) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
    return transferInProgress;
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <lcdIsBusy+0x14>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	2000ad90 	.word	0x2000ad90

08001c14 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_SPI_TxCpltCallback+0x2c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d108      	bne.n	8001c36 <HAL_SPI_TxCpltCallback+0x22>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c2a:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <HAL_SPI_TxCpltCallback+0x30>)
 8001c2c:	f001 f964 	bl	8002ef8 <HAL_GPIO_WritePin>
        transferInProgress = false;
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <HAL_SPI_TxCpltCallback+0x34>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
    }
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000ad98 	.word	0x2000ad98
 8001c44:	48000400 	.word	0x48000400
 8001c48:	2000ad90 	.word	0x2000ad90

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	@ (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	@ (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ffc2 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <delay>:
*   - delayMs: Liczba milisekund do odczekania

* Korzysta z:
*   - tick: Globalna zmienna zwiększana w przerwaniu systemowym
************************************************************************/
void delay(uint32_t delayMs){
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <delay+0x2c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8001cf2:	bf00      	nop
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	441a      	add	r2, r3
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <delay+0x2c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d8f8      	bhi.n	8001cf4 <delay+0x10>
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	2000ad94 	.word	0x2000ad94

08001d14 <waitForFrame>:
*   - USART_kbhit: Sprawdzenie dostępności danych
*   - USART_getchar: Pobranie znaku z UART
*   - processReceivedChar: Przetworzenie odebranego znaku
************************************************************************/
void waitForFrame(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001d1a:	f7fe fc41 	bl	80005a0 <USART_kbhit>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <waitForFrame+0x20>
	        uint8_t received_char = USART_getchar();
 8001d24:	f7fe fc4e 	bl	80005c4 <USART_getchar>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(received_char);
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fb80 	bl	8001434 <processReceivedChar>
	 }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d40:	f000 fb33 	bl	80023aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d44:	f000 f812 	bl	8001d6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001d48:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <main+0x2c>)
 8001d4a:	f7ff ffa9 	bl	8001ca0 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d4e:	f7ff fd65 	bl	800181c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d52:	f7fe fcff 	bl	8000754 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d56:	f000 fa53 	bl	8002200 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001d5a:	f000 f85f 	bl	8001e1c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(); // inicjalizacja wyświetlacza
 8001d5e:	f7ff feed 	bl	8001b3c <lcdInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  waitForFrame();
 8001d62:	f7ff ffd7 	bl	8001d14 <waitForFrame>
 8001d66:	e7fc      	b.n	8001d62 <main+0x26>
 8001d68:	00013880 	.word	0x00013880

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b096      	sub	sp, #88	@ 0x58
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	2244      	movs	r2, #68	@ 0x44
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f006 f994 	bl	80080a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	463b      	mov	r3, r7
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d8e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d92:	f001 f8d7 	bl	8002f44 <HAL_PWREx_ControlVoltageScaling>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d9c:	f000 f838 	bl	8001e10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001da0:	2310      	movs	r3, #16
 8001da2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001dac:	2360      	movs	r3, #96	@ 0x60
 8001dae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db0:	2302      	movs	r3, #2
 8001db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001db4:	2301      	movs	r3, #1
 8001db6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001dbc:	2328      	movs	r3, #40	@ 0x28
 8001dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001dc0:	2307      	movs	r3, #7
 8001dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 f90d 	bl	8002ff0 <HAL_RCC_OscConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001ddc:	f000 f818 	bl	8001e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de0:	230f      	movs	r3, #15
 8001de2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de4:	2303      	movs	r3, #3
 8001de6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001df4:	463b      	mov	r3, r7
 8001df6:	2104      	movs	r1, #4
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 fcd5 	bl	80037a8 <HAL_RCC_ClockConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e04:	f000 f804 	bl	8001e10 <Error_Handler>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3758      	adds	r7, #88	@ 0x58
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
}
 8001e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <Error_Handler+0x8>

08001e1c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e22:	4a1c      	ldr	r2, [pc, #112]	@ (8001e94 <MX_SPI2_Init+0x78>)
 8001e24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2e:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e34:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e36:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e3a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e4e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e52:	2210      	movs	r2, #16
 8001e54:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <MX_SPI2_Init+0x74>)
 8001e7c:	f002 fb74 	bl	8004568 <HAL_SPI_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e86:	f7ff ffc3 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000ad98 	.word	0x2000ad98
 8001e94:	40003800 	.word	0x40003800

08001e98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	@ 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb0 <HAL_SPI_MspInit+0x118>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d175      	bne.n	8001fa6 <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eba:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <HAL_SPI_MspInit+0x11c>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8001fb4 <HAL_SPI_MspInit+0x11c>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb4 <HAL_SPI_MspInit+0x11c>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed2:	4b38      	ldr	r3, [pc, #224]	@ (8001fb4 <HAL_SPI_MspInit+0x11c>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	4a37      	ldr	r2, [pc, #220]	@ (8001fb4 <HAL_SPI_MspInit+0x11c>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ede:	4b35      	ldr	r3, [pc, #212]	@ (8001fb4 <HAL_SPI_MspInit+0x11c>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b32      	ldr	r3, [pc, #200]	@ (8001fb4 <HAL_SPI_MspInit+0x11c>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eee:	4a31      	ldr	r2, [pc, #196]	@ (8001fb4 <HAL_SPI_MspInit+0x11c>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb4 <HAL_SPI_MspInit+0x11c>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001f02:	2308      	movs	r3, #8
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f12:	2305      	movs	r3, #5
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4826      	ldr	r0, [pc, #152]	@ (8001fb8 <HAL_SPI_MspInit+0x120>)
 8001f1e:	f000 fe41 	bl	8002ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f34:	2305      	movs	r3, #5
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	481f      	ldr	r0, [pc, #124]	@ (8001fbc <HAL_SPI_MspInit+0x124>)
 8001f40:	f000 fe30 	bl	8002ba4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f46:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc4 <HAL_SPI_MspInit+0x12c>)
 8001f48:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f52:	2210      	movs	r2, #16
 8001f54:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f5c:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f5e:	2280      	movs	r2, #128	@ 0x80
 8001f60:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f62:	4b17      	ldr	r3, [pc, #92]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f68:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001f6e:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f74:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001f7a:	4811      	ldr	r0, [pc, #68]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f7c:	f000 fb9c 	bl	80026b8 <HAL_DMA_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001f86:	f7ff ff43 	bl	8001e10 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f90:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc0 <HAL_SPI_MspInit+0x128>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2102      	movs	r1, #2
 8001f9a:	2024      	movs	r0, #36	@ 0x24
 8001f9c:	f000 fb55 	bl	800264a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001fa0:	2024      	movs	r0, #36	@ 0x24
 8001fa2:	f000 fb6e 	bl	8002682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3728      	adds	r7, #40	@ 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40003800 	.word	0x40003800
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	48000800 	.word	0x48000800
 8001fbc:	48000400 	.word	0x48000400
 8001fc0:	2000adfc 	.word	0x2000adfc
 8001fc4:	40020058 	.word	0x40020058

08001fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <HAL_MspInit+0x44>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <HAL_MspInit+0x44>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fda:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <HAL_MspInit+0x44>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b09      	ldr	r3, [pc, #36]	@ (800200c <HAL_MspInit+0x44>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	4a08      	ldr	r2, [pc, #32]	@ (800200c <HAL_MspInit+0x44>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_MspInit+0x44>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000

08002010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <NMI_Handler+0x4>

08002018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <HardFault_Handler+0x4>

08002020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <MemManage_Handler+0x4>

08002028 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <BusFault_Handler+0x4>

08002030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <UsageFault_Handler+0x4>

08002038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002068:	f000 f9f4 	bl	8002454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  tick++; // zwiększanie zmiennej dla funkcji delay()
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <SysTick_Handler+0x1c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	4a03      	ldr	r2, [pc, #12]	@ (8002080 <SysTick_Handler+0x1c>)
 8002074:	6013      	str	r3, [r2, #0]
  updateScrollingText();
 8002076:	f7ff fb0b 	bl	8001690 <updateScrollingText>

  /* USER CODE END SysTick_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2000ad94 	.word	0x2000ad94

08002084 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <DMA1_Channel5_IRQHandler+0x10>)
 800208a:	f000 fcac 	bl	80029e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2000adfc 	.word	0x2000adfc

08002098 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <SPI2_IRQHandler+0x10>)
 800209e:	f002 fd6b 	bl	8004b78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000ad98 	.word	0x2000ad98

080020ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <USART2_IRQHandler+0x10>)
 80020b2:	f003 f95b 	bl	800536c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000ae48 	.word	0x2000ae48

080020c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c8:	4a14      	ldr	r2, [pc, #80]	@ (800211c <_sbrk+0x5c>)
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <_sbrk+0x60>)
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <_sbrk+0x64>)
 80020de:	4a12      	ldr	r2, [pc, #72]	@ (8002128 <_sbrk+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d207      	bcs.n	8002100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f0:	f005 fff6 	bl	80080e0 <__errno>
 80020f4:	4603      	mov	r3, r0
 80020f6:	220c      	movs	r2, #12
 80020f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	e009      	b.n	8002114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <_sbrk+0x64>)
 8002110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20018000 	.word	0x20018000
 8002120:	00001000 	.word	0x00001000
 8002124:	2000ae44 	.word	0x2000ae44
 8002128:	2000b020 	.word	0x2000b020

0800212c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <SystemInit+0x20>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <SystemInit+0x20>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <HAL_UART_TxCpltCallback>:
* Korzysta z:
*   txRingBuffer - struktura bufora kołowego transmisji
*   USART_TxBuf - bufor danych do transmisji
*   HAL_UART_Transmit_IT - funkcja HAL rozpoczynająca transmisję
************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a12      	ldr	r2, [pc, #72]	@ (80021a4 <HAL_UART_TxCpltCallback+0x54>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d11d      	bne.n	800219c <HAL_UART_TxCpltCallback+0x4c>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <HAL_UART_TxCpltCallback+0x58>)
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <HAL_UART_TxCpltCallback+0x58>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	d017      	beq.n	800219c <HAL_UART_TxCpltCallback+0x4c>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 800216c:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_UART_TxCpltCallback+0x58>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a0e      	ldr	r2, [pc, #56]	@ (80021ac <HAL_UART_TxCpltCallback+0x5c>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) % txRingBuffer.mask;
 8002176:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <HAL_UART_TxCpltCallback+0x58>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	3301      	adds	r3, #1
 800217c:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <HAL_UART_TxCpltCallback+0x58>)
 800217e:	68d2      	ldr	r2, [r2, #12]
 8002180:	fbb3 f1f2 	udiv	r1, r3, r2
 8002184:	fb01 f202 	mul.w	r2, r1, r2
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	4a07      	ldr	r2, [pc, #28]	@ (80021a8 <HAL_UART_TxCpltCallback+0x58>)
 800218c:	6053      	str	r3, [r2, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800218e:	f107 030f 	add.w	r3, r7, #15
 8002192:	2201      	movs	r2, #1
 8002194:	4619      	mov	r1, r3
 8002196:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <HAL_UART_TxCpltCallback+0x54>)
 8002198:	f003 f83e 	bl	8005218 <HAL_UART_Transmit_IT>
	   }
   }
}
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000ae48 	.word	0x2000ae48
 80021a8:	20000290 	.word	0x20000290
 80021ac:	200002a0 	.word	0x200002a0

080021b0 <HAL_UART_RxCpltCallback>:
* Korzysta z:
*   rxRingBuffer - struktura bufora kołowego odbioru
*   USART_RxBuf - bufor danych odebranych
*   HAL_UART_Receive_IT - funkcja HAL rozpoczynająca odbiór
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a0e      	ldr	r2, [pc, #56]	@ (80021f4 <HAL_UART_RxCpltCallback+0x44>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d114      	bne.n	80021ea <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex = (rxRingBuffer.writeIndex + 1) % rxRingBuffer.mask;
 80021c0:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <HAL_UART_RxCpltCallback+0x48>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a0c      	ldr	r2, [pc, #48]	@ (80021f8 <HAL_UART_RxCpltCallback+0x48>)
 80021c8:	68d2      	ldr	r2, [r2, #12]
 80021ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80021ce:	fb01 f202 	mul.w	r2, r1, r2
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <HAL_UART_RxCpltCallback+0x48>)
 80021d6:	6093      	str	r3, [r2, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <HAL_UART_RxCpltCallback+0x48>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a07      	ldr	r2, [pc, #28]	@ (80021fc <HAL_UART_RxCpltCallback+0x4c>)
 80021de:	4413      	add	r3, r2
 80021e0:	2201      	movs	r2, #1
 80021e2:	4619      	mov	r1, r3
 80021e4:	4803      	ldr	r0, [pc, #12]	@ (80021f4 <HAL_UART_RxCpltCallback+0x44>)
 80021e6:	f003 f875 	bl	80052d4 <HAL_UART_Receive_IT>

	 }
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000ae48 	.word	0x2000ae48
 80021f8:	20000280 	.word	0x20000280
 80021fc:	20000a04 	.word	0x20000a04

08002200 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002204:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 8002206:	4a1d      	ldr	r2, [pc, #116]	@ (800227c <MX_USART2_UART_Init+0x7c>)
 8002208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800220a:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 800220c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002212:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002218:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002224:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 8002226:	220c      	movs	r2, #12
 8002228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002230:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002242:	480d      	ldr	r0, [pc, #52]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 8002244:	f002 ff9a 	bl	800517c <HAL_UART_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800224e:	f7ff fddf 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 8002252:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8002256:	490a      	ldr	r1, [pc, #40]	@ (8002280 <MX_USART2_UART_Init+0x80>)
 8002258:	480a      	ldr	r0, [pc, #40]	@ (8002284 <MX_USART2_UART_Init+0x84>)
 800225a:	f7fe f989 	bl	8000570 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 800225e:	f240 7262 	movw	r2, #1890	@ 0x762
 8002262:	4909      	ldr	r1, [pc, #36]	@ (8002288 <MX_USART2_UART_Init+0x88>)
 8002264:	4809      	ldr	r0, [pc, #36]	@ (800228c <MX_USART2_UART_Init+0x8c>)
 8002266:	f7fe f983 	bl	8000570 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 800226a:	2201      	movs	r2, #1
 800226c:	4904      	ldr	r1, [pc, #16]	@ (8002280 <MX_USART2_UART_Init+0x80>)
 800226e:	4802      	ldr	r0, [pc, #8]	@ (8002278 <MX_USART2_UART_Init+0x78>)
 8002270:	f003 f830 	bl	80052d4 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000ae48 	.word	0x2000ae48
 800227c:	40004400 	.word	0x40004400
 8002280:	20000a04 	.word	0x20000a04
 8002284:	20000280 	.word	0x20000280
 8002288:	200002a0 	.word	0x200002a0
 800228c:	20000290 	.word	0x20000290

08002290 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0ac      	sub	sp, #176	@ 0xb0
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2288      	movs	r2, #136	@ 0x88
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f005 fef9 	bl	80080a8 <memset>
  if(uartHandle->Instance==USART2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a25      	ldr	r2, [pc, #148]	@ (8002350 <HAL_UART_MspInit+0xc0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d143      	bne.n	8002348 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022c0:	2302      	movs	r3, #2
 80022c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 fc8f 	bl	8003bf0 <HAL_RCCEx_PeriphCLKConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022d8:	f7ff fd9a 	bl	8001e10 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <HAL_UART_MspInit+0xc4>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <HAL_UART_MspInit+0xc4>)
 80022e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <HAL_UART_MspInit+0xc4>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <HAL_UART_MspInit+0xc4>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f8:	4a16      	ldr	r2, [pc, #88]	@ (8002354 <HAL_UART_MspInit+0xc4>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002300:	4b14      	ldr	r3, [pc, #80]	@ (8002354 <HAL_UART_MspInit+0xc4>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800230c:	230c      	movs	r3, #12
 800230e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002324:	2307      	movs	r3, #7
 8002326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800232e:	4619      	mov	r1, r3
 8002330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002334:	f000 fc36 	bl	8002ba4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2101      	movs	r1, #1
 800233c:	2026      	movs	r0, #38	@ 0x26
 800233e:	f000 f984 	bl	800264a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002342:	2026      	movs	r0, #38	@ 0x26
 8002344:	f000 f99d 	bl	8002682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002348:	bf00      	nop
 800234a:	37b0      	adds	r7, #176	@ 0xb0
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40004400 	.word	0x40004400
 8002354:	40021000 	.word	0x40021000

08002358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002358:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002390 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800235c:	f7ff fee6 	bl	800212c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002360:	480c      	ldr	r0, [pc, #48]	@ (8002394 <LoopForever+0x6>)
  ldr r1, =_edata
 8002362:	490d      	ldr	r1, [pc, #52]	@ (8002398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <LoopForever+0xe>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002378:	4c0a      	ldr	r4, [pc, #40]	@ (80023a4 <LoopForever+0x16>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002386:	f005 feb1 	bl	80080ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800238a:	f7ff fcd7 	bl	8001d3c <main>

0800238e <LoopForever>:

LoopForever:
    b LoopForever
 800238e:	e7fe      	b.n	800238e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002390:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 800239c:	08011ff8 	.word	0x08011ff8
  ldr r2, =_sbss
 80023a0:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80023a4:	2000b01c 	.word	0x2000b01c

080023a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC1_2_IRQHandler>

080023aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f000 f93d 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ba:	200f      	movs	r0, #15
 80023bc:	f000 f80e 	bl	80023dc <HAL_InitTick>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	71fb      	strb	r3, [r7, #7]
 80023ca:	e001      	b.n	80023d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023cc:	f7ff fdfc 	bl	8001fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023d0:	79fb      	ldrb	r3, [r7, #7]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023e8:	4b17      	ldr	r3, [pc, #92]	@ (8002448 <HAL_InitTick+0x6c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d023      	beq.n	8002438 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023f0:	4b16      	ldr	r3, [pc, #88]	@ (800244c <HAL_InitTick+0x70>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <HAL_InitTick+0x6c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f949 	bl	800269e <HAL_SYSTICK_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d809      	bhi.n	800242c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f000 f913 	bl	800264a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002424:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <HAL_InitTick+0x74>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e007      	b.n	800243c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	e004      	b.n	800243c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	e001      	b.n	800243c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000208 	.word	0x20000208
 800244c:	20000200 	.word	0x20000200
 8002450:	20000204 	.word	0x20000204

08002454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_IncTick+0x20>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_IncTick+0x24>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <HAL_IncTick+0x24>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000208 	.word	0x20000208
 8002478:	2000aed0 	.word	0x2000aed0

0800247c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return uwTick;
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <HAL_GetTick+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	2000aed0 	.word	0x2000aed0

08002494 <__NVIC_SetPriorityGrouping>:
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	@ (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	@ (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	@ (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	@ (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	@ 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	@ 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	210f      	movs	r1, #15
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff29 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800265c:	f7ff ff3e 	bl	80024dc <__NVIC_GetPriorityGrouping>
 8002660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f7ff ff8e 	bl	8002588 <NVIC_EncodePriority>
 800266c:	4602      	mov	r2, r0
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff5d 	bl	8002534 <__NVIC_SetPriority>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff31 	bl	80024f8 <__NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffa2 	bl	80025f0 <SysTick_Config>
 80026ac:	4603      	mov	r3, r0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e098      	b.n	80027fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002808 <HAL_DMA_Init+0x150>)
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d80f      	bhi.n	80026f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	4b4b      	ldr	r3, [pc, #300]	@ (800280c <HAL_DMA_Init+0x154>)
 80026de:	4413      	add	r3, r2
 80026e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002810 <HAL_DMA_Init+0x158>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	009a      	lsls	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a48      	ldr	r2, [pc, #288]	@ (8002814 <HAL_DMA_Init+0x15c>)
 80026f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80026f4:	e00e      	b.n	8002714 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b46      	ldr	r3, [pc, #280]	@ (8002818 <HAL_DMA_Init+0x160>)
 80026fe:	4413      	add	r3, r2
 8002700:	4a43      	ldr	r2, [pc, #268]	@ (8002810 <HAL_DMA_Init+0x158>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	009a      	lsls	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a42      	ldr	r2, [pc, #264]	@ (800281c <HAL_DMA_Init+0x164>)
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800272a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800272e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800276e:	d039      	beq.n	80027e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	4a27      	ldr	r2, [pc, #156]	@ (8002814 <HAL_DMA_Init+0x15c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d11a      	bne.n	80027b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800277a:	4b29      	ldr	r3, [pc, #164]	@ (8002820 <HAL_DMA_Init+0x168>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	f003 031c 	and.w	r3, r3, #28
 8002786:	210f      	movs	r1, #15
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	4924      	ldr	r1, [pc, #144]	@ (8002820 <HAL_DMA_Init+0x168>)
 8002790:	4013      	ands	r3, r2
 8002792:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002794:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <HAL_DMA_Init+0x168>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a0:	f003 031c 	and.w	r3, r3, #28
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	491d      	ldr	r1, [pc, #116]	@ (8002820 <HAL_DMA_Init+0x168>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
 80027ae:	e019      	b.n	80027e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <HAL_DMA_Init+0x16c>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b8:	f003 031c 	and.w	r3, r3, #28
 80027bc:	210f      	movs	r1, #15
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	4917      	ldr	r1, [pc, #92]	@ (8002824 <HAL_DMA_Init+0x16c>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027ca:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <HAL_DMA_Init+0x16c>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	f003 031c 	and.w	r3, r3, #28
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	4911      	ldr	r1, [pc, #68]	@ (8002824 <HAL_DMA_Init+0x16c>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40020407 	.word	0x40020407
 800280c:	bffdfff8 	.word	0xbffdfff8
 8002810:	cccccccd 	.word	0xcccccccd
 8002814:	40020000 	.word	0x40020000
 8002818:	bffdfbf8 	.word	0xbffdfbf8
 800281c:	40020400 	.word	0x40020400
 8002820:	400200a8 	.word	0x400200a8
 8002824:	400204a8 	.word	0x400204a8

08002828 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_DMA_Start_IT+0x20>
 8002844:	2302      	movs	r3, #2
 8002846:	e04b      	b.n	80028e0 <HAL_DMA_Start_IT+0xb8>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d13a      	bne.n	80028d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f95f 	bl	8002b44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 020e 	orr.w	r2, r2, #14
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e00f      	b.n	80028c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0204 	bic.w	r2, r2, #4
 80028ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 020a 	orr.w	r2, r2, #10
 80028be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e005      	b.n	80028de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80028da:	2302      	movs	r3, #2
 80028dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028de:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d008      	beq.n	8002912 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2204      	movs	r2, #4
 8002904:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e022      	b.n	8002958 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 020e 	bic.w	r2, r2, #14
 8002920:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	f003 021c 	and.w	r2, r3, #28
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	2101      	movs	r1, #1
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d005      	beq.n	8002988 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	e029      	b.n	80029dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 020e 	bic.w	r2, r2, #14
 8002996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ac:	f003 021c 	and.w	r2, r3, #28
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
    }
  }
  return status;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f003 031c 	and.w	r3, r3, #28
 8002a06:	2204      	movs	r2, #4
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d026      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x7a>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d021      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0204 	bic.w	r2, r2, #4
 8002a38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	f003 021c 	and.w	r2, r3, #28
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	2104      	movs	r1, #4
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d071      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a5e:	e06c      	b.n	8002b3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	f003 031c 	and.w	r3, r3, #28
 8002a68:	2202      	movs	r2, #2
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02e      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xec>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d029      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 020a 	bic.w	r2, r2, #10
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa8:	f003 021c 	and.w	r2, r3, #28
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d038      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ad0:	e033      	b.n	8002b3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	f003 031c 	and.w	r3, r3, #28
 8002ada:	2208      	movs	r2, #8
 8002adc:	409a      	lsls	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02a      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x156>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d025      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 020e 	bic.w	r2, r2, #14
 8002afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b04:	f003 021c 	and.w	r2, r3, #28
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
}
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	f003 021c 	and.w	r2, r3, #28
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d108      	bne.n	8002b88 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b86:	e007      	b.n	8002b98 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb2:	e17f      	b.n	8002eb4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8171 	beq.w	8002eae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d005      	beq.n	8002be4 <HAL_GPIO_Init+0x40>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d130      	bne.n	8002c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 0201 	and.w	r2, r3, #1
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d118      	bne.n	8002c84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	08db      	lsrs	r3, r3, #3
 8002c6e:	f003 0201 	and.w	r2, r3, #1
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d017      	beq.n	8002cc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d123      	bne.n	8002d14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	08da      	lsrs	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3208      	adds	r2, #8
 8002cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	08da      	lsrs	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3208      	adds	r2, #8
 8002d0e:	6939      	ldr	r1, [r7, #16]
 8002d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0203 	and.w	r2, r3, #3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80ac 	beq.w	8002eae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	4b5f      	ldr	r3, [pc, #380]	@ (8002ed4 <HAL_GPIO_Init+0x330>)
 8002d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ed4 <HAL_GPIO_Init+0x330>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d62:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed4 <HAL_GPIO_Init+0x330>)
 8002d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d6e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed8 <HAL_GPIO_Init+0x334>)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d98:	d025      	beq.n	8002de6 <HAL_GPIO_Init+0x242>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002edc <HAL_GPIO_Init+0x338>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01f      	beq.n	8002de2 <HAL_GPIO_Init+0x23e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee0 <HAL_GPIO_Init+0x33c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d019      	beq.n	8002dde <HAL_GPIO_Init+0x23a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee4 <HAL_GPIO_Init+0x340>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0x236>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee8 <HAL_GPIO_Init+0x344>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00d      	beq.n	8002dd6 <HAL_GPIO_Init+0x232>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002eec <HAL_GPIO_Init+0x348>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_Init+0x22e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef0 <HAL_GPIO_Init+0x34c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_GPIO_Init+0x22a>
 8002dca:	2306      	movs	r3, #6
 8002dcc:	e00c      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002dce:	2307      	movs	r3, #7
 8002dd0:	e00a      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	e008      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e004      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002de6:	2300      	movs	r3, #0
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	f002 0203 	and.w	r2, r2, #3
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4093      	lsls	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002df8:	4937      	ldr	r1, [pc, #220]	@ (8002ed8 <HAL_GPIO_Init+0x334>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e2a:	4a32      	ldr	r2, [pc, #200]	@ (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e30:	4b30      	ldr	r3, [pc, #192]	@ (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e54:	4a27      	ldr	r2, [pc, #156]	@ (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	@ (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ea8:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <HAL_GPIO_Init+0x350>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f47f ae78 	bne.w	8002bb4 <HAL_GPIO_Init+0x10>
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	48000400 	.word	0x48000400
 8002ee0:	48000800 	.word	0x48000800
 8002ee4:	48000c00 	.word	0x48000c00
 8002ee8:	48001000 	.word	0x48001000
 8002eec:	48001400 	.word	0x48001400
 8002ef0:	48001800 	.word	0x48001800
 8002ef4:	40010400 	.word	0x40010400

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f14:	e002      	b.n	8002f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f2c:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40007000 	.word	0x40007000

08002f44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f52:	d130      	bne.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f54:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f60:	d038      	beq.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f62:	4b20      	ldr	r3, [pc, #128]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f72:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2232      	movs	r2, #50	@ 0x32
 8002f78:	fb02 f303 	mul.w	r3, r2, r3
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	0c9b      	lsrs	r3, r3, #18
 8002f84:	3301      	adds	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f88:	e002      	b.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f90:	4b14      	ldr	r3, [pc, #80]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9c:	d102      	bne.n	8002fa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f2      	bne.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb0:	d110      	bne.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e00f      	b.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc2:	d007      	beq.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fc4:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fcc:	4a05      	ldr	r2, [pc, #20]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	20000200 	.word	0x20000200
 8002fec:	431bde83 	.word	0x431bde83

08002ff0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e3ca      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003002:	4b97      	ldr	r3, [pc, #604]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800300c:	4b94      	ldr	r3, [pc, #592]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80e4 	beq.w	80031ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_RCC_OscConfig+0x4a>
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b0c      	cmp	r3, #12
 800302e:	f040 808b 	bne.w	8003148 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b01      	cmp	r3, #1
 8003036:	f040 8087 	bne.w	8003148 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800303a:	4b89      	ldr	r3, [pc, #548]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_RCC_OscConfig+0x62>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e3a2      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	4b82      	ldr	r3, [pc, #520]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_RCC_OscConfig+0x7c>
 8003062:	4b7f      	ldr	r3, [pc, #508]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800306a:	e005      	b.n	8003078 <HAL_RCC_OscConfig+0x88>
 800306c:	4b7c      	ldr	r3, [pc, #496]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003078:	4293      	cmp	r3, r2
 800307a:	d223      	bcs.n	80030c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fd55 	bl	8003b30 <RCC_SetFlashLatencyFromMSIRange>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e383      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003090:	4b73      	ldr	r3, [pc, #460]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a72      	ldr	r2, [pc, #456]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003096:	f043 0308 	orr.w	r3, r3, #8
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b70      	ldr	r3, [pc, #448]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	496d      	ldr	r1, [pc, #436]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	4968      	ldr	r1, [pc, #416]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
 80030c2:	e025      	b.n	8003110 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c4:	4b66      	ldr	r3, [pc, #408]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a65      	ldr	r2, [pc, #404]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80030ca:	f043 0308 	orr.w	r3, r3, #8
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	4b63      	ldr	r3, [pc, #396]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	4960      	ldr	r1, [pc, #384]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	495b      	ldr	r1, [pc, #364]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d109      	bne.n	8003110 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fd15 	bl	8003b30 <RCC_SetFlashLatencyFromMSIRange>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e343      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003110:	f000 fc4a 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b52      	ldr	r3, [pc, #328]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	4950      	ldr	r1, [pc, #320]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	4a4e      	ldr	r2, [pc, #312]	@ (8003268 <HAL_RCC_OscConfig+0x278>)
 800312e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003130:	4b4e      	ldr	r3, [pc, #312]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f951 	bl	80023dc <HAL_InitTick>
 800313a:	4603      	mov	r3, r0
 800313c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d052      	beq.n	80031ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	e327      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d032      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003150:	4b43      	ldr	r3, [pc, #268]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a42      	ldr	r2, [pc, #264]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800315c:	f7ff f98e 	bl	800247c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003164:	f7ff f98a 	bl	800247c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e310      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003176:	4b3a      	ldr	r3, [pc, #232]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003182:	4b37      	ldr	r3, [pc, #220]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a36      	ldr	r2, [pc, #216]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003188:	f043 0308 	orr.w	r3, r3, #8
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b34      	ldr	r3, [pc, #208]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4931      	ldr	r1, [pc, #196]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	492c      	ldr	r1, [pc, #176]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
 80031b4:	e01a      	b.n	80031ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a29      	ldr	r2, [pc, #164]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031c2:	f7ff f95b 	bl	800247c <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031ca:	f7ff f957 	bl	800247c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e2dd      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031dc:	4b20      	ldr	r3, [pc, #128]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x1da>
 80031e8:	e000      	b.n	80031ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d074      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d005      	beq.n	800320a <HAL_RCC_OscConfig+0x21a>
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d10e      	bne.n	8003222 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d10b      	bne.n	8003222 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d064      	beq.n	80032e0 <HAL_RCC_OscConfig+0x2f0>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d160      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e2ba      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x24a>
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0b      	ldr	r2, [pc, #44]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	e026      	b.n	8003288 <HAL_RCC_OscConfig+0x298>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003242:	d115      	bne.n	8003270 <HAL_RCC_OscConfig+0x280>
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 800324a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b03      	ldr	r3, [pc, #12]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a02      	ldr	r2, [pc, #8]	@ (8003260 <HAL_RCC_OscConfig+0x270>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e014      	b.n	8003288 <HAL_RCC_OscConfig+0x298>
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	08011f6c 	.word	0x08011f6c
 8003268:	20000200 	.word	0x20000200
 800326c:	20000204 	.word	0x20000204
 8003270:	4ba0      	ldr	r3, [pc, #640]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a9f      	ldr	r2, [pc, #636]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b9d      	ldr	r3, [pc, #628]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a9c      	ldr	r2, [pc, #624]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7ff f8f4 	bl	800247c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7ff f8f0 	bl	800247c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	@ 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e276      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032aa:	4b92      	ldr	r3, [pc, #584]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x2a8>
 80032b6:	e014      	b.n	80032e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7ff f8e0 	bl	800247c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7ff f8dc 	bl	800247c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	@ 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e262      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032d2:	4b88      	ldr	r3, [pc, #544]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2d0>
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d060      	beq.n	80033b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_OscConfig+0x310>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b0c      	cmp	r3, #12
 80032f8:	d119      	bne.n	800332e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d116      	bne.n	800332e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003300:	4b7c      	ldr	r3, [pc, #496]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_OscConfig+0x328>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e23f      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003318:	4b76      	ldr	r3, [pc, #472]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	4973      	ldr	r1, [pc, #460]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800332c:	e040      	b.n	80033b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d023      	beq.n	800337e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003336:	4b6f      	ldr	r3, [pc, #444]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6e      	ldr	r2, [pc, #440]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7ff f89b 	bl	800247c <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334a:	f7ff f897 	bl	800247c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e21d      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800335c:	4b65      	ldr	r3, [pc, #404]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b62      	ldr	r3, [pc, #392]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	495f      	ldr	r1, [pc, #380]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
 800337c:	e018      	b.n	80033b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337e:	4b5d      	ldr	r3, [pc, #372]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a5c      	ldr	r2, [pc, #368]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7ff f877 	bl	800247c <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003392:	f7ff f873 	bl	800247c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e1f9      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033a4:	4b53      	ldr	r3, [pc, #332]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f0      	bne.n	8003392 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d03c      	beq.n	8003436 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01c      	beq.n	80033fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c4:	4b4b      	ldr	r3, [pc, #300]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80033c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ca:	4a4a      	ldr	r2, [pc, #296]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d4:	f7ff f852 	bl	800247c <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033dc:	f7ff f84e 	bl	800247c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e1d4      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ee:	4b41      	ldr	r3, [pc, #260]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80033f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ef      	beq.n	80033dc <HAL_RCC_OscConfig+0x3ec>
 80033fc:	e01b      	b.n	8003436 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033fe:	4b3d      	ldr	r3, [pc, #244]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003404:	4a3b      	ldr	r2, [pc, #236]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7ff f835 	bl	800247c <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003416:	f7ff f831 	bl	800247c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e1b7      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003428:	4b32      	ldr	r3, [pc, #200]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 800342a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ef      	bne.n	8003416 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80a6 	beq.w	8003590 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003444:	2300      	movs	r3, #0
 8003446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003448:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10d      	bne.n	8003470 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003454:	4b27      	ldr	r3, [pc, #156]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003458:	4a26      	ldr	r2, [pc, #152]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 800345a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800345e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003460:	4b24      	ldr	r3, [pc, #144]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346c:	2301      	movs	r3, #1
 800346e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003470:	4b21      	ldr	r3, [pc, #132]	@ (80034f8 <HAL_RCC_OscConfig+0x508>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d118      	bne.n	80034ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800347c:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <HAL_RCC_OscConfig+0x508>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <HAL_RCC_OscConfig+0x508>)
 8003482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003486:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003488:	f7fe fff8 	bl	800247c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003490:	f7fe fff4 	bl	800247c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e17a      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a2:	4b15      	ldr	r3, [pc, #84]	@ (80034f8 <HAL_RCC_OscConfig+0x508>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d108      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4d8>
 80034b6:	4b0f      	ldr	r3, [pc, #60]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034bc:	4a0d      	ldr	r2, [pc, #52]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034c6:	e029      	b.n	800351c <HAL_RCC_OscConfig+0x52c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d115      	bne.n	80034fc <HAL_RCC_OscConfig+0x50c>
 80034d0:	4b08      	ldr	r3, [pc, #32]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d6:	4a07      	ldr	r2, [pc, #28]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034e0:	4b04      	ldr	r3, [pc, #16]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	4a03      	ldr	r2, [pc, #12]	@ (80034f4 <HAL_RCC_OscConfig+0x504>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034f0:	e014      	b.n	800351c <HAL_RCC_OscConfig+0x52c>
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40007000 	.word	0x40007000
 80034fc:	4b9c      	ldr	r3, [pc, #624]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	4a9b      	ldr	r2, [pc, #620]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800350c:	4b98      	ldr	r3, [pc, #608]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003512:	4a97      	ldr	r2, [pc, #604]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d016      	beq.n	8003552 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fe ffaa 	bl	800247c <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800352a:	e00a      	b.n	8003542 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7fe ffa6 	bl	800247c <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e12a      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003542:	4b8b      	ldr	r3, [pc, #556]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ed      	beq.n	800352c <HAL_RCC_OscConfig+0x53c>
 8003550:	e015      	b.n	800357e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fe ff93 	bl	800247c <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe ff8f 	bl	800247c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e113      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003570:	4b7f      	ldr	r3, [pc, #508]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ed      	bne.n	800355a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800357e:	7ffb      	ldrb	r3, [r7, #31]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b7a      	ldr	r3, [pc, #488]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003588:	4a79      	ldr	r2, [pc, #484]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80fe 	beq.w	8003796 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	2b02      	cmp	r3, #2
 80035a0:	f040 80d0 	bne.w	8003744 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035a4:	4b72      	ldr	r3, [pc, #456]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0203 	and.w	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d130      	bne.n	800361a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	3b01      	subs	r3, #1
 80035c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d127      	bne.n	800361a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d11f      	bne.n	800361a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035e4:	2a07      	cmp	r2, #7
 80035e6:	bf14      	ite	ne
 80035e8:	2201      	movne	r2, #1
 80035ea:	2200      	moveq	r2, #0
 80035ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d113      	bne.n	800361a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	3b01      	subs	r3, #1
 8003600:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d109      	bne.n	800361a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	3b01      	subs	r3, #1
 8003614:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d06e      	beq.n	80036f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d069      	beq.n	80036f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003620:	4b53      	ldr	r3, [pc, #332]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800362c:	4b50      	ldr	r3, [pc, #320]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0ad      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800363c:	4b4c      	ldr	r3, [pc, #304]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a4b      	ldr	r2, [pc, #300]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003646:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003648:	f7fe ff18 	bl	800247c <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe ff14 	bl	800247c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e09a      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003662:	4b43      	ldr	r3, [pc, #268]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800366e:	4b40      	ldr	r3, [pc, #256]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	4b40      	ldr	r3, [pc, #256]	@ (8003774 <HAL_RCC_OscConfig+0x784>)
 8003674:	4013      	ands	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800367e:	3a01      	subs	r2, #1
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003688:	0212      	lsls	r2, r2, #8
 800368a:	4311      	orrs	r1, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003690:	0852      	lsrs	r2, r2, #1
 8003692:	3a01      	subs	r2, #1
 8003694:	0552      	lsls	r2, r2, #21
 8003696:	4311      	orrs	r1, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800369c:	0852      	lsrs	r2, r2, #1
 800369e:	3a01      	subs	r2, #1
 80036a0:	0652      	lsls	r2, r2, #25
 80036a2:	4311      	orrs	r1, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036a8:	0912      	lsrs	r2, r2, #4
 80036aa:	0452      	lsls	r2, r2, #17
 80036ac:	430a      	orrs	r2, r1
 80036ae:	4930      	ldr	r1, [pc, #192]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 80036ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 80036c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036cc:	f7fe fed6 	bl	800247c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fe fed2 	bl	800247c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e058      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e6:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f2:	e050      	b.n	8003796 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e04f      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d148      	bne.n	8003796 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003704:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a19      	ldr	r2, [pc, #100]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003710:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a16      	ldr	r2, [pc, #88]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800371a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800371c:	f7fe feae 	bl	800247c <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe feaa 	bl	800247c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e030      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003736:	4b0e      	ldr	r3, [pc, #56]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x734>
 8003742:	e028      	b.n	8003796 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d023      	beq.n	8003792 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a08      	ldr	r2, [pc, #32]	@ (8003770 <HAL_RCC_OscConfig+0x780>)
 8003750:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fe fe91 	bl	800247c <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375c:	e00c      	b.n	8003778 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7fe fe8d 	bl	800247c <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d905      	bls.n	8003778 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e013      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
 8003770:	40021000 	.word	0x40021000
 8003774:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <HAL_RCC_OscConfig+0x7b0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ec      	bne.n	800375e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <HAL_RCC_OscConfig+0x7b0>)
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4905      	ldr	r1, [pc, #20]	@ (80037a0 <HAL_RCC_OscConfig+0x7b0>)
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_RCC_OscConfig+0x7b4>)
 800378c:	4013      	ands	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
 8003790:	e001      	b.n	8003796 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	feeefffc 	.word	0xfeeefffc

080037a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0e7      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037bc:	4b75      	ldr	r3, [pc, #468]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d910      	bls.n	80037ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b72      	ldr	r3, [pc, #456]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 0207 	bic.w	r2, r3, #7
 80037d2:	4970      	ldr	r1, [pc, #448]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b6e      	ldr	r3, [pc, #440]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0cf      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d010      	beq.n	800381a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	4b66      	ldr	r3, [pc, #408]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003804:	429a      	cmp	r2, r3
 8003806:	d908      	bls.n	800381a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b63      	ldr	r3, [pc, #396]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4960      	ldr	r1, [pc, #384]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d04c      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800382e:	4b5a      	ldr	r3, [pc, #360]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d121      	bne.n	800387e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0a6      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003846:	4b54      	ldr	r3, [pc, #336]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d115      	bne.n	800387e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e09a      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385e:	4b4e      	ldr	r3, [pc, #312]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e08e      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800386e:	4b4a      	ldr	r3, [pc, #296]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e086      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800387e:	4b46      	ldr	r3, [pc, #280]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f023 0203 	bic.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4943      	ldr	r1, [pc, #268]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003890:	f7fe fdf4 	bl	800247c <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	e00a      	b.n	80038ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003898:	f7fe fdf0 	bl	800247c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e06e      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 020c 	and.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	429a      	cmp	r2, r3
 80038be:	d1eb      	bne.n	8003898 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d010      	beq.n	80038ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	4b31      	ldr	r3, [pc, #196]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d8:	429a      	cmp	r2, r3
 80038da:	d208      	bcs.n	80038ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	492b      	ldr	r1, [pc, #172]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ee:	4b29      	ldr	r3, [pc, #164]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d210      	bcs.n	800391e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fc:	4b25      	ldr	r3, [pc, #148]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 0207 	bic.w	r2, r3, #7
 8003904:	4923      	ldr	r1, [pc, #140]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	4313      	orrs	r3, r2
 800390a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390c:	4b21      	ldr	r3, [pc, #132]	@ (8003994 <HAL_RCC_ClockConfig+0x1ec>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d001      	beq.n	800391e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e036      	b.n	800398c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800392a:	4b1b      	ldr	r3, [pc, #108]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4918      	ldr	r1, [pc, #96]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003948:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4910      	ldr	r1, [pc, #64]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003958:	4313      	orrs	r3, r2
 800395a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800395c:	f000 f824 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b0d      	ldr	r3, [pc, #52]	@ (8003998 <HAL_RCC_ClockConfig+0x1f0>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	490b      	ldr	r1, [pc, #44]	@ (800399c <HAL_RCC_ClockConfig+0x1f4>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f8>)
 800397a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800397c:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <HAL_RCC_ClockConfig+0x1fc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fd2b 	bl	80023dc <HAL_InitTick>
 8003986:	4603      	mov	r3, r0
 8003988:	72fb      	strb	r3, [r7, #11]

  return status;
 800398a:	7afb      	ldrb	r3, [r7, #11]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40022000 	.word	0x40022000
 8003998:	40021000 	.word	0x40021000
 800399c:	08011f6c 	.word	0x08011f6c
 80039a0:	20000200 	.word	0x20000200
 80039a4:	20000204 	.word	0x20000204

080039a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b089      	sub	sp, #36	@ 0x24
 80039ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x34>
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d121      	bne.n	8003a1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d11e      	bne.n	8003a1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039dc:	4b34      	ldr	r3, [pc, #208]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039e8:	4b31      	ldr	r3, [pc, #196]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e005      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039f8:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a04:	4a2b      	ldr	r2, [pc, #172]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10d      	bne.n	8003a30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d102      	bne.n	8003a26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a20:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	e004      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a2c:	4b23      	ldr	r3, [pc, #140]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x114>)
 8003a2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d134      	bne.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a36:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0xa6>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d003      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0xac>
 8003a4c:	e005      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a50:	617b      	str	r3, [r7, #20]
      break;
 8003a52:	e005      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a54:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x114>)
 8003a56:	617b      	str	r3, [r7, #20]
      break;
 8003a58:	e002      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	617b      	str	r3, [r7, #20]
      break;
 8003a5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a60:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a6e:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	fb03 f202 	mul.w	r2, r3, r2
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a86:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	0e5b      	lsrs	r3, r3, #25
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	3301      	adds	r3, #1
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003aa0:	69bb      	ldr	r3, [r7, #24]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3724      	adds	r7, #36	@ 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	08011f84 	.word	0x08011f84
 8003ab8:	00f42400 	.word	0x00f42400
 8003abc:	007a1200 	.word	0x007a1200

08003ac0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000200 	.word	0x20000200

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003adc:	f7ff fff0 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4904      	ldr	r1, [pc, #16]	@ (8003b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	08011f7c 	.word	0x08011f7c

08003b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b08:	f7ff ffda 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0adb      	lsrs	r3, r3, #11
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4904      	ldr	r1, [pc, #16]	@ (8003b2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	08011f7c 	.word	0x08011f7c

08003b30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b48:	f7ff f9ee 	bl	8002f28 <HAL_PWREx_GetVoltageRange>
 8003b4c:	6178      	str	r0, [r7, #20]
 8003b4e:	e014      	b.n	8003b7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b50:	4b25      	ldr	r3, [pc, #148]	@ (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	4a24      	ldr	r2, [pc, #144]	@ (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b5c:	4b22      	ldr	r3, [pc, #136]	@ (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b68:	f7ff f9de 	bl	8002f28 <HAL_PWREx_GetVoltageRange>
 8003b6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b72:	4a1d      	ldr	r2, [pc, #116]	@ (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b78:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b80:	d10b      	bne.n	8003b9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b80      	cmp	r3, #128	@ 0x80
 8003b86:	d919      	bls.n	8003bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b8c:	d902      	bls.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b8e:	2302      	movs	r3, #2
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	e013      	b.n	8003bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b94:	2301      	movs	r3, #1
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	e010      	b.n	8003bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b80      	cmp	r3, #128	@ 0x80
 8003b9e:	d902      	bls.n	8003ba6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	e00a      	b.n	8003bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b80      	cmp	r3, #128	@ 0x80
 8003baa:	d102      	bne.n	8003bb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bac:	2302      	movs	r3, #2
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	e004      	b.n	8003bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b70      	cmp	r3, #112	@ 0x70
 8003bb6:	d101      	bne.n	8003bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bb8:	2301      	movs	r3, #1
 8003bba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f023 0207 	bic.w	r2, r3, #7
 8003bc4:	4909      	ldr	r1, [pc, #36]	@ (8003bec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bcc:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d001      	beq.n	8003bde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40022000 	.word	0x40022000

08003bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d041      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c14:	d02a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c1a:	d824      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c20:	d008      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c26:	d81e      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c30:	d010      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c32:	e018      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c34:	4b86      	ldr	r3, [pc, #536]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a85      	ldr	r2, [pc, #532]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c40:	e015      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fabb 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c52:	e00c      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3320      	adds	r3, #32
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fba6 	bl	80043ac <RCCEx_PLLSAI2_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c64:	e003      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	74fb      	strb	r3, [r7, #19]
      break;
 8003c6a:	e000      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10b      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c74:	4b76      	ldr	r3, [pc, #472]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c82:	4973      	ldr	r1, [pc, #460]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c8a:	e001      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d041      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ca0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ca4:	d02a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ca6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003caa:	d824      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cb6:	d81e      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cc0:	d010      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cc2:	e018      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cc4:	4b62      	ldr	r3, [pc, #392]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a61      	ldr	r2, [pc, #388]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cd0:	e015      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fa73 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ce2:	e00c      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3320      	adds	r3, #32
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fb5e 	bl	80043ac <RCCEx_PLLSAI2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cf4:	e003      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cfa:	e000      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10b      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d04:	4b52      	ldr	r3, [pc, #328]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d12:	494f      	ldr	r1, [pc, #316]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d1a:	e001      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a0 	beq.w	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d32:	4b47      	ldr	r3, [pc, #284]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	4b41      	ldr	r3, [pc, #260]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4c:	4a40      	ldr	r2, [pc, #256]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d54:	4b3e      	ldr	r3, [pc, #248]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d60:	2301      	movs	r3, #1
 8003d62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4b3b      	ldr	r3, [pc, #236]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a3a      	ldr	r2, [pc, #232]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d70:	f7fe fb84 	bl	800247c <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d76:	e009      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fe fb80 	bl	800247c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d902      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	74fb      	strb	r3, [r7, #19]
        break;
 8003d8a:	e005      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d8c:	4b31      	ldr	r3, [pc, #196]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ef      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d15c      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01f      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d019      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dbc:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc8:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dce:	4a20      	ldr	r2, [pc, #128]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dde:	4a1c      	ldr	r2, [pc, #112]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de8:	4a19      	ldr	r2, [pc, #100]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fb3f 	bl	800247c <HAL_GetTick>
 8003dfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e00:	e00b      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fe fb3b 	bl	800247c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d902      	bls.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	74fb      	strb	r3, [r7, #19]
            break;
 8003e18:	e006      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0ec      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2e:	4b08      	ldr	r3, [pc, #32]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e3e:	4904      	ldr	r1, [pc, #16]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e46:	e009      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e48:	7cfb      	ldrb	r3, [r7, #19]
 8003e4a:	74bb      	strb	r3, [r7, #18]
 8003e4c:	e006      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e5c:	7c7b      	ldrb	r3, [r7, #17]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d105      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e62:	4b9e      	ldr	r3, [pc, #632]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e66:	4a9d      	ldr	r2, [pc, #628]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e7a:	4b98      	ldr	r3, [pc, #608]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e80:	f023 0203 	bic.w	r2, r3, #3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	4994      	ldr	r1, [pc, #592]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea2:	f023 020c 	bic.w	r2, r3, #12
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eaa:	498c      	ldr	r1, [pc, #560]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ebe:	4b87      	ldr	r3, [pc, #540]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	4983      	ldr	r1, [pc, #524]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	497b      	ldr	r1, [pc, #492]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f02:	4b76      	ldr	r3, [pc, #472]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f10:	4972      	ldr	r1, [pc, #456]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f24:	4b6d      	ldr	r3, [pc, #436]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f32:	496a      	ldr	r1, [pc, #424]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f46:	4b65      	ldr	r3, [pc, #404]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f54:	4961      	ldr	r1, [pc, #388]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f68:	4b5c      	ldr	r3, [pc, #368]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f76:	4959      	ldr	r1, [pc, #356]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f8a:	4b54      	ldr	r3, [pc, #336]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f98:	4950      	ldr	r1, [pc, #320]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fac:	4b4b      	ldr	r3, [pc, #300]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fba:	4948      	ldr	r1, [pc, #288]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fce:	4b43      	ldr	r3, [pc, #268]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fdc:	493f      	ldr	r1, [pc, #252]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d028      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffe:	4937      	ldr	r1, [pc, #220]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800400a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800400e:	d106      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004010:	4b32      	ldr	r3, [pc, #200]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a31      	ldr	r2, [pc, #196]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800401a:	60d3      	str	r3, [r2, #12]
 800401c:	e011      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004022:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004026:	d10c      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f8c8 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d028      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800404e:	4b23      	ldr	r3, [pc, #140]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004054:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405c:	491f      	ldr	r1, [pc, #124]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800406c:	d106      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406e:	4b1b      	ldr	r3, [pc, #108]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4a1a      	ldr	r2, [pc, #104]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004074:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004078:	60d3      	str	r3, [r2, #12]
 800407a:	e011      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004084:	d10c      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	2101      	movs	r1, #1
 800408c:	4618      	mov	r0, r3
 800408e:	f000 f899 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8004092:	4603      	mov	r3, r0
 8004094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d02b      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040ac:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ba:	4908      	ldr	r1, [pc, #32]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ca:	d109      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040cc:	4b03      	ldr	r3, [pc, #12]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a02      	ldr	r2, [pc, #8]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040d6:	60d3      	str	r3, [r2, #12]
 80040d8:	e014      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2101      	movs	r1, #1
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 f867 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d02f      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004110:	4b2b      	ldr	r3, [pc, #172]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004116:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800411e:	4928      	ldr	r1, [pc, #160]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800412a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800412e:	d10d      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f844 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d014      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	74bb      	strb	r3, [r7, #18]
 800414a:	e011      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004154:	d10c      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3320      	adds	r3, #32
 800415a:	2102      	movs	r1, #2
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f925 	bl	80043ac <RCCEx_PLLSAI2_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004166:	7cfb      	ldrb	r3, [r7, #19]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800417c:	4b10      	ldr	r3, [pc, #64]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800418a:	490d      	ldr	r1, [pc, #52]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800419e:	4b08      	ldr	r3, [pc, #32]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ae:	4904      	ldr	r1, [pc, #16]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000

080041c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041d2:	4b75      	ldr	r3, [pc, #468]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d018      	beq.n	8004210 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041de:	4b72      	ldr	r3, [pc, #456]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0203 	and.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d10d      	bne.n	800420a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
       ||
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041f6:	4b6c      	ldr	r3, [pc, #432]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
       ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d047      	beq.n	800429a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
 800420e:	e044      	b.n	800429a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d018      	beq.n	800424a <RCCEx_PLLSAI1_Config+0x86>
 8004218:	2b03      	cmp	r3, #3
 800421a:	d825      	bhi.n	8004268 <RCCEx_PLLSAI1_Config+0xa4>
 800421c:	2b01      	cmp	r3, #1
 800421e:	d002      	beq.n	8004226 <RCCEx_PLLSAI1_Config+0x62>
 8004220:	2b02      	cmp	r3, #2
 8004222:	d009      	beq.n	8004238 <RCCEx_PLLSAI1_Config+0x74>
 8004224:	e020      	b.n	8004268 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004226:	4b60      	ldr	r3, [pc, #384]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11d      	bne.n	800426e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004236:	e01a      	b.n	800426e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004238:	4b5b      	ldr	r3, [pc, #364]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d116      	bne.n	8004272 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004248:	e013      	b.n	8004272 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800424a:	4b57      	ldr	r3, [pc, #348]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10f      	bne.n	8004276 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004256:	4b54      	ldr	r3, [pc, #336]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004266:	e006      	b.n	8004276 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
      break;
 800426c:	e004      	b.n	8004278 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800426e:	bf00      	nop
 8004270:	e002      	b.n	8004278 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004276:	bf00      	nop
    }

    if(status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10d      	bne.n	800429a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800427e:	4b4a      	ldr	r3, [pc, #296]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	430b      	orrs	r3, r1
 8004294:	4944      	ldr	r1, [pc, #272]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d17d      	bne.n	800439c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042a0:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a40      	ldr	r2, [pc, #256]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ac:	f7fe f8e6 	bl	800247c <HAL_GetTick>
 80042b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042b2:	e009      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b4:	f7fe f8e2 	bl	800247c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d902      	bls.n	80042c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	73fb      	strb	r3, [r7, #15]
        break;
 80042c6:	e005      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042c8:	4b37      	ldr	r3, [pc, #220]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1ef      	bne.n	80042b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d160      	bne.n	800439c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d111      	bne.n	8004304 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e0:	4b31      	ldr	r3, [pc, #196]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80042e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6892      	ldr	r2, [r2, #8]
 80042f0:	0211      	lsls	r1, r2, #8
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	68d2      	ldr	r2, [r2, #12]
 80042f6:	0912      	lsrs	r2, r2, #4
 80042f8:	0452      	lsls	r2, r2, #17
 80042fa:	430a      	orrs	r2, r1
 80042fc:	492a      	ldr	r1, [pc, #168]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]
 8004302:	e027      	b.n	8004354 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d112      	bne.n	8004330 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800430a:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004312:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6892      	ldr	r2, [r2, #8]
 800431a:	0211      	lsls	r1, r2, #8
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6912      	ldr	r2, [r2, #16]
 8004320:	0852      	lsrs	r2, r2, #1
 8004322:	3a01      	subs	r2, #1
 8004324:	0552      	lsls	r2, r2, #21
 8004326:	430a      	orrs	r2, r1
 8004328:	491f      	ldr	r1, [pc, #124]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	4313      	orrs	r3, r2
 800432c:	610b      	str	r3, [r1, #16]
 800432e:	e011      	b.n	8004354 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004330:	4b1d      	ldr	r3, [pc, #116]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004338:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6892      	ldr	r2, [r2, #8]
 8004340:	0211      	lsls	r1, r2, #8
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6952      	ldr	r2, [r2, #20]
 8004346:	0852      	lsrs	r2, r2, #1
 8004348:	3a01      	subs	r2, #1
 800434a:	0652      	lsls	r2, r2, #25
 800434c:	430a      	orrs	r2, r1
 800434e:	4916      	ldr	r1, [pc, #88]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004350:	4313      	orrs	r3, r2
 8004352:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004354:	4b14      	ldr	r3, [pc, #80]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a13      	ldr	r2, [pc, #76]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800435e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fe f88c 	bl	800247c <HAL_GetTick>
 8004364:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004366:	e009      	b.n	800437c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004368:	f7fe f888 	bl	800247c <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d902      	bls.n	800437c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	73fb      	strb	r3, [r7, #15]
          break;
 800437a:	e005      	b.n	8004388 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800437c:	4b0a      	ldr	r3, [pc, #40]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ef      	beq.n	8004368 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800438e:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	4904      	ldr	r1, [pc, #16]	@ (80043a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004398:	4313      	orrs	r3, r2
 800439a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000

080043ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d018      	beq.n	80043f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043c6:	4b67      	ldr	r3, [pc, #412]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0203 	and.w	r2, r3, #3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d10d      	bne.n	80043f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
       ||
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043de:	4b61      	ldr	r3, [pc, #388]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	091b      	lsrs	r3, r3, #4
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
       ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d047      	beq.n	8004482 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
 80043f6:	e044      	b.n	8004482 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d018      	beq.n	8004432 <RCCEx_PLLSAI2_Config+0x86>
 8004400:	2b03      	cmp	r3, #3
 8004402:	d825      	bhi.n	8004450 <RCCEx_PLLSAI2_Config+0xa4>
 8004404:	2b01      	cmp	r3, #1
 8004406:	d002      	beq.n	800440e <RCCEx_PLLSAI2_Config+0x62>
 8004408:	2b02      	cmp	r3, #2
 800440a:	d009      	beq.n	8004420 <RCCEx_PLLSAI2_Config+0x74>
 800440c:	e020      	b.n	8004450 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800440e:	4b55      	ldr	r3, [pc, #340]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d11d      	bne.n	8004456 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800441e:	e01a      	b.n	8004456 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004420:	4b50      	ldr	r3, [pc, #320]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d116      	bne.n	800445a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004430:	e013      	b.n	800445a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004432:	4b4c      	ldr	r3, [pc, #304]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10f      	bne.n	800445e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800443e:	4b49      	ldr	r3, [pc, #292]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800444e:	e006      	b.n	800445e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      break;
 8004454:	e004      	b.n	8004460 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004456:	bf00      	nop
 8004458:	e002      	b.n	8004460 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800445a:	bf00      	nop
 800445c:	e000      	b.n	8004460 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800445e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10d      	bne.n	8004482 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004466:	4b3f      	ldr	r3, [pc, #252]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6819      	ldr	r1, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	3b01      	subs	r3, #1
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	430b      	orrs	r3, r1
 800447c:	4939      	ldr	r1, [pc, #228]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447e:	4313      	orrs	r3, r2
 8004480:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d167      	bne.n	8004558 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004488:	4b36      	ldr	r3, [pc, #216]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a35      	ldr	r2, [pc, #212]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004494:	f7fd fff2 	bl	800247c <HAL_GetTick>
 8004498:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800449a:	e009      	b.n	80044b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800449c:	f7fd ffee 	bl	800247c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d902      	bls.n	80044b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	73fb      	strb	r3, [r7, #15]
        break;
 80044ae:	e005      	b.n	80044bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ef      	bne.n	800449c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d14a      	bne.n	8004558 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d111      	bne.n	80044ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c8:	4b26      	ldr	r3, [pc, #152]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80044d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6892      	ldr	r2, [r2, #8]
 80044d8:	0211      	lsls	r1, r2, #8
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68d2      	ldr	r2, [r2, #12]
 80044de:	0912      	lsrs	r2, r2, #4
 80044e0:	0452      	lsls	r2, r2, #17
 80044e2:	430a      	orrs	r2, r1
 80044e4:	491f      	ldr	r1, [pc, #124]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	614b      	str	r3, [r1, #20]
 80044ea:	e011      	b.n	8004510 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
 80044fc:	0211      	lsls	r1, r2, #8
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6912      	ldr	r2, [r2, #16]
 8004502:	0852      	lsrs	r2, r2, #1
 8004504:	3a01      	subs	r2, #1
 8004506:	0652      	lsls	r2, r2, #25
 8004508:	430a      	orrs	r2, r1
 800450a:	4916      	ldr	r1, [pc, #88]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450c:	4313      	orrs	r3, r2
 800450e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004510:	4b14      	ldr	r3, [pc, #80]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a13      	ldr	r2, [pc, #76]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800451a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fd ffae 	bl	800247c <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004522:	e009      	b.n	8004538 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004524:	f7fd ffaa 	bl	800247c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d902      	bls.n	8004538 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	73fb      	strb	r3, [r7, #15]
          break;
 8004536:	e005      	b.n	8004544 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004538:	4b0a      	ldr	r3, [pc, #40]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ef      	beq.n	8004524 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800454a:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	4904      	ldr	r1, [pc, #16]	@ (8004564 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000

08004568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e095      	b.n	80046a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	2b00      	cmp	r3, #0
 8004580:	d108      	bne.n	8004594 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800458a:	d009      	beq.n	80045a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	61da      	str	r2, [r3, #28]
 8004592:	e005      	b.n	80045a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fd fc6c 	bl	8001e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045e0:	d902      	bls.n	80045e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e002      	b.n	80045ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80045f6:	d007      	beq.n	8004608 <HAL_SPI_Init+0xa0>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004600:	d002      	beq.n	8004608 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464a:	ea42 0103 	orr.w	r1, r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	f003 0204 	and.w	r2, r3, #4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004684:	ea42 0103 	orr.w	r1, r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b088      	sub	sp, #32
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046be:	f7fd fedd 	bl	800247c <HAL_GetTick>
 80046c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
 80046d6:	e15c      	b.n	8004992 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_Transmit+0x36>
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e154      	b.n	8004992 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_SPI_Transmit+0x48>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e14d      	b.n	8004992 <HAL_SPI_Transmit+0x2e4>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2203      	movs	r2, #3
 8004702:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	88fa      	ldrh	r2, [r7, #6]
 8004716:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004748:	d10f      	bne.n	800476a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004758:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004768:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004774:	2b40      	cmp	r3, #64	@ 0x40
 8004776:	d007      	beq.n	8004788 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004786:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004790:	d952      	bls.n	8004838 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_SPI_Transmit+0xf2>
 800479a:	8b7b      	ldrh	r3, [r7, #26]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d145      	bne.n	800482c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a4:	881a      	ldrh	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b0:	1c9a      	adds	r2, r3, #2
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047c4:	e032      	b.n	800482c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d112      	bne.n	80047fa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d8:	881a      	ldrh	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e4:	1c9a      	adds	r2, r3, #2
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047f8:	e018      	b.n	800482c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047fa:	f7fd fe3f 	bl	800247c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d803      	bhi.n	8004812 <HAL_SPI_Transmit+0x164>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d102      	bne.n	8004818 <HAL_SPI_Transmit+0x16a>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e0b2      	b.n	8004992 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1c7      	bne.n	80047c6 <HAL_SPI_Transmit+0x118>
 8004836:	e083      	b.n	8004940 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_SPI_Transmit+0x198>
 8004840:	8b7b      	ldrh	r3, [r7, #26]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d177      	bne.n	8004936 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d912      	bls.n	8004876 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	881a      	ldrh	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004860:	1c9a      	adds	r2, r3, #2
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b02      	subs	r3, #2
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004874:	e05f      	b.n	8004936 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800489c:	e04b      	b.n	8004936 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d12b      	bne.n	8004904 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d912      	bls.n	80048dc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	881a      	ldrh	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	1c9a      	adds	r2, r3, #2
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b02      	subs	r3, #2
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048da:	e02c      	b.n	8004936 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	7812      	ldrb	r2, [r2, #0]
 80048e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004902:	e018      	b.n	8004936 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004904:	f7fd fdba 	bl	800247c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d803      	bhi.n	800491c <HAL_SPI_Transmit+0x26e>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d102      	bne.n	8004922 <HAL_SPI_Transmit+0x274>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e02d      	b.n	8004992 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ae      	bne.n	800489e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	6839      	ldr	r1, [r7, #0]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fbd3 	bl	80050f0 <SPI_EndRxTxTransaction>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004990:	2300      	movs	r3, #0
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	4613      	mov	r3, r2
 80049a8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d001      	beq.n	80049ba <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0d4      	b.n	8004b64 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_SPI_Transmit_DMA+0x2a>
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e0cc      	b.n	8004b64 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_SPI_Transmit_DMA+0x3c>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e0c5      	b.n	8004b64 <HAL_SPI_Transmit_DMA+0x1c8>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2203      	movs	r2, #3
 80049e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	88fa      	ldrh	r2, [r7, #6]
 80049fe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2a:	d10f      	bne.n	8004a4c <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a50:	4a46      	ldr	r2, [pc, #280]	@ (8004b6c <HAL_SPI_Transmit_DMA+0x1d0>)
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a58:	4a45      	ldr	r2, [pc, #276]	@ (8004b70 <HAL_SPI_Transmit_DMA+0x1d4>)
 8004a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a60:	4a44      	ldr	r2, [pc, #272]	@ (8004b74 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004a62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a68:	2200      	movs	r2, #0
 8004a6a:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a7a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a84:	d82d      	bhi.n	8004ae2 <HAL_SPI_Transmit_DMA+0x146>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a90:	d127      	bne.n	8004ae2 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10f      	bne.n	8004ac0 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004aae:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004abe:	e010      	b.n	8004ae2 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ace:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	4619      	mov	r1, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004afa:	f7fd fe95 	bl	8002828 <HAL_DMA_Start_IT>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b08:	f043 0210 	orr.w	r2, r3, #16
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e023      	b.n	8004b64 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b26:	2b40      	cmp	r3, #64	@ 0x40
 8004b28:	d007      	beq.n	8004b3a <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b38:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0220 	orr.w	r2, r2, #32
 8004b50:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0202 	orr.w	r2, r2, #2
 8004b60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	08004e2f 	.word	0x08004e2f
 8004b70:	08004d89 	.word	0x08004d89
 8004b74:	08004e4b 	.word	0x08004e4b

08004b78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10e      	bne.n	8004bb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d009      	beq.n	8004bb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	4798      	blx	r3
    return;
 8004bb6:	e0ce      	b.n	8004d56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_SPI_IRQHandler+0x5e>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4798      	blx	r3
    return;
 8004bd4:	e0bf      	b.n	8004d56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <HAL_SPI_IRQHandler+0x7e>
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d105      	bne.n	8004bf6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80b0 	beq.w	8004d56 <HAL_SPI_IRQHandler+0x1de>
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80aa 	beq.w	8004d56 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d023      	beq.n	8004c54 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d011      	beq.n	8004c3c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c1c:	f043 0204 	orr.w	r2, r3, #4
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	e00b      	b.n	8004c54 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	693b      	ldr	r3, [r7, #16]
        return;
 8004c52:	e080      	b.n	8004d56 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d014      	beq.n	8004c88 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c62:	f043 0201 	orr.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00c      	beq.n	8004cac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c96:	f043 0208 	orr.w	r2, r3, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d04f      	beq.n	8004d54 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cc2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <HAL_SPI_IRQHandler+0x168>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d034      	beq.n	8004d4a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0203 	bic.w	r2, r2, #3
 8004cee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d011      	beq.n	8004d1c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfc:	4a17      	ldr	r2, [pc, #92]	@ (8004d5c <HAL_SPI_IRQHandler+0x1e4>)
 8004cfe:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fd fe2d 	bl	8002964 <HAL_DMA_Abort_IT>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d016      	beq.n	8004d52 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d28:	4a0c      	ldr	r2, [pc, #48]	@ (8004d5c <HAL_SPI_IRQHandler+0x1e4>)
 8004d2a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd fe17 	bl	8002964 <HAL_DMA_Abort_IT>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004d48:	e003      	b.n	8004d52 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f812 	bl	8004d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d50:	e000      	b.n	8004d54 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004d52:	bf00      	nop
    return;
 8004d54:	bf00      	nop
  }
}
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	08004e8b 	.word	0x08004e8b

08004d60 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d94:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d96:	f7fd fb71 	bl	800247c <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d03b      	beq.n	8004e22 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0220 	bic.w	r2, r2, #32
 8004db8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0202 	bic.w	r2, r2, #2
 8004dc8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	2164      	movs	r1, #100	@ 0x64
 8004dce:	6978      	ldr	r0, [r7, #20]
 8004dd0:	f000 f98e 	bl	80050f0 <SPI_EndRxTxTransaction>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2200      	movs	r2, #0
 8004e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004e1a:	6978      	ldr	r0, [r7, #20]
 8004e1c:	f7ff ffaa 	bl	8004d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e20:	e002      	b.n	8004e28 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004e22:	6978      	ldr	r0, [r7, #20]
 8004e24:	f7fc fef6 	bl	8001c14 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff ff8f 	bl	8004d60 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0203 	bic.w	r2, r2, #3
 8004e66:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff ff79 	bl	8004d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f7ff ff64 	bl	8004d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ec4:	f7fd fada 	bl	800247c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ed4:	f7fd fad2 	bl	800247c <HAL_GetTick>
 8004ed8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eda:	4b39      	ldr	r3, [pc, #228]	@ (8004fc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	015b      	lsls	r3, r3, #5
 8004ee0:	0d1b      	lsrs	r3, r3, #20
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	fb02 f303 	mul.w	r3, r2, r3
 8004ee8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eea:	e054      	b.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d050      	beq.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ef4:	f7fd fac2 	bl	800247c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d902      	bls.n	8004f0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d13d      	bne.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f22:	d111      	bne.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f2c:	d004      	beq.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f36:	d107      	bne.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f50:	d10f      	bne.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e017      	b.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d19b      	bne.n	8004eec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000200 	.word	0x20000200

08004fc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	@ 0x28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fd6:	f7fd fa51 	bl	800247c <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004fe6:	f7fd fa49 	bl	800247c <HAL_GetTick>
 8004fea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80050ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	00da      	lsls	r2, r3, #3
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	0d1b      	lsrs	r3, r3, #20
 8005004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800500c:	e060      	b.n	80050d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005014:	d107      	bne.n	8005026 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005024:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d050      	beq.n	80050d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800502e:	f7fd fa25 	bl	800247c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503a:	429a      	cmp	r2, r3
 800503c:	d902      	bls.n	8005044 <SPI_WaitFifoStateUntilTimeout+0x80>
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d13d      	bne.n	80050c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005052:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800505c:	d111      	bne.n	8005082 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005066:	d004      	beq.n	8005072 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005070:	d107      	bne.n	8005082 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005080:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800508a:	d10f      	bne.n	80050ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e010      	b.n	80050e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4013      	ands	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d196      	bne.n	800500e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3728      	adds	r7, #40	@ 0x28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000200 	.word	0x20000200

080050f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2200      	movs	r2, #0
 8005104:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ff5b 	bl	8004fc4 <SPI_WaitFifoStateUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e027      	b.n	8005174 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	2180      	movs	r1, #128	@ 0x80
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fec0 	bl	8004eb4 <SPI_WaitFlagStateUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e014      	b.n	8005174 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2200      	movs	r2, #0
 8005152:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff ff34 	bl	8004fc4 <SPI_WaitFifoStateUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e000      	b.n	8005174 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e040      	b.n	8005210 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd f876 	bl	8002290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2224      	movs	r2, #36	@ 0x24
 80051a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0201 	bic.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fea6 	bl	8005f14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fbeb 	bl	80059a4 <UART_SetConfig>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e01b      	b.n	8005210 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 ff25 	bl	8006058 <UART_CheckIdleState>
 800520e:	4603      	mov	r3, r0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005218:	b480      	push	{r7}
 800521a:	b08b      	sub	sp, #44	@ 0x2c
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800522a:	2b20      	cmp	r3, #32
 800522c:	d147      	bne.n	80052be <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_UART_Transmit_IT+0x22>
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e040      	b.n	80052c0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	88fa      	ldrh	r2, [r7, #6]
 8005250:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2221      	movs	r2, #33	@ 0x21
 8005266:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005270:	d107      	bne.n	8005282 <HAL_UART_Transmit_IT+0x6a>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a13      	ldr	r2, [pc, #76]	@ (80052cc <HAL_UART_Transmit_IT+0xb4>)
 800527e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005280:	e002      	b.n	8005288 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4a12      	ldr	r2, [pc, #72]	@ (80052d0 <HAL_UART_Transmit_IT+0xb8>)
 8005286:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	613b      	str	r3, [r7, #16]
   return(result);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	69f9      	ldr	r1, [r7, #28]
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e6      	bne.n	8005288 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e000      	b.n	80052c0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80052be:	2302      	movs	r3, #2
  }
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	372c      	adds	r7, #44	@ 0x2c
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	080065bb 	.word	0x080065bb
 80052d0:	08006505 	.word	0x08006505

080052d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	@ 0x28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	4613      	mov	r3, r2
 80052e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d137      	bne.n	800535c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_UART_Receive_IT+0x24>
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e030      	b.n	800535e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a18      	ldr	r2, [pc, #96]	@ (8005368 <HAL_UART_Receive_IT+0x94>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d01f      	beq.n	800534c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d018      	beq.n	800534c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	613b      	str	r3, [r7, #16]
   return(result);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	69f9      	ldr	r1, [r7, #28]
 800533e:	6a3a      	ldr	r2, [r7, #32]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	61bb      	str	r3, [r7, #24]
   return(result);
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e6      	bne.n	800531a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800534c:	88fb      	ldrh	r3, [r7, #6]
 800534e:	461a      	mov	r2, r3
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 ff96 	bl	8006284 <UART_Start_Receive_IT>
 8005358:	4603      	mov	r3, r0
 800535a:	e000      	b.n	800535e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800535c:	2302      	movs	r3, #2
  }
}
 800535e:	4618      	mov	r0, r3
 8005360:	3728      	adds	r7, #40	@ 0x28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40008000 	.word	0x40008000

0800536c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b0ba      	sub	sp, #232	@ 0xe8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005392:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005396:	f640 030f 	movw	r3, #2063	@ 0x80f
 800539a:	4013      	ands	r3, r2
 800539c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80053a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d115      	bne.n	80053d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00f      	beq.n	80053d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 82ca 	beq.w	800595e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
      }
      return;
 80053d2:	e2c4      	b.n	800595e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80053d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8117 	beq.w	800560c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053ee:	4b85      	ldr	r3, [pc, #532]	@ (8005604 <HAL_UART_IRQHandler+0x298>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 810a 	beq.w	800560c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d011      	beq.n	8005428 <HAL_UART_IRQHandler+0xbc>
 8005404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2201      	movs	r2, #1
 8005416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800541e:	f043 0201 	orr.w	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d011      	beq.n	8005458 <HAL_UART_IRQHandler+0xec>
 8005434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00b      	beq.n	8005458 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2202      	movs	r2, #2
 8005446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800544e:	f043 0204 	orr.w	r2, r3, #4
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d011      	beq.n	8005488 <HAL_UART_IRQHandler+0x11c>
 8005464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2204      	movs	r2, #4
 8005476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547e:	f043 0202 	orr.w	r2, r3, #2
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d017      	beq.n	80054c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d105      	bne.n	80054ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2208      	movs	r2, #8
 80054b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ba:	f043 0208 	orr.w	r2, r3, #8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d012      	beq.n	80054f6 <HAL_UART_IRQHandler+0x18a>
 80054d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00c      	beq.n	80054f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8230 	beq.w	8005962 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00d      	beq.n	800552a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800550e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005530:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553e:	2b40      	cmp	r3, #64	@ 0x40
 8005540:	d005      	beq.n	800554e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005546:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800554a:	2b00      	cmp	r3, #0
 800554c:	d04f      	beq.n	80055ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 ff5e 	bl	8006410 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555e:	2b40      	cmp	r3, #64	@ 0x40
 8005560:	d141      	bne.n	80055e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800557c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3308      	adds	r3, #8
 800558a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800558e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800559a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1d9      	bne.n	8005562 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d013      	beq.n	80055de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ba:	4a13      	ldr	r2, [pc, #76]	@ (8005608 <HAL_UART_IRQHandler+0x29c>)
 80055bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fd f9ce 	bl	8002964 <HAL_DMA_Abort_IT>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d017      	beq.n	80055fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055d8:	4610      	mov	r0, r2
 80055da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	e00f      	b.n	80055fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f9ca 	bl	8005978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	e00b      	b.n	80055fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f9c6 	bl	8005978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	e007      	b.n	80055fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9c2 	bl	8005978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80055fc:	e1b1      	b.n	8005962 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fe:	bf00      	nop
    return;
 8005600:	e1af      	b.n	8005962 <HAL_UART_IRQHandler+0x5f6>
 8005602:	bf00      	nop
 8005604:	04000120 	.word	0x04000120
 8005608:	080064d9 	.word	0x080064d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005610:	2b01      	cmp	r3, #1
 8005612:	f040 816a 	bne.w	80058ea <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8163 	beq.w	80058ea <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 815c 	beq.w	80058ea <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2210      	movs	r2, #16
 8005638:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005644:	2b40      	cmp	r3, #64	@ 0x40
 8005646:	f040 80d4 	bne.w	80057f2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005656:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80ad 	beq.w	80057ba <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800566a:	429a      	cmp	r2, r3
 800566c:	f080 80a5 	bcs.w	80057ba <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005676:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	f040 8086 	bne.w	8005798 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80056ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1da      	bne.n	800568c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3308      	adds	r3, #8
 80056dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005702:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800570c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e1      	bne.n	80056d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3308      	adds	r3, #8
 8005718:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3308      	adds	r3, #8
 8005732:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005736:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005738:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800573c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e3      	bne.n	8005712 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005768:	f023 0310 	bic.w	r3, r3, #16
 800576c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800577a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800577c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005780:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e4      	bne.n	8005758 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005792:	4618      	mov	r0, r3
 8005794:	f7fd f8a8 	bl	80028e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8ea 	bl	800598c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80057b8:	e0d5      	b.n	8005966 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057c4:	429a      	cmp	r2, r3
 80057c6:	f040 80ce 	bne.w	8005966 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	f040 80c5 	bne.w	8005966 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f8ce 	bl	800598c <HAL_UARTEx_RxEventCallback>
      return;
 80057f0:	e0b9      	b.n	8005966 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 80ab 	beq.w	800596a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80a6 	beq.w	800596a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800582c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005832:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005840:	647b      	str	r3, [r7, #68]	@ 0x44
 8005842:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800584e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e4      	bne.n	800581e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3308      	adds	r3, #8
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	623b      	str	r3, [r7, #32]
   return(result);
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f023 0301 	bic.w	r3, r3, #1
 800586a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3308      	adds	r3, #8
 8005874:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005878:	633a      	str	r2, [r7, #48]	@ 0x30
 800587a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800587e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e3      	bne.n	8005854 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 0310 	bic.w	r3, r3, #16
 80058b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	69b9      	ldr	r1, [r7, #24]
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	617b      	str	r3, [r7, #20]
   return(result);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e4      	bne.n	80058a0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f852 	bl	800598c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058e8:	e03f      	b.n	800596a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00e      	beq.n	8005914 <HAL_UART_IRQHandler+0x5a8>
 80058f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800590a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 f89b 	bl	8006a48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005912:	e02d      	b.n	8005970 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00e      	beq.n	800593e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01c      	beq.n	800596e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
    }
    return;
 800593c:	e017      	b.n	800596e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800593e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d012      	beq.n	8005970 <HAL_UART_IRQHandler+0x604>
 800594a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800594e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00c      	beq.n	8005970 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fe8f 	bl	800667a <UART_EndTransmit_IT>
    return;
 800595c:	e008      	b.n	8005970 <HAL_UART_IRQHandler+0x604>
      return;
 800595e:	bf00      	nop
 8005960:	e006      	b.n	8005970 <HAL_UART_IRQHandler+0x604>
    return;
 8005962:	bf00      	nop
 8005964:	e004      	b.n	8005970 <HAL_UART_IRQHandler+0x604>
      return;
 8005966:	bf00      	nop
 8005968:	e002      	b.n	8005970 <HAL_UART_IRQHandler+0x604>
      return;
 800596a:	bf00      	nop
 800596c:	e000      	b.n	8005970 <HAL_UART_IRQHandler+0x604>
    return;
 800596e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005970:	37e8      	adds	r7, #232	@ 0xe8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop

08005978 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a8:	b08a      	sub	sp, #40	@ 0x28
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	431a      	orrs	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4ba4      	ldr	r3, [pc, #656]	@ (8005c64 <UART_SetConfig+0x2c0>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059dc:	430b      	orrs	r3, r1
 80059de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a99      	ldr	r2, [pc, #612]	@ (8005c68 <UART_SetConfig+0x2c4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a20:	430a      	orrs	r2, r1
 8005a22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a90      	ldr	r2, [pc, #576]	@ (8005c6c <UART_SetConfig+0x2c8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d126      	bne.n	8005a7c <UART_SetConfig+0xd8>
 8005a2e:	4b90      	ldr	r3, [pc, #576]	@ (8005c70 <UART_SetConfig+0x2cc>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d81b      	bhi.n	8005a74 <UART_SetConfig+0xd0>
 8005a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <UART_SetConfig+0xa0>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a55 	.word	0x08005a55
 8005a48:	08005a65 	.word	0x08005a65
 8005a4c:	08005a5d 	.word	0x08005a5d
 8005a50:	08005a6d 	.word	0x08005a6d
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a5a:	e116      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a62:	e112      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005a64:	2304      	movs	r3, #4
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a6a:	e10e      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a72:	e10a      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005a74:	2310      	movs	r3, #16
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a7a:	e106      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a7c      	ldr	r2, [pc, #496]	@ (8005c74 <UART_SetConfig+0x2d0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d138      	bne.n	8005af8 <UART_SetConfig+0x154>
 8005a86:	4b7a      	ldr	r3, [pc, #488]	@ (8005c70 <UART_SetConfig+0x2cc>)
 8005a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b0c      	cmp	r3, #12
 8005a92:	d82d      	bhi.n	8005af0 <UART_SetConfig+0x14c>
 8005a94:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <UART_SetConfig+0xf8>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005ad1 	.word	0x08005ad1
 8005aa0:	08005af1 	.word	0x08005af1
 8005aa4:	08005af1 	.word	0x08005af1
 8005aa8:	08005af1 	.word	0x08005af1
 8005aac:	08005ae1 	.word	0x08005ae1
 8005ab0:	08005af1 	.word	0x08005af1
 8005ab4:	08005af1 	.word	0x08005af1
 8005ab8:	08005af1 	.word	0x08005af1
 8005abc:	08005ad9 	.word	0x08005ad9
 8005ac0:	08005af1 	.word	0x08005af1
 8005ac4:	08005af1 	.word	0x08005af1
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005ae9 	.word	0x08005ae9
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ad6:	e0d8      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ade:	e0d4      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae6:	e0d0      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005ae8:	2308      	movs	r3, #8
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aee:	e0cc      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005af0:	2310      	movs	r3, #16
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005af6:	e0c8      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a5e      	ldr	r2, [pc, #376]	@ (8005c78 <UART_SetConfig+0x2d4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d125      	bne.n	8005b4e <UART_SetConfig+0x1aa>
 8005b02:	4b5b      	ldr	r3, [pc, #364]	@ (8005c70 <UART_SetConfig+0x2cc>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b0c:	2b30      	cmp	r3, #48	@ 0x30
 8005b0e:	d016      	beq.n	8005b3e <UART_SetConfig+0x19a>
 8005b10:	2b30      	cmp	r3, #48	@ 0x30
 8005b12:	d818      	bhi.n	8005b46 <UART_SetConfig+0x1a2>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d00a      	beq.n	8005b2e <UART_SetConfig+0x18a>
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d814      	bhi.n	8005b46 <UART_SetConfig+0x1a2>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <UART_SetConfig+0x182>
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d008      	beq.n	8005b36 <UART_SetConfig+0x192>
 8005b24:	e00f      	b.n	8005b46 <UART_SetConfig+0x1a2>
 8005b26:	2300      	movs	r3, #0
 8005b28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b2c:	e0ad      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b34:	e0a9      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005b36:	2304      	movs	r3, #4
 8005b38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b3c:	e0a5      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005b3e:	2308      	movs	r3, #8
 8005b40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b44:	e0a1      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005b46:	2310      	movs	r3, #16
 8005b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b4c:	e09d      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a4a      	ldr	r2, [pc, #296]	@ (8005c7c <UART_SetConfig+0x2d8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d125      	bne.n	8005ba4 <UART_SetConfig+0x200>
 8005b58:	4b45      	ldr	r3, [pc, #276]	@ (8005c70 <UART_SetConfig+0x2cc>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b64:	d016      	beq.n	8005b94 <UART_SetConfig+0x1f0>
 8005b66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b68:	d818      	bhi.n	8005b9c <UART_SetConfig+0x1f8>
 8005b6a:	2b80      	cmp	r3, #128	@ 0x80
 8005b6c:	d00a      	beq.n	8005b84 <UART_SetConfig+0x1e0>
 8005b6e:	2b80      	cmp	r3, #128	@ 0x80
 8005b70:	d814      	bhi.n	8005b9c <UART_SetConfig+0x1f8>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <UART_SetConfig+0x1d8>
 8005b76:	2b40      	cmp	r3, #64	@ 0x40
 8005b78:	d008      	beq.n	8005b8c <UART_SetConfig+0x1e8>
 8005b7a:	e00f      	b.n	8005b9c <UART_SetConfig+0x1f8>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b82:	e082      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005b84:	2302      	movs	r3, #2
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b8a:	e07e      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b92:	e07a      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005b94:	2308      	movs	r3, #8
 8005b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b9a:	e076      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ba2:	e072      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a35      	ldr	r2, [pc, #212]	@ (8005c80 <UART_SetConfig+0x2dc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d12a      	bne.n	8005c04 <UART_SetConfig+0x260>
 8005bae:	4b30      	ldr	r3, [pc, #192]	@ (8005c70 <UART_SetConfig+0x2cc>)
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bbc:	d01a      	beq.n	8005bf4 <UART_SetConfig+0x250>
 8005bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bc2:	d81b      	bhi.n	8005bfc <UART_SetConfig+0x258>
 8005bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bc8:	d00c      	beq.n	8005be4 <UART_SetConfig+0x240>
 8005bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bce:	d815      	bhi.n	8005bfc <UART_SetConfig+0x258>
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <UART_SetConfig+0x238>
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd8:	d008      	beq.n	8005bec <UART_SetConfig+0x248>
 8005bda:	e00f      	b.n	8005bfc <UART_SetConfig+0x258>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005be2:	e052      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005be4:	2302      	movs	r3, #2
 8005be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bea:	e04e      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bf2:	e04a      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bfa:	e046      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c02:	e042      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a17      	ldr	r2, [pc, #92]	@ (8005c68 <UART_SetConfig+0x2c4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d13a      	bne.n	8005c84 <UART_SetConfig+0x2e0>
 8005c0e:	4b18      	ldr	r3, [pc, #96]	@ (8005c70 <UART_SetConfig+0x2cc>)
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c1c:	d01a      	beq.n	8005c54 <UART_SetConfig+0x2b0>
 8005c1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c22:	d81b      	bhi.n	8005c5c <UART_SetConfig+0x2b8>
 8005c24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c28:	d00c      	beq.n	8005c44 <UART_SetConfig+0x2a0>
 8005c2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c2e:	d815      	bhi.n	8005c5c <UART_SetConfig+0x2b8>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <UART_SetConfig+0x298>
 8005c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c38:	d008      	beq.n	8005c4c <UART_SetConfig+0x2a8>
 8005c3a:	e00f      	b.n	8005c5c <UART_SetConfig+0x2b8>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c42:	e022      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005c44:	2302      	movs	r3, #2
 8005c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c4a:	e01e      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c52:	e01a      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005c54:	2308      	movs	r3, #8
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c5a:	e016      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c62:	e012      	b.n	8005c8a <UART_SetConfig+0x2e6>
 8005c64:	efff69f3 	.word	0xefff69f3
 8005c68:	40008000 	.word	0x40008000
 8005c6c:	40013800 	.word	0x40013800
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40004400 	.word	0x40004400
 8005c78:	40004800 	.word	0x40004800
 8005c7c:	40004c00 	.word	0x40004c00
 8005c80:	40005000 	.word	0x40005000
 8005c84:	2310      	movs	r3, #16
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a9f      	ldr	r2, [pc, #636]	@ (8005f0c <UART_SetConfig+0x568>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d17a      	bne.n	8005d8a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d824      	bhi.n	8005ce6 <UART_SetConfig+0x342>
 8005c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca4 <UART_SetConfig+0x300>)
 8005c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca2:	bf00      	nop
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005cd1 	.word	0x08005cd1
 8005cb0:	08005ce7 	.word	0x08005ce7
 8005cb4:	08005cd7 	.word	0x08005cd7
 8005cb8:	08005ce7 	.word	0x08005ce7
 8005cbc:	08005ce7 	.word	0x08005ce7
 8005cc0:	08005ce7 	.word	0x08005ce7
 8005cc4:	08005cdf 	.word	0x08005cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc8:	f7fd ff06 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8005ccc:	61f8      	str	r0, [r7, #28]
        break;
 8005cce:	e010      	b.n	8005cf2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b8f      	ldr	r3, [pc, #572]	@ (8005f10 <UART_SetConfig+0x56c>)
 8005cd2:	61fb      	str	r3, [r7, #28]
        break;
 8005cd4:	e00d      	b.n	8005cf2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7fd fe67 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8005cda:	61f8      	str	r0, [r7, #28]
        break;
 8005cdc:	e009      	b.n	8005cf2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce2:	61fb      	str	r3, [r7, #28]
        break;
 8005ce4:	e005      	b.n	8005cf2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80fb 	beq.w	8005ef0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	4413      	add	r3, r2
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d305      	bcc.n	8005d16 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d903      	bls.n	8005d1e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d1c:	e0e8      	b.n	8005ef0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2200      	movs	r2, #0
 8005d22:	461c      	mov	r4, r3
 8005d24:	4615      	mov	r5, r2
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	022b      	lsls	r3, r5, #8
 8005d30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d34:	0222      	lsls	r2, r4, #8
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	6849      	ldr	r1, [r1, #4]
 8005d3a:	0849      	lsrs	r1, r1, #1
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	4688      	mov	r8, r1
 8005d40:	4681      	mov	r9, r0
 8005d42:	eb12 0a08 	adds.w	sl, r2, r8
 8005d46:	eb43 0b09 	adc.w	fp, r3, r9
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d58:	4650      	mov	r0, sl
 8005d5a:	4659      	mov	r1, fp
 8005d5c:	f7fa fa90 	bl	8000280 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4613      	mov	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d6e:	d308      	bcc.n	8005d82 <UART_SetConfig+0x3de>
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d76:	d204      	bcs.n	8005d82 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	60da      	str	r2, [r3, #12]
 8005d80:	e0b6      	b.n	8005ef0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d88:	e0b2      	b.n	8005ef0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d92:	d15e      	bne.n	8005e52 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d828      	bhi.n	8005dee <UART_SetConfig+0x44a>
 8005d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <UART_SetConfig+0x400>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005dc9 	.word	0x08005dc9
 8005da8:	08005dd1 	.word	0x08005dd1
 8005dac:	08005dd9 	.word	0x08005dd9
 8005db0:	08005def 	.word	0x08005def
 8005db4:	08005ddf 	.word	0x08005ddf
 8005db8:	08005def 	.word	0x08005def
 8005dbc:	08005def 	.word	0x08005def
 8005dc0:	08005def 	.word	0x08005def
 8005dc4:	08005de7 	.word	0x08005de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dc8:	f7fd fe86 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8005dcc:	61f8      	str	r0, [r7, #28]
        break;
 8005dce:	e014      	b.n	8005dfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dd0:	f7fd fe98 	bl	8003b04 <HAL_RCC_GetPCLK2Freq>
 8005dd4:	61f8      	str	r0, [r7, #28]
        break;
 8005dd6:	e010      	b.n	8005dfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8005f10 <UART_SetConfig+0x56c>)
 8005dda:	61fb      	str	r3, [r7, #28]
        break;
 8005ddc:	e00d      	b.n	8005dfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dde:	f7fd fde3 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8005de2:	61f8      	str	r0, [r7, #28]
        break;
 8005de4:	e009      	b.n	8005dfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dea:	61fb      	str	r3, [r7, #28]
        break;
 8005dec:	e005      	b.n	8005dfa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005df8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d077      	beq.n	8005ef0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	005a      	lsls	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	441a      	add	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b0f      	cmp	r3, #15
 8005e1a:	d916      	bls.n	8005e4a <UART_SetConfig+0x4a6>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e22:	d212      	bcs.n	8005e4a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f023 030f 	bic.w	r3, r3, #15
 8005e2c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	8afb      	ldrh	r3, [r7, #22]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	8afa      	ldrh	r2, [r7, #22]
 8005e46:	60da      	str	r2, [r3, #12]
 8005e48:	e052      	b.n	8005ef0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e50:	e04e      	b.n	8005ef0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d827      	bhi.n	8005eaa <UART_SetConfig+0x506>
 8005e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <UART_SetConfig+0x4bc>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e8d 	.word	0x08005e8d
 8005e68:	08005e95 	.word	0x08005e95
 8005e6c:	08005eab 	.word	0x08005eab
 8005e70:	08005e9b 	.word	0x08005e9b
 8005e74:	08005eab 	.word	0x08005eab
 8005e78:	08005eab 	.word	0x08005eab
 8005e7c:	08005eab 	.word	0x08005eab
 8005e80:	08005ea3 	.word	0x08005ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e84:	f7fd fe28 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8005e88:	61f8      	str	r0, [r7, #28]
        break;
 8005e8a:	e014      	b.n	8005eb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e8c:	f7fd fe3a 	bl	8003b04 <HAL_RCC_GetPCLK2Freq>
 8005e90:	61f8      	str	r0, [r7, #28]
        break;
 8005e92:	e010      	b.n	8005eb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e94:	4b1e      	ldr	r3, [pc, #120]	@ (8005f10 <UART_SetConfig+0x56c>)
 8005e96:	61fb      	str	r3, [r7, #28]
        break;
 8005e98:	e00d      	b.n	8005eb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e9a:	f7fd fd85 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8005e9e:	61f8      	str	r0, [r7, #28]
        break;
 8005ea0:	e009      	b.n	8005eb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ea6:	61fb      	str	r3, [r7, #28]
        break;
 8005ea8:	e005      	b.n	8005eb6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005eb4:	bf00      	nop
    }

    if (pclk != 0U)
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d019      	beq.n	8005ef0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	085a      	lsrs	r2, r3, #1
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b0f      	cmp	r3, #15
 8005ed4:	d909      	bls.n	8005eea <UART_SetConfig+0x546>
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005edc:	d205      	bcs.n	8005eea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60da      	str	r2, [r3, #12]
 8005ee8:	e002      	b.n	8005ef0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005efc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3728      	adds	r7, #40	@ 0x28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40008000 	.word	0x40008000
 8005f10:	00f42400 	.word	0x00f42400

08005f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01a      	beq.n	800602a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006012:	d10a      	bne.n	800602a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	605a      	str	r2, [r3, #4]
  }
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b098      	sub	sp, #96	@ 0x60
 800605c:	af02      	add	r7, sp, #8
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006068:	f7fc fa08 	bl	800247c <HAL_GetTick>
 800606c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b08      	cmp	r3, #8
 800607a:	d12e      	bne.n	80060da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800607c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006084:	2200      	movs	r2, #0
 8006086:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f88c 	bl	80061a8 <UART_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d021      	beq.n	80060da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e6      	bne.n	8006096 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e062      	b.n	80061a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d149      	bne.n	800617c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f0:	2200      	movs	r2, #0
 80060f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f856 	bl	80061a8 <UART_WaitOnFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d03c      	beq.n	800617c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	623b      	str	r3, [r7, #32]
   return(result);
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006120:	633b      	str	r3, [r7, #48]	@ 0x30
 8006122:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e6      	bne.n	8006102 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3308      	adds	r3, #8
 800613a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	e853 3f00 	ldrex	r3, [r3]
 8006142:	60fb      	str	r3, [r7, #12]
   return(result);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0301 	bic.w	r3, r3, #1
 800614a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3308      	adds	r3, #8
 8006152:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006154:	61fa      	str	r2, [r7, #28]
 8006156:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	69b9      	ldr	r1, [r7, #24]
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	e841 2300 	strex	r3, r2, [r1]
 8006160:	617b      	str	r3, [r7, #20]
   return(result);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e5      	bne.n	8006134 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e011      	b.n	80061a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3758      	adds	r7, #88	@ 0x58
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	4613      	mov	r3, r2
 80061b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b8:	e04f      	b.n	800625a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d04b      	beq.n	800625a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c2:	f7fc f95b 	bl	800247c <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e04e      	b.n	800627a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d037      	beq.n	800625a <UART_WaitOnFlagUntilTimeout+0xb2>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b80      	cmp	r3, #128	@ 0x80
 80061ee:	d034      	beq.n	800625a <UART_WaitOnFlagUntilTimeout+0xb2>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b40      	cmp	r3, #64	@ 0x40
 80061f4:	d031      	beq.n	800625a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b08      	cmp	r3, #8
 8006202:	d110      	bne.n	8006226 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2208      	movs	r2, #8
 800620a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f8ff 	bl	8006410 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2208      	movs	r2, #8
 8006216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e029      	b.n	800627a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006234:	d111      	bne.n	800625a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800623e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f8e5 	bl	8006410 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e00f      	b.n	800627a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4013      	ands	r3, r2
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	429a      	cmp	r2, r3
 8006268:	bf0c      	ite	eq
 800626a:	2301      	moveq	r3, #1
 800626c:	2300      	movne	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	429a      	cmp	r2, r3
 8006276:	d0a0      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006284:	b480      	push	{r7}
 8006286:	b097      	sub	sp, #92	@ 0x5c
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	88fa      	ldrh	r2, [r7, #6]
 800629c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b6:	d10e      	bne.n	80062d6 <UART_Start_Receive_IT+0x52>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d105      	bne.n	80062cc <UART_Start_Receive_IT+0x48>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80062c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062ca:	e02d      	b.n	8006328 <UART_Start_Receive_IT+0xa4>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	22ff      	movs	r2, #255	@ 0xff
 80062d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062d4:	e028      	b.n	8006328 <UART_Start_Receive_IT+0xa4>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10d      	bne.n	80062fa <UART_Start_Receive_IT+0x76>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <UART_Start_Receive_IT+0x6c>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	22ff      	movs	r2, #255	@ 0xff
 80062ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062ee:	e01b      	b.n	8006328 <UART_Start_Receive_IT+0xa4>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	227f      	movs	r2, #127	@ 0x7f
 80062f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062f8:	e016      	b.n	8006328 <UART_Start_Receive_IT+0xa4>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006302:	d10d      	bne.n	8006320 <UART_Start_Receive_IT+0x9c>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <UART_Start_Receive_IT+0x92>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	227f      	movs	r2, #127	@ 0x7f
 8006310:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006314:	e008      	b.n	8006328 <UART_Start_Receive_IT+0xa4>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	223f      	movs	r2, #63	@ 0x3f
 800631a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800631e:	e003      	b.n	8006328 <UART_Start_Receive_IT+0xa4>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2222      	movs	r2, #34	@ 0x22
 8006334:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3308      	adds	r3, #8
 800633e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006358:	64ba      	str	r2, [r7, #72]	@ 0x48
 800635a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800635e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e5      	bne.n	8006338 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006374:	d107      	bne.n	8006386 <UART_Start_Receive_IT+0x102>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4a21      	ldr	r2, [pc, #132]	@ (8006408 <UART_Start_Receive_IT+0x184>)
 8006382:	669a      	str	r2, [r3, #104]	@ 0x68
 8006384:	e002      	b.n	800638c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a20      	ldr	r2, [pc, #128]	@ (800640c <UART_Start_Receive_IT+0x188>)
 800638a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d019      	beq.n	80063c8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80063a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80063c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e6      	bne.n	8006394 <UART_Start_Receive_IT+0x110>
 80063c6:	e018      	b.n	80063fa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	613b      	str	r3, [r7, #16]
   return(result);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f043 0320 	orr.w	r3, r3, #32
 80063dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063e6:	623b      	str	r3, [r7, #32]
 80063e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	69f9      	ldr	r1, [r7, #28]
 80063ec:	6a3a      	ldr	r2, [r7, #32]
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e6      	bne.n	80063c8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	375c      	adds	r7, #92	@ 0x5c
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	0800688d 	.word	0x0800688d
 800640c:	080066d1 	.word	0x080066d1

08006410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b095      	sub	sp, #84	@ 0x54
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800642c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006436:	643b      	str	r3, [r7, #64]	@ 0x40
 8006438:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800643c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e6      	bne.n	8006418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3308      	adds	r3, #8
 8006450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	61fb      	str	r3, [r7, #28]
   return(result);
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	f023 0301 	bic.w	r3, r3, #1
 8006460:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3308      	adds	r3, #8
 8006468:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800646a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800646c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e5      	bne.n	800644a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006482:	2b01      	cmp	r3, #1
 8006484:	d118      	bne.n	80064b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	60bb      	str	r3, [r7, #8]
   return(result);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f023 0310 	bic.w	r3, r3, #16
 800649a:	647b      	str	r3, [r7, #68]	@ 0x44
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	461a      	mov	r2, r3
 80064a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6979      	ldr	r1, [r7, #20]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	613b      	str	r3, [r7, #16]
   return(result);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e6      	bne.n	8006486 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064cc:	bf00      	nop
 80064ce:	3754      	adds	r7, #84	@ 0x54
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff fa3e 	bl	8005978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064fc:	bf00      	nop
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b08f      	sub	sp, #60	@ 0x3c
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006510:	2b21      	cmp	r3, #33	@ 0x21
 8006512:	d14c      	bne.n	80065ae <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d132      	bne.n	8006586 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	61fb      	str	r3, [r7, #28]
   return(result);
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006534:	637b      	str	r3, [r7, #52]	@ 0x34
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800653e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006540:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e6      	bne.n	8006520 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006566:	633b      	str	r3, [r7, #48]	@ 0x30
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6979      	ldr	r1, [r7, #20]
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	613b      	str	r3, [r7, #16]
   return(result);
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e6      	bne.n	8006552 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006584:	e013      	b.n	80065ae <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800658a:	781a      	ldrb	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80065ae:	bf00      	nop
 80065b0:	373c      	adds	r7, #60	@ 0x3c
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b091      	sub	sp, #68	@ 0x44
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065c6:	2b21      	cmp	r3, #33	@ 0x21
 80065c8:	d151      	bne.n	800666e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d132      	bne.n	800663c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	623b      	str	r3, [r7, #32]
   return(result);
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80065f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e6      	bne.n	80065d6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	60fb      	str	r3, [r7, #12]
   return(result);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800661c:	637b      	str	r3, [r7, #52]	@ 0x34
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	69b9      	ldr	r1, [r7, #24]
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	617b      	str	r3, [r7, #20]
   return(result);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e6      	bne.n	8006608 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800663a:	e018      	b.n	800666e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006640:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006644:	881a      	ldrh	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800664e:	b292      	uxth	r2, r2
 8006650:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006656:	1c9a      	adds	r2, r3, #2
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800666e:	bf00      	nop
 8006670:	3744      	adds	r7, #68	@ 0x44
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b088      	sub	sp, #32
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006696:	61fb      	str	r3, [r7, #28]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6979      	ldr	r1, [r7, #20]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	613b      	str	r3, [r7, #16]
   return(result);
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e6      	bne.n	8006682 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fb fd45 	bl	8002150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c6:	bf00      	nop
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b09c      	sub	sp, #112	@ 0x70
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066e8:	2b22      	cmp	r3, #34	@ 0x22
 80066ea:	f040 80be 	bne.w	800686a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80066f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066fc:	b2d9      	uxtb	r1, r3
 80066fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006702:	b2da      	uxtb	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006708:	400a      	ands	r2, r1
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	f040 80a3 	bne.w	800687e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006748:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800674c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006756:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006758:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800675c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e6      	bne.n	8006738 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800677a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	667b      	str	r3, [r7, #100]	@ 0x64
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3308      	adds	r3, #8
 8006788:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800678a:	647a      	str	r2, [r7, #68]	@ 0x44
 800678c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006790:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e5      	bne.n	800676a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a34      	ldr	r2, [pc, #208]	@ (8006888 <UART_RxISR_8BIT+0x1b8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d01f      	beq.n	80067fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d018      	beq.n	80067fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	623b      	str	r3, [r7, #32]
   return(result);
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067de:	663b      	str	r3, [r7, #96]	@ 0x60
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80067ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e6      	bne.n	80067ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006800:	2b01      	cmp	r3, #1
 8006802:	d12e      	bne.n	8006862 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	60fb      	str	r3, [r7, #12]
   return(result);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0310 	bic.w	r3, r3, #16
 800681e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	69b9      	ldr	r1, [r7, #24]
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	617b      	str	r3, [r7, #20]
   return(result);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e6      	bne.n	800680a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b10      	cmp	r3, #16
 8006848:	d103      	bne.n	8006852 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2210      	movs	r2, #16
 8006850:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff f896 	bl	800598c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006860:	e00d      	b.n	800687e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fb fca4 	bl	80021b0 <HAL_UART_RxCpltCallback>
}
 8006868:	e009      	b.n	800687e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	8b1b      	ldrh	r3, [r3, #24]
 8006870:	b29a      	uxth	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0208 	orr.w	r2, r2, #8
 800687a:	b292      	uxth	r2, r2
 800687c:	831a      	strh	r2, [r3, #24]
}
 800687e:	bf00      	nop
 8006880:	3770      	adds	r7, #112	@ 0x70
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	40008000 	.word	0x40008000

0800688c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b09c      	sub	sp, #112	@ 0x70
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800689a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a4:	2b22      	cmp	r3, #34	@ 0x22
 80068a6:	f040 80be 	bne.w	8006a26 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80068b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80068ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80068be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80068c2:	4013      	ands	r3, r2
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ce:	1c9a      	adds	r2, r3, #2
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 80a3 	bne.w	8006a3a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006908:	667b      	str	r3, [r7, #100]	@ 0x64
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006912:	657b      	str	r3, [r7, #84]	@ 0x54
 8006914:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006918:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e6      	bne.n	80068f4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	663b      	str	r3, [r7, #96]	@ 0x60
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3308      	adds	r3, #8
 8006944:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006946:	643a      	str	r2, [r7, #64]	@ 0x40
 8006948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800694c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e5      	bne.n	8006926 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a34      	ldr	r2, [pc, #208]	@ (8006a44 <UART_RxISR_16BIT+0x1b8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d01f      	beq.n	80069b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d018      	beq.n	80069b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	61fb      	str	r3, [r7, #28]
   return(result);
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800699a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069a6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e6      	bne.n	8006986 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d12e      	bne.n	8006a1e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f023 0310 	bic.w	r3, r3, #16
 80069da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6979      	ldr	r1, [r7, #20]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	613b      	str	r3, [r7, #16]
   return(result);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e6      	bne.n	80069c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f003 0310 	and.w	r3, r3, #16
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d103      	bne.n	8006a0e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2210      	movs	r2, #16
 8006a0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fe ffb8 	bl	800598c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a1c:	e00d      	b.n	8006a3a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fb fbc6 	bl	80021b0 <HAL_UART_RxCpltCallback>
}
 8006a24:	e009      	b.n	8006a3a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	8b1b      	ldrh	r3, [r3, #24]
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0208 	orr.w	r2, r2, #8
 8006a36:	b292      	uxth	r2, r2
 8006a38:	831a      	strh	r2, [r3, #24]
}
 8006a3a:	bf00      	nop
 8006a3c:	3770      	adds	r7, #112	@ 0x70
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	40008000 	.word	0x40008000

08006a48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	7992      	ldrb	r2, [r2, #6]
 8006a6e:	08d2      	lsrs	r2, r2, #3
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	fb13 f302 	smulbb	r3, r3, r2
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	889b      	ldrh	r3, [r3, #4]
 8006a80:	461a      	mov	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	885b      	ldrh	r3, [r3, #2]
 8006a86:	fb02 f303 	mul.w	r3, r2, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	60da      	str	r2, [r3, #12]
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006aa2:	b490      	push	{r4, r7}
 8006aa4:	b086      	sub	sp, #24
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	4608      	mov	r0, r1
 8006aac:	1d39      	adds	r1, r7, #4
 8006aae:	e881 000c 	stmia.w	r1, {r2, r3}
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	81fb      	strh	r3, [r7, #14]
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ac2:	88ba      	ldrh	r2, [r7, #4]
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	da04      	bge.n	8006ad2 <code+0x30>
        code |= LEFT;
 8006ac8:	2201      	movs	r2, #1
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	75fb      	strb	r3, [r7, #23]
 8006ad0:	e008      	b.n	8006ae4 <code+0x42>
    } else if (x0 > window.x1) {
 8006ad2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ad6:	893a      	ldrh	r2, [r7, #8]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	dd03      	ble.n	8006ae4 <code+0x42>
        code |= RIGHT;
 8006adc:	2202      	movs	r2, #2
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006ae4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ae8:	88fa      	ldrh	r2, [r7, #6]
 8006aea:	4293      	cmp	r3, r2
 8006aec:	da04      	bge.n	8006af8 <code+0x56>
        code |= BOTTOM;
 8006aee:	2204      	movs	r2, #4
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	75fb      	strb	r3, [r7, #23]
 8006af6:	e008      	b.n	8006b0a <code+0x68>
    } else if (y0 > window.y1) {
 8006af8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006afc:	897a      	ldrh	r2, [r7, #10]
 8006afe:	4293      	cmp	r3, r2
 8006b00:	dd03      	ble.n	8006b0a <code+0x68>
        code |= TOP;
 8006b02:	2208      	movs	r2, #8
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc90      	pop	{r4, r7}
 8006b14:	4770      	bx	lr

08006b16 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b088      	sub	sp, #32
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006b30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006b34:	cb0c      	ldmia	r3, {r2, r3}
 8006b36:	f7ff ffb4 	bl	8006aa2 <code>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006b4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006b4e:	cb0c      	ldmia	r3, {r2, r3}
 8006b50:	f7ff ffa7 	bl	8006aa2 <code>
 8006b54:	4603      	mov	r3, r0
 8006b56:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006b5c:	7ffa      	ldrb	r2, [r7, #31]
 8006b5e:	7fbb      	ldrb	r3, [r7, #30]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	777b      	strb	r3, [r7, #29]
            break;
 8006b6c:	e0e9      	b.n	8006d42 <clip_line+0x22c>
        } else if (code0 & code1) {
 8006b6e:	7ffa      	ldrb	r2, [r7, #31]
 8006b70:	7fbb      	ldrb	r3, [r7, #30]
 8006b72:	4013      	ands	r3, r2
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 80e2 	bne.w	8006d40 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006b84:	7ffb      	ldrb	r3, [r7, #31]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <clip_line+0x78>
 8006b8a:	7ffb      	ldrb	r3, [r7, #31]
 8006b8c:	e000      	b.n	8006b90 <clip_line+0x7a>
 8006b8e:	7fbb      	ldrb	r3, [r7, #30]
 8006b90:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006b92:	2208      	movs	r2, #8
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
 8006b96:	4013      	ands	r3, r2
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d024      	beq.n	8006be8 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bac:	4619      	mov	r1, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bb4:	1acb      	subs	r3, r1, r3
 8006bb6:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006bb8:	4608      	mov	r0, r1
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006bc0:	1a41      	subs	r1, r0, r1
 8006bc2:	fb03 f101 	mul.w	r1, r3, r1
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd4:	1ac3      	subs	r3, r0, r3
 8006bd6:	fb91 f3f3 	sdiv	r3, r1, r3
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	4413      	add	r3, r2
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006be2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006be4:	833b      	strh	r3, [r7, #24]
 8006be6:	e07f      	b.n	8006ce8 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006be8:	2204      	movs	r2, #4
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	4013      	ands	r3, r2
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d024      	beq.n	8006c3e <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c02:	4619      	mov	r1, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c0a:	1acb      	subs	r3, r1, r3
 8006c0c:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006c0e:	4608      	mov	r0, r1
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006c16:	1a41      	subs	r1, r0, r1
 8006c18:	fb03 f101 	mul.w	r1, r3, r1
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c22:	4618      	mov	r0, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c2a:	1ac3      	subs	r3, r0, r3
 8006c2c:	fb91 f3f3 	sdiv	r3, r1, r3
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006c38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c3a:	833b      	strh	r3, [r7, #24]
 8006c3c:	e054      	b.n	8006ce8 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006c3e:	2202      	movs	r2, #2
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	4013      	ands	r3, r2
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d024      	beq.n	8006c94 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c60:	1acb      	subs	r3, r1, r3
 8006c62:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006c64:	4608      	mov	r0, r1
 8006c66:	68f9      	ldr	r1, [r7, #12]
 8006c68:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006c6c:	1a41      	subs	r1, r0, r1
 8006c6e:	fb03 f101 	mul.w	r1, r3, r1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c80:	1ac3      	subs	r3, r0, r3
 8006c82:	fb91 f3f3 	sdiv	r3, r1, r3
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4413      	add	r3, r2
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006c8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c90:	837b      	strh	r3, [r7, #26]
 8006c92:	e029      	b.n	8006ce8 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006c94:	2201      	movs	r2, #1
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d023      	beq.n	8006ce8 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cb6:	1acb      	subs	r3, r1, r3
 8006cb8:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006cba:	4608      	mov	r0, r1
 8006cbc:	68f9      	ldr	r1, [r7, #12]
 8006cbe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006cc2:	1a41      	subs	r1, r0, r1
 8006cc4:	fb03 f101 	mul.w	r1, r3, r1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cd6:	1ac3      	subs	r3, r0, r3
 8006cd8:	fb91 f3f3 	sdiv	r3, r1, r3
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	4413      	add	r3, r2
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006ce4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ce6:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006ce8:	7dfa      	ldrb	r2, [r7, #23]
 8006cea:	7ffb      	ldrb	r3, [r7, #31]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d113      	bne.n	8006d18 <clip_line+0x202>
                *x0 = x;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8b7a      	ldrh	r2, [r7, #26]
 8006cf4:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	8b3a      	ldrh	r2, [r7, #24]
 8006cfa:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006d08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006d0c:	cb0c      	ldmia	r3, {r2, r3}
 8006d0e:	f7ff fec8 	bl	8006aa2 <code>
 8006d12:	4603      	mov	r3, r0
 8006d14:	77fb      	strb	r3, [r7, #31]
 8006d16:	e721      	b.n	8006b5c <clip_line+0x46>
            } else {
                *x1 = x;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8b7a      	ldrh	r2, [r7, #26]
 8006d1c:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	8b3a      	ldrh	r2, [r7, #24]
 8006d22:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006d30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006d34:	cb0c      	ldmia	r3, {r2, r3}
 8006d36:	f7ff feb4 	bl	8006aa2 <code>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006d3e:	e70d      	b.n	8006b5c <clip_line+0x46>
            break;
 8006d40:	bf00      	nop
            }
        }
    }

    return accept;
 8006d42:	7f7b      	ldrb	r3, [r7, #29]
 8006d44:	4618      	mov	r0, r3
 8006d46:	3720      	adds	r7, #32
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	3306      	adds	r3, #6
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	4619      	mov	r1, r3
 8006d60:	f001 f9ea 	bl	8008138 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	330e      	adds	r3, #14
 8006d68:	781a      	ldrb	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	330f      	adds	r3, #15
 8006d72:	781a      	ldrb	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	3310      	adds	r3, #16
 8006d7c:	781a      	ldrb	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	72da      	strb	r2, [r3, #11]

    return 0;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08e      	sub	sp, #56	@ 0x38
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006d98:	f107 0314 	add.w	r3, r7, #20
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff ffd4 	bl	8006d4c <fontx_meta>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8006daa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <fontx_glyph+0x2c>
        return status;
 8006db2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006db6:	e077      	b.n	8006ea8 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006db8:	7f7a      	ldrb	r2, [r7, #29]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006dbe:	7fba      	ldrb	r2, [r7, #30]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006dc4:	7f7b      	ldrb	r3, [r7, #29]
 8006dc6:	3307      	adds	r3, #7
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	da00      	bge.n	8006dce <fontx_glyph+0x42>
 8006dcc:	3307      	adds	r3, #7
 8006dce:	10db      	asrs	r3, r3, #3
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	78da      	ldrb	r2, [r3, #3]
 8006dda:	7fbb      	ldrb	r3, [r7, #30]
 8006ddc:	fb12 f303 	smulbb	r3, r2, r3
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006de6:	7ffb      	ldrb	r3, [r7, #31]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10f      	bne.n	8006e0c <fontx_glyph+0x80>
        if (code < 0x100) {
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2bff      	cmp	r3, #255	@ 0xff
 8006df0:	d859      	bhi.n	8006ea6 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	789b      	ldrb	r3, [r3, #2]
 8006df6:	461a      	mov	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	fb02 f303 	mul.w	r3, r2, r3
 8006dfe:	3311      	adds	r3, #17
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	441a      	add	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	e04d      	b.n	8006ea8 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3312      	adds	r3, #18
 8006e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3311      	adds	r3, #17
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8006e1e:	e03d      	b.n	8006e9c <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e28:	3301      	adds	r3, #1
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	4413      	add	r3, r2
 8006e30:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e34:	3302      	adds	r3, #2
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3c:	3303      	adds	r3, #3
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	4413      	add	r3, r2
 8006e44:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d31c      	bcc.n	8006e88 <fontx_glyph+0xfc>
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d818      	bhi.n	8006e88 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e5e:	4413      	add	r3, r2
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3311      	adds	r3, #17
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	461a      	mov	r2, r3
                    nc * glyph->size
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	789b      	ldrb	r3, [r3, #2]
 8006e70:	4619      	mov	r1, r3
 8006e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006e78:	4413      	add	r3, r2
 8006e7a:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	441a      	add	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	e00f      	b.n	8006ea8 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006e88:	6a3a      	ldr	r2, [r7, #32]
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	1ad2      	subs	r2, r2, r3
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e90:	4413      	add	r3, r2
 8006e92:	3301      	adds	r3, #1
 8006e94:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e98:	3304      	adds	r3, #4
 8006e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	1e5a      	subs	r2, r3, #1
 8006ea0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1bc      	bne.n	8006e20 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3738      	adds	r7, #56	@ 0x38
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	dd01      	ble.n	8006ec6 <min+0x16>
        return b;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	e000      	b.n	8006ec8 <min+0x18>
    };
    return a;
 8006ec6:	687b      	ldr	r3, [r7, #4]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <max>:

static inline int max(int a, int b) {
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	dd01      	ble.n	8006eea <max+0x16>
        return a;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	e000      	b.n	8006eec <max+0x18>
    }
    return b;
 8006eea:	683b      	ldr	r3, [r7, #0]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	80fb      	strh	r3, [r7, #6]
 8006f02:	460b      	mov	r3, r1
 8006f04:	80bb      	strh	r3, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f0e:	4a12      	ldr	r2, [pc, #72]	@ (8006f58 <hagl_put_pixel+0x60>)
 8006f10:	8812      	ldrh	r2, [r2, #0]
 8006f12:	4293      	cmp	r3, r2
 8006f14:	db1a      	blt.n	8006f4c <hagl_put_pixel+0x54>
 8006f16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8006f58 <hagl_put_pixel+0x60>)
 8006f1c:	8852      	ldrh	r2, [r2, #2]
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	db14      	blt.n	8006f4c <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f26:	4a0c      	ldr	r2, [pc, #48]	@ (8006f58 <hagl_put_pixel+0x60>)
 8006f28:	8892      	ldrh	r2, [r2, #4]
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	dc10      	bgt.n	8006f50 <hagl_put_pixel+0x58>
 8006f2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f32:	4a09      	ldr	r2, [pc, #36]	@ (8006f58 <hagl_put_pixel+0x60>)
 8006f34:	88d2      	ldrh	r2, [r2, #6]
 8006f36:	4293      	cmp	r3, r2
 8006f38:	dc0a      	bgt.n	8006f50 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006f42:	887a      	ldrh	r2, [r7, #2]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fa fe3d 	bl	8001bc4 <lcdPutPixel>
 8006f4a:	e002      	b.n	8006f52 <hagl_put_pixel+0x5a>
        return;
 8006f4c:	bf00      	nop
 8006f4e:	e000      	b.n	8006f52 <hagl_put_pixel+0x5a>
        return;
 8006f50:	bf00      	nop
}
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	2000020c 	.word	0x2000020c

08006f5c <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006f5c:	b590      	push	{r4, r7, lr}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	461a      	mov	r2, r3
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	80fb      	strh	r3, [r7, #6]
 8006f6e:	4603      	mov	r3, r0
 8006f70:	80bb      	strh	r3, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	807b      	strh	r3, [r7, #2]
 8006f76:	4613      	mov	r3, r2
 8006f78:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8006f7a:	88fa      	ldrh	r2, [r7, #6]
 8006f7c:	887b      	ldrh	r3, [r7, #2]
 8006f7e:	4413      	add	r3, r2
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	b21a      	sxth	r2, r3
 8006f84:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006f88:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006f8c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006f90:	883b      	ldrh	r3, [r7, #0]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	4623      	mov	r3, r4
 8006f96:	f000 f827 	bl	8006fe8 <hagl_draw_line>
#endif
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd90      	pop	{r4, r7, pc}

08006fa2 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006fa2:	b590      	push	{r4, r7, lr}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af02      	add	r7, sp, #8
 8006fa8:	4604      	mov	r4, r0
 8006faa:	4608      	mov	r0, r1
 8006fac:	4611      	mov	r1, r2
 8006fae:	461a      	mov	r2, r3
 8006fb0:	4623      	mov	r3, r4
 8006fb2:	80fb      	strh	r3, [r7, #6]
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	80bb      	strh	r3, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	807b      	strh	r3, [r7, #2]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006fc0:	88ba      	ldrh	r2, [r7, #4]
 8006fc2:	887b      	ldrh	r3, [r7, #2]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	b21c      	sxth	r4, r3
 8006fca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006fd2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006fd6:	883b      	ldrh	r3, [r7, #0]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	4623      	mov	r3, r4
 8006fdc:	f000 f804 	bl	8006fe8 <hagl_draw_line>
#endif
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd90      	pop	{r4, r7, pc}

08006fe8 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fea:	b089      	sub	sp, #36	@ 0x24
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	80fb      	strh	r3, [r7, #6]
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	80bb      	strh	r3, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	807b      	strh	r3, [r7, #2]
 8007002:	4613      	mov	r3, r2
 8007004:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8007006:	463b      	mov	r3, r7
 8007008:	1cba      	adds	r2, r7, #2
 800700a:	1d3d      	adds	r5, r7, #4
 800700c:	1dbc      	adds	r4, r7, #6
 800700e:	494a      	ldr	r1, [pc, #296]	@ (8007138 <hagl_draw_line+0x150>)
 8007010:	466e      	mov	r6, sp
 8007012:	c903      	ldmia	r1, {r0, r1}
 8007014:	e886 0003 	stmia.w	r6, {r0, r1}
 8007018:	4629      	mov	r1, r5
 800701a:	4620      	mov	r0, r4
 800701c:	f7ff fd7b 	bl	8006b16 <clip_line>
 8007020:	4603      	mov	r3, r0
 8007022:	f083 0301 	eor.w	r3, r3, #1
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d17e      	bne.n	800712a <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 800702c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007030:	461a      	mov	r2, r3
 8007032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	bfb8      	it	lt
 800703c:	425b      	neglt	r3, r3
 800703e:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8007040:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007044:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007048:	429a      	cmp	r2, r3
 800704a:	da01      	bge.n	8007050 <hagl_draw_line+0x68>
 800704c:	2301      	movs	r3, #1
 800704e:	e001      	b.n	8007054 <hagl_draw_line+0x6c>
 8007050:	f04f 33ff 	mov.w	r3, #4294967295
 8007054:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8007056:	f9b7 3000 	ldrsh.w	r3, [r7]
 800705a:	461a      	mov	r2, r3
 800705c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	bfb8      	it	lt
 8007066:	425b      	neglt	r3, r3
 8007068:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800706a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800706e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007072:	429a      	cmp	r2, r3
 8007074:	da01      	bge.n	800707a <hagl_draw_line+0x92>
 8007076:	2301      	movs	r3, #1
 8007078:	e001      	b.n	800707e <hagl_draw_line+0x96>
 800707a:	f04f 33ff 	mov.w	r3, #4294967295
 800707e:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8007080:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007084:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007088:	429a      	cmp	r2, r3
 800708a:	dd06      	ble.n	800709a <hagl_draw_line+0xb2>
 800708c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007090:	0fda      	lsrs	r2, r3, #31
 8007092:	4413      	add	r3, r2
 8007094:	105b      	asrs	r3, r3, #1
 8007096:	b21b      	sxth	r3, r3
 8007098:	e006      	b.n	80070a8 <hagl_draw_line+0xc0>
 800709a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800709e:	0fda      	lsrs	r2, r3, #31
 80070a0:	4413      	add	r3, r2
 80070a2:	105b      	asrs	r3, r3, #1
 80070a4:	425b      	negs	r3, r3
 80070a6:	b21b      	sxth	r3, r3
 80070a8:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 80070aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80070b2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff ff1f 	bl	8006ef8 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80070ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d105      	bne.n	80070d2 <hagl_draw_line+0xea>
 80070c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80070ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d02d      	beq.n	800712e <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 80070d2:	8afb      	ldrh	r3, [r7, #22]
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80070da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80070de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80070e2:	425b      	negs	r3, r3
 80070e4:	429a      	cmp	r2, r3
 80070e6:	dd0c      	ble.n	8007102 <hagl_draw_line+0x11a>
            err -= dy;
 80070e8:	8afa      	ldrh	r2, [r7, #22]
 80070ea:	8a3b      	ldrh	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80070f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	8a7b      	ldrh	r3, [r7, #18]
 80070fa:	4413      	add	r3, r2
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	b21b      	sxth	r3, r3
 8007100:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8007102:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007106:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800710a:	429a      	cmp	r2, r3
 800710c:	dacd      	bge.n	80070aa <hagl_draw_line+0xc2>
            err += dx;
 800710e:	8afa      	ldrh	r2, [r7, #22]
 8007110:	8abb      	ldrh	r3, [r7, #20]
 8007112:	4413      	add	r3, r2
 8007114:	b29b      	uxth	r3, r3
 8007116:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8007118:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800711c:	b29a      	uxth	r2, r3
 800711e:	89fb      	ldrh	r3, [r7, #14]
 8007120:	4413      	add	r3, r2
 8007122:	b29b      	uxth	r3, r3
 8007124:	b21b      	sxth	r3, r3
 8007126:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8007128:	e7bf      	b.n	80070aa <hagl_draw_line+0xc2>
        return;
 800712a:	bf00      	nop
 800712c:	e000      	b.n	8007130 <hagl_draw_line+0x148>
            break;
 800712e:	bf00      	nop
        }
    }
}
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007136:	bf00      	nop
 8007138:	2000020c 	.word	0x2000020c

0800713c <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	4604      	mov	r4, r0
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	461a      	mov	r2, r3
 800714a:	4623      	mov	r3, r4
 800714c:	80fb      	strh	r3, [r7, #6]
 800714e:	4603      	mov	r3, r0
 8007150:	80bb      	strh	r3, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	807b      	strh	r3, [r7, #2]
 8007156:	4613      	mov	r3, r2
 8007158:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800715a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800715e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007162:	429a      	cmp	r2, r3
 8007164:	dd0e      	ble.n	8007184 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 8007166:	88fa      	ldrh	r2, [r7, #6]
 8007168:	887b      	ldrh	r3, [r7, #2]
 800716a:	4413      	add	r3, r2
 800716c:	b29b      	uxth	r3, r3
 800716e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007170:	88fa      	ldrh	r2, [r7, #6]
 8007172:	887b      	ldrh	r3, [r7, #2]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	b29b      	uxth	r3, r3
 8007178:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800717a:	88fa      	ldrh	r2, [r7, #6]
 800717c:	887b      	ldrh	r3, [r7, #2]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	b29b      	uxth	r3, r3
 8007182:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007184:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007188:	f9b7 3000 	ldrsh.w	r3, [r7]
 800718c:	429a      	cmp	r2, r3
 800718e:	dd0e      	ble.n	80071ae <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8007190:	88ba      	ldrh	r2, [r7, #4]
 8007192:	883b      	ldrh	r3, [r7, #0]
 8007194:	4413      	add	r3, r2
 8007196:	b29b      	uxth	r3, r3
 8007198:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800719a:	88ba      	ldrh	r2, [r7, #4]
 800719c:	883b      	ldrh	r3, [r7, #0]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80071a4:	88ba      	ldrh	r2, [r7, #4]
 80071a6:	883b      	ldrh	r3, [r7, #0]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80071ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071b2:	4a24      	ldr	r2, [pc, #144]	@ (8007244 <hagl_draw_rectangle+0x108>)
 80071b4:	8812      	ldrh	r2, [r2, #0]
 80071b6:	4293      	cmp	r3, r2
 80071b8:	db3e      	blt.n	8007238 <hagl_draw_rectangle+0xfc>
 80071ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80071be:	4a21      	ldr	r2, [pc, #132]	@ (8007244 <hagl_draw_rectangle+0x108>)
 80071c0:	8852      	ldrh	r2, [r2, #2]
 80071c2:	4293      	cmp	r3, r2
 80071c4:	db38      	blt.n	8007238 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80071c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007244 <hagl_draw_rectangle+0x108>)
 80071cc:	8892      	ldrh	r2, [r2, #4]
 80071ce:	4293      	cmp	r3, r2
 80071d0:	dc34      	bgt.n	800723c <hagl_draw_rectangle+0x100>
 80071d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007244 <hagl_draw_rectangle+0x108>)
 80071d8:	88d2      	ldrh	r2, [r2, #6]
 80071da:	4293      	cmp	r3, r2
 80071dc:	dc2e      	bgt.n	800723c <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 80071de:	887a      	ldrh	r2, [r7, #2]
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3301      	adds	r3, #1
 80071e8:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 80071ea:	883a      	ldrh	r2, [r7, #0]
 80071ec:	88bb      	ldrh	r3, [r7, #4]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	3301      	adds	r3, #1
 80071f4:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 80071f6:	8c3b      	ldrh	r3, [r7, #32]
 80071f8:	89fa      	ldrh	r2, [r7, #14]
 80071fa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80071fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007202:	f7ff feab 	bl	8006f5c <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 8007206:	8c3b      	ldrh	r3, [r7, #32]
 8007208:	89fa      	ldrh	r2, [r7, #14]
 800720a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800720e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007212:	f7ff fea3 	bl	8006f5c <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 8007216:	8c3b      	ldrh	r3, [r7, #32]
 8007218:	89ba      	ldrh	r2, [r7, #12]
 800721a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800721e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007222:	f7ff febe 	bl	8006fa2 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 8007226:	8c3b      	ldrh	r3, [r7, #32]
 8007228:	89ba      	ldrh	r2, [r7, #12]
 800722a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800722e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8007232:	f7ff feb6 	bl	8006fa2 <hagl_draw_vline>
 8007236:	e002      	b.n	800723e <hagl_draw_rectangle+0x102>
        return;
 8007238:	bf00      	nop
 800723a:	e000      	b.n	800723e <hagl_draw_rectangle+0x102>
        return;
 800723c:	bf00      	nop
}
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	bd90      	pop	{r4, r7, pc}
 8007244:	2000020c 	.word	0x2000020c

08007248 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	461a      	mov	r2, r3
 8007256:	4623      	mov	r3, r4
 8007258:	80fb      	strh	r3, [r7, #6]
 800725a:	4603      	mov	r3, r0
 800725c:	80bb      	strh	r3, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	807b      	strh	r3, [r7, #2]
 8007262:	4613      	mov	r3, r2
 8007264:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007266:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800726a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800726e:	429a      	cmp	r2, r3
 8007270:	dd0e      	ble.n	8007290 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	887b      	ldrh	r3, [r7, #2]
 8007276:	4413      	add	r3, r2
 8007278:	b29b      	uxth	r3, r3
 800727a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800727c:	88fa      	ldrh	r2, [r7, #6]
 800727e:	887b      	ldrh	r3, [r7, #2]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	b29b      	uxth	r3, r3
 8007284:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007286:	88fa      	ldrh	r2, [r7, #6]
 8007288:	887b      	ldrh	r3, [r7, #2]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	b29b      	uxth	r3, r3
 800728e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007290:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007294:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007298:	429a      	cmp	r2, r3
 800729a:	dd0e      	ble.n	80072ba <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 800729c:	88ba      	ldrh	r2, [r7, #4]
 800729e:	883b      	ldrh	r3, [r7, #0]
 80072a0:	4413      	add	r3, r2
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80072a6:	88ba      	ldrh	r2, [r7, #4]
 80072a8:	883b      	ldrh	r3, [r7, #0]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80072b0:	88ba      	ldrh	r2, [r7, #4]
 80072b2:	883b      	ldrh	r3, [r7, #0]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80072ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80072be:	4a33      	ldr	r2, [pc, #204]	@ (800738c <hagl_fill_rectangle+0x144>)
 80072c0:	8812      	ldrh	r2, [r2, #0]
 80072c2:	4293      	cmp	r3, r2
 80072c4:	db5b      	blt.n	800737e <hagl_fill_rectangle+0x136>
 80072c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80072ca:	4a30      	ldr	r2, [pc, #192]	@ (800738c <hagl_fill_rectangle+0x144>)
 80072cc:	8852      	ldrh	r2, [r2, #2]
 80072ce:	4293      	cmp	r3, r2
 80072d0:	db55      	blt.n	800737e <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80072d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072d6:	4a2d      	ldr	r2, [pc, #180]	@ (800738c <hagl_fill_rectangle+0x144>)
 80072d8:	8892      	ldrh	r2, [r2, #4]
 80072da:	4293      	cmp	r3, r2
 80072dc:	dc51      	bgt.n	8007382 <hagl_fill_rectangle+0x13a>
 80072de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80072e2:	4a2a      	ldr	r2, [pc, #168]	@ (800738c <hagl_fill_rectangle+0x144>)
 80072e4:	88d2      	ldrh	r2, [r2, #6]
 80072e6:	4293      	cmp	r3, r2
 80072e8:	dc4b      	bgt.n	8007382 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80072ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072ee:	4a27      	ldr	r2, [pc, #156]	@ (800738c <hagl_fill_rectangle+0x144>)
 80072f0:	8812      	ldrh	r2, [r2, #0]
 80072f2:	4611      	mov	r1, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff fded 	bl	8006ed4 <max>
 80072fa:	4603      	mov	r3, r0
 80072fc:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80072fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007302:	4a22      	ldr	r2, [pc, #136]	@ (800738c <hagl_fill_rectangle+0x144>)
 8007304:	8852      	ldrh	r2, [r2, #2]
 8007306:	4611      	mov	r1, r2
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fde3 	bl	8006ed4 <max>
 800730e:	4603      	mov	r3, r0
 8007310:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8007312:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007316:	4a1d      	ldr	r2, [pc, #116]	@ (800738c <hagl_fill_rectangle+0x144>)
 8007318:	8892      	ldrh	r2, [r2, #4]
 800731a:	4611      	mov	r1, r2
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff fdc7 	bl	8006eb0 <min>
 8007322:	4603      	mov	r3, r0
 8007324:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8007326:	f9b7 3000 	ldrsh.w	r3, [r7]
 800732a:	4a18      	ldr	r2, [pc, #96]	@ (800738c <hagl_fill_rectangle+0x144>)
 800732c:	88d2      	ldrh	r2, [r2, #6]
 800732e:	4611      	mov	r1, r2
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fdbd 	bl	8006eb0 <min>
 8007336:	4603      	mov	r3, r0
 8007338:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800733a:	887a      	ldrh	r2, [r7, #2]
 800733c:	88fb      	ldrh	r3, [r7, #6]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	b29b      	uxth	r3, r3
 8007342:	3301      	adds	r3, #1
 8007344:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8007346:	883a      	ldrh	r2, [r7, #0]
 8007348:	88bb      	ldrh	r3, [r7, #4]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	b29b      	uxth	r3, r3
 800734e:	3301      	adds	r3, #1
 8007350:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8007352:	2300      	movs	r3, #0
 8007354:	81fb      	strh	r3, [r7, #14]
 8007356:	e00d      	b.n	8007374 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8007358:	88ba      	ldrh	r2, [r7, #4]
 800735a:	89fb      	ldrh	r3, [r7, #14]
 800735c:	4413      	add	r3, r2
 800735e:	b29b      	uxth	r3, r3
 8007360:	b219      	sxth	r1, r3
 8007362:	8c3b      	ldrh	r3, [r7, #32]
 8007364:	89ba      	ldrh	r2, [r7, #12]
 8007366:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800736a:	f7ff fdf7 	bl	8006f5c <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800736e:	89fb      	ldrh	r3, [r7, #14]
 8007370:	3301      	adds	r3, #1
 8007372:	81fb      	strh	r3, [r7, #14]
 8007374:	89fa      	ldrh	r2, [r7, #14]
 8007376:	897b      	ldrh	r3, [r7, #10]
 8007378:	429a      	cmp	r2, r3
 800737a:	d3ed      	bcc.n	8007358 <hagl_fill_rectangle+0x110>
 800737c:	e002      	b.n	8007384 <hagl_fill_rectangle+0x13c>
        return;
 800737e:	bf00      	nop
 8007380:	e000      	b.n	8007384 <hagl_fill_rectangle+0x13c>
        return;
 8007382:	bf00      	nop
#endif
    }
}
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	bd90      	pop	{r4, r7, pc}
 800738a:	bf00      	nop
 800738c:	2000020c 	.word	0x2000020c

08007390 <hagl_put_char>:
    }

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font) {
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8007396:	b081      	sub	sp, #4
 8007398:	af00      	add	r7, sp, #0
 800739a:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800739e:	f844 0c34 	str.w	r0, [r4, #-52]
 80073a2:	460c      	mov	r4, r1
 80073a4:	4610      	mov	r0, r2
 80073a6:	4619      	mov	r1, r3
 80073a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073ac:	4622      	mov	r2, r4
 80073ae:	f823 2c36 	strh.w	r2, [r3, #-54]
 80073b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073b6:	4602      	mov	r2, r0
 80073b8:	f823 2c38 	strh.w	r2, [r3, #-56]
 80073bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073c0:	460a      	mov	r2, r1
 80073c2:	f823 2c3a 	strh.w	r2, [r3, #-58]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80073c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073ca:	4619      	mov	r1, r3
 80073cc:	f107 0320 	add.w	r3, r7, #32
 80073d0:	3b10      	subs	r3, #16
 80073d2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80073d6:	f102 0210 	add.w	r2, r2, #16
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	f851 1c34 	ldr.w	r1, [r1, #-52]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff fcd3 	bl	8006d8c <fontx_glyph>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80073ec:	f102 0215 	add.w	r2, r2, #21
 80073f0:	7013      	strb	r3, [r2, #0]
    if (0 != status) {
 80073f2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073f6:	f103 0315 	add.w	r3, r3, #21
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <hagl_put_char+0x74>
        return 0;
 8007400:	2300      	movs	r3, #0
 8007402:	e1ac      	b.n	800775e <hagl_put_char+0x3ce>
    }

    bitmap.width = glyph.width;
 8007404:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007408:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800740c:	461a      	mov	r2, r3
 800740e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007412:	f823 2c28 	strh.w	r2, [r3, #-40]
    bitmap.height = glyph.height;
 8007416:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800741a:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 800741e:	461a      	mov	r2, r3
 8007420:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007424:	f823 2c26 	strh.w	r2, [r3, #-38]
    bitmap.depth = DISPLAY_DEPTH;
 8007428:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800742c:	2210      	movs	r2, #16
 800742e:	f803 2c22 	strb.w	r2, [r3, #-34]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8007432:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007436:	3a18      	subs	r2, #24
 8007438:	f107 0320 	add.w	r3, r7, #32
 800743c:	3b08      	subs	r3, #8
 800743e:	4611      	mov	r1, r2
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff fb0b 	bl	8006a5c <bitmap_init>
    color_t *ptr = (color_t *) bitmap.buffer;
 8007446:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800744a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800744e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007452:	f102 021c 	add.w	r2, r2, #28
 8007456:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8007458:	2300      	movs	r3, #0
 800745a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800745e:	f102 021b 	add.w	r2, r2, #27
 8007462:	7013      	strb	r3, [r2, #0]
 8007464:	e071      	b.n	800754a <hagl_put_char+0x1ba>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007466:	2300      	movs	r3, #0
 8007468:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800746c:	f102 021a 	add.w	r2, r2, #26
 8007470:	7013      	strb	r3, [r2, #0]
 8007472:	e047      	b.n	8007504 <hagl_put_char+0x174>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8007474:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007478:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	b25a      	sxtb	r2, r3
 8007480:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007484:	f103 031a 	add.w	r3, r3, #26
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	2180      	movs	r1, #128	@ 0x80
 8007490:	fa41 f303 	asr.w	r3, r1, r3
 8007494:	b25b      	sxtb	r3, r3
 8007496:	4013      	ands	r3, r2
 8007498:	b25b      	sxtb	r3, r3
 800749a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800749e:	f102 0209 	add.w	r2, r2, #9
 80074a2:	7013      	strb	r3, [r2, #0]
            if (set) {
 80074a4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074a8:	f103 0309 	add.w	r3, r3, #9
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d010      	beq.n	80074d4 <hagl_put_char+0x144>
                *(ptr++) = color;
 80074b2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074b6:	f103 031c 	add.w	r3, r3, #28
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80074c2:	f101 011c 	add.w	r1, r1, #28
 80074c6:	600a      	str	r2, [r1, #0]
 80074c8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80074cc:	f832 2c3a 	ldrh.w	r2, [r2, #-58]
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	e00c      	b.n	80074ee <hagl_put_char+0x15e>
            } else {
                *(ptr++) = 0x0000;
 80074d4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074d8:	f103 031c 	add.w	r3, r3, #28
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	1c9a      	adds	r2, r3, #2
 80074e0:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80074e4:	f101 011c 	add.w	r1, r1, #28
 80074e8:	600a      	str	r2, [r1, #0]
 80074ea:	2200      	movs	r2, #0
 80074ec:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80074ee:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074f2:	f103 031a 	add.w	r3, r3, #26
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	3301      	adds	r3, #1
 80074fa:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80074fe:	f102 021a 	add.w	r2, r2, #26
 8007502:	7013      	strb	r3, [r2, #0]
 8007504:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007508:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800750c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007510:	f102 021a 	add.w	r2, r2, #26
 8007514:	7812      	ldrb	r2, [r2, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d3ac      	bcc.n	8007474 <hagl_put_char+0xe4>
            }
        }
        glyph.buffer += glyph.pitch;
 800751a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800751e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007522:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007526:	f812 2c2d 	ldrb.w	r2, [r2, #-45]
 800752a:	4413      	add	r3, r2
 800752c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007530:	f842 3c2c 	str.w	r3, [r2, #-44]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8007534:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007538:	f103 031b 	add.w	r3, r3, #27
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	3301      	adds	r3, #1
 8007540:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007544:	f102 021b 	add.w	r2, r2, #27
 8007548:	7013      	strb	r3, [r2, #0]
 800754a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800754e:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8007552:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007556:	f102 021b 	add.w	r2, r2, #27
 800755a:	7812      	ldrb	r2, [r2, #0]
 800755c:	429a      	cmp	r2, r3
 800755e:	d382      	bcc.n	8007466 <hagl_put_char+0xd6>
    }

    // Modyfikacja: obsługa częściowego wyświetlania znaku
    int16_t start_x = max(0, -x0);
 8007560:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007564:	f933 3c36 	ldrsh.w	r3, [r3, #-54]
 8007568:	425b      	negs	r3, r3
 800756a:	4619      	mov	r1, r3
 800756c:	2000      	movs	r0, #0
 800756e:	f7ff fcb1 	bl	8006ed4 <max>
 8007572:	4603      	mov	r3, r0
 8007574:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007578:	f102 0212 	add.w	r2, r2, #18
 800757c:	8013      	strh	r3, [r2, #0]
    int16_t start_y = max(0, -y0);
 800757e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007582:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8007586:	425b      	negs	r3, r3
 8007588:	4619      	mov	r1, r3
 800758a:	2000      	movs	r0, #0
 800758c:	f7ff fca2 	bl	8006ed4 <max>
 8007590:	4603      	mov	r3, r0
 8007592:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007596:	f102 0210 	add.w	r2, r2, #16
 800759a:	8013      	strh	r3, [r2, #0]
    int16_t end_x = min(bitmap.width, LCD_WIDTH - x0);
 800759c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80075a0:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80075a4:	461a      	mov	r2, r3
 80075a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80075aa:	f933 3c36 	ldrsh.w	r3, [r3, #-54]
 80075ae:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7ff fc7b 	bl	8006eb0 <min>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80075c0:	f102 020e 	add.w	r2, r2, #14
 80075c4:	8013      	strh	r3, [r2, #0]
    int16_t end_y = min(bitmap.height, LCD_HEIGHT - y0);
 80075c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80075ca:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80075d4:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80075d8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f7ff fc66 	bl	8006eb0 <min>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80075ea:	f102 020c 	add.w	r2, r2, #12
 80075ee:	8013      	strh	r3, [r2, #0]

    if (start_x < end_x && start_y < end_y) {
 80075f0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075f4:	f103 0312 	add.w	r3, r3, #18
 80075f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80075fc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007600:	f103 030e 	add.w	r3, r3, #14
 8007604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007608:	429a      	cmp	r2, r3
 800760a:	f280 80a3 	bge.w	8007754 <hagl_put_char+0x3c4>
 800760e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007612:	f103 0310 	add.w	r3, r3, #16
 8007616:	f9b3 2000 	ldrsh.w	r2, [r3]
 800761a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800761e:	f103 030c 	add.w	r3, r3, #12
 8007622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007626:	429a      	cmp	r2, r3
 8007628:	f280 8094 	bge.w	8007754 <hagl_put_char+0x3c4>
        for (int16_t y = start_y; y < end_y; y++) {
 800762c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007630:	f103 0310 	add.w	r3, r3, #16
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800763a:	f102 0218 	add.w	r2, r2, #24
 800763e:	8013      	strh	r3, [r2, #0]
 8007640:	e079      	b.n	8007736 <hagl_put_char+0x3a6>
            for (int16_t x = start_x; x < end_x; x++) {
 8007642:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007646:	f103 0312 	add.w	r3, r3, #18
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007650:	f102 0216 	add.w	r2, r2, #22
 8007654:	8013      	strh	r3, [r2, #0]
 8007656:	e052      	b.n	80076fe <hagl_put_char+0x36e>
                color_t pixel = buffer[y * bitmap.width + x];
 8007658:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800765c:	f103 0318 	add.w	r3, r3, #24
 8007660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007664:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007668:	f832 2c28 	ldrh.w	r2, [r2, #-40]
 800766c:	fb03 f202 	mul.w	r2, r3, r2
 8007670:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007674:	f103 0316 	add.w	r3, r3, #22
 8007678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800767c:	4413      	add	r3, r2
 800767e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	4413      	add	r3, r2
 8007686:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800768a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800768e:	f102 020a 	add.w	r2, r2, #10
 8007692:	8013      	strh	r3, [r2, #0]
                if (pixel != 0x0000) { // tylko nieprzezroczyste piksele
 8007694:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007698:	f103 030a 	add.w	r3, r3, #10
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01f      	beq.n	80076e2 <hagl_put_char+0x352>
                    hagl_put_pixel(x0 + x, y0 + y, pixel);
 80076a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80076a6:	f833 2c36 	ldrh.w	r2, [r3, #-54]
 80076aa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076ae:	f103 0316 	add.w	r3, r3, #22
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	4413      	add	r3, r2
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	b218      	sxth	r0, r3
 80076ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80076be:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 80076c2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076c6:	f103 0318 	add.w	r3, r3, #24
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	4413      	add	r3, r2
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	b21b      	sxth	r3, r3
 80076d2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076d6:	f102 020a 	add.w	r2, r2, #10
 80076da:	8812      	ldrh	r2, [r2, #0]
 80076dc:	4619      	mov	r1, r3
 80076de:	f7ff fc0b 	bl	8006ef8 <hagl_put_pixel>
            for (int16_t x = start_x; x < end_x; x++) {
 80076e2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076e6:	f103 0316 	add.w	r3, r3, #22
 80076ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3301      	adds	r3, #1
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076f8:	f102 0216 	add.w	r2, r2, #22
 80076fc:	8013      	strh	r3, [r2, #0]
 80076fe:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007702:	f103 0316 	add.w	r3, r3, #22
 8007706:	f9b3 2000 	ldrsh.w	r2, [r3]
 800770a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800770e:	f103 030e 	add.w	r3, r3, #14
 8007712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007716:	429a      	cmp	r2, r3
 8007718:	db9e      	blt.n	8007658 <hagl_put_char+0x2c8>
        for (int16_t y = start_y; y < end_y; y++) {
 800771a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800771e:	f103 0318 	add.w	r3, r3, #24
 8007722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007726:	b29b      	uxth	r3, r3
 8007728:	3301      	adds	r3, #1
 800772a:	b29b      	uxth	r3, r3
 800772c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007730:	f102 0218 	add.w	r2, r2, #24
 8007734:	8013      	strh	r3, [r2, #0]
 8007736:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800773a:	f103 0318 	add.w	r3, r3, #24
 800773e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007742:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007746:	f103 030c 	add.w	r3, r3, #12
 800774a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800774e:	429a      	cmp	r2, r3
 8007750:	f6ff af77 	blt.w	8007642 <hagl_put_char+0x2b2>
                }
            }
        }
    }

    return bitmap.width;
 8007754:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007758:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800775c:	b2db      	uxtb	r3, r3
}
 800775e:	4618      	mov	r0, r3
 8007760:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8007764:	3704      	adds	r7, #4
 8007766:	46bd      	mov	sp, r7
 8007768:	bd90      	pop	{r4, r7, pc}

0800776a <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b08c      	sub	sp, #48	@ 0x30
 800776e:	af02      	add	r7, sp, #8
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	4608      	mov	r0, r1
 8007774:	4611      	mov	r1, r2
 8007776:	461a      	mov	r2, r3
 8007778:	4603      	mov	r3, r0
 800777a:	817b      	strh	r3, [r7, #10]
 800777c:	460b      	mov	r3, r1
 800777e:	813b      	strh	r3, [r7, #8]
 8007780:	4613      	mov	r3, r2
 8007782:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8007784:	897b      	ldrh	r3, [r7, #10]
 8007786:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007788:	f107 0314 	add.w	r3, r7, #20
 800778c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff fadc 	bl	8006d4c <fontx_meta>
 8007794:	4603      	mov	r3, r0
 8007796:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 800779a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <hagl_put_text+0x3c>
        return 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	e02c      	b.n	8007800 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	60fa      	str	r2, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	2b0d      	cmp	r3, #13
 80077b4:	d002      	beq.n	80077bc <hagl_put_text+0x52>
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	2b0a      	cmp	r3, #10
 80077ba:	d108      	bne.n	80077ce <hagl_put_text+0x64>
            x0 = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80077c0:	7fbb      	ldrb	r3, [r7, #30]
 80077c2:	461a      	mov	r2, r3
 80077c4:	893b      	ldrh	r3, [r7, #8]
 80077c6:	4413      	add	r3, r2
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	813b      	strh	r3, [r7, #8]
 80077cc:	e010      	b.n	80077f0 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80077ce:	88f8      	ldrh	r0, [r7, #6]
 80077d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80077d4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80077d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	4603      	mov	r3, r0
 80077de:	6a38      	ldr	r0, [r7, #32]
 80077e0:	f7ff fdd6 	bl	8007390 <hagl_put_char>
 80077e4:	4603      	mov	r3, r0
 80077e6:	461a      	mov	r2, r3
 80077e8:	897b      	ldrh	r3, [r7, #10]
 80077ea:	4413      	add	r3, r2
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1d6      	bne.n	80077a6 <hagl_put_text+0x3c>

    return x0 - original;
 80077f8:	897a      	ldrh	r2, [r7, #10]
 80077fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	b29b      	uxth	r3, r3
}
 8007800:	4618      	mov	r0, r3
 8007802:	3728      	adds	r7, #40	@ 0x28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <hagl_draw_circle>:
#endif
}



void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 8007808:	b590      	push	{r4, r7, lr}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	4611      	mov	r1, r2
 8007814:	461a      	mov	r2, r3
 8007816:	4623      	mov	r3, r4
 8007818:	80fb      	strh	r3, [r7, #6]
 800781a:	4603      	mov	r3, r0
 800781c:	80bb      	strh	r3, [r7, #4]
 800781e:	460b      	mov	r3, r1
 8007820:	807b      	strh	r3, [r7, #2]
 8007822:	4613      	mov	r3, r2
 8007824:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 800782a:	887b      	ldrh	r3, [r7, #2]
 800782c:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 800782e:	887b      	ldrh	r3, [r7, #2]
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	b29b      	uxth	r3, r3
 8007834:	f1c3 0303 	rsb	r3, r3, #3
 8007838:	b29b      	uxth	r3, r3
 800783a:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 800783c:	88fa      	ldrh	r2, [r7, #6]
 800783e:	89fb      	ldrh	r3, [r7, #14]
 8007840:	4413      	add	r3, r2
 8007842:	b29b      	uxth	r3, r3
 8007844:	b218      	sxth	r0, r3
 8007846:	88ba      	ldrh	r2, [r7, #4]
 8007848:	89bb      	ldrh	r3, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	b29b      	uxth	r3, r3
 800784e:	b21b      	sxth	r3, r3
 8007850:	883a      	ldrh	r2, [r7, #0]
 8007852:	4619      	mov	r1, r3
 8007854:	f7ff fb50 	bl	8006ef8 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 8007858:	88fa      	ldrh	r2, [r7, #6]
 800785a:	89fb      	ldrh	r3, [r7, #14]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	b29b      	uxth	r3, r3
 8007860:	b218      	sxth	r0, r3
 8007862:	88ba      	ldrh	r2, [r7, #4]
 8007864:	89bb      	ldrh	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	b29b      	uxth	r3, r3
 800786a:	b21b      	sxth	r3, r3
 800786c:	883a      	ldrh	r2, [r7, #0]
 800786e:	4619      	mov	r1, r3
 8007870:	f7ff fb42 	bl	8006ef8 <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8007874:	88fa      	ldrh	r2, [r7, #6]
 8007876:	89fb      	ldrh	r3, [r7, #14]
 8007878:	4413      	add	r3, r2
 800787a:	b29b      	uxth	r3, r3
 800787c:	b218      	sxth	r0, r3
 800787e:	88ba      	ldrh	r2, [r7, #4]
 8007880:	89bb      	ldrh	r3, [r7, #12]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	b29b      	uxth	r3, r3
 8007886:	b21b      	sxth	r3, r3
 8007888:	883a      	ldrh	r2, [r7, #0]
 800788a:	4619      	mov	r1, r3
 800788c:	f7ff fb34 	bl	8006ef8 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8007890:	88fa      	ldrh	r2, [r7, #6]
 8007892:	89fb      	ldrh	r3, [r7, #14]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	b29b      	uxth	r3, r3
 8007898:	b218      	sxth	r0, r3
 800789a:	88ba      	ldrh	r2, [r7, #4]
 800789c:	89bb      	ldrh	r3, [r7, #12]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	b21b      	sxth	r3, r3
 80078a4:	883a      	ldrh	r2, [r7, #0]
 80078a6:	4619      	mov	r1, r3
 80078a8:	f7ff fb26 	bl	8006ef8 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 80078ac:	88fa      	ldrh	r2, [r7, #6]
 80078ae:	89bb      	ldrh	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	b218      	sxth	r0, r3
 80078b6:	88ba      	ldrh	r2, [r7, #4]
 80078b8:	89fb      	ldrh	r3, [r7, #14]
 80078ba:	4413      	add	r3, r2
 80078bc:	b29b      	uxth	r3, r3
 80078be:	b21b      	sxth	r3, r3
 80078c0:	883a      	ldrh	r2, [r7, #0]
 80078c2:	4619      	mov	r1, r3
 80078c4:	f7ff fb18 	bl	8006ef8 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 80078c8:	88fa      	ldrh	r2, [r7, #6]
 80078ca:	89bb      	ldrh	r3, [r7, #12]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	b218      	sxth	r0, r3
 80078d2:	88ba      	ldrh	r2, [r7, #4]
 80078d4:	89fb      	ldrh	r3, [r7, #14]
 80078d6:	4413      	add	r3, r2
 80078d8:	b29b      	uxth	r3, r3
 80078da:	b21b      	sxth	r3, r3
 80078dc:	883a      	ldrh	r2, [r7, #0]
 80078de:	4619      	mov	r1, r3
 80078e0:	f7ff fb0a 	bl	8006ef8 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 80078e4:	88fa      	ldrh	r2, [r7, #6]
 80078e6:	89bb      	ldrh	r3, [r7, #12]
 80078e8:	4413      	add	r3, r2
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	b218      	sxth	r0, r3
 80078ee:	88ba      	ldrh	r2, [r7, #4]
 80078f0:	89fb      	ldrh	r3, [r7, #14]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	b21b      	sxth	r3, r3
 80078f8:	883a      	ldrh	r2, [r7, #0]
 80078fa:	4619      	mov	r1, r3
 80078fc:	f7ff fafc 	bl	8006ef8 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8007900:	88fa      	ldrh	r2, [r7, #6]
 8007902:	89bb      	ldrh	r3, [r7, #12]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	b29b      	uxth	r3, r3
 8007908:	b218      	sxth	r0, r3
 800790a:	88ba      	ldrh	r2, [r7, #4]
 800790c:	89fb      	ldrh	r3, [r7, #14]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	b29b      	uxth	r3, r3
 8007912:	b21b      	sxth	r3, r3
 8007914:	883a      	ldrh	r2, [r7, #0]
 8007916:	4619      	mov	r1, r3
 8007918:	f7ff faee 	bl	8006ef8 <hagl_put_pixel>

    while (y >= x) {
 800791c:	e097      	b.n	8007a4e <hagl_draw_circle+0x246>
        x++;
 800791e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007922:	b29b      	uxth	r3, r3
 8007924:	3301      	adds	r3, #1
 8007926:	b29b      	uxth	r3, r3
 8007928:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 800792a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800792e:	2b00      	cmp	r3, #0
 8007930:	dd14      	ble.n	800795c <hagl_draw_circle+0x154>
            y--;
 8007932:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29b      	uxth	r3, r3
 800793c:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 800793e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007942:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	b29b      	uxth	r3, r3
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	b29a      	uxth	r2, r3
 800794e:	897b      	ldrh	r3, [r7, #10]
 8007950:	4413      	add	r3, r2
 8007952:	b29b      	uxth	r3, r3
 8007954:	330a      	adds	r3, #10
 8007956:	b29b      	uxth	r3, r3
 8007958:	817b      	strh	r3, [r7, #10]
 800795a:	e008      	b.n	800796e <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 800795c:	89fb      	ldrh	r3, [r7, #14]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	b29a      	uxth	r2, r3
 8007962:	897b      	ldrh	r3, [r7, #10]
 8007964:	4413      	add	r3, r2
 8007966:	b29b      	uxth	r3, r3
 8007968:	3306      	adds	r3, #6
 800796a:	b29b      	uxth	r3, r3
 800796c:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 800796e:	88fa      	ldrh	r2, [r7, #6]
 8007970:	89fb      	ldrh	r3, [r7, #14]
 8007972:	4413      	add	r3, r2
 8007974:	b29b      	uxth	r3, r3
 8007976:	b218      	sxth	r0, r3
 8007978:	88ba      	ldrh	r2, [r7, #4]
 800797a:	89bb      	ldrh	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	b29b      	uxth	r3, r3
 8007980:	b21b      	sxth	r3, r3
 8007982:	883a      	ldrh	r2, [r7, #0]
 8007984:	4619      	mov	r1, r3
 8007986:	f7ff fab7 	bl	8006ef8 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 800798a:	88fa      	ldrh	r2, [r7, #6]
 800798c:	89fb      	ldrh	r3, [r7, #14]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	b29b      	uxth	r3, r3
 8007992:	b218      	sxth	r0, r3
 8007994:	88ba      	ldrh	r2, [r7, #4]
 8007996:	89bb      	ldrh	r3, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	b29b      	uxth	r3, r3
 800799c:	b21b      	sxth	r3, r3
 800799e:	883a      	ldrh	r2, [r7, #0]
 80079a0:	4619      	mov	r1, r3
 80079a2:	f7ff faa9 	bl	8006ef8 <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	89fb      	ldrh	r3, [r7, #14]
 80079aa:	4413      	add	r3, r2
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	b218      	sxth	r0, r3
 80079b0:	88ba      	ldrh	r2, [r7, #4]
 80079b2:	89bb      	ldrh	r3, [r7, #12]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	b21b      	sxth	r3, r3
 80079ba:	883a      	ldrh	r2, [r7, #0]
 80079bc:	4619      	mov	r1, r3
 80079be:	f7ff fa9b 	bl	8006ef8 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 80079c2:	88fa      	ldrh	r2, [r7, #6]
 80079c4:	89fb      	ldrh	r3, [r7, #14]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	b218      	sxth	r0, r3
 80079cc:	88ba      	ldrh	r2, [r7, #4]
 80079ce:	89bb      	ldrh	r3, [r7, #12]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	b21b      	sxth	r3, r3
 80079d6:	883a      	ldrh	r2, [r7, #0]
 80079d8:	4619      	mov	r1, r3
 80079da:	f7ff fa8d 	bl	8006ef8 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 80079de:	88fa      	ldrh	r2, [r7, #6]
 80079e0:	89bb      	ldrh	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	b218      	sxth	r0, r3
 80079e8:	88ba      	ldrh	r2, [r7, #4]
 80079ea:	89fb      	ldrh	r3, [r7, #14]
 80079ec:	4413      	add	r3, r2
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	b21b      	sxth	r3, r3
 80079f2:	883a      	ldrh	r2, [r7, #0]
 80079f4:	4619      	mov	r1, r3
 80079f6:	f7ff fa7f 	bl	8006ef8 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 80079fa:	88fa      	ldrh	r2, [r7, #6]
 80079fc:	89bb      	ldrh	r3, [r7, #12]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	b218      	sxth	r0, r3
 8007a04:	88ba      	ldrh	r2, [r7, #4]
 8007a06:	89fb      	ldrh	r3, [r7, #14]
 8007a08:	4413      	add	r3, r2
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	b21b      	sxth	r3, r3
 8007a0e:	883a      	ldrh	r2, [r7, #0]
 8007a10:	4619      	mov	r1, r3
 8007a12:	f7ff fa71 	bl	8006ef8 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8007a16:	88fa      	ldrh	r2, [r7, #6]
 8007a18:	89bb      	ldrh	r3, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	b218      	sxth	r0, r3
 8007a20:	88ba      	ldrh	r2, [r7, #4]
 8007a22:	89fb      	ldrh	r3, [r7, #14]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	b21b      	sxth	r3, r3
 8007a2a:	883a      	ldrh	r2, [r7, #0]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f7ff fa63 	bl	8006ef8 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8007a32:	88fa      	ldrh	r2, [r7, #6]
 8007a34:	89bb      	ldrh	r3, [r7, #12]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	b218      	sxth	r0, r3
 8007a3c:	88ba      	ldrh	r2, [r7, #4]
 8007a3e:	89fb      	ldrh	r3, [r7, #14]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	b21b      	sxth	r3, r3
 8007a46:	883a      	ldrh	r2, [r7, #0]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f7ff fa55 	bl	8006ef8 <hagl_put_pixel>
    while (y >= x) {
 8007a4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	f6bf af61 	bge.w	800791e <hagl_draw_circle+0x116>
    }
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd90      	pop	{r4, r7, pc}

08007a66 <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8007a66:	b590      	push	{r4, r7, lr}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	4608      	mov	r0, r1
 8007a70:	4611      	mov	r1, r2
 8007a72:	461a      	mov	r2, r3
 8007a74:	4623      	mov	r3, r4
 8007a76:	80fb      	strh	r3, [r7, #6]
 8007a78:	4603      	mov	r3, r0
 8007a7a:	80bb      	strh	r3, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	807b      	strh	r3, [r7, #2]
 8007a80:	4613      	mov	r3, r2
 8007a82:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8007a88:	887b      	ldrh	r3, [r7, #2]
 8007a8a:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007a8c:	887b      	ldrh	r3, [r7, #2]
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f1c3 0303 	rsb	r3, r3, #3
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8007a9a:	e067      	b.n	8007b6c <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8007a9c:	88fa      	ldrh	r2, [r7, #6]
 8007a9e:	89fb      	ldrh	r3, [r7, #14]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	b218      	sxth	r0, r3
 8007aa6:	88ba      	ldrh	r2, [r7, #4]
 8007aa8:	89bb      	ldrh	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	b219      	sxth	r1, r3
 8007ab0:	89fb      	ldrh	r3, [r7, #14]
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	883b      	ldrh	r3, [r7, #0]
 8007ab8:	f7ff fa50 	bl	8006f5c <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8007abc:	88fa      	ldrh	r2, [r7, #6]
 8007abe:	89fb      	ldrh	r3, [r7, #14]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	b218      	sxth	r0, r3
 8007ac6:	88ba      	ldrh	r2, [r7, #4]
 8007ac8:	89bb      	ldrh	r3, [r7, #12]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	b219      	sxth	r1, r3
 8007ad0:	89fb      	ldrh	r3, [r7, #14]
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	883b      	ldrh	r3, [r7, #0]
 8007ad8:	f7ff fa40 	bl	8006f5c <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8007adc:	88fa      	ldrh	r2, [r7, #6]
 8007ade:	89bb      	ldrh	r3, [r7, #12]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	b218      	sxth	r0, r3
 8007ae6:	88ba      	ldrh	r2, [r7, #4]
 8007ae8:	89fb      	ldrh	r3, [r7, #14]
 8007aea:	4413      	add	r3, r2
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	b219      	sxth	r1, r3
 8007af0:	89bb      	ldrh	r3, [r7, #12]
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	883b      	ldrh	r3, [r7, #0]
 8007af8:	f7ff fa30 	bl	8006f5c <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	89bb      	ldrh	r3, [r7, #12]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	b218      	sxth	r0, r3
 8007b06:	88ba      	ldrh	r2, [r7, #4]
 8007b08:	89fb      	ldrh	r3, [r7, #14]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	b219      	sxth	r1, r3
 8007b10:	89bb      	ldrh	r3, [r7, #12]
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	883b      	ldrh	r3, [r7, #0]
 8007b18:	f7ff fa20 	bl	8006f5c <hagl_draw_hline>
        x++;
 8007b1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3301      	adds	r3, #1
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007b28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dd14      	ble.n	8007b5a <hagl_fill_circle+0xf4>
            y--;
 8007b30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007b3c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007b40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	897b      	ldrh	r3, [r7, #10]
 8007b4e:	4413      	add	r3, r2
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	330a      	adds	r3, #10
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	817b      	strh	r3, [r7, #10]
 8007b58:	e008      	b.n	8007b6c <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8007b5a:	89fb      	ldrh	r3, [r7, #14]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	897b      	ldrh	r3, [r7, #10]
 8007b62:	4413      	add	r3, r2
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	3306      	adds	r3, #6
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8007b6c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007b70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	da91      	bge.n	8007a9c <hagl_fill_circle+0x36>
        }
    }
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd90      	pop	{r4, r7, pc}

08007b82 <hagl_draw_polygon>:



void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007b82:	b590      	push	{r4, r7, lr}
 8007b84:	b087      	sub	sp, #28
 8007b86:	af02      	add	r7, sp, #8
 8007b88:	4603      	mov	r3, r0
 8007b8a:	6039      	str	r1, [r7, #0]
 8007b8c:	80fb      	strh	r3, [r7, #6]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8007b92:	2300      	movs	r3, #0
 8007b94:	81fb      	strh	r3, [r7, #14]
 8007b96:	e02a      	b.n	8007bee <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8007b98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4413      	add	r3, r2
        hagl_draw_line(
 8007ba2:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8007ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	3302      	adds	r3, #2
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	4413      	add	r3, r2
        hagl_draw_line(
 8007bb2:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8007bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4413      	add	r3, r2
        hagl_draw_line(
 8007bc2:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8007bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	3306      	adds	r3, #6
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	4413      	add	r3, r2
        hagl_draw_line(
 8007bd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007bd6:	88bb      	ldrh	r3, [r7, #4]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	4622      	mov	r2, r4
 8007bde:	f7ff fa03 	bl	8006fe8 <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007be2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	3301      	adds	r3, #1
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	81fb      	strh	r3, [r7, #14]
 8007bee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	dbcd      	blt.n	8007b98 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	3302      	adds	r3, #2
    hagl_draw_line(
 8007c06:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8007c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c12:	3b01      	subs	r3, #1
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	4413      	add	r3, r2
    hagl_draw_line(
 8007c1a:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	3b02      	subs	r3, #2
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4413      	add	r3, r2
    hagl_draw_line(
 8007c2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007c2e:	88bb      	ldrh	r3, [r7, #4]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	4613      	mov	r3, r2
 8007c34:	4622      	mov	r2, r4
 8007c36:	f7ff f9d7 	bl	8006fe8 <hagl_draw_line>
        color
    );
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd90      	pop	{r4, r7, pc}

08007c42 <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b0ac      	sub	sp, #176	@ 0xb0
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	4603      	mov	r3, r0
 8007c4a:	6039      	str	r1, [r7, #0]
 8007c4c:	80fb      	strh	r3, [r7, #6]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8007c52:	2380      	movs	r3, #128	@ 0x80
 8007c54:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007c64:	e02e      	b.n	8007cc4 <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8007c66:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	4413      	add	r3, r2
 8007c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c76:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	dd08      	ble.n	8007c90 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8007c7e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	3302      	adds	r3, #2
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	4413      	add	r3, r2
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8007c90:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	3302      	adds	r3, #2
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ca0:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	da08      	bge.n	8007cba <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8007ca8:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	3302      	adds	r3, #2
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8007cba:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007cc4:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8007cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	dbca      	blt.n	8007c66 <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007cd0:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007cd4:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007cd8:	e144      	b.n	8007f64 <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007ce0:	88fb      	ldrh	r3, [r7, #6]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007cea:	2300      	movs	r3, #0
 8007cec:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007cf0:	e0a6      	b.n	8007e40 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007cf2:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d00:	ee07 3a90 	vmov	s15, r3
 8007d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d08:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007d0c:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	3302      	adds	r3, #2
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	4413      	add	r3, r2
 8007d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d24:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007d28:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	4413      	add	r3, r2
 8007d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d3e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007d42:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	3302      	adds	r3, #2
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d5a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007d5e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007d6a:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d76:	d50c      	bpl.n	8007d92 <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007d78:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d7c:	ee07 3a90 	vmov	s15, r3
 8007d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d84:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d90:	da19      	bge.n	8007dc6 <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007d92:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007d9e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007da2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007daa:	d53e      	bpl.n	8007e2a <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007dac:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007db0:	ee07 3a90 	vmov	s15, r3
 8007db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007db8:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc4:	db31      	blt.n	8007e2a <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007dc6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007dd2:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007dd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007dda:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007dde:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dea:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007dee:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007df2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007df6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dfa:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e06:	ee17 3a90 	vmov	r3, s15
 8007e0a:	b21a      	sxth	r2, r3
 8007e0c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007e10:	b292      	uxth	r2, r2
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	33b0      	adds	r3, #176	@ 0xb0
 8007e16:	443b      	add	r3, r7
 8007e18:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007e1c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	3301      	adds	r3, #1
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007e2a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007e2e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007e32:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3301      	adds	r3, #1
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007e40:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	f6ff af52 	blt.w	8007cf2 <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007e54:	e046      	b.n	8007ee4 <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007e56:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	33b0      	adds	r3, #176	@ 0xb0
 8007e5e:	443b      	add	r3, r7
 8007e60:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007e64:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e68:	3301      	adds	r3, #1
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	33b0      	adds	r3, #176	@ 0xb0
 8007e6e:	443b      	add	r3, r7
 8007e70:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d92e      	bls.n	8007ed6 <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8007e78:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	33b0      	adds	r3, #176	@ 0xb0
 8007e80:	443b      	add	r3, r7
 8007e82:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007e86:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8007e8a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e8e:	3301      	adds	r3, #1
 8007e90:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	33b0      	adds	r3, #176	@ 0xb0
 8007e98:	443b      	add	r3, r7
 8007e9a:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007e9e:	0053      	lsls	r3, r2, #1
 8007ea0:	33b0      	adds	r3, #176	@ 0xb0
 8007ea2:	443b      	add	r3, r7
 8007ea4:	460a      	mov	r2, r1
 8007ea6:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8007eaa:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007eae:	3301      	adds	r3, #1
 8007eb0:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	33b0      	adds	r3, #176	@ 0xb0
 8007eb8:	443b      	add	r3, r7
 8007eba:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007ebe:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00e      	beq.n	8007ee4 <hagl_fill_polygon+0x2a2>
                    i--;
 8007ec6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007ed4:	e006      	b.n	8007ee4 <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 8007ed6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3301      	adds	r3, #1
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007ee4:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007ee8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007eec:	3b01      	subs	r3, #1
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	dbb1      	blt.n	8007e56 <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007ef8:	e027      	b.n	8007f4a <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007efa:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007efe:	3301      	adds	r3, #1
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	33b0      	adds	r3, #176	@ 0xb0
 8007f04:	443b      	add	r3, r7
 8007f06:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007f0a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	33b0      	adds	r3, #176	@ 0xb0
 8007f12:	443b      	add	r3, r7
 8007f14:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007f20:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	33b0      	adds	r3, #176	@ 0xb0
 8007f28:	443b      	add	r3, r7
 8007f2a:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007f2e:	b218      	sxth	r0, r3
 8007f30:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8007f34:	88bb      	ldrh	r3, [r7, #4]
 8007f36:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8007f3a:	f7ff f80f 	bl	8006f5c <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007f3e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007f42:	3302      	adds	r3, #2
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007f4a:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007f4e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007f52:	429a      	cmp	r2, r3
 8007f54:	dbd1      	blt.n	8007efa <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 8007f56:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007f64:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8007f68:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	f6ff aeb4 	blt.w	8007cda <hagl_fill_polygon+0x98>
        }
    }
}
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	37b0      	adds	r7, #176	@ 0xb0
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007f7c:	b590      	push	{r4, r7, lr}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	4611      	mov	r1, r2
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4623      	mov	r3, r4
 8007f8c:	80fb      	strh	r3, [r7, #6]
 8007f8e:	4603      	mov	r3, r0
 8007f90:	80bb      	strh	r3, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	807b      	strh	r3, [r7, #2]
 8007f96:	4613      	mov	r3, r2
 8007f98:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	81bb      	strh	r3, [r7, #12]
 8007f9e:	88bb      	ldrh	r3, [r7, #4]
 8007fa0:	81fb      	strh	r3, [r7, #14]
 8007fa2:	887b      	ldrh	r3, [r7, #2]
 8007fa4:	823b      	strh	r3, [r7, #16]
 8007fa6:	883b      	ldrh	r3, [r7, #0]
 8007fa8:	827b      	strh	r3, [r7, #18]
 8007faa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007fac:	82bb      	strh	r3, [r7, #20]
 8007fae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007fb0:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 8007fb2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007fb4:	f107 030c 	add.w	r3, r7, #12
 8007fb8:	4619      	mov	r1, r3
 8007fba:	2003      	movs	r0, #3
 8007fbc:	f7ff fde1 	bl	8007b82 <hagl_draw_polygon>
};
 8007fc0:	bf00      	nop
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd90      	pop	{r4, r7, pc}

08007fc8 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007fc8:	b590      	push	{r4, r7, lr}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	80fb      	strh	r3, [r7, #6]
 8007fda:	4603      	mov	r3, r0
 8007fdc:	80bb      	strh	r3, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	807b      	strh	r3, [r7, #2]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	81bb      	strh	r3, [r7, #12]
 8007fea:	88bb      	ldrh	r3, [r7, #4]
 8007fec:	81fb      	strh	r3, [r7, #14]
 8007fee:	887b      	ldrh	r3, [r7, #2]
 8007ff0:	823b      	strh	r3, [r7, #16]
 8007ff2:	883b      	ldrh	r3, [r7, #0]
 8007ff4:	827b      	strh	r3, [r7, #18]
 8007ff6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ff8:	82bb      	strh	r3, [r7, #20]
 8007ffa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007ffc:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007ffe:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8008000:	f107 030c 	add.w	r3, r7, #12
 8008004:	4619      	mov	r1, r3
 8008006:	2003      	movs	r0, #3
 8008008:	f7ff fe1b 	bl	8007c42 <hagl_fill_polygon>
}
 800800c:	bf00      	nop
 800800e:	371c      	adds	r7, #28
 8008010:	46bd      	mov	sp, r7
 8008012:	bd90      	pop	{r4, r7, pc}

08008014 <_vsniprintf_r>:
 8008014:	b530      	push	{r4, r5, lr}
 8008016:	4614      	mov	r4, r2
 8008018:	2c00      	cmp	r4, #0
 800801a:	b09b      	sub	sp, #108	@ 0x6c
 800801c:	4605      	mov	r5, r0
 800801e:	461a      	mov	r2, r3
 8008020:	da05      	bge.n	800802e <_vsniprintf_r+0x1a>
 8008022:	238b      	movs	r3, #139	@ 0x8b
 8008024:	6003      	str	r3, [r0, #0]
 8008026:	f04f 30ff 	mov.w	r0, #4294967295
 800802a:	b01b      	add	sp, #108	@ 0x6c
 800802c:	bd30      	pop	{r4, r5, pc}
 800802e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008032:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008036:	bf14      	ite	ne
 8008038:	f104 33ff 	addne.w	r3, r4, #4294967295
 800803c:	4623      	moveq	r3, r4
 800803e:	9302      	str	r3, [sp, #8]
 8008040:	9305      	str	r3, [sp, #20]
 8008042:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008046:	9100      	str	r1, [sp, #0]
 8008048:	9104      	str	r1, [sp, #16]
 800804a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800804e:	4669      	mov	r1, sp
 8008050:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008052:	f000 f9d3 	bl	80083fc <_svfiprintf_r>
 8008056:	1c43      	adds	r3, r0, #1
 8008058:	bfbc      	itt	lt
 800805a:	238b      	movlt	r3, #139	@ 0x8b
 800805c:	602b      	strlt	r3, [r5, #0]
 800805e:	2c00      	cmp	r4, #0
 8008060:	d0e3      	beq.n	800802a <_vsniprintf_r+0x16>
 8008062:	9b00      	ldr	r3, [sp, #0]
 8008064:	2200      	movs	r2, #0
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	e7df      	b.n	800802a <_vsniprintf_r+0x16>
	...

0800806c <vsniprintf>:
 800806c:	b507      	push	{r0, r1, r2, lr}
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	4613      	mov	r3, r2
 8008072:	460a      	mov	r2, r1
 8008074:	4601      	mov	r1, r0
 8008076:	4803      	ldr	r0, [pc, #12]	@ (8008084 <vsniprintf+0x18>)
 8008078:	6800      	ldr	r0, [r0, #0]
 800807a:	f7ff ffcb 	bl	8008014 <_vsniprintf_r>
 800807e:	b003      	add	sp, #12
 8008080:	f85d fb04 	ldr.w	pc, [sp], #4
 8008084:	20000214 	.word	0x20000214

08008088 <memcmp>:
 8008088:	b510      	push	{r4, lr}
 800808a:	3901      	subs	r1, #1
 800808c:	4402      	add	r2, r0
 800808e:	4290      	cmp	r0, r2
 8008090:	d101      	bne.n	8008096 <memcmp+0xe>
 8008092:	2000      	movs	r0, #0
 8008094:	e005      	b.n	80080a2 <memcmp+0x1a>
 8008096:	7803      	ldrb	r3, [r0, #0]
 8008098:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800809c:	42a3      	cmp	r3, r4
 800809e:	d001      	beq.n	80080a4 <memcmp+0x1c>
 80080a0:	1b18      	subs	r0, r3, r4
 80080a2:	bd10      	pop	{r4, pc}
 80080a4:	3001      	adds	r0, #1
 80080a6:	e7f2      	b.n	800808e <memcmp+0x6>

080080a8 <memset>:
 80080a8:	4402      	add	r2, r0
 80080aa:	4603      	mov	r3, r0
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d100      	bne.n	80080b2 <memset+0xa>
 80080b0:	4770      	bx	lr
 80080b2:	f803 1b01 	strb.w	r1, [r3], #1
 80080b6:	e7f9      	b.n	80080ac <memset+0x4>

080080b8 <strncpy>:
 80080b8:	b510      	push	{r4, lr}
 80080ba:	3901      	subs	r1, #1
 80080bc:	4603      	mov	r3, r0
 80080be:	b132      	cbz	r2, 80080ce <strncpy+0x16>
 80080c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80080c4:	f803 4b01 	strb.w	r4, [r3], #1
 80080c8:	3a01      	subs	r2, #1
 80080ca:	2c00      	cmp	r4, #0
 80080cc:	d1f7      	bne.n	80080be <strncpy+0x6>
 80080ce:	441a      	add	r2, r3
 80080d0:	2100      	movs	r1, #0
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d100      	bne.n	80080d8 <strncpy+0x20>
 80080d6:	bd10      	pop	{r4, pc}
 80080d8:	f803 1b01 	strb.w	r1, [r3], #1
 80080dc:	e7f9      	b.n	80080d2 <strncpy+0x1a>
	...

080080e0 <__errno>:
 80080e0:	4b01      	ldr	r3, [pc, #4]	@ (80080e8 <__errno+0x8>)
 80080e2:	6818      	ldr	r0, [r3, #0]
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	20000214 	.word	0x20000214

080080ec <__libc_init_array>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	4d0d      	ldr	r5, [pc, #52]	@ (8008124 <__libc_init_array+0x38>)
 80080f0:	4c0d      	ldr	r4, [pc, #52]	@ (8008128 <__libc_init_array+0x3c>)
 80080f2:	1b64      	subs	r4, r4, r5
 80080f4:	10a4      	asrs	r4, r4, #2
 80080f6:	2600      	movs	r6, #0
 80080f8:	42a6      	cmp	r6, r4
 80080fa:	d109      	bne.n	8008110 <__libc_init_array+0x24>
 80080fc:	4d0b      	ldr	r5, [pc, #44]	@ (800812c <__libc_init_array+0x40>)
 80080fe:	4c0c      	ldr	r4, [pc, #48]	@ (8008130 <__libc_init_array+0x44>)
 8008100:	f000 fc66 	bl	80089d0 <_init>
 8008104:	1b64      	subs	r4, r4, r5
 8008106:	10a4      	asrs	r4, r4, #2
 8008108:	2600      	movs	r6, #0
 800810a:	42a6      	cmp	r6, r4
 800810c:	d105      	bne.n	800811a <__libc_init_array+0x2e>
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	f855 3b04 	ldr.w	r3, [r5], #4
 8008114:	4798      	blx	r3
 8008116:	3601      	adds	r6, #1
 8008118:	e7ee      	b.n	80080f8 <__libc_init_array+0xc>
 800811a:	f855 3b04 	ldr.w	r3, [r5], #4
 800811e:	4798      	blx	r3
 8008120:	3601      	adds	r6, #1
 8008122:	e7f2      	b.n	800810a <__libc_init_array+0x1e>
 8008124:	08011ff0 	.word	0x08011ff0
 8008128:	08011ff0 	.word	0x08011ff0
 800812c:	08011ff0 	.word	0x08011ff0
 8008130:	08011ff4 	.word	0x08011ff4

08008134 <__retarget_lock_acquire_recursive>:
 8008134:	4770      	bx	lr

08008136 <__retarget_lock_release_recursive>:
 8008136:	4770      	bx	lr

08008138 <memcpy>:
 8008138:	440a      	add	r2, r1
 800813a:	4291      	cmp	r1, r2
 800813c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008140:	d100      	bne.n	8008144 <memcpy+0xc>
 8008142:	4770      	bx	lr
 8008144:	b510      	push	{r4, lr}
 8008146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800814a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800814e:	4291      	cmp	r1, r2
 8008150:	d1f9      	bne.n	8008146 <memcpy+0xe>
 8008152:	bd10      	pop	{r4, pc}

08008154 <_free_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4605      	mov	r5, r0
 8008158:	2900      	cmp	r1, #0
 800815a:	d041      	beq.n	80081e0 <_free_r+0x8c>
 800815c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008160:	1f0c      	subs	r4, r1, #4
 8008162:	2b00      	cmp	r3, #0
 8008164:	bfb8      	it	lt
 8008166:	18e4      	addlt	r4, r4, r3
 8008168:	f000 f8e0 	bl	800832c <__malloc_lock>
 800816c:	4a1d      	ldr	r2, [pc, #116]	@ (80081e4 <_free_r+0x90>)
 800816e:	6813      	ldr	r3, [r2, #0]
 8008170:	b933      	cbnz	r3, 8008180 <_free_r+0x2c>
 8008172:	6063      	str	r3, [r4, #4]
 8008174:	6014      	str	r4, [r2, #0]
 8008176:	4628      	mov	r0, r5
 8008178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800817c:	f000 b8dc 	b.w	8008338 <__malloc_unlock>
 8008180:	42a3      	cmp	r3, r4
 8008182:	d908      	bls.n	8008196 <_free_r+0x42>
 8008184:	6820      	ldr	r0, [r4, #0]
 8008186:	1821      	adds	r1, r4, r0
 8008188:	428b      	cmp	r3, r1
 800818a:	bf01      	itttt	eq
 800818c:	6819      	ldreq	r1, [r3, #0]
 800818e:	685b      	ldreq	r3, [r3, #4]
 8008190:	1809      	addeq	r1, r1, r0
 8008192:	6021      	streq	r1, [r4, #0]
 8008194:	e7ed      	b.n	8008172 <_free_r+0x1e>
 8008196:	461a      	mov	r2, r3
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	b10b      	cbz	r3, 80081a0 <_free_r+0x4c>
 800819c:	42a3      	cmp	r3, r4
 800819e:	d9fa      	bls.n	8008196 <_free_r+0x42>
 80081a0:	6811      	ldr	r1, [r2, #0]
 80081a2:	1850      	adds	r0, r2, r1
 80081a4:	42a0      	cmp	r0, r4
 80081a6:	d10b      	bne.n	80081c0 <_free_r+0x6c>
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	4401      	add	r1, r0
 80081ac:	1850      	adds	r0, r2, r1
 80081ae:	4283      	cmp	r3, r0
 80081b0:	6011      	str	r1, [r2, #0]
 80081b2:	d1e0      	bne.n	8008176 <_free_r+0x22>
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	6053      	str	r3, [r2, #4]
 80081ba:	4408      	add	r0, r1
 80081bc:	6010      	str	r0, [r2, #0]
 80081be:	e7da      	b.n	8008176 <_free_r+0x22>
 80081c0:	d902      	bls.n	80081c8 <_free_r+0x74>
 80081c2:	230c      	movs	r3, #12
 80081c4:	602b      	str	r3, [r5, #0]
 80081c6:	e7d6      	b.n	8008176 <_free_r+0x22>
 80081c8:	6820      	ldr	r0, [r4, #0]
 80081ca:	1821      	adds	r1, r4, r0
 80081cc:	428b      	cmp	r3, r1
 80081ce:	bf04      	itt	eq
 80081d0:	6819      	ldreq	r1, [r3, #0]
 80081d2:	685b      	ldreq	r3, [r3, #4]
 80081d4:	6063      	str	r3, [r4, #4]
 80081d6:	bf04      	itt	eq
 80081d8:	1809      	addeq	r1, r1, r0
 80081da:	6021      	streq	r1, [r4, #0]
 80081dc:	6054      	str	r4, [r2, #4]
 80081de:	e7ca      	b.n	8008176 <_free_r+0x22>
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
 80081e2:	bf00      	nop
 80081e4:	2000b018 	.word	0x2000b018

080081e8 <sbrk_aligned>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008228 <sbrk_aligned+0x40>)
 80081ec:	460c      	mov	r4, r1
 80081ee:	6831      	ldr	r1, [r6, #0]
 80081f0:	4605      	mov	r5, r0
 80081f2:	b911      	cbnz	r1, 80081fa <sbrk_aligned+0x12>
 80081f4:	f000 fba6 	bl	8008944 <_sbrk_r>
 80081f8:	6030      	str	r0, [r6, #0]
 80081fa:	4621      	mov	r1, r4
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 fba1 	bl	8008944 <_sbrk_r>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	d103      	bne.n	800820e <sbrk_aligned+0x26>
 8008206:	f04f 34ff 	mov.w	r4, #4294967295
 800820a:	4620      	mov	r0, r4
 800820c:	bd70      	pop	{r4, r5, r6, pc}
 800820e:	1cc4      	adds	r4, r0, #3
 8008210:	f024 0403 	bic.w	r4, r4, #3
 8008214:	42a0      	cmp	r0, r4
 8008216:	d0f8      	beq.n	800820a <sbrk_aligned+0x22>
 8008218:	1a21      	subs	r1, r4, r0
 800821a:	4628      	mov	r0, r5
 800821c:	f000 fb92 	bl	8008944 <_sbrk_r>
 8008220:	3001      	adds	r0, #1
 8008222:	d1f2      	bne.n	800820a <sbrk_aligned+0x22>
 8008224:	e7ef      	b.n	8008206 <sbrk_aligned+0x1e>
 8008226:	bf00      	nop
 8008228:	2000b014 	.word	0x2000b014

0800822c <_malloc_r>:
 800822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008230:	1ccd      	adds	r5, r1, #3
 8008232:	f025 0503 	bic.w	r5, r5, #3
 8008236:	3508      	adds	r5, #8
 8008238:	2d0c      	cmp	r5, #12
 800823a:	bf38      	it	cc
 800823c:	250c      	movcc	r5, #12
 800823e:	2d00      	cmp	r5, #0
 8008240:	4606      	mov	r6, r0
 8008242:	db01      	blt.n	8008248 <_malloc_r+0x1c>
 8008244:	42a9      	cmp	r1, r5
 8008246:	d904      	bls.n	8008252 <_malloc_r+0x26>
 8008248:	230c      	movs	r3, #12
 800824a:	6033      	str	r3, [r6, #0]
 800824c:	2000      	movs	r0, #0
 800824e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008252:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008328 <_malloc_r+0xfc>
 8008256:	f000 f869 	bl	800832c <__malloc_lock>
 800825a:	f8d8 3000 	ldr.w	r3, [r8]
 800825e:	461c      	mov	r4, r3
 8008260:	bb44      	cbnz	r4, 80082b4 <_malloc_r+0x88>
 8008262:	4629      	mov	r1, r5
 8008264:	4630      	mov	r0, r6
 8008266:	f7ff ffbf 	bl	80081e8 <sbrk_aligned>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	4604      	mov	r4, r0
 800826e:	d158      	bne.n	8008322 <_malloc_r+0xf6>
 8008270:	f8d8 4000 	ldr.w	r4, [r8]
 8008274:	4627      	mov	r7, r4
 8008276:	2f00      	cmp	r7, #0
 8008278:	d143      	bne.n	8008302 <_malloc_r+0xd6>
 800827a:	2c00      	cmp	r4, #0
 800827c:	d04b      	beq.n	8008316 <_malloc_r+0xea>
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	4639      	mov	r1, r7
 8008282:	4630      	mov	r0, r6
 8008284:	eb04 0903 	add.w	r9, r4, r3
 8008288:	f000 fb5c 	bl	8008944 <_sbrk_r>
 800828c:	4581      	cmp	r9, r0
 800828e:	d142      	bne.n	8008316 <_malloc_r+0xea>
 8008290:	6821      	ldr	r1, [r4, #0]
 8008292:	1a6d      	subs	r5, r5, r1
 8008294:	4629      	mov	r1, r5
 8008296:	4630      	mov	r0, r6
 8008298:	f7ff ffa6 	bl	80081e8 <sbrk_aligned>
 800829c:	3001      	adds	r0, #1
 800829e:	d03a      	beq.n	8008316 <_malloc_r+0xea>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	442b      	add	r3, r5
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	f8d8 3000 	ldr.w	r3, [r8]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	bb62      	cbnz	r2, 8008308 <_malloc_r+0xdc>
 80082ae:	f8c8 7000 	str.w	r7, [r8]
 80082b2:	e00f      	b.n	80082d4 <_malloc_r+0xa8>
 80082b4:	6822      	ldr	r2, [r4, #0]
 80082b6:	1b52      	subs	r2, r2, r5
 80082b8:	d420      	bmi.n	80082fc <_malloc_r+0xd0>
 80082ba:	2a0b      	cmp	r2, #11
 80082bc:	d917      	bls.n	80082ee <_malloc_r+0xc2>
 80082be:	1961      	adds	r1, r4, r5
 80082c0:	42a3      	cmp	r3, r4
 80082c2:	6025      	str	r5, [r4, #0]
 80082c4:	bf18      	it	ne
 80082c6:	6059      	strne	r1, [r3, #4]
 80082c8:	6863      	ldr	r3, [r4, #4]
 80082ca:	bf08      	it	eq
 80082cc:	f8c8 1000 	streq.w	r1, [r8]
 80082d0:	5162      	str	r2, [r4, r5]
 80082d2:	604b      	str	r3, [r1, #4]
 80082d4:	4630      	mov	r0, r6
 80082d6:	f000 f82f 	bl	8008338 <__malloc_unlock>
 80082da:	f104 000b 	add.w	r0, r4, #11
 80082de:	1d23      	adds	r3, r4, #4
 80082e0:	f020 0007 	bic.w	r0, r0, #7
 80082e4:	1ac2      	subs	r2, r0, r3
 80082e6:	bf1c      	itt	ne
 80082e8:	1a1b      	subne	r3, r3, r0
 80082ea:	50a3      	strne	r3, [r4, r2]
 80082ec:	e7af      	b.n	800824e <_malloc_r+0x22>
 80082ee:	6862      	ldr	r2, [r4, #4]
 80082f0:	42a3      	cmp	r3, r4
 80082f2:	bf0c      	ite	eq
 80082f4:	f8c8 2000 	streq.w	r2, [r8]
 80082f8:	605a      	strne	r2, [r3, #4]
 80082fa:	e7eb      	b.n	80082d4 <_malloc_r+0xa8>
 80082fc:	4623      	mov	r3, r4
 80082fe:	6864      	ldr	r4, [r4, #4]
 8008300:	e7ae      	b.n	8008260 <_malloc_r+0x34>
 8008302:	463c      	mov	r4, r7
 8008304:	687f      	ldr	r7, [r7, #4]
 8008306:	e7b6      	b.n	8008276 <_malloc_r+0x4a>
 8008308:	461a      	mov	r2, r3
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	42a3      	cmp	r3, r4
 800830e:	d1fb      	bne.n	8008308 <_malloc_r+0xdc>
 8008310:	2300      	movs	r3, #0
 8008312:	6053      	str	r3, [r2, #4]
 8008314:	e7de      	b.n	80082d4 <_malloc_r+0xa8>
 8008316:	230c      	movs	r3, #12
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	4630      	mov	r0, r6
 800831c:	f000 f80c 	bl	8008338 <__malloc_unlock>
 8008320:	e794      	b.n	800824c <_malloc_r+0x20>
 8008322:	6005      	str	r5, [r0, #0]
 8008324:	e7d6      	b.n	80082d4 <_malloc_r+0xa8>
 8008326:	bf00      	nop
 8008328:	2000b018 	.word	0x2000b018

0800832c <__malloc_lock>:
 800832c:	4801      	ldr	r0, [pc, #4]	@ (8008334 <__malloc_lock+0x8>)
 800832e:	f7ff bf01 	b.w	8008134 <__retarget_lock_acquire_recursive>
 8008332:	bf00      	nop
 8008334:	2000b010 	.word	0x2000b010

08008338 <__malloc_unlock>:
 8008338:	4801      	ldr	r0, [pc, #4]	@ (8008340 <__malloc_unlock+0x8>)
 800833a:	f7ff befc 	b.w	8008136 <__retarget_lock_release_recursive>
 800833e:	bf00      	nop
 8008340:	2000b010 	.word	0x2000b010

08008344 <__ssputs_r>:
 8008344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	688e      	ldr	r6, [r1, #8]
 800834a:	461f      	mov	r7, r3
 800834c:	42be      	cmp	r6, r7
 800834e:	680b      	ldr	r3, [r1, #0]
 8008350:	4682      	mov	sl, r0
 8008352:	460c      	mov	r4, r1
 8008354:	4690      	mov	r8, r2
 8008356:	d82d      	bhi.n	80083b4 <__ssputs_r+0x70>
 8008358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800835c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008360:	d026      	beq.n	80083b0 <__ssputs_r+0x6c>
 8008362:	6965      	ldr	r5, [r4, #20]
 8008364:	6909      	ldr	r1, [r1, #16]
 8008366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800836a:	eba3 0901 	sub.w	r9, r3, r1
 800836e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008372:	1c7b      	adds	r3, r7, #1
 8008374:	444b      	add	r3, r9
 8008376:	106d      	asrs	r5, r5, #1
 8008378:	429d      	cmp	r5, r3
 800837a:	bf38      	it	cc
 800837c:	461d      	movcc	r5, r3
 800837e:	0553      	lsls	r3, r2, #21
 8008380:	d527      	bpl.n	80083d2 <__ssputs_r+0x8e>
 8008382:	4629      	mov	r1, r5
 8008384:	f7ff ff52 	bl	800822c <_malloc_r>
 8008388:	4606      	mov	r6, r0
 800838a:	b360      	cbz	r0, 80083e6 <__ssputs_r+0xa2>
 800838c:	6921      	ldr	r1, [r4, #16]
 800838e:	464a      	mov	r2, r9
 8008390:	f7ff fed2 	bl	8008138 <memcpy>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800839a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	6126      	str	r6, [r4, #16]
 80083a2:	6165      	str	r5, [r4, #20]
 80083a4:	444e      	add	r6, r9
 80083a6:	eba5 0509 	sub.w	r5, r5, r9
 80083aa:	6026      	str	r6, [r4, #0]
 80083ac:	60a5      	str	r5, [r4, #8]
 80083ae:	463e      	mov	r6, r7
 80083b0:	42be      	cmp	r6, r7
 80083b2:	d900      	bls.n	80083b6 <__ssputs_r+0x72>
 80083b4:	463e      	mov	r6, r7
 80083b6:	6820      	ldr	r0, [r4, #0]
 80083b8:	4632      	mov	r2, r6
 80083ba:	4641      	mov	r1, r8
 80083bc:	f000 faa8 	bl	8008910 <memmove>
 80083c0:	68a3      	ldr	r3, [r4, #8]
 80083c2:	1b9b      	subs	r3, r3, r6
 80083c4:	60a3      	str	r3, [r4, #8]
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	4433      	add	r3, r6
 80083ca:	6023      	str	r3, [r4, #0]
 80083cc:	2000      	movs	r0, #0
 80083ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d2:	462a      	mov	r2, r5
 80083d4:	f000 fac6 	bl	8008964 <_realloc_r>
 80083d8:	4606      	mov	r6, r0
 80083da:	2800      	cmp	r0, #0
 80083dc:	d1e0      	bne.n	80083a0 <__ssputs_r+0x5c>
 80083de:	6921      	ldr	r1, [r4, #16]
 80083e0:	4650      	mov	r0, sl
 80083e2:	f7ff feb7 	bl	8008154 <_free_r>
 80083e6:	230c      	movs	r3, #12
 80083e8:	f8ca 3000 	str.w	r3, [sl]
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083f2:	81a3      	strh	r3, [r4, #12]
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	e7e9      	b.n	80083ce <__ssputs_r+0x8a>
	...

080083fc <_svfiprintf_r>:
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	4698      	mov	r8, r3
 8008402:	898b      	ldrh	r3, [r1, #12]
 8008404:	061b      	lsls	r3, r3, #24
 8008406:	b09d      	sub	sp, #116	@ 0x74
 8008408:	4607      	mov	r7, r0
 800840a:	460d      	mov	r5, r1
 800840c:	4614      	mov	r4, r2
 800840e:	d510      	bpl.n	8008432 <_svfiprintf_r+0x36>
 8008410:	690b      	ldr	r3, [r1, #16]
 8008412:	b973      	cbnz	r3, 8008432 <_svfiprintf_r+0x36>
 8008414:	2140      	movs	r1, #64	@ 0x40
 8008416:	f7ff ff09 	bl	800822c <_malloc_r>
 800841a:	6028      	str	r0, [r5, #0]
 800841c:	6128      	str	r0, [r5, #16]
 800841e:	b930      	cbnz	r0, 800842e <_svfiprintf_r+0x32>
 8008420:	230c      	movs	r3, #12
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	b01d      	add	sp, #116	@ 0x74
 800842a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842e:	2340      	movs	r3, #64	@ 0x40
 8008430:	616b      	str	r3, [r5, #20]
 8008432:	2300      	movs	r3, #0
 8008434:	9309      	str	r3, [sp, #36]	@ 0x24
 8008436:	2320      	movs	r3, #32
 8008438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800843c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008440:	2330      	movs	r3, #48	@ 0x30
 8008442:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085e0 <_svfiprintf_r+0x1e4>
 8008446:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800844a:	f04f 0901 	mov.w	r9, #1
 800844e:	4623      	mov	r3, r4
 8008450:	469a      	mov	sl, r3
 8008452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008456:	b10a      	cbz	r2, 800845c <_svfiprintf_r+0x60>
 8008458:	2a25      	cmp	r2, #37	@ 0x25
 800845a:	d1f9      	bne.n	8008450 <_svfiprintf_r+0x54>
 800845c:	ebba 0b04 	subs.w	fp, sl, r4
 8008460:	d00b      	beq.n	800847a <_svfiprintf_r+0x7e>
 8008462:	465b      	mov	r3, fp
 8008464:	4622      	mov	r2, r4
 8008466:	4629      	mov	r1, r5
 8008468:	4638      	mov	r0, r7
 800846a:	f7ff ff6b 	bl	8008344 <__ssputs_r>
 800846e:	3001      	adds	r0, #1
 8008470:	f000 80a7 	beq.w	80085c2 <_svfiprintf_r+0x1c6>
 8008474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008476:	445a      	add	r2, fp
 8008478:	9209      	str	r2, [sp, #36]	@ 0x24
 800847a:	f89a 3000 	ldrb.w	r3, [sl]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 809f 	beq.w	80085c2 <_svfiprintf_r+0x1c6>
 8008484:	2300      	movs	r3, #0
 8008486:	f04f 32ff 	mov.w	r2, #4294967295
 800848a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800848e:	f10a 0a01 	add.w	sl, sl, #1
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	9307      	str	r3, [sp, #28]
 8008496:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800849a:	931a      	str	r3, [sp, #104]	@ 0x68
 800849c:	4654      	mov	r4, sl
 800849e:	2205      	movs	r2, #5
 80084a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a4:	484e      	ldr	r0, [pc, #312]	@ (80085e0 <_svfiprintf_r+0x1e4>)
 80084a6:	f7f7 fe9b 	bl	80001e0 <memchr>
 80084aa:	9a04      	ldr	r2, [sp, #16]
 80084ac:	b9d8      	cbnz	r0, 80084e6 <_svfiprintf_r+0xea>
 80084ae:	06d0      	lsls	r0, r2, #27
 80084b0:	bf44      	itt	mi
 80084b2:	2320      	movmi	r3, #32
 80084b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084b8:	0711      	lsls	r1, r2, #28
 80084ba:	bf44      	itt	mi
 80084bc:	232b      	movmi	r3, #43	@ 0x2b
 80084be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084c2:	f89a 3000 	ldrb.w	r3, [sl]
 80084c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80084c8:	d015      	beq.n	80084f6 <_svfiprintf_r+0xfa>
 80084ca:	9a07      	ldr	r2, [sp, #28]
 80084cc:	4654      	mov	r4, sl
 80084ce:	2000      	movs	r0, #0
 80084d0:	f04f 0c0a 	mov.w	ip, #10
 80084d4:	4621      	mov	r1, r4
 80084d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084da:	3b30      	subs	r3, #48	@ 0x30
 80084dc:	2b09      	cmp	r3, #9
 80084de:	d94b      	bls.n	8008578 <_svfiprintf_r+0x17c>
 80084e0:	b1b0      	cbz	r0, 8008510 <_svfiprintf_r+0x114>
 80084e2:	9207      	str	r2, [sp, #28]
 80084e4:	e014      	b.n	8008510 <_svfiprintf_r+0x114>
 80084e6:	eba0 0308 	sub.w	r3, r0, r8
 80084ea:	fa09 f303 	lsl.w	r3, r9, r3
 80084ee:	4313      	orrs	r3, r2
 80084f0:	9304      	str	r3, [sp, #16]
 80084f2:	46a2      	mov	sl, r4
 80084f4:	e7d2      	b.n	800849c <_svfiprintf_r+0xa0>
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	1d19      	adds	r1, r3, #4
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	9103      	str	r1, [sp, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	bfbb      	ittet	lt
 8008502:	425b      	neglt	r3, r3
 8008504:	f042 0202 	orrlt.w	r2, r2, #2
 8008508:	9307      	strge	r3, [sp, #28]
 800850a:	9307      	strlt	r3, [sp, #28]
 800850c:	bfb8      	it	lt
 800850e:	9204      	strlt	r2, [sp, #16]
 8008510:	7823      	ldrb	r3, [r4, #0]
 8008512:	2b2e      	cmp	r3, #46	@ 0x2e
 8008514:	d10a      	bne.n	800852c <_svfiprintf_r+0x130>
 8008516:	7863      	ldrb	r3, [r4, #1]
 8008518:	2b2a      	cmp	r3, #42	@ 0x2a
 800851a:	d132      	bne.n	8008582 <_svfiprintf_r+0x186>
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	1d1a      	adds	r2, r3, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	9203      	str	r2, [sp, #12]
 8008524:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008528:	3402      	adds	r4, #2
 800852a:	9305      	str	r3, [sp, #20]
 800852c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80085f0 <_svfiprintf_r+0x1f4>
 8008530:	7821      	ldrb	r1, [r4, #0]
 8008532:	2203      	movs	r2, #3
 8008534:	4650      	mov	r0, sl
 8008536:	f7f7 fe53 	bl	80001e0 <memchr>
 800853a:	b138      	cbz	r0, 800854c <_svfiprintf_r+0x150>
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	eba0 000a 	sub.w	r0, r0, sl
 8008542:	2240      	movs	r2, #64	@ 0x40
 8008544:	4082      	lsls	r2, r0
 8008546:	4313      	orrs	r3, r2
 8008548:	3401      	adds	r4, #1
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008550:	4824      	ldr	r0, [pc, #144]	@ (80085e4 <_svfiprintf_r+0x1e8>)
 8008552:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008556:	2206      	movs	r2, #6
 8008558:	f7f7 fe42 	bl	80001e0 <memchr>
 800855c:	2800      	cmp	r0, #0
 800855e:	d036      	beq.n	80085ce <_svfiprintf_r+0x1d2>
 8008560:	4b21      	ldr	r3, [pc, #132]	@ (80085e8 <_svfiprintf_r+0x1ec>)
 8008562:	bb1b      	cbnz	r3, 80085ac <_svfiprintf_r+0x1b0>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	3307      	adds	r3, #7
 8008568:	f023 0307 	bic.w	r3, r3, #7
 800856c:	3308      	adds	r3, #8
 800856e:	9303      	str	r3, [sp, #12]
 8008570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008572:	4433      	add	r3, r6
 8008574:	9309      	str	r3, [sp, #36]	@ 0x24
 8008576:	e76a      	b.n	800844e <_svfiprintf_r+0x52>
 8008578:	fb0c 3202 	mla	r2, ip, r2, r3
 800857c:	460c      	mov	r4, r1
 800857e:	2001      	movs	r0, #1
 8008580:	e7a8      	b.n	80084d4 <_svfiprintf_r+0xd8>
 8008582:	2300      	movs	r3, #0
 8008584:	3401      	adds	r4, #1
 8008586:	9305      	str	r3, [sp, #20]
 8008588:	4619      	mov	r1, r3
 800858a:	f04f 0c0a 	mov.w	ip, #10
 800858e:	4620      	mov	r0, r4
 8008590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008594:	3a30      	subs	r2, #48	@ 0x30
 8008596:	2a09      	cmp	r2, #9
 8008598:	d903      	bls.n	80085a2 <_svfiprintf_r+0x1a6>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0c6      	beq.n	800852c <_svfiprintf_r+0x130>
 800859e:	9105      	str	r1, [sp, #20]
 80085a0:	e7c4      	b.n	800852c <_svfiprintf_r+0x130>
 80085a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a6:	4604      	mov	r4, r0
 80085a8:	2301      	movs	r3, #1
 80085aa:	e7f0      	b.n	800858e <_svfiprintf_r+0x192>
 80085ac:	ab03      	add	r3, sp, #12
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	462a      	mov	r2, r5
 80085b2:	4b0e      	ldr	r3, [pc, #56]	@ (80085ec <_svfiprintf_r+0x1f0>)
 80085b4:	a904      	add	r1, sp, #16
 80085b6:	4638      	mov	r0, r7
 80085b8:	f3af 8000 	nop.w
 80085bc:	1c42      	adds	r2, r0, #1
 80085be:	4606      	mov	r6, r0
 80085c0:	d1d6      	bne.n	8008570 <_svfiprintf_r+0x174>
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	065b      	lsls	r3, r3, #25
 80085c6:	f53f af2d 	bmi.w	8008424 <_svfiprintf_r+0x28>
 80085ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085cc:	e72c      	b.n	8008428 <_svfiprintf_r+0x2c>
 80085ce:	ab03      	add	r3, sp, #12
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	462a      	mov	r2, r5
 80085d4:	4b05      	ldr	r3, [pc, #20]	@ (80085ec <_svfiprintf_r+0x1f0>)
 80085d6:	a904      	add	r1, sp, #16
 80085d8:	4638      	mov	r0, r7
 80085da:	f000 f879 	bl	80086d0 <_printf_i>
 80085de:	e7ed      	b.n	80085bc <_svfiprintf_r+0x1c0>
 80085e0:	08011fb4 	.word	0x08011fb4
 80085e4:	08011fbe 	.word	0x08011fbe
 80085e8:	00000000 	.word	0x00000000
 80085ec:	08008345 	.word	0x08008345
 80085f0:	08011fba 	.word	0x08011fba

080085f4 <_printf_common>:
 80085f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	4616      	mov	r6, r2
 80085fa:	4698      	mov	r8, r3
 80085fc:	688a      	ldr	r2, [r1, #8]
 80085fe:	690b      	ldr	r3, [r1, #16]
 8008600:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008604:	4293      	cmp	r3, r2
 8008606:	bfb8      	it	lt
 8008608:	4613      	movlt	r3, r2
 800860a:	6033      	str	r3, [r6, #0]
 800860c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008610:	4607      	mov	r7, r0
 8008612:	460c      	mov	r4, r1
 8008614:	b10a      	cbz	r2, 800861a <_printf_common+0x26>
 8008616:	3301      	adds	r3, #1
 8008618:	6033      	str	r3, [r6, #0]
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	0699      	lsls	r1, r3, #26
 800861e:	bf42      	ittt	mi
 8008620:	6833      	ldrmi	r3, [r6, #0]
 8008622:	3302      	addmi	r3, #2
 8008624:	6033      	strmi	r3, [r6, #0]
 8008626:	6825      	ldr	r5, [r4, #0]
 8008628:	f015 0506 	ands.w	r5, r5, #6
 800862c:	d106      	bne.n	800863c <_printf_common+0x48>
 800862e:	f104 0a19 	add.w	sl, r4, #25
 8008632:	68e3      	ldr	r3, [r4, #12]
 8008634:	6832      	ldr	r2, [r6, #0]
 8008636:	1a9b      	subs	r3, r3, r2
 8008638:	42ab      	cmp	r3, r5
 800863a:	dc26      	bgt.n	800868a <_printf_common+0x96>
 800863c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008640:	6822      	ldr	r2, [r4, #0]
 8008642:	3b00      	subs	r3, #0
 8008644:	bf18      	it	ne
 8008646:	2301      	movne	r3, #1
 8008648:	0692      	lsls	r2, r2, #26
 800864a:	d42b      	bmi.n	80086a4 <_printf_common+0xb0>
 800864c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008650:	4641      	mov	r1, r8
 8008652:	4638      	mov	r0, r7
 8008654:	47c8      	blx	r9
 8008656:	3001      	adds	r0, #1
 8008658:	d01e      	beq.n	8008698 <_printf_common+0xa4>
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	6922      	ldr	r2, [r4, #16]
 800865e:	f003 0306 	and.w	r3, r3, #6
 8008662:	2b04      	cmp	r3, #4
 8008664:	bf02      	ittt	eq
 8008666:	68e5      	ldreq	r5, [r4, #12]
 8008668:	6833      	ldreq	r3, [r6, #0]
 800866a:	1aed      	subeq	r5, r5, r3
 800866c:	68a3      	ldr	r3, [r4, #8]
 800866e:	bf0c      	ite	eq
 8008670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008674:	2500      	movne	r5, #0
 8008676:	4293      	cmp	r3, r2
 8008678:	bfc4      	itt	gt
 800867a:	1a9b      	subgt	r3, r3, r2
 800867c:	18ed      	addgt	r5, r5, r3
 800867e:	2600      	movs	r6, #0
 8008680:	341a      	adds	r4, #26
 8008682:	42b5      	cmp	r5, r6
 8008684:	d11a      	bne.n	80086bc <_printf_common+0xc8>
 8008686:	2000      	movs	r0, #0
 8008688:	e008      	b.n	800869c <_printf_common+0xa8>
 800868a:	2301      	movs	r3, #1
 800868c:	4652      	mov	r2, sl
 800868e:	4641      	mov	r1, r8
 8008690:	4638      	mov	r0, r7
 8008692:	47c8      	blx	r9
 8008694:	3001      	adds	r0, #1
 8008696:	d103      	bne.n	80086a0 <_printf_common+0xac>
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a0:	3501      	adds	r5, #1
 80086a2:	e7c6      	b.n	8008632 <_printf_common+0x3e>
 80086a4:	18e1      	adds	r1, r4, r3
 80086a6:	1c5a      	adds	r2, r3, #1
 80086a8:	2030      	movs	r0, #48	@ 0x30
 80086aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086ae:	4422      	add	r2, r4
 80086b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086b8:	3302      	adds	r3, #2
 80086ba:	e7c7      	b.n	800864c <_printf_common+0x58>
 80086bc:	2301      	movs	r3, #1
 80086be:	4622      	mov	r2, r4
 80086c0:	4641      	mov	r1, r8
 80086c2:	4638      	mov	r0, r7
 80086c4:	47c8      	blx	r9
 80086c6:	3001      	adds	r0, #1
 80086c8:	d0e6      	beq.n	8008698 <_printf_common+0xa4>
 80086ca:	3601      	adds	r6, #1
 80086cc:	e7d9      	b.n	8008682 <_printf_common+0x8e>
	...

080086d0 <_printf_i>:
 80086d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086d4:	7e0f      	ldrb	r7, [r1, #24]
 80086d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086d8:	2f78      	cmp	r7, #120	@ 0x78
 80086da:	4691      	mov	r9, r2
 80086dc:	4680      	mov	r8, r0
 80086de:	460c      	mov	r4, r1
 80086e0:	469a      	mov	sl, r3
 80086e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086e6:	d807      	bhi.n	80086f8 <_printf_i+0x28>
 80086e8:	2f62      	cmp	r7, #98	@ 0x62
 80086ea:	d80a      	bhi.n	8008702 <_printf_i+0x32>
 80086ec:	2f00      	cmp	r7, #0
 80086ee:	f000 80d2 	beq.w	8008896 <_printf_i+0x1c6>
 80086f2:	2f58      	cmp	r7, #88	@ 0x58
 80086f4:	f000 80b9 	beq.w	800886a <_printf_i+0x19a>
 80086f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008700:	e03a      	b.n	8008778 <_printf_i+0xa8>
 8008702:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008706:	2b15      	cmp	r3, #21
 8008708:	d8f6      	bhi.n	80086f8 <_printf_i+0x28>
 800870a:	a101      	add	r1, pc, #4	@ (adr r1, 8008710 <_printf_i+0x40>)
 800870c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008710:	08008769 	.word	0x08008769
 8008714:	0800877d 	.word	0x0800877d
 8008718:	080086f9 	.word	0x080086f9
 800871c:	080086f9 	.word	0x080086f9
 8008720:	080086f9 	.word	0x080086f9
 8008724:	080086f9 	.word	0x080086f9
 8008728:	0800877d 	.word	0x0800877d
 800872c:	080086f9 	.word	0x080086f9
 8008730:	080086f9 	.word	0x080086f9
 8008734:	080086f9 	.word	0x080086f9
 8008738:	080086f9 	.word	0x080086f9
 800873c:	0800887d 	.word	0x0800887d
 8008740:	080087a7 	.word	0x080087a7
 8008744:	08008837 	.word	0x08008837
 8008748:	080086f9 	.word	0x080086f9
 800874c:	080086f9 	.word	0x080086f9
 8008750:	0800889f 	.word	0x0800889f
 8008754:	080086f9 	.word	0x080086f9
 8008758:	080087a7 	.word	0x080087a7
 800875c:	080086f9 	.word	0x080086f9
 8008760:	080086f9 	.word	0x080086f9
 8008764:	0800883f 	.word	0x0800883f
 8008768:	6833      	ldr	r3, [r6, #0]
 800876a:	1d1a      	adds	r2, r3, #4
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6032      	str	r2, [r6, #0]
 8008770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008774:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008778:	2301      	movs	r3, #1
 800877a:	e09d      	b.n	80088b8 <_printf_i+0x1e8>
 800877c:	6833      	ldr	r3, [r6, #0]
 800877e:	6820      	ldr	r0, [r4, #0]
 8008780:	1d19      	adds	r1, r3, #4
 8008782:	6031      	str	r1, [r6, #0]
 8008784:	0606      	lsls	r6, r0, #24
 8008786:	d501      	bpl.n	800878c <_printf_i+0xbc>
 8008788:	681d      	ldr	r5, [r3, #0]
 800878a:	e003      	b.n	8008794 <_printf_i+0xc4>
 800878c:	0645      	lsls	r5, r0, #25
 800878e:	d5fb      	bpl.n	8008788 <_printf_i+0xb8>
 8008790:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008794:	2d00      	cmp	r5, #0
 8008796:	da03      	bge.n	80087a0 <_printf_i+0xd0>
 8008798:	232d      	movs	r3, #45	@ 0x2d
 800879a:	426d      	negs	r5, r5
 800879c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087a0:	4859      	ldr	r0, [pc, #356]	@ (8008908 <_printf_i+0x238>)
 80087a2:	230a      	movs	r3, #10
 80087a4:	e011      	b.n	80087ca <_printf_i+0xfa>
 80087a6:	6821      	ldr	r1, [r4, #0]
 80087a8:	6833      	ldr	r3, [r6, #0]
 80087aa:	0608      	lsls	r0, r1, #24
 80087ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80087b0:	d402      	bmi.n	80087b8 <_printf_i+0xe8>
 80087b2:	0649      	lsls	r1, r1, #25
 80087b4:	bf48      	it	mi
 80087b6:	b2ad      	uxthmi	r5, r5
 80087b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80087ba:	4853      	ldr	r0, [pc, #332]	@ (8008908 <_printf_i+0x238>)
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	bf14      	ite	ne
 80087c0:	230a      	movne	r3, #10
 80087c2:	2308      	moveq	r3, #8
 80087c4:	2100      	movs	r1, #0
 80087c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087ca:	6866      	ldr	r6, [r4, #4]
 80087cc:	60a6      	str	r6, [r4, #8]
 80087ce:	2e00      	cmp	r6, #0
 80087d0:	bfa2      	ittt	ge
 80087d2:	6821      	ldrge	r1, [r4, #0]
 80087d4:	f021 0104 	bicge.w	r1, r1, #4
 80087d8:	6021      	strge	r1, [r4, #0]
 80087da:	b90d      	cbnz	r5, 80087e0 <_printf_i+0x110>
 80087dc:	2e00      	cmp	r6, #0
 80087de:	d04b      	beq.n	8008878 <_printf_i+0x1a8>
 80087e0:	4616      	mov	r6, r2
 80087e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80087e6:	fb03 5711 	mls	r7, r3, r1, r5
 80087ea:	5dc7      	ldrb	r7, [r0, r7]
 80087ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087f0:	462f      	mov	r7, r5
 80087f2:	42bb      	cmp	r3, r7
 80087f4:	460d      	mov	r5, r1
 80087f6:	d9f4      	bls.n	80087e2 <_printf_i+0x112>
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d10b      	bne.n	8008814 <_printf_i+0x144>
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	07df      	lsls	r7, r3, #31
 8008800:	d508      	bpl.n	8008814 <_printf_i+0x144>
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	6861      	ldr	r1, [r4, #4]
 8008806:	4299      	cmp	r1, r3
 8008808:	bfde      	ittt	le
 800880a:	2330      	movle	r3, #48	@ 0x30
 800880c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008810:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008814:	1b92      	subs	r2, r2, r6
 8008816:	6122      	str	r2, [r4, #16]
 8008818:	f8cd a000 	str.w	sl, [sp]
 800881c:	464b      	mov	r3, r9
 800881e:	aa03      	add	r2, sp, #12
 8008820:	4621      	mov	r1, r4
 8008822:	4640      	mov	r0, r8
 8008824:	f7ff fee6 	bl	80085f4 <_printf_common>
 8008828:	3001      	adds	r0, #1
 800882a:	d14a      	bne.n	80088c2 <_printf_i+0x1f2>
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	b004      	add	sp, #16
 8008832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	f043 0320 	orr.w	r3, r3, #32
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	4833      	ldr	r0, [pc, #204]	@ (800890c <_printf_i+0x23c>)
 8008840:	2778      	movs	r7, #120	@ 0x78
 8008842:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	6831      	ldr	r1, [r6, #0]
 800884a:	061f      	lsls	r7, r3, #24
 800884c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008850:	d402      	bmi.n	8008858 <_printf_i+0x188>
 8008852:	065f      	lsls	r7, r3, #25
 8008854:	bf48      	it	mi
 8008856:	b2ad      	uxthmi	r5, r5
 8008858:	6031      	str	r1, [r6, #0]
 800885a:	07d9      	lsls	r1, r3, #31
 800885c:	bf44      	itt	mi
 800885e:	f043 0320 	orrmi.w	r3, r3, #32
 8008862:	6023      	strmi	r3, [r4, #0]
 8008864:	b11d      	cbz	r5, 800886e <_printf_i+0x19e>
 8008866:	2310      	movs	r3, #16
 8008868:	e7ac      	b.n	80087c4 <_printf_i+0xf4>
 800886a:	4827      	ldr	r0, [pc, #156]	@ (8008908 <_printf_i+0x238>)
 800886c:	e7e9      	b.n	8008842 <_printf_i+0x172>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	f023 0320 	bic.w	r3, r3, #32
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	e7f6      	b.n	8008866 <_printf_i+0x196>
 8008878:	4616      	mov	r6, r2
 800887a:	e7bd      	b.n	80087f8 <_printf_i+0x128>
 800887c:	6833      	ldr	r3, [r6, #0]
 800887e:	6825      	ldr	r5, [r4, #0]
 8008880:	6961      	ldr	r1, [r4, #20]
 8008882:	1d18      	adds	r0, r3, #4
 8008884:	6030      	str	r0, [r6, #0]
 8008886:	062e      	lsls	r6, r5, #24
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	d501      	bpl.n	8008890 <_printf_i+0x1c0>
 800888c:	6019      	str	r1, [r3, #0]
 800888e:	e002      	b.n	8008896 <_printf_i+0x1c6>
 8008890:	0668      	lsls	r0, r5, #25
 8008892:	d5fb      	bpl.n	800888c <_printf_i+0x1bc>
 8008894:	8019      	strh	r1, [r3, #0]
 8008896:	2300      	movs	r3, #0
 8008898:	6123      	str	r3, [r4, #16]
 800889a:	4616      	mov	r6, r2
 800889c:	e7bc      	b.n	8008818 <_printf_i+0x148>
 800889e:	6833      	ldr	r3, [r6, #0]
 80088a0:	1d1a      	adds	r2, r3, #4
 80088a2:	6032      	str	r2, [r6, #0]
 80088a4:	681e      	ldr	r6, [r3, #0]
 80088a6:	6862      	ldr	r2, [r4, #4]
 80088a8:	2100      	movs	r1, #0
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7f7 fc98 	bl	80001e0 <memchr>
 80088b0:	b108      	cbz	r0, 80088b6 <_printf_i+0x1e6>
 80088b2:	1b80      	subs	r0, r0, r6
 80088b4:	6060      	str	r0, [r4, #4]
 80088b6:	6863      	ldr	r3, [r4, #4]
 80088b8:	6123      	str	r3, [r4, #16]
 80088ba:	2300      	movs	r3, #0
 80088bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088c0:	e7aa      	b.n	8008818 <_printf_i+0x148>
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	4632      	mov	r2, r6
 80088c6:	4649      	mov	r1, r9
 80088c8:	4640      	mov	r0, r8
 80088ca:	47d0      	blx	sl
 80088cc:	3001      	adds	r0, #1
 80088ce:	d0ad      	beq.n	800882c <_printf_i+0x15c>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	079b      	lsls	r3, r3, #30
 80088d4:	d413      	bmi.n	80088fe <_printf_i+0x22e>
 80088d6:	68e0      	ldr	r0, [r4, #12]
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	4298      	cmp	r0, r3
 80088dc:	bfb8      	it	lt
 80088de:	4618      	movlt	r0, r3
 80088e0:	e7a6      	b.n	8008830 <_printf_i+0x160>
 80088e2:	2301      	movs	r3, #1
 80088e4:	4632      	mov	r2, r6
 80088e6:	4649      	mov	r1, r9
 80088e8:	4640      	mov	r0, r8
 80088ea:	47d0      	blx	sl
 80088ec:	3001      	adds	r0, #1
 80088ee:	d09d      	beq.n	800882c <_printf_i+0x15c>
 80088f0:	3501      	adds	r5, #1
 80088f2:	68e3      	ldr	r3, [r4, #12]
 80088f4:	9903      	ldr	r1, [sp, #12]
 80088f6:	1a5b      	subs	r3, r3, r1
 80088f8:	42ab      	cmp	r3, r5
 80088fa:	dcf2      	bgt.n	80088e2 <_printf_i+0x212>
 80088fc:	e7eb      	b.n	80088d6 <_printf_i+0x206>
 80088fe:	2500      	movs	r5, #0
 8008900:	f104 0619 	add.w	r6, r4, #25
 8008904:	e7f5      	b.n	80088f2 <_printf_i+0x222>
 8008906:	bf00      	nop
 8008908:	08011fc5 	.word	0x08011fc5
 800890c:	08011fd6 	.word	0x08011fd6

08008910 <memmove>:
 8008910:	4288      	cmp	r0, r1
 8008912:	b510      	push	{r4, lr}
 8008914:	eb01 0402 	add.w	r4, r1, r2
 8008918:	d902      	bls.n	8008920 <memmove+0x10>
 800891a:	4284      	cmp	r4, r0
 800891c:	4623      	mov	r3, r4
 800891e:	d807      	bhi.n	8008930 <memmove+0x20>
 8008920:	1e43      	subs	r3, r0, #1
 8008922:	42a1      	cmp	r1, r4
 8008924:	d008      	beq.n	8008938 <memmove+0x28>
 8008926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800892a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800892e:	e7f8      	b.n	8008922 <memmove+0x12>
 8008930:	4402      	add	r2, r0
 8008932:	4601      	mov	r1, r0
 8008934:	428a      	cmp	r2, r1
 8008936:	d100      	bne.n	800893a <memmove+0x2a>
 8008938:	bd10      	pop	{r4, pc}
 800893a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800893e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008942:	e7f7      	b.n	8008934 <memmove+0x24>

08008944 <_sbrk_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d06      	ldr	r5, [pc, #24]	@ (8008960 <_sbrk_r+0x1c>)
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	4608      	mov	r0, r1
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	f7f9 fbb6 	bl	80020c0 <_sbrk>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d102      	bne.n	800895e <_sbrk_r+0x1a>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	b103      	cbz	r3, 800895e <_sbrk_r+0x1a>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	bd38      	pop	{r3, r4, r5, pc}
 8008960:	2000b00c 	.word	0x2000b00c

08008964 <_realloc_r>:
 8008964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008968:	4680      	mov	r8, r0
 800896a:	4615      	mov	r5, r2
 800896c:	460c      	mov	r4, r1
 800896e:	b921      	cbnz	r1, 800897a <_realloc_r+0x16>
 8008970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008974:	4611      	mov	r1, r2
 8008976:	f7ff bc59 	b.w	800822c <_malloc_r>
 800897a:	b92a      	cbnz	r2, 8008988 <_realloc_r+0x24>
 800897c:	f7ff fbea 	bl	8008154 <_free_r>
 8008980:	2400      	movs	r4, #0
 8008982:	4620      	mov	r0, r4
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008988:	f000 f81a 	bl	80089c0 <_malloc_usable_size_r>
 800898c:	4285      	cmp	r5, r0
 800898e:	4606      	mov	r6, r0
 8008990:	d802      	bhi.n	8008998 <_realloc_r+0x34>
 8008992:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008996:	d8f4      	bhi.n	8008982 <_realloc_r+0x1e>
 8008998:	4629      	mov	r1, r5
 800899a:	4640      	mov	r0, r8
 800899c:	f7ff fc46 	bl	800822c <_malloc_r>
 80089a0:	4607      	mov	r7, r0
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d0ec      	beq.n	8008980 <_realloc_r+0x1c>
 80089a6:	42b5      	cmp	r5, r6
 80089a8:	462a      	mov	r2, r5
 80089aa:	4621      	mov	r1, r4
 80089ac:	bf28      	it	cs
 80089ae:	4632      	movcs	r2, r6
 80089b0:	f7ff fbc2 	bl	8008138 <memcpy>
 80089b4:	4621      	mov	r1, r4
 80089b6:	4640      	mov	r0, r8
 80089b8:	f7ff fbcc 	bl	8008154 <_free_r>
 80089bc:	463c      	mov	r4, r7
 80089be:	e7e0      	b.n	8008982 <_realloc_r+0x1e>

080089c0 <_malloc_usable_size_r>:
 80089c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c4:	1f18      	subs	r0, r3, #4
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bfbc      	itt	lt
 80089ca:	580b      	ldrlt	r3, [r1, r0]
 80089cc:	18c0      	addlt	r0, r0, r3
 80089ce:	4770      	bx	lr

080089d0 <_init>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	bf00      	nop
 80089d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d6:	bc08      	pop	{r3}
 80089d8:	469e      	mov	lr, r3
 80089da:	4770      	bx	lr

080089dc <_fini>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	bf00      	nop
 80089e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e2:	bc08      	pop	{r3}
 80089e4:	469e      	mov	lr, r3
 80089e6:	4770      	bx	lr
