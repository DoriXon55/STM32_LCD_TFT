
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000097d8  08008b60  08008b60  00009b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012338  08012338  00014270  2**0
                  CONTENTS
  4 .ARM          00000008  08012338  08012338  00013338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012340  08012340  00014270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012340  08012340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012344  08012344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  08012348  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad20  20000270  080125b8  00014270  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000af90  080125b8  00014f90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001387b  00000000  00000000  000142a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036eb  00000000  00000000  00027b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0002b208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2d  00000000  00000000  0002c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029048  00000000  00000000  0002ce35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016672  00000000  00000000  00055e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee00b  00000000  00000000  0006c4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a4fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  0015a540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b48 	.word	0x08008b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08008b48 	.word	0x08008b48

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ring_buffer_setup>:
ring_buffer txRingBuffer;
uint8_t USART_TxBuf[TX_BUFFER_SIZE];
uint8_t USART_RxBuf[RX_BUFFER_SIZE];

void ring_buffer_setup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1; // zakładając, że zmienna size jest potęgą 2
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	1e5a      	subs	r2, r3, #1
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	60da      	str	r2, [r3, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <USART_kbhit>:

uint8_t USART_kbhit(){
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <USART_kbhit+0x20>)
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <USART_kbhit+0x20>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d101      	bne.n	80005d8 <USART_kbhit+0x14>
		return 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <USART_kbhit+0x16>
	}else{
		return 1;
 80005d8:	2301      	movs	r3, #1
	}
}
 80005da:	4618      	mov	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	2000028c 	.word	0x2000028c

080005e8 <USART_getchar>:

int16_t USART_getchar() {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <USART_getchar+0x4c>)
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <USART_getchar+0x4c>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d013      	beq.n	8000622 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <USART_getchar+0x4c>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <USART_getchar+0x50>)
 8000600:	5cd3      	ldrb	r3, [r2, r3]
 8000602:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <USART_getchar+0x4c>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	3301      	adds	r3, #1
 800060a:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <USART_getchar+0x4c>)
 800060c:	68d2      	ldr	r2, [r2, #12]
 800060e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000612:	fb01 f202 	mul.w	r2, r1, r2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	4a06      	ldr	r2, [pc, #24]	@ (8000634 <USART_getchar+0x4c>)
 800061a:	6053      	str	r3, [r2, #4]
        return tmp;
 800061c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000620:	e001      	b.n	8000626 <USART_getchar+0x3e>
    }
    return -1; // Buffer empty
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000028c 	.word	0x2000028c
 8000638:	20000aac 	.word	0x20000aac

0800063c <USART_fsend>:
        	txRingBuffer.readIndex = idx;
        }

        __enable_irq(); //ponownie aktywujemy przerwania
}
void USART_fsend(char* format,...){
 800063c:	b40f      	push	{r0, r1, r2, r3}
 800063e:	b580      	push	{r7, lr}
 8000640:	b0a4      	sub	sp, #144	@ 0x90
 8000642:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	volatile int idx;
	va_list arglist;
	  va_start(arglist,format);
 8000644:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000648:	607b      	str	r3, [r7, #4]
	  vsprintf(tmp_rs,format,arglist);
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000654:	4618      	mov	r0, r3
 8000656:	f007 fafd 	bl	8007c54 <vsiprintf>
	  va_end(arglist);
	  idx=txRingBuffer.writeIndex;
 800065a:	4b30      	ldr	r3, [pc, #192]	@ (800071c <USART_fsend+0xe0>)
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000666:	e016      	b.n	8000696 <USART_fsend+0x5a>
		  USART_TxBuf[idx]=tmp_rs[i];
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	f107 010c 	add.w	r1, r7, #12
 800066e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000672:	440a      	add	r2, r1
 8000674:	7811      	ldrb	r1, [r2, #0]
 8000676:	4a2a      	ldr	r2, [pc, #168]	@ (8000720 <USART_fsend+0xe4>)
 8000678:	54d1      	strb	r1, [r2, r3]
		  idx++;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	3301      	adds	r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
		  if(idx >= TX_BUFFER_SIZE)idx=0;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000686:	db01      	blt.n	800068c <USART_fsend+0x50>
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 800068c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000690:	3301      	adds	r3, #1
 8000692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fda2 	bl	80001e4 <strlen>
 80006a0:	4602      	mov	r2, r0
 80006a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d8de      	bhi.n	8000668 <USART_fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006aa:	b672      	cpsid	i
}
 80006ac:	bf00      	nop
	  }
	  __disable_irq();//wyłączamy przerwania
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <USART_fsend+0xe0>)
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <USART_fsend+0xe0>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d123      	bne.n	8000702 <USART_fsend+0xc6>
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <USART_fsend+0xe8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c4:	2b80      	cmp	r3, #128	@ 0x80
 80006c6:	d11c      	bne.n	8000702 <USART_fsend+0xc6>
		  txRingBuffer.writeIndex=idx;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <USART_fsend+0xe0>)
 80006ce:	609a      	str	r2, [r3, #8]
		  uint8_t tmp=USART_TxBuf[txRingBuffer.readIndex];
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <USART_fsend+0xe0>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <USART_fsend+0xe4>)
 80006d6:	5cd3      	ldrb	r3, [r2, r3]
 80006d8:	70fb      	strb	r3, [r7, #3]
		  txRingBuffer.readIndex++;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <USART_fsend+0xe0>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <USART_fsend+0xe0>)
 80006e2:	6053      	str	r3, [r2, #4]
		  if(txRingBuffer.readIndex >= TX_BUFFER_SIZE)txRingBuffer.readIndex=0;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <USART_fsend+0xe0>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ec:	d302      	bcc.n	80006f4 <USART_fsend+0xb8>
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <USART_fsend+0xe0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
		  HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006f4:	1cfb      	adds	r3, r7, #3
 80006f6:	2201      	movs	r2, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	480a      	ldr	r0, [pc, #40]	@ (8000724 <USART_fsend+0xe8>)
 80006fc:	f004 f854 	bl	80047a8 <HAL_UART_Transmit_IT>
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 8000700:	e003      	b.n	800070a <USART_fsend+0xce>
	  }else{
		  txRingBuffer.writeIndex=idx;
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	461a      	mov	r2, r3
 8000706:	4b05      	ldr	r3, [pc, #20]	@ (800071c <USART_fsend+0xe0>)
 8000708:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800070a:	b662      	cpsie	i
}
 800070c:	bf00      	nop
	  }
	  __enable_irq();
}
 800070e:	bf00      	nop
 8000710:	3790      	adds	r7, #144	@ 0x90
 8000712:	46bd      	mov	sp, r7
 8000714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000718:	b004      	add	sp, #16
 800071a:	4770      	bx	lr
 800071c:	2000029c 	.word	0x2000029c
 8000720:	200002ac 	.word	0x200002ac
 8000724:	2000adb8 	.word	0x2000adb8

08000728 <calculate_crc16>:
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

void calculate_crc16(uint8_t *data, size_t length, char crc_out[2]) {
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	@ 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 8000734:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000738:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	e019      	b.n	8000774 <calculate_crc16+0x4c>
        uint8_t byte = data[i];
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 800074a:	8bfb      	ldrh	r3, [r7, #30]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	b29b      	uxth	r3, r3
 8000750:	b2da      	uxtb	r2, r3
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	4053      	eors	r3, r2
 8000756:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 8000758:	8bfb      	ldrh	r3, [r7, #30]
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b21a      	sxth	r2, r3
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	490f      	ldr	r1, [pc, #60]	@ (80007a0 <calculate_crc16+0x78>)
 8000762:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000766:	b21b      	sxth	r3, r3
 8000768:	4053      	eors	r3, r2
 800076a:	b21b      	sxth	r3, r3
 800076c:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	3301      	adds	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	429a      	cmp	r2, r3
 800077a:	d3e1      	bcc.n	8000740 <calculate_crc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF); // bajt po lewej
 800077c:	8bfb      	ldrh	r3, [r7, #30]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);        // bajt po prawej
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3301      	adds	r3, #1
 800078c:	8bfa      	ldrh	r2, [r7, #30]
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	3724      	adds	r7, #36	@ 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000000 	.word	0x20000000

080007a4 <parse_color>:
bool in_frame = false;
uint8_t received_char;
Receive_Frame ramka;

//=========================FUNKCJE POMOCNICZE=============================
bool parse_color(const char* color_name, Color_t* color) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e016      	b.n	80007e2 <parse_color+0x3e>
        if (strcmp(color_name, color_map[i].name) == 0) {
 80007b4:	4a0f      	ldr	r2, [pc, #60]	@ (80007f4 <parse_color+0x50>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007bc:	4619      	mov	r1, r3
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff fd06 	bl	80001d0 <strcmp>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d108      	bne.n	80007dc <parse_color+0x38>
            *color = color_map[i].value;
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <parse_color+0x50>)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4413      	add	r3, r2
 80007d2:	889a      	ldrh	r2, [r3, #4]
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	801a      	strh	r2, [r3, #0]
            return true;
 80007d8:	2301      	movs	r3, #1
 80007da:	e006      	b.n	80007ea <parse_color+0x46>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b07      	cmp	r3, #7
 80007e6:	d9e5      	bls.n	80007b4 <parse_color+0x10>
        }
    }
    return false;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	08008cd0 	.word	0x08008cd0

080007f8 <reset_frame_state>:

static void reset_frame_state() {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
    in_frame = false;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <reset_frame_state+0x20>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <reset_frame_state+0x24>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <reset_frame_state+0x28>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	20000cc0 	.word	0x20000cc0
 800081c:	20000cba 	.word	0x20000cba
 8000820:	20000cbc 	.word	0x20000cbc

08000824 <parse_parameters>:

bool parse_parameters(const char* data, const char* format, ...) {
 8000824:	b40e      	push	{r1, r2, r3}
 8000826:	b580      	push	{r7, lr}
 8000828:	b0a1      	sub	sp, #132	@ 0x84
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
    if (data == NULL || format == NULL) {
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d003      	beq.n	800083c <parse_parameters+0x18>
 8000834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000838:	2b00      	cmp	r3, #0
 800083a:	d101      	bne.n	8000840 <parse_parameters+0x1c>
        return false;
 800083c:	2300      	movs	r3, #0
 800083e:	e117      	b.n	8000a70 <parse_parameters+0x24c>
    }

    // Debug input data
    USART_fsend("Received data: %s\r\n", data);
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	488f      	ldr	r0, [pc, #572]	@ (8000a80 <parse_parameters+0x25c>)
 8000844:	f7ff fefa 	bl	800063c <USART_fsend>
    USART_fsend("Format string: %s\r\n", format);
 8000848:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800084c:	488d      	ldr	r0, [pc, #564]	@ (8000a84 <parse_parameters+0x260>)
 800084e:	f7ff fef5 	bl	800063c <USART_fsend>

    va_list args;
    va_start(args, format);
 8000852:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000856:	647b      	str	r3, [r7, #68]	@ 0x44

    // Alokuj pamięć z dodatkowym marginesem bezpieczeństwa
    size_t data_len = strlen(data) + 1;
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff fcc3 	bl	80001e4 <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	3301      	adds	r3, #1
 8000862:	667b      	str	r3, [r7, #100]	@ 0x64
    char* data_copy = (char*)calloc(data_len + 1, sizeof(char)); // Użyj calloc zamiast malloc
 8000864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000866:	3301      	adds	r3, #1
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f006 fde8 	bl	8007440 <calloc>
 8000870:	4603      	mov	r3, r0
 8000872:	663b      	str	r3, [r7, #96]	@ 0x60
    if (data_copy == NULL) {
 8000874:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <parse_parameters+0x5a>
        va_end(args);
        return false;
 800087a:	2300      	movs	r3, #0
 800087c:	e0f8      	b.n	8000a70 <parse_parameters+0x24c>
    }

    // Kopiuj dane z ograniczeniem długości
    strncpy(data_copy, data, data_len);
 800087e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000884:	f007 fa0a 	bl	8007c9c <strncpy>
    data_copy[data_len] = '\0'; // Upewnij się, że string jest zakończony
 8000888:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800088a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800088c:	4413      	add	r3, r2
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]

    char* token = strtok(data_copy, ",");
 8000892:	497d      	ldr	r1, [pc, #500]	@ (8000a88 <parse_parameters+0x264>)
 8000894:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000896:	f007 fa15 	bl	8007cc4 <strtok>
 800089a:	67f8      	str	r0, [r7, #124]	@ 0x7c
    const char* fmt_ptr = format;
 800089c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80008a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    int param_count = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	677b      	str	r3, [r7, #116]	@ 0x74

    while (*fmt_ptr != '\0' && token != NULL) {
 80008a6:	e0ba      	b.n	8000a1e <parse_parameters+0x1fa>
        // Oczyść token ze zbędnych znaków
        char cleaned_token[50] = {0}; // Bufor na wyczyszczony token
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	222e      	movs	r2, #46	@ 0x2e
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f007 f9d7 	bl	8007c68 <memset>
        size_t clean_idx = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	673b      	str	r3, [r7, #112]	@ 0x70
        size_t token_len = strlen(token);
 80008be:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80008c0:	f7ff fc90 	bl	80001e4 <strlen>
 80008c4:	65f8      	str	r0, [r7, #92]	@ 0x5c

        // Pomiń początkowe spacje
        size_t start_idx = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        while (start_idx < token_len && isspace(token[start_idx])) {
 80008ca:	e002      	b.n	80008d2 <parse_parameters+0xae>
            start_idx++;
 80008cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008ce:	3301      	adds	r3, #1
 80008d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
        while (start_idx < token_len && isspace(token[start_idx])) {
 80008d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80008d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d20b      	bcs.n	80008f2 <parse_parameters+0xce>
 80008da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80008dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008de:	4413      	add	r3, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a69      	ldr	r2, [pc, #420]	@ (8000a8c <parse_parameters+0x268>)
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1ec      	bne.n	80008cc <parse_parameters+0xa8>
        }

        // Kopiuj tylko znaki do pierwszej spacji dla parametrów innych niż tekst
        for (size_t i = start_idx; i < token_len && clean_idx < sizeof(cleaned_token) - 1; i++) {
 80008f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80008f6:	e01d      	b.n	8000934 <parse_parameters+0x110>
            if (*fmt_ptr != 't' && isspace(token[i])) {
 80008f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b74      	cmp	r3, #116	@ 0x74
 80008fe:	d00b      	beq.n	8000918 <parse_parameters+0xf4>
 8000900:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000902:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000904:	4413      	add	r3, r2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	4a60      	ldr	r2, [pc, #384]	@ (8000a8c <parse_parameters+0x268>)
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	2b00      	cmp	r3, #0
 8000916:	d115      	bne.n	8000944 <parse_parameters+0x120>
                break;
            }
            cleaned_token[clean_idx++] = token[i];
 8000918:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800091a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800091c:	441a      	add	r2, r3
 800091e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000920:	1c59      	adds	r1, r3, #1
 8000922:	6739      	str	r1, [r7, #112]	@ 0x70
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	3380      	adds	r3, #128	@ 0x80
 8000928:	443b      	add	r3, r7
 800092a:	f803 2c74 	strb.w	r2, [r3, #-116]
        for (size_t i = start_idx; i < token_len && clean_idx < sizeof(cleaned_token) - 1; i++) {
 800092e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000930:	3301      	adds	r3, #1
 8000932:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000934:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000938:	429a      	cmp	r2, r3
 800093a:	d204      	bcs.n	8000946 <parse_parameters+0x122>
 800093c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800093e:	2b30      	cmp	r3, #48	@ 0x30
 8000940:	d9da      	bls.n	80008f8 <parse_parameters+0xd4>
 8000942:	e000      	b.n	8000946 <parse_parameters+0x122>
                break;
 8000944:	bf00      	nop
        }
        cleaned_token[clean_idx] = '\0';
 8000946:	f107 020c 	add.w	r2, r7, #12
 800094a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800094c:	4413      	add	r3, r2
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]

        switch (*fmt_ptr) {
 8000952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b75      	cmp	r3, #117	@ 0x75
 8000958:	d006      	beq.n	8000968 <parse_parameters+0x144>
 800095a:	2b75      	cmp	r3, #117	@ 0x75
 800095c:	dc4e      	bgt.n	80009fc <parse_parameters+0x1d8>
 800095e:	2b73      	cmp	r3, #115	@ 0x73
 8000960:	d027      	beq.n	80009b2 <parse_parameters+0x18e>
 8000962:	2b74      	cmp	r3, #116	@ 0x74
 8000964:	d03b      	beq.n	80009de <parse_parameters+0x1ba>
 8000966:	e049      	b.n	80009fc <parse_parameters+0x1d8>
            case 'u': {
                char* endptr;
                unsigned long val = strtoul(cleaned_token, &endptr, 10);
 8000968:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	220a      	movs	r2, #10
 8000972:	4618      	mov	r0, r3
 8000974:	f006 ff30 	bl	80077d8 <strtoul>
 8000978:	65b8      	str	r0, [r7, #88]	@ 0x58
                if (*endptr != '\0' || val > 255) {
 800097a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d102      	bne.n	8000988 <parse_parameters+0x164>
 8000982:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000984:	2bff      	cmp	r3, #255	@ 0xff
 8000986:	d904      	bls.n	8000992 <parse_parameters+0x16e>
                    free(data_copy);
 8000988:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800098a:	f006 fd7d 	bl	8007488 <free>
                    va_end(args);
                    return false;
 800098e:	2300      	movs	r3, #0
 8000990:	e06e      	b.n	8000a70 <parse_parameters+0x24c>
                }
                uint8_t* ptr = va_arg(args, uint8_t*);
 8000992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000994:	1d1a      	adds	r2, r3, #4
 8000996:	647a      	str	r2, [r7, #68]	@ 0x44
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	657b      	str	r3, [r7, #84]	@ 0x54
                *ptr = (uint8_t)val;
 800099c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009a2:	701a      	strb	r2, [r3, #0]
                USART_fsend("Parsed uint8_t: %u\r\n", (uint8_t)val);
 80009a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	4839      	ldr	r0, [pc, #228]	@ (8000a90 <parse_parameters+0x26c>)
 80009ac:	f7ff fe46 	bl	800063c <USART_fsend>
 80009b0:	e02a      	b.n	8000a08 <parse_parameters+0x1e4>
                break;
            }
            case 's': {
                Color_t* color_ptr = va_arg(args, Color_t*);
 80009b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009b4:	1d1a      	adds	r2, r3, #4
 80009b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (!parse_color(cleaned_token, color_ptr)) {
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff feee 	bl	80007a4 <parse_color>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f083 0301 	eor.w	r3, r3, #1
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d018      	beq.n	8000a06 <parse_parameters+0x1e2>
                    free(data_copy);
 80009d4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80009d6:	f006 fd57 	bl	8007488 <free>
                    va_end(args);
                    return false;
 80009da:	2300      	movs	r3, #0
 80009dc:	e048      	b.n	8000a70 <parse_parameters+0x24c>
                }
                break;
            }
            case 't': {
                char* ptr = va_arg(args, char*);
 80009de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009e0:	1d1a      	adds	r2, r3, #4
 80009e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	653b      	str	r3, [r7, #80]	@ 0x50
                // Dla tekstu, kopiujemy całą pozostałą część danych
                strncpy(ptr, token, 49);
 80009e8:	2231      	movs	r2, #49	@ 0x31
 80009ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80009ec:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80009ee:	f007 f955 	bl	8007c9c <strncpy>
                ptr[49] = '\0';
 80009f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009f4:	3331      	adds	r3, #49	@ 0x31
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
                break;
 80009fa:	e005      	b.n	8000a08 <parse_parameters+0x1e4>
            }
            default:
                free(data_copy);
 80009fc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80009fe:	f006 fd43 	bl	8007488 <free>
                va_end(args);
                return false;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e034      	b.n	8000a70 <parse_parameters+0x24c>
                break;
 8000a06:	bf00      	nop
        }

        token = strtok(NULL, ",");
 8000a08:	491f      	ldr	r1, [pc, #124]	@ (8000a88 <parse_parameters+0x264>)
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f007 f95a 	bl	8007cc4 <strtok>
 8000a10:	67f8      	str	r0, [r7, #124]	@ 0x7c
        fmt_ptr++;
 8000a12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a14:	3301      	adds	r3, #1
 8000a16:	67bb      	str	r3, [r7, #120]	@ 0x78
        param_count++;
 8000a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	677b      	str	r3, [r7, #116]	@ 0x74
    while (*fmt_ptr != '\0' && token != NULL) {
 8000a1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d003      	beq.n	8000a2e <parse_parameters+0x20a>
 8000a26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f47f af3d 	bne.w	80008a8 <parse_parameters+0x84>
    }

    bool success = (*fmt_ptr == '\0' && token == NULL);
 8000a2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d104      	bne.n	8000a40 <parse_parameters+0x21c>
 8000a36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d101      	bne.n	8000a40 <parse_parameters+0x21c>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <parse_parameters+0x21e>
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8000a46:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (!success) {
 8000a52:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000a56:	f083 0301 	eor.w	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <parse_parameters+0x242>
        USART_fsend("Parameter count mismatch\r\n");
 8000a60:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <parse_parameters+0x270>)
 8000a62:	f7ff fdeb 	bl	800063c <USART_fsend>
    }

    free(data_copy);
 8000a66:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000a68:	f006 fd0e 	bl	8007488 <free>
    va_end(args);
    return success;
 8000a6c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3784      	adds	r7, #132	@ 0x84
 8000a74:	46bd      	mov	sp, r7
 8000a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a7a:	b003      	add	sp, #12
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	08008b9c 	.word	0x08008b9c
 8000a84:	08008bb0 	.word	0x08008bb0
 8000a88:	08008bc4 	.word	0x08008bc4
 8000a8c:	08012154 	.word	0x08012154
 8000a90:	08008bc8 	.word	0x08008bc8
 8000a94:	08008be0 	.word	0x08008be0

08000a98 <clear_frame>:

// Funkcja do czyszczenia ramki
void clear_frame(Receive_Frame* frame) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00d      	beq.n	8000ac2 <clear_frame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3305      	adds	r3, #5
 8000aaa:	2280      	movs	r2, #128	@ 0x80
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f007 f8da 	bl	8007c68 <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	2203      	movs	r2, #3
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 f8d3 	bl	8007c68 <memset>
        // Wyczyść wszystkie inne pola ramki, jeśli istnieją
    }
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <executeONK>:

//==========================OBSŁUGA KOMEND================================

//TODO nie dzialla
static void executeONK(Receive_Frame *frame)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af04      	add	r7, sp, #16
 8000ad2:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73bb      	strb	r3, [r7, #14]
 8000adc:	2300      	movs	r3, #0
 8000ade:	737b      	strb	r3, [r7, #13]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	817b      	strh	r3, [r7, #10]
    if (!parse_parameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	1d58      	adds	r0, r3, #5
 8000aec:	f107 010e 	add.w	r1, r7, #14
 8000af0:	f107 020f 	add.w	r2, r7, #15
 8000af4:	f107 030a 	add.w	r3, r7, #10
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	f107 030d 	add.w	r3, r7, #13
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	460b      	mov	r3, r1
 8000b08:	4917      	ldr	r1, [pc, #92]	@ (8000b68 <executeONK+0x9c>)
 8000b0a:	f7ff fe8b 	bl	8000824 <parse_parameters>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f083 0301 	eor.w	r3, r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d009      	beq.n	8000b2e <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3305      	adds	r3, #5
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <executeONK+0xa0>)
 8000b22:	4a13      	ldr	r2, [pc, #76]	@ (8000b70 <executeONK+0xa4>)
 8000b24:	2167      	movs	r1, #103	@ 0x67
 8000b26:	2068      	movs	r0, #104	@ 0x68
 8000b28:	f000 fae2 	bl	80010f0 <prepareFrame>
 8000b2c:	e019      	b.n	8000b62 <executeONK+0x96>
        return;
    }
	switch(filling)
 8000b2e:	7b3b      	ldrb	r3, [r7, #12]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <executeONK+0x6e>
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d00a      	beq.n	8000b4e <executeONK+0x82>
 8000b38:	e013      	b.n	8000b62 <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	b218      	sxth	r0, r3
 8000b3e:	7bbb      	ldrb	r3, [r7, #14]
 8000b40:	b219      	sxth	r1, r3
 8000b42:	7b7b      	ldrb	r3, [r7, #13]
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	897b      	ldrh	r3, [r7, #10]
 8000b48:	f006 f870 	bl	8006c2c <hagl_draw_circle>
		break;
 8000b4c:	e009      	b.n	8000b62 <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	b218      	sxth	r0, r3
 8000b52:	7bbb      	ldrb	r3, [r7, #14]
 8000b54:	b219      	sxth	r1, r3
 8000b56:	7b7b      	ldrb	r3, [r7, #13]
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	897b      	ldrh	r3, [r7, #10]
 8000b5c:	f006 f995 	bl	8006e8a <hagl_fill_circle>
		break;
 8000b60:	bf00      	nop
	}
}
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08008bfc 	.word	0x08008bfc
 8000b6c:	08008c04 	.word	0x08008c04
 8000b70:	08008c18 	.word	0x08008c18

08000b74 <executeONP>:


static void executeONP(Receive_Frame *frame)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b089      	sub	sp, #36	@ 0x24
 8000b78:	af04      	add	r7, sp, #16
 8000b7a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	2300      	movs	r3, #0
 8000b82:	73bb      	strb	r3, [r7, #14]
 8000b84:	2300      	movs	r3, #0
 8000b86:	737b      	strb	r3, [r7, #13]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	733b      	strb	r3, [r7, #12]
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	813b      	strh	r3, [r7, #8]
	if (!parse_parameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	1d58      	adds	r0, r3, #5
 8000b98:	f107 010e 	add.w	r1, r7, #14
 8000b9c:	f107 020f 	add.w	r2, r7, #15
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	9303      	str	r3, [sp, #12]
 8000ba6:	f107 030b 	add.w	r3, r7, #11
 8000baa:	9302      	str	r3, [sp, #8]
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	9301      	str	r3, [sp, #4]
 8000bb2:	f107 030d 	add.w	r3, r7, #13
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	491c      	ldr	r1, [pc, #112]	@ (8000c2c <executeONP+0xb8>)
 8000bbc:	f7ff fe32 	bl	8000824 <parse_parameters>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f083 0301 	eor.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d009      	beq.n	8000be0 <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3305      	adds	r3, #5
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <executeONP+0xbc>)
 8000bd4:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <executeONP+0xc0>)
 8000bd6:	2167      	movs	r1, #103	@ 0x67
 8000bd8:	2068      	movs	r0, #104	@ 0x68
 8000bda:	f000 fa89 	bl	80010f0 <prepareFrame>
 8000bde:	e021      	b.n	8000c24 <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000be0:	7afb      	ldrb	r3, [r7, #11]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <executeONP+0x78>
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d00e      	beq.n	8000c08 <executeONP+0x94>
 8000bea:	e01b      	b.n	8000c24 <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	b218      	sxth	r0, r3
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	b219      	sxth	r1, r3
 8000bf4:	7b7b      	ldrb	r3, [r7, #13]
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	7b3b      	ldrb	r3, [r7, #12]
 8000bfa:	b21c      	sxth	r4, r3
 8000bfc:	893b      	ldrh	r3, [r7, #8]
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	4623      	mov	r3, r4
 8000c02:	f005 fd63 	bl	80066cc <hagl_draw_rectangle>
		break;
 8000c06:	e00d      	b.n	8000c24 <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	b218      	sxth	r0, r3
 8000c0c:	7bbb      	ldrb	r3, [r7, #14]
 8000c0e:	b219      	sxth	r1, r3
 8000c10:	7b7b      	ldrb	r3, [r7, #13]
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	7b3b      	ldrb	r3, [r7, #12]
 8000c16:	b21c      	sxth	r4, r3
 8000c18:	893b      	ldrh	r3, [r7, #8]
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	4623      	mov	r3, r4
 8000c1e:	f005 fddb 	bl	80067d8 <hagl_fill_rectangle>
		break;
 8000c22:	bf00      	nop
	}
}
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08008c1c 	.word	0x08008c1c
 8000c30:	08008c04 	.word	0x08008c04
 8000c34:	08008c18 	.word	0x08008c18

08000c38 <executeONT>:


//TODO nie dziala
static void executeONT(Receive_Frame *frame)
{
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	b08d      	sub	sp, #52	@ 0x34
 8000c3c:	af06      	add	r7, sp, #24
 8000c3e:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	75fb      	strb	r3, [r7, #23]
 8000c44:	2300      	movs	r3, #0
 8000c46:	75bb      	strb	r3, [r7, #22]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	757b      	strb	r3, [r7, #21]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	753b      	strb	r3, [r7, #20]
 8000c50:	2300      	movs	r3, #0
 8000c52:	74fb      	strb	r3, [r7, #19]
 8000c54:	2300      	movs	r3, #0
 8000c56:	74bb      	strb	r3, [r7, #18]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	81fb      	strh	r3, [r7, #14]
    if (!parse_parameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	1d58      	adds	r0, r3, #5
 8000c64:	f107 0116 	add.w	r1, r7, #22
 8000c68:	f107 0217 	add.w	r2, r7, #23
 8000c6c:	f107 030e 	add.w	r3, r7, #14
 8000c70:	9305      	str	r3, [sp, #20]
 8000c72:	f107 0311 	add.w	r3, r7, #17
 8000c76:	9304      	str	r3, [sp, #16]
 8000c78:	f107 0312 	add.w	r3, r7, #18
 8000c7c:	9303      	str	r3, [sp, #12]
 8000c7e:	f107 0313 	add.w	r3, r7, #19
 8000c82:	9302      	str	r3, [sp, #8]
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	f107 0315 	add.w	r3, r7, #21
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	460b      	mov	r3, r1
 8000c92:	4924      	ldr	r1, [pc, #144]	@ (8000d24 <executeONT+0xec>)
 8000c94:	f7ff fdc6 	bl	8000824 <parse_parameters>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f083 0301 	eor.w	r3, r3, #1
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d009      	beq.n	8000cb8 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3305      	adds	r3, #5
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <executeONT+0xf0>)
 8000cac:	4a1f      	ldr	r2, [pc, #124]	@ (8000d2c <executeONT+0xf4>)
 8000cae:	2167      	movs	r1, #103	@ 0x67
 8000cb0:	2068      	movs	r0, #104	@ 0x68
 8000cb2:	f000 fa1d 	bl	80010f0 <prepareFrame>
 8000cb6:	e031      	b.n	8000d1c <executeONT+0xe4>
        return;
    }
    switch(filling)
 8000cb8:	7c7b      	ldrb	r3, [r7, #17]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <executeONT+0x8c>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d016      	beq.n	8000cf0 <executeONT+0xb8>
 8000cc2:	e02b      	b.n	8000d1c <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	b218      	sxth	r0, r3
 8000cc8:	7dbb      	ldrb	r3, [r7, #22]
 8000cca:	b21c      	sxth	r4, r3
 8000ccc:	7d7b      	ldrb	r3, [r7, #21]
 8000cce:	b21d      	sxth	r5, r3
 8000cd0:	7d3b      	ldrb	r3, [r7, #20]
 8000cd2:	b21e      	sxth	r6, r3
 8000cd4:	7cfb      	ldrb	r3, [r7, #19]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	7cba      	ldrb	r2, [r7, #18]
 8000cda:	b212      	sxth	r2, r2
 8000cdc:	89f9      	ldrh	r1, [r7, #14]
 8000cde:	9102      	str	r1, [sp, #8]
 8000ce0:	9201      	str	r2, [sp, #4]
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4633      	mov	r3, r6
 8000ce6:	462a      	mov	r2, r5
 8000ce8:	4621      	mov	r1, r4
 8000cea:	f006 fb59 	bl	80073a0 <hagl_draw_triangle>
            break;
 8000cee:	e015      	b.n	8000d1c <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	b218      	sxth	r0, r3
 8000cf4:	7dbb      	ldrb	r3, [r7, #22]
 8000cf6:	b21c      	sxth	r4, r3
 8000cf8:	7d7b      	ldrb	r3, [r7, #21]
 8000cfa:	b21d      	sxth	r5, r3
 8000cfc:	7d3b      	ldrb	r3, [r7, #20]
 8000cfe:	b21e      	sxth	r6, r3
 8000d00:	7cfb      	ldrb	r3, [r7, #19]
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	7cba      	ldrb	r2, [r7, #18]
 8000d06:	b212      	sxth	r2, r2
 8000d08:	89f9      	ldrh	r1, [r7, #14]
 8000d0a:	9102      	str	r1, [sp, #8]
 8000d0c:	9201      	str	r2, [sp, #4]
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	4633      	mov	r3, r6
 8000d12:	462a      	mov	r2, r5
 8000d14:	4621      	mov	r1, r4
 8000d16:	f006 fb69 	bl	80073ec <hagl_fill_triangle>
            break;
 8000d1a:	bf00      	nop
    }
}
 8000d1c:	371c      	adds	r7, #28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08008c24 	.word	0x08008c24
 8000d28:	08008c04 	.word	0x08008c04
 8000d2c:	08008c18 	.word	0x08008c18

08000d30 <executeONN>:

//TODO nie dziala, dodac obsluge przewijania tekstu
static void executeONN(Receive_Frame *frame)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b0cb      	sub	sp, #300	@ 0x12c
 8000d34:	af04      	add	r7, sp, #16
 8000d36:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d3e:	6018      	str	r0, [r3, #0]
    char text[50] = {0};
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000d46:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8000d4a:	222e      	movs	r2, #46	@ 0x2e
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f006 ff8a 	bl	8007c68 <memset>
    wchar_t wtext[50] = {0};
 8000d54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	23c8      	movs	r3, #200	@ 0xc8
 8000d60:	461a      	mov	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f006 ff80 	bl	8007c68 <memset>
    uint8_t x = 0, y = 0, fontSize = 0;
 8000d68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d6c:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d78:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d84:	f2a3 1307 	subw	r3, r3, #263	@ 0x107
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
    Color_t color = BLACK;
 8000d8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d90:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000d94:	2200      	movs	r2, #0
 8000d96:	801a      	strh	r2, [r3, #0]

    USART_fsend("Executing ONN with data: %s\r\n", frame->data);
 8000d98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3305      	adds	r3, #5
 8000da4:	4619      	mov	r1, r3
 8000da6:	485d      	ldr	r0, [pc, #372]	@ (8000f1c <executeONN+0x1ec>)
 8000da8:	f7ff fc48 	bl	800063c <USART_fsend>

    // Zmieniliśmy format z "uuust" na "uuuss" - ostatni parametr koloru jako string
    if (!parse_parameters(frame->data, "uuust", &x, &y, &fontSize, &color, text)) {
 8000dac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000db0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1d58      	adds	r0, r3, #5
 8000db8:	f107 0112 	add.w	r1, r7, #18
 8000dbc:	f107 0213 	add.w	r2, r7, #19
 8000dc0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	f107 030e 	add.w	r3, r7, #14
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	f107 0311 	add.w	r3, r7, #17
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4952      	ldr	r1, [pc, #328]	@ (8000f20 <executeONN+0x1f0>)
 8000dd6:	f7ff fd25 	bl	8000824 <parse_parameters>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f083 0301 	eor.w	r3, r3, #1
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00d      	beq.n	8000e02 <executeONN+0xd2>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000de6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3305      	adds	r3, #5
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	4b4b      	ldr	r3, [pc, #300]	@ (8000f24 <executeONN+0x1f4>)
 8000df6:	4a4c      	ldr	r2, [pc, #304]	@ (8000f28 <executeONN+0x1f8>)
 8000df8:	2167      	movs	r1, #103	@ 0x67
 8000dfa:	2068      	movs	r0, #104	@ 0x68
 8000dfc:	f000 f978 	bl	80010f0 <prepareFrame>
 8000e00:	e087      	b.n	8000f12 <executeONN+0x1e2>
        return;
    }
    size_t textLen = strlen(text);
 8000e02:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9ec 	bl	80001e4 <strlen>
 8000e0c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    for(size_t i = 0; i < textLen && i < 49; i++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000e16:	e013      	b.n	8000e40 <executeONN+0x110>
        wtext[i] = (wchar_t)text[i];
 8000e18:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8000e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e20:	4413      	add	r3, r2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000e2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(size_t i = 0; i < textLen && i < 49; i++) {
 8000e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000e40:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000e44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d203      	bcs.n	8000e54 <executeONN+0x124>
 8000e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e50:	2b30      	cmp	r3, #48	@ 0x30
 8000e52:	d9e1      	bls.n	8000e18 <executeONN+0xe8>
    }
    wtext[textLen] = L'\0';
 8000e54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000e5c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e60:	2100      	movs	r1, #0
 8000e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    switch(fontSize)
 8000e66:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e6a:	f2a3 1307 	subw	r3, r3, #263	@ 0x107
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d036      	beq.n	8000ee2 <executeONN+0x1b2>
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	dc4c      	bgt.n	8000f12 <executeONN+0x1e2>
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d002      	beq.n	8000e82 <executeONN+0x152>
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d018      	beq.n	8000eb2 <executeONN+0x182>
 8000e80:	e047      	b.n	8000f12 <executeONN+0x1e2>
    {
        case 1:
            hagl_put_text(wtext, x, y, color, font5x7);
 8000e82:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e86:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b219      	sxth	r1, r3
 8000e8e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e92:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e9e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	f107 0014 	add.w	r0, r7, #20
 8000ea8:	4c20      	ldr	r4, [pc, #128]	@ (8000f2c <executeONN+0x1fc>)
 8000eaa:	9400      	str	r4, [sp, #0]
 8000eac:	f005 fe36 	bl	8006b1c <hagl_put_text>
            break;
 8000eb0:	e02f      	b.n	8000f12 <executeONN+0x1e2>
        case 2:
            hagl_put_text(wtext, x, y, color, font5x8);
 8000eb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000eb6:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b219      	sxth	r1, r3
 8000ebe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ec2:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ece:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	f107 0014 	add.w	r0, r7, #20
 8000ed8:	4c15      	ldr	r4, [pc, #84]	@ (8000f30 <executeONN+0x200>)
 8000eda:	9400      	str	r4, [sp, #0]
 8000edc:	f005 fe1e 	bl	8006b1c <hagl_put_text>
            break;
 8000ee0:	e017      	b.n	8000f12 <executeONN+0x1e2>
        case 3:
            hagl_put_text(wtext, x, y, color, font6x9);
 8000ee2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ee6:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b219      	sxth	r1, r3
 8000eee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ef2:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b21a      	sxth	r2, r3
 8000efa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000efe:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	f107 0014 	add.w	r0, r7, #20
 8000f08:	4c0a      	ldr	r4, [pc, #40]	@ (8000f34 <executeONN+0x204>)
 8000f0a:	9400      	str	r4, [sp, #0]
 8000f0c:	f005 fe06 	bl	8006b1c <hagl_put_text>
            break;
 8000f10:	bf00      	nop
    }
}
 8000f12:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08008c30 	.word	0x08008c30
 8000f20:	08008c50 	.word	0x08008c50
 8000f24:	08008c04 	.word	0x08008c04
 8000f28:	08008c18 	.word	0x08008c18
 8000f2c:	08008d10 	.word	0x08008d10
 8000f30:	0800c218 	.word	0x0800c218
 8000f34:	0800f0bc 	.word	0x0800f0bc

08000f38 <executeOFF>:
* Function: main()
* (some details about what main does here...)
************************************************************************/
//TODO bład parsowania danych
static void executeOFF(Receive_Frame *frame)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	795b      	ldrb	r3, [r3, #5]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <executeOFF+0x16>
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d006      	beq.n	8000f5a <executeOFF+0x22>
		break;
	case 1:
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK);
		break;
	}
}
 8000f4c:	e00e      	b.n	8000f6c <executeOFF+0x34>
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2102      	movs	r1, #2
 8000f52:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <executeOFF+0x3c>)
 8000f54:	f001 fd24 	bl	80029a0 <HAL_GPIO_WritePin>
		break;
 8000f58:	e008      	b.n	8000f6c <executeOFF+0x34>
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2380      	movs	r3, #128	@ 0x80
 8000f60:	22a0      	movs	r2, #160	@ 0xa0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2000      	movs	r0, #0
 8000f66:	f005 fc37 	bl	80067d8 <hagl_fill_rectangle>
		break;
 8000f6a:	bf00      	nop
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	48000400 	.word	0x48000400

08000f78 <is_within_bounds>:


//=======================SPRAWDZANIE KOORDYNATÓW=========================
bool is_within_bounds(int x, int y)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <is_within_bounds+0x26>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b9f      	cmp	r3, #159	@ 0x9f
 8000f8c:	dc07      	bgt.n	8000f9e <is_within_bounds+0x26>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db04      	blt.n	8000f9e <is_within_bounds+0x26>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f98:	dc01      	bgt.n	8000f9e <is_within_bounds+0x26>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <is_within_bounds+0x28>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <parse_coordinates>:
bool parse_coordinates(const char *data, int *x, int *y)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0a6      	sub	sp, #152	@ 0x98
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	char *token;
	    char data_copy[MAX_DATA_SIZE];
	    strncpy(data_copy, data, MAX_DATA_SIZE); // Kopiujemy dane wejściowe, bo strtok modyfikuje ciąg
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	68f9      	ldr	r1, [r7, #12]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f006 fe67 	bl	8007c9c <strncpy>

	    token = strtok(data_copy, ","); // Pierwsza współrzędna (jest to funkcja służąca do oddzielania stringów z separatorem)
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4915      	ldr	r1, [pc, #84]	@ (8001028 <parse_coordinates+0x74>)
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fe75 	bl	8007cc4 <strtok>
 8000fda:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <parse_coordinates+0x36>
	        return false;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e01a      	b.n	8001020 <parse_coordinates+0x6c>
	    }
	    *x = atoi(token);
 8000fea:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000fee:	f006 fa23 	bl	8007438 <atoi>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	601a      	str	r2, [r3, #0]

	    token = strtok(NULL, ","); // Druga współrzędna
 8000ff8:	490b      	ldr	r1, [pc, #44]	@ (8001028 <parse_coordinates+0x74>)
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f006 fe62 	bl	8007cc4 <strtok>
 8001000:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8001004:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <parse_coordinates+0x5c>
	        return false;
 800100c:	2300      	movs	r3, #0
 800100e:	e007      	b.n	8001020 <parse_coordinates+0x6c>
	    }
	    *y = atoi(token);
 8001010:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001014:	f006 fa10 	bl	8007438 <atoi>
 8001018:	4602      	mov	r2, r0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]

	    return true;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3798      	adds	r7, #152	@ 0x98
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08008bc4 	.word	0x08008bc4

0800102c <byteStuffing>:
//=======================BYTE STUFFING=========================
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	e04b      	b.n	80010da <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b7d      	cmp	r3, #125	@ 0x7d
 800104c:	d10e      	bne.n	800106c <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	617a      	str	r2, [r7, #20]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	227d      	movs	r2, #125	@ 0x7d
 800105a:	701a      	strb	r2, [r3, #0]
            output[j++] = ']';
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	617a      	str	r2, [r7, #20]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	225d      	movs	r2, #93	@ 0x5d
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	e033      	b.n	80010d4 <byteStuffing+0xa8>
        } else if (input[i] == '~') {
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b7e      	cmp	r3, #126	@ 0x7e
 8001076:	d10e      	bne.n	8001096 <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	617a      	str	r2, [r7, #20]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	227d      	movs	r2, #125	@ 0x7d
 8001084:	701a      	strb	r2, [r3, #0]
            output[j++] = '^';
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	617a      	str	r2, [r7, #20]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	225e      	movs	r2, #94	@ 0x5e
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e01e      	b.n	80010d4 <byteStuffing+0xa8>
        } else if (input[i] == '`') {
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b60      	cmp	r3, #96	@ 0x60
 80010a0:	d10e      	bne.n	80010c0 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	617a      	str	r2, [r7, #20]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	227d      	movs	r2, #125	@ 0x7d
 80010ae:	701a      	strb	r2, [r3, #0]
            output[j++] = '&';
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	617a      	str	r2, [r7, #20]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	2226      	movs	r2, #38	@ 0x26
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	e009      	b.n	80010d4 <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	441a      	add	r2, r3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	1c59      	adds	r1, r3, #1
 80010ca:	6179      	str	r1, [r7, #20]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	440b      	add	r3, r1
 80010d0:	7812      	ldrb	r2, [r2, #0]
 80010d2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	3301      	adds	r3, #1
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3af      	bcc.n	8001042 <byteStuffing+0x16>
        }
    }
    return j;
 80010e2:	697b      	ldr	r3, [r7, #20]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <prepareFrame>:

//=======================OBSŁUGA RAMKI ZWROTNEJ=========================
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 80010f0:	b408      	push	{r3}
 80010f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f6:	f5ad 7d36 	sub.w	sp, sp, #728	@ 0x2d8
 80010fa:	af02      	add	r7, sp, #8
 80010fc:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001100:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800110a:	f2a3 23c1 	subw	r3, r3, #705	@ 0x2c1
 800110e:	4602      	mov	r2, r0
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001116:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 800111a:	460a      	mov	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	466b      	mov	r3, sp
 8001120:	461e      	mov	r6, r3
    Frame frame = {0};
 8001122:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8001126:	228a      	movs	r2, #138	@ 0x8a
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f006 fd9c 	bl	8007c68 <memset>
    frame.sender = sender;
 8001130:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001134:	f2a3 23c1 	subw	r3, r3, #705	@ 0x2c1
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
    frame.receiver = receiver;
 800113e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001142:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 800114c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001150:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001154:	f507 7209 	add.w	r2, r7, #548	@ 0x224
 8001158:	1cd0      	adds	r0, r2, #3
 800115a:	2203      	movs	r2, #3
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	f006 fd9d 	bl	8007c9c <strncpy>

    // Formatowanie danych
    va_list args;
    va_start(args, format);
 8001162:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001166:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    vsnprintf((char *)frame.data, MAX_DATA_SIZE, format, args);
 800116a:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800116e:	1d98      	adds	r0, r3, #6
 8001170:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8001174:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8001178:	2180      	movs	r1, #128	@ 0x80
 800117a:	f006 fd47 	bl	8007c0c <vsniprintf>
    va_end(args);

    // Oblicz długość danych
    size_t data_len = strlen((const char *)frame.data);
 800117e:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8001182:	3306      	adds	r3, #6
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f82d 	bl	80001e4 <strlen>
 800118a:	f8c7 02c8 	str.w	r0, [r7, #712]	@ 0x2c8

    // Przygotowanie danych do obliczenia CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 800118e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8001192:	3305      	adds	r3, #5
 8001194:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
    uint8_t crc_input[crc_input_len];
 8001198:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 800119c:	460b      	mov	r3, r1
 800119e:	3b01      	subs	r3, #1
 80011a0:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80011a4:	2300      	movs	r3, #0
 80011a6:	6039      	str	r1, [r7, #0]
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	00c3      	lsls	r3, r0, #3
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011bc:	6838      	ldr	r0, [r7, #0]
 80011be:	00c2      	lsls	r2, r0, #3
 80011c0:	2300      	movs	r3, #0
 80011c2:	468a      	mov	sl, r1
 80011c4:	469b      	mov	fp, r3
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80011d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80011d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80011da:	1dcb      	adds	r3, r1, #7
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	ebad 0d03 	sub.w	sp, sp, r3
 80011e4:	ab02      	add	r3, sp, #8
 80011e6:	3300      	adds	r3, #0
 80011e8:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
    crc_input[0] = frame.sender;
 80011ec:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 80011f0:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 80011f4:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 80011f6:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 80011fa:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 80011fe:	705a      	strb	r2, [r3, #1]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 8001200:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8001204:	3302      	adds	r3, #2
 8001206:	461a      	mov	r2, r3
 8001208:	f207 2327 	addw	r3, r7, #551	@ 0x227
 800120c:	8819      	ldrh	r1, [r3, #0]
 800120e:	789b      	ldrb	r3, [r3, #2]
 8001210:	8011      	strh	r1, [r2, #0]
 8001212:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, frame.data, data_len);
 8001214:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8001218:	1d58      	adds	r0, r3, #5
 800121a:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800121e:	3306      	adds	r3, #6
 8001220:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 8001224:	4619      	mov	r1, r3
 8001226:	f006 fe2c 	bl	8007e82 <memcpy>

    // Obliczanie CRC
    char crc_output[2]; // Tablica na wynik CRC
    calculate_crc16(crc_input, crc_input_len, crc_output);
 800122a:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800122e:	461a      	mov	r2, r3
 8001230:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8001234:	f8d7 02bc 	ldr.w	r0, [r7, #700]	@ 0x2bc
 8001238:	f7ff fa76 	bl	8000728 <calculate_crc16>

    // Konwersja CRC na heksadecymalne ciągi znaków
    char crc_hex[5]; // 4 znaki na heksadecymalną reprezentację + 1 na znak null
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 800123c:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 8001240:	461a      	mov	r2, r3
 8001242:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 8001246:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	4613      	mov	r3, r2
 800124e:	4a49      	ldr	r2, [pc, #292]	@ (8001374 <prepareFrame+0x284>)
 8001250:	2105      	movs	r1, #5
 8001252:	f006 fc39 	bl	8007ac8 <sniprintf>

    // Przygotowanie do byte-stuffingu
    uint8_t raw_payload[2 + COMMAND_LENGTH + data_len + 4]; // 4 dodatkowe bajty na heksadecymalne CRC
 8001256:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 800125a:	f103 0109 	add.w	r1, r3, #9
 800125e:	460b      	mov	r3, r1
 8001260:	3b01      	subs	r3, #1
 8001262:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001266:	2300      	movs	r3, #0
 8001268:	4688      	mov	r8, r1
 800126a:	4699      	mov	r9, r3
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001278:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800127c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001280:	2300      	movs	r3, #0
 8001282:	460c      	mov	r4, r1
 8001284:	461d      	mov	r5, r3
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	00eb      	lsls	r3, r5, #3
 8001290:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001294:	00e2      	lsls	r2, r4, #3
 8001296:	1dcb      	adds	r3, r1, #7
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	ebad 0d03 	sub.w	sp, sp, r3
 80012a0:	ab02      	add	r3, sp, #8
 80012a2:	3300      	adds	r3, #0
 80012a4:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
    raw_payload[0] = frame.sender;
 80012a8:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 80012ac:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80012b0:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 80012b2:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 80012b6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80012ba:	705a      	strb	r2, [r3, #1]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 80012bc:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80012c0:	3302      	adds	r3, #2
 80012c2:	461a      	mov	r2, r3
 80012c4:	f207 2327 	addw	r3, r7, #551	@ 0x227
 80012c8:	8819      	ldrh	r1, [r3, #0]
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	8011      	strh	r1, [r2, #0]
 80012ce:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, frame.data, data_len);
 80012d0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80012d4:	1d58      	adds	r0, r3, #5
 80012d6:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80012da:	3306      	adds	r3, #6
 80012dc:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 80012e0:	4619      	mov	r1, r3
 80012e2:	f006 fdce 	bl	8007e82 <memcpy>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4); // Dodanie heksadecymalnego CRC
 80012e6:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80012ea:	3305      	adds	r3, #5
 80012ec:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80012f0:	4413      	add	r3, r2
 80012f2:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80012f6:	601a      	str	r2, [r3, #0]

    uint8_t stuffed_payload[512];
    size_t stuffed_len = byteStuffing(raw_payload, 2 + COMMAND_LENGTH + data_len + 4, stuffed_payload);
 80012f8:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80012fc:	3309      	adds	r3, #9
 80012fe:	f107 0214 	add.w	r2, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	f8d7 02b4 	ldr.w	r0, [r7, #692]	@ 0x2b4
 8001308:	f7ff fe90 	bl	800102c <byteStuffing>
 800130c:	f8c7 02b0 	str.w	r0, [r7, #688]	@ 0x2b0

    // Wysyłanie ramki
    USART_fsend("%c", FRAME_START); // Wyślij początek ramki
 8001310:	217e      	movs	r1, #126	@ 0x7e
 8001312:	4819      	ldr	r0, [pc, #100]	@ (8001378 <prepareFrame+0x288>)
 8001314:	f7ff f992 	bl	800063c <USART_fsend>
    for (size_t i = 0; i < stuffed_len; i++) {
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 800131e:	e013      	b.n	8001348 <prepareFrame+0x258>
        USART_fsend("%c", stuffed_payload[i]); // Wyślij dane po byte-stuffingu
 8001320:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001324:	f5a3 722f 	sub.w	r2, r3, #700	@ 0x2bc
 8001328:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	4811      	ldr	r0, [pc, #68]	@ (8001378 <prepareFrame+0x288>)
 8001334:	f7ff f982 	bl	800063c <USART_fsend>
        delay(10);
 8001338:	200a      	movs	r0, #10
 800133a:	f000 fbdb 	bl	8001af4 <delay>
    for (size_t i = 0; i < stuffed_len; i++) {
 800133e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001342:	3301      	adds	r3, #1
 8001344:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8001348:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 800134c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8001350:	429a      	cmp	r2, r3
 8001352:	d3e5      	bcc.n	8001320 <prepareFrame+0x230>
    }
    USART_fsend("%c", FRAME_END); // Wyślij koniec ramki
 8001354:	2160      	movs	r1, #96	@ 0x60
 8001356:	4808      	ldr	r0, [pc, #32]	@ (8001378 <prepareFrame+0x288>)
 8001358:	f7ff f970 	bl	800063c <USART_fsend>
    USART_fsend("\r\n");
 800135c:	4807      	ldr	r0, [pc, #28]	@ (800137c <prepareFrame+0x28c>)
 800135e:	f7ff f96d 	bl	800063c <USART_fsend>
 8001362:	46b5      	mov	sp, r6

}
 8001364:	bf00      	nop
 8001366:	f507 7734 	add.w	r7, r7, #720	@ 0x2d0
 800136a:	46bd      	mov	sp, r7
 800136c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001370:	b001      	add	sp, #4
 8001372:	4770      	bx	lr
 8001374:	08008c58 	.word	0x08008c58
 8001378:	08008c64 	.word	0x08008c64
 800137c:	08008c68 	.word	0x08008c68

08001380 <decodeFrame>:

//=======================DEKODOWANIE RAMKI=========================
bool decodeFrame(uint8_t *bx, Receive_Frame *frame, uint8_t len) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	4613      	mov	r3, r2
 800138c:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];
        if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b06      	cmp	r3, #6
 8001392:	d948      	bls.n	8001426 <decodeFrame+0xa6>
            uint8_t k = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	75fb      	strb	r3, [r7, #23]
            frame->receiver = bx[k++];
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	75fa      	strb	r2, [r7, #23]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	701a      	strb	r2, [r3, #0]
            frame->sender = bx[k++];
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	75fa      	strb	r2, [r7, #23]
 80013b0:	461a      	mov	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4413      	add	r3, r2
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	705a      	strb	r2, [r3, #1]
            memcpy(frame->command, &bx[k],COMMAND_LENGTH);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c98      	adds	r0, r3, #2
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	2203      	movs	r2, #3
 80013c8:	4619      	mov	r1, r3
 80013ca:	f006 fd5a 	bl	8007e82 <memcpy>
            k += COMMAND_LENGTH;
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	3303      	adds	r3, #3
 80013d2:	75fb      	strb	r3, [r7, #23]
            uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	3b07      	subs	r3, #7
 80013d8:	75bb      	strb	r3, [r7, #22]
            memcpy(frame->data, &bx[k],data_len);
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1d58      	adds	r0, r3, #5
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	7dba      	ldrb	r2, [r7, #22]
 80013e6:	4619      	mov	r1, r3
 80013e8:	f006 fd4b 	bl	8007e82 <memcpy>
            k += data_len;
 80013ec:	7dfa      	ldrb	r2, [r7, #23]
 80013ee:	7dbb      	ldrb	r3, [r7, #22]
 80013f0:	4413      	add	r3, r2
 80013f2:	75fb      	strb	r3, [r7, #23]
            memcpy(incCrc, &bx[k], 2);
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	823b      	strh	r3, [r7, #16]
            calculate_crc16((uint8_t *)frame, k, ownCrc);
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	f107 0214 	add.w	r2, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	68b8      	ldr	r0, [r7, #8]
 800140a:	f7ff f98d 	bl	8000728 <calculate_crc16>
            if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 800140e:	7d3a      	ldrb	r2, [r7, #20]
 8001410:	7c3b      	ldrb	r3, [r7, #16]
 8001412:	429a      	cmp	r2, r3
 8001414:	d103      	bne.n	800141e <decodeFrame+0x9e>
 8001416:	7d7a      	ldrb	r2, [r7, #21]
 8001418:	7c7b      	ldrb	r3, [r7, #17]
 800141a:	429a      	cmp	r2, r3
 800141c:	d001      	beq.n	8001422 <decodeFrame+0xa2>
            	return false;
 800141e:	2300      	movs	r3, #0
 8001420:	e002      	b.n	8001428 <decodeFrame+0xa8>
            }
            return true;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <decodeFrame+0xa8>
        }
        return false;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <process_received_char>:



//=======================DETEKCJA RAMKI=========================
void process_received_char(uint8_t received_char) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
    if (received_char == '~') {
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b7e      	cmp	r3, #126	@ 0x7e
 800143e:	d113      	bne.n	8001468 <process_received_char+0x38>
        if (!in_frame) {
 8001440:	4b4b      	ldr	r3, [pc, #300]	@ (8001570 <process_received_char+0x140>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <process_received_char+0x32>
            in_frame = true;
 800144e:	4b48      	ldr	r3, [pc, #288]	@ (8001570 <process_received_char+0x140>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
            bx_index = 0;
 8001454:	4b47      	ldr	r3, [pc, #284]	@ (8001574 <process_received_char+0x144>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
            escape_detected = false;
 800145a:	4b47      	ldr	r3, [pc, #284]	@ (8001578 <process_received_char+0x148>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
        reset_frame_state();
    }
}
 8001460:	e082      	b.n	8001568 <process_received_char+0x138>
            reset_frame_state();
 8001462:	f7ff f9c9 	bl	80007f8 <reset_frame_state>
}
 8001466:	e07f      	b.n	8001568 <process_received_char+0x138>
    } else if (received_char == '`') {
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b60      	cmp	r3, #96	@ 0x60
 800146c:	d12a      	bne.n	80014c4 <process_received_char+0x94>
        if (in_frame) {
 800146e:	4b40      	ldr	r3, [pc, #256]	@ (8001570 <process_received_char+0x140>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01d      	beq.n	80014b2 <process_received_char+0x82>
            if (decodeFrame(bx, &ramka, bx_index)) {
 8001476:	4b3f      	ldr	r3, [pc, #252]	@ (8001574 <process_received_char+0x144>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	493f      	ldr	r1, [pc, #252]	@ (800157c <process_received_char+0x14c>)
 8001480:	483f      	ldr	r0, [pc, #252]	@ (8001580 <process_received_char+0x150>)
 8001482:	f7ff ff7d 	bl	8001380 <decodeFrame>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <process_received_char+0x70>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 800148c:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <process_received_char+0x154>)
 800148e:	4a3e      	ldr	r2, [pc, #248]	@ (8001588 <process_received_char+0x158>)
 8001490:	2167      	movs	r1, #103	@ 0x67
 8001492:	2068      	movs	r0, #104	@ 0x68
 8001494:	f7ff fe2c 	bl	80010f0 <prepareFrame>
                handleCommand(&ramka);
 8001498:	4838      	ldr	r0, [pc, #224]	@ (800157c <process_received_char+0x14c>)
 800149a:	f000 f879 	bl	8001590 <handleCommand>
 800149e:	e005      	b.n	80014ac <process_received_char+0x7c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80014a0:	4b3a      	ldr	r3, [pc, #232]	@ (800158c <process_received_char+0x15c>)
 80014a2:	4a39      	ldr	r2, [pc, #228]	@ (8001588 <process_received_char+0x158>)
 80014a4:	2167      	movs	r1, #103	@ 0x67
 80014a6:	2068      	movs	r0, #104	@ 0x68
 80014a8:	f7ff fe22 	bl	80010f0 <prepareFrame>
            reset_frame_state();
 80014ac:	f7ff f9a4 	bl	80007f8 <reset_frame_state>
}
 80014b0:	e05a      	b.n	8001568 <process_received_char+0x138>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80014b2:	4b36      	ldr	r3, [pc, #216]	@ (800158c <process_received_char+0x15c>)
 80014b4:	4a34      	ldr	r2, [pc, #208]	@ (8001588 <process_received_char+0x158>)
 80014b6:	2167      	movs	r1, #103	@ 0x67
 80014b8:	2068      	movs	r0, #104	@ 0x68
 80014ba:	f7ff fe19 	bl	80010f0 <prepareFrame>
            reset_frame_state();
 80014be:	f7ff f99b 	bl	80007f8 <reset_frame_state>
}
 80014c2:	e051      	b.n	8001568 <process_received_char+0x138>
    } else if (in_frame) {
 80014c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001570 <process_received_char+0x140>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d04b      	beq.n	8001564 <process_received_char+0x134>
        if (escape_detected) {
 80014cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <process_received_char+0x148>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d02f      	beq.n	8001534 <process_received_char+0x104>
            if (received_char == '^') {
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b5e      	cmp	r3, #94	@ 0x5e
 80014d8:	d108      	bne.n	80014ec <process_received_char+0xbc>
                bx[bx_index++] = '~';
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <process_received_char+0x144>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	4924      	ldr	r1, [pc, #144]	@ (8001574 <process_received_char+0x144>)
 80014e2:	600a      	str	r2, [r1, #0]
 80014e4:	4a26      	ldr	r2, [pc, #152]	@ (8001580 <process_received_char+0x150>)
 80014e6:	217e      	movs	r1, #126	@ 0x7e
 80014e8:	54d1      	strb	r1, [r2, r3]
 80014ea:	e01f      	b.n	800152c <process_received_char+0xfc>
            } else if (received_char == ']') {
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b5d      	cmp	r3, #93	@ 0x5d
 80014f0:	d108      	bne.n	8001504 <process_received_char+0xd4>
                bx[bx_index++] = '}';
 80014f2:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <process_received_char+0x144>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	491e      	ldr	r1, [pc, #120]	@ (8001574 <process_received_char+0x144>)
 80014fa:	600a      	str	r2, [r1, #0]
 80014fc:	4a20      	ldr	r2, [pc, #128]	@ (8001580 <process_received_char+0x150>)
 80014fe:	217d      	movs	r1, #125	@ 0x7d
 8001500:	54d1      	strb	r1, [r2, r3]
 8001502:	e013      	b.n	800152c <process_received_char+0xfc>
            } else if (received_char == '&') {
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b26      	cmp	r3, #38	@ 0x26
 8001508:	d108      	bne.n	800151c <process_received_char+0xec>
                bx[bx_index++] = '`';
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <process_received_char+0x144>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	4918      	ldr	r1, [pc, #96]	@ (8001574 <process_received_char+0x144>)
 8001512:	600a      	str	r2, [r1, #0]
 8001514:	4a1a      	ldr	r2, [pc, #104]	@ (8001580 <process_received_char+0x150>)
 8001516:	2160      	movs	r1, #96	@ 0x60
 8001518:	54d1      	strb	r1, [r2, r3]
 800151a:	e007      	b.n	800152c <process_received_char+0xfc>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <process_received_char+0x15c>)
 800151e:	4a1a      	ldr	r2, [pc, #104]	@ (8001588 <process_received_char+0x158>)
 8001520:	2167      	movs	r1, #103	@ 0x67
 8001522:	2068      	movs	r0, #104	@ 0x68
 8001524:	f7ff fde4 	bl	80010f0 <prepareFrame>
                reset_frame_state();
 8001528:	f7ff f966 	bl	80007f8 <reset_frame_state>
            escape_detected = false;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <process_received_char+0x148>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
}
 8001532:	e019      	b.n	8001568 <process_received_char+0x138>
        } else if (received_char == '}') {
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b7d      	cmp	r3, #125	@ 0x7d
 8001538:	d103      	bne.n	8001542 <process_received_char+0x112>
            escape_detected = true;
 800153a:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <process_received_char+0x148>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
}
 8001540:	e012      	b.n	8001568 <process_received_char+0x138>
            if (bx_index < sizeof(bx)) {
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <process_received_char+0x144>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800154a:	d208      	bcs.n	800155e <process_received_char+0x12e>
                bx[bx_index++] = received_char;
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <process_received_char+0x144>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	4908      	ldr	r1, [pc, #32]	@ (8001574 <process_received_char+0x144>)
 8001554:	600a      	str	r2, [r1, #0]
 8001556:	490a      	ldr	r1, [pc, #40]	@ (8001580 <process_received_char+0x150>)
 8001558:	79fa      	ldrb	r2, [r7, #7]
 800155a:	54ca      	strb	r2, [r1, r3]
}
 800155c:	e004      	b.n	8001568 <process_received_char+0x138>
                reset_frame_state();
 800155e:	f7ff f94b 	bl	80007f8 <reset_frame_state>
}
 8001562:	e001      	b.n	8001568 <process_received_char+0x138>
        reset_frame_state();
 8001564:	f7ff f948 	bl	80007f8 <reset_frame_state>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000cc0 	.word	0x20000cc0
 8001574:	20000cbc 	.word	0x20000cbc
 8001578:	20000cba 	.word	0x20000cba
 800157c:	20000cc4 	.word	0x20000cc4
 8001580:	20000bac 	.word	0x20000bac
 8001584:	08008c6c 	.word	0x08008c6c
 8001588:	08008c18 	.word	0x08008c18
 800158c:	08008c74 	.word	0x08008c74

08001590 <handleCommand>:



//=======================ROZPOZNANIE I WYKONANIE KOMENDY=========================
void handleCommand(Receive_Frame *frame)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b092      	sub	sp, #72	@ 0x48
 8001594:	af02      	add	r7, sp, #8
 8001596:	6078      	str	r0, [r7, #4]
	CommandEntry commandTable[COMMAND_COUNT] = {
 8001598:	4b48      	ldr	r3, [pc, #288]	@ (80016bc <handleCommand+0x12c>)
 800159a:	f107 0414 	add.w	r4, r7, #20
 800159e:	461d      	mov	r5, r3
 80015a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015ac:	e884 0003 	stmia.w	r4, {r0, r1}
			{"ONP", executeONP},
			{"ONT", executeONT},
			{"ONN", executeONN},
			{"OFF", executeOFF}
	};
	for (int i = 0; i < COMMAND_COUNT; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015b4:	e073      	b.n	800169e <handleCommand+0x10e>
	        if (strncmp(frame->command, commandTable[i].command, COMMAND_LENGTH) == 0) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1c98      	adds	r0, r3, #2
 80015ba:	f107 0214 	add.w	r2, r7, #20
 80015be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	2203      	movs	r2, #3
 80015c6:	4619      	mov	r1, r3
 80015c8:	f006 fb56 	bl	8007c78 <strncmp>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d162      	bne.n	8001698 <handleCommand+0x108>
	            // Parsowanie współrzędnych z `data`
	        	if (strcmp(commandTable[i].command, "OFF") == 0 && strlen(frame->data) == 1) {
 80015d2:	f107 0214 	add.w	r2, r7, #20
 80015d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	4938      	ldr	r1, [pc, #224]	@ (80016c0 <handleCommand+0x130>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fdf6 	bl	80001d0 <strcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d117      	bne.n	800161a <handleCommand+0x8a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3305      	adds	r3, #5
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fdf8 	bl	80001e4 <strlen>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10f      	bne.n	800161a <handleCommand+0x8a>
	        	                lcd_clear();
 80015fa:	f000 f997 	bl	800192c <lcd_clear>
	        	                commandTable[i].function(frame);
 80015fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	3340      	adds	r3, #64	@ 0x40
 8001604:	443b      	add	r3, r7
 8001606:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	4798      	blx	r3
	        	                lcd_copy();
 800160e:	f000 f95f 	bl	80018d0 <lcd_copy>
	        	                clear_frame(frame);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fa40 	bl	8000a98 <clear_frame>
	        	                return;
 8001618:	e04d      	b.n	80016b6 <handleCommand+0x126>
	        	}
	            int x, y;
	            if (parse_coordinates(frame->data, &x, &y)) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3305      	adds	r3, #5
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	f107 0110 	add.w	r1, r7, #16
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fcc4 	bl	8000fb4 <parse_coordinates>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d028      	beq.n	8001684 <handleCommand+0xf4>
	            	USART_fsend("%s", frame->data);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3305      	adds	r3, #5
 8001636:	4619      	mov	r1, r3
 8001638:	4822      	ldr	r0, [pc, #136]	@ (80016c4 <handleCommand+0x134>)
 800163a:	f7fe ffff 	bl	800063c <USART_fsend>
	            	USART_fsend("\r\n");
 800163e:	4822      	ldr	r0, [pc, #136]	@ (80016c8 <handleCommand+0x138>)
 8001640:	f7fe fffc 	bl	800063c <USART_fsend>
	                // Sprawdzenie zakresu współrzędnych
	                if (is_within_bounds(x, y)) {
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fc94 	bl	8000f78 <is_within_bounds>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00f      	beq.n	8001676 <handleCommand+0xe6>
	                    lcd_clear();
 8001656:	f000 f969 	bl	800192c <lcd_clear>
	                    commandTable[i].function(frame); // Wywołaj przypisaną funkcję
 800165a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	3340      	adds	r3, #64	@ 0x40
 8001660:	443b      	add	r3, r7
 8001662:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	4798      	blx	r3
	                    lcd_copy();
 800166a:	f000 f931 	bl	80018d0 <lcd_copy>
	                    clear_frame(frame);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fa12 	bl	8000a98 <clear_frame>
	                    return;
 8001674:	e01f      	b.n	80016b6 <handleCommand+0x126>
	                } else {
	                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " DISPLAY_AREA");
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <handleCommand+0x13c>)
 8001678:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <handleCommand+0x140>)
 800167a:	2167      	movs	r1, #103	@ 0x67
 800167c:	2068      	movs	r0, #104	@ 0x68
 800167e:	f7ff fd37 	bl	80010f0 <prepareFrame>
	                    return;
 8001682:	e018      	b.n	80016b6 <handleCommand+0x126>
	                }
	            } else {
	                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " NOT_RECOGNIZED%s", frame->data);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3305      	adds	r3, #5
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <handleCommand+0x144>)
 800168c:	4a10      	ldr	r2, [pc, #64]	@ (80016d0 <handleCommand+0x140>)
 800168e:	2167      	movs	r1, #103	@ 0x67
 8001690:	2068      	movs	r0, #104	@ 0x68
 8001692:	f7ff fd2d 	bl	80010f0 <prepareFrame>
	                return;
 8001696:	e00e      	b.n	80016b6 <handleCommand+0x126>
	for (int i = 0; i < COMMAND_COUNT; i++) {
 8001698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800169a:	3301      	adds	r3, #1
 800169c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800169e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	dd88      	ble.n	80015b6 <handleCommand+0x26>
	            }
	        }
	    }
	    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3302      	adds	r3, #2
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <handleCommand+0x148>)
 80016ac:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <handleCommand+0x140>)
 80016ae:	2167      	movs	r1, #103	@ 0x67
 80016b0:	2068      	movs	r0, #104	@ 0x68
 80016b2:	f7ff fd1d 	bl	80010f0 <prepareFrame>
}
 80016b6:	3740      	adds	r7, #64	@ 0x40
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bdb0      	pop	{r4, r5, r7, pc}
 80016bc:	08008ca8 	.word	0x08008ca8
 80016c0:	08008c7c 	.word	0x08008c7c
 80016c4:	08008c80 	.word	0x08008c80
 80016c8:	08008c68 	.word	0x08008c68
 80016cc:	08008c84 	.word	0x08008c84
 80016d0:	08008c18 	.word	0x08008c18
 80016d4:	08008c94 	.word	0x08008c94
 80016d8:	08008c04 	.word	0x08008c04

080016dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <MX_GPIO_Init+0x90>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <MX_GPIO_Init+0x90>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <MX_GPIO_Init+0x90>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <MX_GPIO_Init+0x90>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	4a17      	ldr	r2, [pc, #92]	@ (800176c <MX_GPIO_Init+0x90>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <MX_GPIO_Init+0x90>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <MX_GPIO_Init+0x90>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	4a11      	ldr	r2, [pc, #68]	@ (800176c <MX_GPIO_Init+0x90>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_GPIO_Init+0x90>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f641 0106 	movw	r1, #6150	@ 0x1806
 8001740:	480b      	ldr	r0, [pc, #44]	@ (8001770 <MX_GPIO_Init+0x94>)
 8001742:	f001 f92d 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 8001746:	f641 0306 	movw	r3, #6150	@ 0x1806
 800174a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4619      	mov	r1, r3
 800175e:	4804      	ldr	r0, [pc, #16]	@ (8001770 <MX_GPIO_Init+0x94>)
 8001760:	f000 ff74 	bl	800264c <HAL_GPIO_Init>

}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	48000400 	.word	0x48000400

08001774 <lcd_cmd>:
    CMD(0xf6), 0x00,
    CMD(ST7735S_COLMOD), 0x05,
    CMD(ST7735S_MADCTL), 0xa0,
};
static void lcd_cmd(uint8_t cmd)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <lcd_cmd+0x44>)
 8001786:	f001 f90b 	bl	80029a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001790:	4809      	ldr	r0, [pc, #36]	@ (80017b8 <lcd_cmd+0x44>)
 8001792:	f001 f905 	bl	80029a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001796:	1df9      	adds	r1, r7, #7
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	2201      	movs	r2, #1
 800179e:	4807      	ldr	r0, [pc, #28]	@ (80017bc <lcd_cmd+0x48>)
 80017a0:	f002 fcd9 	bl	8004156 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017aa:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <lcd_cmd+0x44>)
 80017ac:	f001 f8f8 	bl	80029a0 <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	48000400 	.word	0x48000400
 80017bc:	2000ad50 	.word	0x2000ad50

080017c0 <lcd_data>:
static void lcd_data(uint8_t data)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017d0:	480c      	ldr	r0, [pc, #48]	@ (8001804 <lcd_data+0x44>)
 80017d2:	f001 f8e5 	bl	80029a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017dc:	4809      	ldr	r0, [pc, #36]	@ (8001804 <lcd_data+0x44>)
 80017de:	f001 f8df 	bl	80029a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80017e2:	1df9      	adds	r1, r7, #7
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	2201      	movs	r2, #1
 80017ea:	4807      	ldr	r0, [pc, #28]	@ (8001808 <lcd_data+0x48>)
 80017ec:	f002 fcb3 	bl	8004156 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017f6:	4803      	ldr	r0, [pc, #12]	@ (8001804 <lcd_data+0x44>)
 80017f8:	f001 f8d2 	bl	80029a0 <HAL_GPIO_WritePin>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	48000400 	.word	0x48000400
 8001808:	2000ad50 	.word	0x2000ad50

0800180c <lcd_send>:
static void lcd_send(uint16_t value)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <lcd_send+0x20>
		lcd_cmd(value);
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ffa5 	bl	8001774 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800182a:	e004      	b.n	8001836 <lcd_send+0x2a>
		lcd_data(value);
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ffc5 	bl	80017c0 <lcd_data>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <lcd_data16>:
static void lcd_data16(uint16_t value)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ffb5 	bl	80017c0 <lcd_data>
	lcd_data(value);
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ffb0 	bl	80017c0 <lcd_data>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <lcd_set_window>:
static void lcd_set_window(int x, int y, int width, int height)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8001876:	202a      	movs	r0, #42	@ 0x2a
 8001878:	f7ff ff7c 	bl	8001774 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	b29b      	uxth	r3, r3
 8001880:	3301      	adds	r3, #1
 8001882:	b29b      	uxth	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ffda 	bl	800183e <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	b29a      	uxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	b29b      	uxth	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b29b      	uxth	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ffd1 	bl	800183e <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 800189c:	202b      	movs	r0, #43	@ 0x2b
 800189e:	f7ff ff69 	bl	8001774 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3302      	adds	r3, #2
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ffc7 	bl	800183e <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3301      	adds	r3, #1
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ffbc 	bl	800183e <lcd_data16>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <lcd_copy>:
void lcd_copy(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	22a0      	movs	r2, #160	@ 0xa0
 80018d8:	2100      	movs	r1, #0
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff ffc4 	bl	8001868 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 80018e0:	202c      	movs	r0, #44	@ 0x2c
 80018e2:	f7ff ff47 	bl	8001774 <lcd_cmd>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <lcd_copy+0x50>)
 80018ee:	f001 f857 	bl	80029a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f8:	4809      	ldr	r0, [pc, #36]	@ (8001920 <lcd_copy+0x50>)
 80018fa:	f001 f851 	bl	80029a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001906:	4907      	ldr	r1, [pc, #28]	@ (8001924 <lcd_copy+0x54>)
 8001908:	4807      	ldr	r0, [pc, #28]	@ (8001928 <lcd_copy+0x58>)
 800190a:	f002 fc24 	bl	8004156 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <lcd_copy+0x50>)
 8001916:	f001 f843 	bl	80029a0 <HAL_GPIO_WritePin>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	48000400 	.word	0x48000400
 8001924:	20000d4c 	.word	0x20000d4c
 8001928:	2000ad50 	.word	0x2000ad50

0800192c <lcd_clear>:
void lcd_clear(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
    lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001932:	2380      	movs	r3, #128	@ 0x80
 8001934:	22a0      	movs	r2, #160	@ 0xa0
 8001936:	2100      	movs	r1, #0
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ff95 	bl	8001868 <lcd_set_window>
    lcd_cmd(ST7735S_RAMWR);
 800193e:	202c      	movs	r0, #44	@ 0x2c
 8001940:	f7ff ff18 	bl	8001774 <lcd_cmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800194a:	4815      	ldr	r0, [pc, #84]	@ (80019a0 <lcd_clear+0x74>)
 800194c:	f001 f828 	bl	80029a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001956:	4812      	ldr	r0, [pc, #72]	@ (80019a0 <lcd_clear+0x74>)
 8001958:	f001 f822 	bl	80029a0 <HAL_GPIO_WritePin>

    // Wypełnij bufor ramki kolorem czarnym
    for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	e007      	b.n	8001972 <lcd_clear+0x46>
        frame_buffer[i] = 0x0000; // Czarny kolor
 8001962:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <lcd_clear+0x78>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2100      	movs	r1, #0
 8001968:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3301      	adds	r3, #1
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8001978:	dbf3      	blt.n	8001962 <lcd_clear+0x36>
    }

    // Prześlij zaktualizowany bufor ramki do wyświetlacza
    HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001982:	4908      	ldr	r1, [pc, #32]	@ (80019a4 <lcd_clear+0x78>)
 8001984:	4808      	ldr	r0, [pc, #32]	@ (80019a8 <lcd_clear+0x7c>)
 8001986:	f002 fbe6 	bl	8004156 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800198a:	2201      	movs	r2, #1
 800198c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001990:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <lcd_clear+0x74>)
 8001992:	f001 f805 	bl	80029a0 <HAL_GPIO_WritePin>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	48000400 	.word	0x48000400
 80019a4:	20000d4c 	.word	0x20000d4c
 80019a8:	2000ad50 	.word	0x2000ad50

080019ac <lcd_init>:


//TODO zrobic zarządzanie podświetleniem
void lcd_init(void) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2104      	movs	r1, #4
 80019b6:	4819      	ldr	r0, [pc, #100]	@ (8001a1c <lcd_init+0x70>)
 80019b8:	f000 fff2 	bl	80029a0 <HAL_GPIO_WritePin>
    delay(100);
 80019bc:	2064      	movs	r0, #100	@ 0x64
 80019be:	f000 f899 	bl	8001af4 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2104      	movs	r1, #4
 80019c6:	4815      	ldr	r0, [pc, #84]	@ (8001a1c <lcd_init+0x70>)
 80019c8:	f000 ffea 	bl	80029a0 <HAL_GPIO_WritePin>
    delay(100);
 80019cc:	2064      	movs	r0, #100	@ 0x64
 80019ce:	f000 f891 	bl	8001af4 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	e009      	b.n	80019ec <lcd_init+0x40>
        lcd_send(init_table[i]);
 80019d8:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <lcd_init+0x74>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff13 	bl	800180c <lcd_send>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b4b      	cmp	r3, #75	@ 0x4b
 80019f0:	d9f2      	bls.n	80019d8 <lcd_init+0x2c>
    }
    delay(200);
 80019f2:	20c8      	movs	r0, #200	@ 0xc8
 80019f4:	f000 f87e 	bl	8001af4 <delay>
    lcd_cmd(ST7735S_SLPOUT);
 80019f8:	2011      	movs	r0, #17
 80019fa:	f7ff febb 	bl	8001774 <lcd_cmd>
    delay(120);
 80019fe:	2078      	movs	r0, #120	@ 0x78
 8001a00:	f000 f878 	bl	8001af4 <delay>
    lcd_cmd(ST7735S_DISPON);
 8001a04:	2029      	movs	r0, #41	@ 0x29
 8001a06:	f7ff feb5 	bl	8001774 <lcd_cmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4803      	ldr	r0, [pc, #12]	@ (8001a1c <lcd_init+0x70>)
 8001a10:	f000 ffc6 	bl	80029a0 <HAL_GPIO_WritePin>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	08012074 	.word	0x08012074

08001a24 <lcd_put_pixel>:
	lcd_cmd(ST7735S_RAMWR);
	for (int i = 0; i < width * height; i++)
		lcd_data16(color);
}
void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	015b      	lsls	r3, r3, #5
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4413      	add	r3, r2
 8001a42:	4905      	ldr	r1, [pc, #20]	@ (8001a58 <lcd_put_pixel+0x34>)
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000d4c 	.word	0x20000d4c

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	@ (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	@ (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ffc2 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delayMs){
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <delay+0x2c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs)); //niestety blokuje działanie programu ale na szczęście nie przerwań
 8001b02:	bf00      	nop
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	441a      	add	r2, r3
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <delay+0x2c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d8f8      	bhi.n	8001b04 <delay+0x10>
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	2000ad4c 	.word	0x2000ad4c

08001b24 <wait_for_frame>:
void wait_for_frame(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001b2a:	f7fe fd4b 	bl	80005c4 <USART_kbhit>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <wait_for_frame+0x20>
	        uint8_t received_char = USART_getchar();
 8001b34:	f7fe fd58 	bl	80005e8 <USART_getchar>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	71fb      	strb	r3, [r7, #7]
	        process_received_char(received_char);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fc76 	bl	8001430 <process_received_char>
	 }
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b50:	f000 fb77 	bl	8002242 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b54:	f000 f810 	bl	8001b78 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001b58:	4806      	ldr	r0, [pc, #24]	@ (8001b74 <main+0x28>)
 8001b5a:	f7ff ffa9 	bl	8001ab0 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b5e:	f7ff fdbd 	bl	80016dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b62:	f000 fa99 	bl	8002098 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001b66:	f000 f85f 	bl	8001c28 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001b6a:	f7ff ff1f 	bl	80019ac <lcd_init>
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
    /* USER CODE END WHILE */
	  wait_for_frame();
 8001b6e:	f7ff ffd9 	bl	8001b24 <wait_for_frame>
 8001b72:	e7fc      	b.n	8001b6e <main+0x22>
 8001b74:	00013880 	.word	0x00013880

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b096      	sub	sp, #88	@ 0x58
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	2244      	movs	r2, #68	@ 0x44
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f006 f86e 	bl	8007c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b9e:	f000 ff25 	bl	80029ec <HAL_PWREx_ControlVoltageScaling>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ba8:	f000 f838 	bl	8001c1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001bac:	2310      	movs	r3, #16
 8001bae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bb8:	2360      	movs	r3, #96	@ 0x60
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001bc8:	2328      	movs	r3, #40	@ 0x28
 8001bca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 ff5b 	bl	8002a98 <HAL_RCC_OscConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001be8:	f000 f818 	bl	8001c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bec:	230f      	movs	r3, #15
 8001bee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c00:	463b      	mov	r3, r7
 8001c02:	2104      	movs	r1, #4
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fb23 	bl	8003250 <HAL_RCC_ClockConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c10:	f000 f804 	bl	8001c1c <Error_Handler>
  }
}
 8001c14:	bf00      	nop
 8001c16:	3758      	adds	r7, #88	@ 0x58
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <Error_Handler+0x8>

08001c28 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <MX_SPI2_Init+0x78>)
 8001c30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c3a:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c40:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c42:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c48:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c5e:	2210      	movs	r2, #16
 8001c60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c76:	2207      	movs	r2, #7
 8001c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <MX_SPI2_Init+0x74>)
 8001c88:	f002 f9c2 	bl	8004010 <HAL_SPI_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c92:	f7ff ffc3 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000ad50 	.word	0x2000ad50
 8001ca0:	40003800 	.word	0x40003800

08001ca4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	@ 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a25      	ldr	r2, [pc, #148]	@ (8001d58 <HAL_SPI_MspInit+0xb4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d144      	bne.n	8001d50 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cc6:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <HAL_SPI_MspInit+0xb8>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cca:	4a24      	ldr	r2, [pc, #144]	@ (8001d5c <HAL_SPI_MspInit+0xb8>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd2:	4b22      	ldr	r3, [pc, #136]	@ (8001d5c <HAL_SPI_MspInit+0xb8>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <HAL_SPI_MspInit+0xb8>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d5c <HAL_SPI_MspInit+0xb8>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cea:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_SPI_MspInit+0xb8>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_SPI_MspInit+0xb8>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	4a18      	ldr	r2, [pc, #96]	@ (8001d5c <HAL_SPI_MspInit+0xb8>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d02:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_SPI_MspInit+0xb8>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001d0e:	2308      	movs	r3, #8
 8001d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d1e:	2305      	movs	r3, #5
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <HAL_SPI_MspInit+0xbc>)
 8001d2a:	f000 fc8f 	bl	800264c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d40:	2305      	movs	r3, #5
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	@ (8001d64 <HAL_SPI_MspInit+0xc0>)
 8001d4c:	f000 fc7e 	bl	800264c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d50:	bf00      	nop
 8001d52:	3728      	adds	r7, #40	@ 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40003800 	.word	0x40003800
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48000800 	.word	0x48000800
 8001d64:	48000400 	.word	0x48000400

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <HAL_MspInit+0x44>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d72:	4a0e      	ldr	r2, [pc, #56]	@ (8001dac <HAL_MspInit+0x44>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <HAL_MspInit+0x44>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <HAL_MspInit+0x44>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <HAL_MspInit+0x44>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_MspInit+0x44>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <NMI_Handler+0x4>

08001db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e08:	f000 fa70 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick++;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	@ (8001e1c <SysTick_Handler+0x18>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	4a02      	ldr	r2, [pc, #8]	@ (8001e1c <SysTick_Handler+0x18>)
 8001e14:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000ad4c 	.word	0x2000ad4c

08001e20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e24:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <USART2_IRQHandler+0x10>)
 8001e26:	f002 fd69 	bl	80048fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000adb8 	.word	0x2000adb8

08001e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return 1;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_kill>:

int _kill(int pid, int sig)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e4e:	f005 ffeb 	bl	8007e28 <__errno>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2216      	movs	r2, #22
 8001e56:	601a      	str	r2, [r3, #0]
  return -1;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_exit>:

void _exit (int status)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ffe7 	bl	8001e44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e76:	bf00      	nop
 8001e78:	e7fd      	b.n	8001e76 <_exit+0x12>

08001e7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e00a      	b.n	8001ea2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e8c:	f3af 8000 	nop.w
 8001e90:	4601      	mov	r1, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	60ba      	str	r2, [r7, #8]
 8001e98:	b2ca      	uxtb	r2, r1
 8001e9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	dbf0      	blt.n	8001e8c <_read+0x12>
  }

  return len;
 8001eaa:	687b      	ldr	r3, [r7, #4]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e009      	b.n	8001eda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	60ba      	str	r2, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	dbf1      	blt.n	8001ec6 <_write+0x12>
  }
  return len;
 8001ee2:	687b      	ldr	r3, [r7, #4]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_close>:

int _close(int file)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f14:	605a      	str	r2, [r3, #4]
  return 0;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_isatty>:

int _isatty(int file)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	@ (8001fb0 <_sbrk+0x5c>)
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <_sbrk+0x60>)
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f70:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <_sbrk+0x64>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	@ (8001fbc <_sbrk+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d207      	bcs.n	8001f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f84:	f005 ff50 	bl	8007e28 <__errno>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	e009      	b.n	8001fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <_sbrk+0x64>)
 8001fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20018000 	.word	0x20018000
 8001fb4:	00002000 	.word	0x00002000
 8001fb8:	2000adb4 	.word	0x2000adb4
 8001fbc:	2000af90 	.word	0x2000af90

08001fc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <SystemInit+0x20>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fca:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <SystemInit+0x20>)
 8001fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <HAL_UART_TxCpltCallback>:
extern volatile int USART_TX_Busy;
extern volatile int USART_RX_Empty;
extern volatile int USART_RX_Busy;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a13      	ldr	r2, [pc, #76]	@ (800203c <HAL_UART_TxCpltCallback+0x58>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d11e      	bne.n	8002032 <HAL_UART_TxCpltCallback+0x4e>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <HAL_UART_TxCpltCallback+0x5c>)
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_UART_TxCpltCallback+0x5c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d018      	beq.n	8002032 <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <HAL_UART_TxCpltCallback+0x5c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a0f      	ldr	r2, [pc, #60]	@ (8002044 <HAL_UART_TxCpltCallback+0x60>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex++;
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <HAL_UART_TxCpltCallback+0x5c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	3301      	adds	r3, #1
 8002010:	4a0b      	ldr	r2, [pc, #44]	@ (8002040 <HAL_UART_TxCpltCallback+0x5c>)
 8002012:	6053      	str	r3, [r2, #4]
		   if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex=0;
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_UART_TxCpltCallback+0x5c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800201c:	d302      	bcc.n	8002024 <HAL_UART_TxCpltCallback+0x40>
 800201e:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <HAL_UART_TxCpltCallback+0x5c>)
 8002020:	2200      	movs	r2, #0
 8002022:	605a      	str	r2, [r3, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8002024:	f107 030f 	add.w	r3, r7, #15
 8002028:	2201      	movs	r2, #1
 800202a:	4619      	mov	r1, r3
 800202c:	4803      	ldr	r0, [pc, #12]	@ (800203c <HAL_UART_TxCpltCallback+0x58>)
 800202e:	f002 fbbb 	bl	80047a8 <HAL_UART_Transmit_IT>
	   }
   }
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000adb8 	.word	0x2000adb8
 8002040:	2000029c 	.word	0x2000029c
 8002044:	200002ac 	.word	0x200002ac

08002048 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a0e      	ldr	r2, [pc, #56]	@ (800208c <HAL_UART_RxCpltCallback+0x44>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d114      	bne.n	8002082 <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex++;
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <HAL_UART_RxCpltCallback+0x48>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	3301      	adds	r3, #1
 800205e:	4a0c      	ldr	r2, [pc, #48]	@ (8002090 <HAL_UART_RxCpltCallback+0x48>)
 8002060:	6093      	str	r3, [r2, #8]
		 if(rxRingBuffer.writeIndex >= RX_BUFFER_SIZE) rxRingBuffer.writeIndex=0;
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_UART_RxCpltCallback+0x48>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2bff      	cmp	r3, #255	@ 0xff
 8002068:	d902      	bls.n	8002070 <HAL_UART_RxCpltCallback+0x28>
 800206a:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <HAL_UART_RxCpltCallback+0x48>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 8002070:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <HAL_UART_RxCpltCallback+0x48>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a07      	ldr	r2, [pc, #28]	@ (8002094 <HAL_UART_RxCpltCallback+0x4c>)
 8002076:	4413      	add	r3, r2
 8002078:	2201      	movs	r2, #1
 800207a:	4619      	mov	r1, r3
 800207c:	4803      	ldr	r0, [pc, #12]	@ (800208c <HAL_UART_RxCpltCallback+0x44>)
 800207e:	f002 fbf1 	bl	8004864 <HAL_UART_Receive_IT>

	 }
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000adb8 	.word	0x2000adb8
 8002090:	2000028c 	.word	0x2000028c
 8002094:	20000aac 	.word	0x20000aac

08002098 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800209c:	4b1c      	ldr	r3, [pc, #112]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 800209e:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <MX_USART2_UART_Init+0x7c>)
 80020a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 80020a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b0:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020b6:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020bc:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 80020be:	220c      	movs	r2, #12
 80020c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c2:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c8:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020da:	480d      	ldr	r0, [pc, #52]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 80020dc:	f002 fb16 	bl	800470c <HAL_UART_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020e6:	f7ff fd99 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ring_buffer_setup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE);
 80020ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ee:	490a      	ldr	r1, [pc, #40]	@ (8002118 <MX_USART2_UART_Init+0x80>)
 80020f0:	480a      	ldr	r0, [pc, #40]	@ (800211c <MX_USART2_UART_Init+0x84>)
 80020f2:	f7fe fa4d 	bl	8000590 <ring_buffer_setup>
  ring_buffer_setup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE);
 80020f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020fa:	4909      	ldr	r1, [pc, #36]	@ (8002120 <MX_USART2_UART_Init+0x88>)
 80020fc:	4809      	ldr	r0, [pc, #36]	@ (8002124 <MX_USART2_UART_Init+0x8c>)
 80020fe:	f7fe fa47 	bl	8000590 <ring_buffer_setup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 8002102:	2201      	movs	r2, #1
 8002104:	4904      	ldr	r1, [pc, #16]	@ (8002118 <MX_USART2_UART_Init+0x80>)
 8002106:	4802      	ldr	r0, [pc, #8]	@ (8002110 <MX_USART2_UART_Init+0x78>)
 8002108:	f002 fbac 	bl	8004864 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000adb8 	.word	0x2000adb8
 8002114:	40004400 	.word	0x40004400
 8002118:	20000aac 	.word	0x20000aac
 800211c:	2000028c 	.word	0x2000028c
 8002120:	200002ac 	.word	0x200002ac
 8002124:	2000029c 	.word	0x2000029c

08002128 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b0ac      	sub	sp, #176	@ 0xb0
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2288      	movs	r2, #136	@ 0x88
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f005 fd8d 	bl	8007c68 <memset>
  if(uartHandle->Instance==USART2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <HAL_UART_MspInit+0xc0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d143      	bne.n	80021e0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002158:	2302      	movs	r3, #2
 800215a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800215c:	2300      	movs	r3, #0
 800215e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4618      	mov	r0, r3
 8002166:	f001 fa97 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002170:	f7ff fd54 	bl	8001c1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002174:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <HAL_UART_MspInit+0xc4>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	4a1c      	ldr	r2, [pc, #112]	@ (80021ec <HAL_UART_MspInit+0xc4>)
 800217a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800217e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002180:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <HAL_UART_MspInit+0xc4>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218c:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <HAL_UART_MspInit+0xc4>)
 800218e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002190:	4a16      	ldr	r2, [pc, #88]	@ (80021ec <HAL_UART_MspInit+0xc4>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_UART_MspInit+0xc4>)
 800219a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a4:	230c      	movs	r3, #12
 80021a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021bc:	2307      	movs	r3, #7
 80021be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021cc:	f000 fa3e 	bl	800264c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	2026      	movs	r0, #38	@ 0x26
 80021d6:	f000 f984 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021da:	2026      	movs	r0, #38	@ 0x26
 80021dc:	f000 f99d 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021e0:	bf00      	nop
 80021e2:	37b0      	adds	r7, #176	@ 0xb0
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40004400 	.word	0x40004400
 80021ec:	40021000 	.word	0x40021000

080021f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002228 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f4:	f7ff fee4 	bl	8001fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f8:	480c      	ldr	r0, [pc, #48]	@ (800222c <LoopForever+0x6>)
  ldr r1, =_edata
 80021fa:	490d      	ldr	r1, [pc, #52]	@ (8002230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <LoopForever+0xe>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002210:	4c0a      	ldr	r4, [pc, #40]	@ (800223c <LoopForever+0x16>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800221e:	f005 fe09 	bl	8007e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002222:	f7ff fc93 	bl	8001b4c <main>

08002226 <LoopForever>:

LoopForever:
    b LoopForever
 8002226:	e7fe      	b.n	8002226 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002228:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002234:	08012348 	.word	0x08012348
  ldr r2, =_sbss
 8002238:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 800223c:	2000af90 	.word	0x2000af90

08002240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC1_2_IRQHandler>

08002242 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224c:	2003      	movs	r0, #3
 800224e:	f000 f93d 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002252:	200f      	movs	r0, #15
 8002254:	f000 f80e 	bl	8002274 <HAL_InitTick>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	71fb      	strb	r3, [r7, #7]
 8002262:	e001      	b.n	8002268 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002264:	f7ff fd80 	bl	8001d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002268:	79fb      	ldrb	r3, [r7, #7]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002280:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <HAL_InitTick+0x6c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d023      	beq.n	80022d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002288:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <HAL_InitTick+0x70>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <HAL_InitTick+0x6c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002296:	fbb3 f3f1 	udiv	r3, r3, r1
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f949 	bl	8002536 <HAL_SYSTICK_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d809      	bhi.n	80022c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f000 f913 	bl	80024e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022bc:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <HAL_InitTick+0x74>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e007      	b.n	80022d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	e004      	b.n	80022d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e001      	b.n	80022d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000208 	.word	0x20000208
 80022e4:	20000200 	.word	0x20000200
 80022e8:	20000204 	.word	0x20000204

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	@ (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000208 	.word	0x20000208
 8002310:	2000ae40 	.word	0x2000ae40

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	2000ae40 	.word	0x2000ae40

0800232c <__NVIC_SetPriorityGrouping>:
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	@ (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	@ (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4907      	ldr	r1, [pc, #28]	@ (80023c8 <__NVIC_EnableIRQ+0x38>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	@ (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	@ (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	@ 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	@ 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff29 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff3e 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff8e 	bl	8002420 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff31 	bl	8002390 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d008      	beq.n	8002578 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2204      	movs	r2, #4
 800256a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e022      	b.n	80025be <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 020e 	bic.w	r2, r2, #14
 8002586:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259c:	f003 021c 	and.w	r2, r3, #28
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f202 	lsl.w	r2, r1, r2
 80025aa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d005      	beq.n	80025ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e029      	b.n	8002642 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020e 	bic.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f003 021c 	and.w	r2, r3, #28
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
    }
  }
  return status;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265a:	e17f      	b.n	800295c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8171 	beq.w	8002956 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d005      	beq.n	800268c <HAL_GPIO_Init+0x40>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d130      	bne.n	80026ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c2:	2201      	movs	r2, #1
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	f003 0201 	and.w	r2, r3, #1
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d118      	bne.n	800272c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002700:	2201      	movs	r2, #1
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	08db      	lsrs	r3, r3, #3
 8002716:	f003 0201 	and.w	r2, r3, #1
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b03      	cmp	r3, #3
 8002736:	d017      	beq.n	8002768 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d123      	bne.n	80027bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3208      	adds	r2, #8
 800277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	08da      	lsrs	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3208      	adds	r2, #8
 80027b6:	6939      	ldr	r1, [r7, #16]
 80027b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80ac 	beq.w	8002956 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	4b5f      	ldr	r3, [pc, #380]	@ (800297c <HAL_GPIO_Init+0x330>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002802:	4a5e      	ldr	r2, [pc, #376]	@ (800297c <HAL_GPIO_Init+0x330>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6613      	str	r3, [r2, #96]	@ 0x60
 800280a:	4b5c      	ldr	r3, [pc, #368]	@ (800297c <HAL_GPIO_Init+0x330>)
 800280c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002816:	4a5a      	ldr	r2, [pc, #360]	@ (8002980 <HAL_GPIO_Init+0x334>)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002840:	d025      	beq.n	800288e <HAL_GPIO_Init+0x242>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4f      	ldr	r2, [pc, #316]	@ (8002984 <HAL_GPIO_Init+0x338>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <HAL_GPIO_Init+0x23e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4e      	ldr	r2, [pc, #312]	@ (8002988 <HAL_GPIO_Init+0x33c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d019      	beq.n	8002886 <HAL_GPIO_Init+0x23a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4d      	ldr	r2, [pc, #308]	@ (800298c <HAL_GPIO_Init+0x340>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_GPIO_Init+0x236>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4c      	ldr	r2, [pc, #304]	@ (8002990 <HAL_GPIO_Init+0x344>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00d      	beq.n	800287e <HAL_GPIO_Init+0x232>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4b      	ldr	r2, [pc, #300]	@ (8002994 <HAL_GPIO_Init+0x348>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x22e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4a      	ldr	r2, [pc, #296]	@ (8002998 <HAL_GPIO_Init+0x34c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_GPIO_Init+0x22a>
 8002872:	2306      	movs	r3, #6
 8002874:	e00c      	b.n	8002890 <HAL_GPIO_Init+0x244>
 8002876:	2307      	movs	r3, #7
 8002878:	e00a      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800287a:	2305      	movs	r3, #5
 800287c:	e008      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800287e:	2304      	movs	r3, #4
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x244>
 8002882:	2303      	movs	r3, #3
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x244>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800288e:	2300      	movs	r3, #0
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	f002 0203 	and.w	r2, r2, #3
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028a0:	4937      	ldr	r1, [pc, #220]	@ (8002980 <HAL_GPIO_Init+0x334>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028ae:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <HAL_GPIO_Init+0x350>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028d2:	4a32      	ldr	r2, [pc, #200]	@ (800299c <HAL_GPIO_Init+0x350>)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028d8:	4b30      	ldr	r3, [pc, #192]	@ (800299c <HAL_GPIO_Init+0x350>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028fc:	4a27      	ldr	r2, [pc, #156]	@ (800299c <HAL_GPIO_Init+0x350>)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002902:	4b26      	ldr	r3, [pc, #152]	@ (800299c <HAL_GPIO_Init+0x350>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002926:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <HAL_GPIO_Init+0x350>)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_GPIO_Init+0x350>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002950:	4a12      	ldr	r2, [pc, #72]	@ (800299c <HAL_GPIO_Init+0x350>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	f47f ae78 	bne.w	800265c <HAL_GPIO_Init+0x10>
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	40010000 	.word	0x40010000
 8002984:	48000400 	.word	0x48000400
 8002988:	48000800 	.word	0x48000800
 800298c:	48000c00 	.word	0x48000c00
 8002990:	48001000 	.word	0x48001000
 8002994:	48001400 	.word	0x48001400
 8002998:	48001800 	.word	0x48001800
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
 80029ac:	4613      	mov	r3, r2
 80029ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b0:	787b      	ldrb	r3, [r7, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029d4:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40007000 	.word	0x40007000

080029ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029fa:	d130      	bne.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029fc:	4b23      	ldr	r3, [pc, #140]	@ (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a08:	d038      	beq.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a0a:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a12:	4a1e      	ldr	r2, [pc, #120]	@ (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2232      	movs	r2, #50	@ 0x32
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0c9b      	lsrs	r3, r3, #18
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a30:	e002      	b.n	8002a38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a38:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a44:	d102      	bne.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f2      	bne.n	8002a32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a58:	d110      	bne.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e00f      	b.n	8002a7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6a:	d007      	beq.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a6c:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a74:	4a05      	ldr	r2, [pc, #20]	@ (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	20000200 	.word	0x20000200
 8002a94:	431bde83 	.word	0x431bde83

08002a98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e3ca      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aaa:	4b97      	ldr	r3, [pc, #604]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab4:	4b94      	ldr	r3, [pc, #592]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80e4 	beq.w	8002c94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4a>
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	f040 808b 	bne.w	8002bf0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 8087 	bne.w	8002bf0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ae2:	4b89      	ldr	r3, [pc, #548]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x62>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e3a2      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	4b82      	ldr	r3, [pc, #520]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <HAL_RCC_OscConfig+0x7c>
 8002b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b12:	e005      	b.n	8002b20 <HAL_RCC_OscConfig+0x88>
 8002b14:	4b7c      	ldr	r3, [pc, #496]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d223      	bcs.n	8002b6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fd55 	bl	80035d8 <RCC_SetFlashLatencyFromMSIRange>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e383      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b38:	4b73      	ldr	r3, [pc, #460]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a72      	ldr	r2, [pc, #456]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b70      	ldr	r3, [pc, #448]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	496d      	ldr	r1, [pc, #436]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b56:	4b6c      	ldr	r3, [pc, #432]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	4968      	ldr	r1, [pc, #416]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
 8002b6a:	e025      	b.n	8002bb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6c:	4b66      	ldr	r3, [pc, #408]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a65      	ldr	r2, [pc, #404]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b72:	f043 0308 	orr.w	r3, r3, #8
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b63      	ldr	r3, [pc, #396]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4960      	ldr	r1, [pc, #384]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	495b      	ldr	r1, [pc, #364]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fd15 	bl	80035d8 <RCC_SetFlashLatencyFromMSIRange>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e343      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb8:	f000 fc4a 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b52      	ldr	r3, [pc, #328]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	4950      	ldr	r1, [pc, #320]	@ (8002d0c <HAL_RCC_OscConfig+0x274>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8002d10 <HAL_RCC_OscConfig+0x278>)
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bd8:	4b4e      	ldr	r3, [pc, #312]	@ (8002d14 <HAL_RCC_OscConfig+0x27c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fb49 	bl	8002274 <HAL_InitTick>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d052      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	e327      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d032      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bf8:	4b43      	ldr	r3, [pc, #268]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a42      	ldr	r2, [pc, #264]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c04:	f7ff fb86 	bl	8002314 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c0c:	f7ff fb82 	bl	8002314 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e310      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2a:	4b37      	ldr	r3, [pc, #220]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a36      	ldr	r2, [pc, #216]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c30:	f043 0308 	orr.w	r3, r3, #8
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b34      	ldr	r3, [pc, #208]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4931      	ldr	r1, [pc, #196]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c48:	4b2f      	ldr	r3, [pc, #188]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	492c      	ldr	r1, [pc, #176]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
 8002c5c:	e01a      	b.n	8002c94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a29      	ldr	r2, [pc, #164]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff fb53 	bl	8002314 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c72:	f7ff fb4f 	bl	8002314 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e2dd      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c84:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x1da>
 8002c90:	e000      	b.n	8002c94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d074      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x21a>
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	d10e      	bne.n	8002cca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d10b      	bne.n	8002cca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d064      	beq.n	8002d88 <HAL_RCC_OscConfig+0x2f0>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d160      	bne.n	8002d88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e2ba      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x24a>
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	e026      	b.n	8002d30 <HAL_RCC_OscConfig+0x298>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cea:	d115      	bne.n	8002d18 <HAL_RCC_OscConfig+0x280>
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a05      	ldr	r2, [pc, #20]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b03      	ldr	r3, [pc, #12]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a02      	ldr	r2, [pc, #8]	@ (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	e014      	b.n	8002d30 <HAL_RCC_OscConfig+0x298>
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	0801210c 	.word	0x0801210c
 8002d10:	20000200 	.word	0x20000200
 8002d14:	20000204 	.word	0x20000204
 8002d18:	4ba0      	ldr	r3, [pc, #640]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a9f      	ldr	r2, [pc, #636]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b9d      	ldr	r3, [pc, #628]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a9c      	ldr	r2, [pc, #624]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7ff faec 	bl	8002314 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7ff fae8 	bl	8002314 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	@ 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e276      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d52:	4b92      	ldr	r3, [pc, #584]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x2a8>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff fad8 	bl	8002314 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff fad4 	bl	8002314 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	@ 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e262      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d7a:	4b88      	ldr	r3, [pc, #544]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2d0>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d060      	beq.n	8002e58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_OscConfig+0x310>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d119      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d116      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da8:	4b7c      	ldr	r3, [pc, #496]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x328>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e23f      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b76      	ldr	r3, [pc, #472]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	4973      	ldr	r1, [pc, #460]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd4:	e040      	b.n	8002e58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d023      	beq.n	8002e26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dde:	4b6f      	ldr	r3, [pc, #444]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6e      	ldr	r2, [pc, #440]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7ff fa93 	bl	8002314 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df2:	f7ff fa8f 	bl	8002314 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e21d      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e04:	4b65      	ldr	r3, [pc, #404]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b62      	ldr	r3, [pc, #392]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	495f      	ldr	r1, [pc, #380]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
 8002e24:	e018      	b.n	8002e58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	4b5d      	ldr	r3, [pc, #372]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a5c      	ldr	r2, [pc, #368]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7ff fa6f 	bl	8002314 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7ff fa6b 	bl	8002314 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1f9      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e4c:	4b53      	ldr	r3, [pc, #332]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d03c      	beq.n	8002ede <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e72:	4a4a      	ldr	r2, [pc, #296]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7ff fa4a 	bl	8002314 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e84:	f7ff fa46 	bl	8002314 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e1d4      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e96:	4b41      	ldr	r3, [pc, #260]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ef      	beq.n	8002e84 <HAL_RCC_OscConfig+0x3ec>
 8002ea4:	e01b      	b.n	8002ede <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eac:	4a3b      	ldr	r2, [pc, #236]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002eae:	f023 0301 	bic.w	r3, r3, #1
 8002eb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7ff fa2d 	bl	8002314 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7ff fa29 	bl	8002314 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1b7      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed0:	4b32      	ldr	r3, [pc, #200]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ef      	bne.n	8002ebe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80a6 	beq.w	8003038 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eec:	2300      	movs	r3, #0
 8002eee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10d      	bne.n	8002f18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	4b27      	ldr	r3, [pc, #156]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	4a26      	ldr	r2, [pc, #152]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f08:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f14:	2301      	movs	r3, #1
 8002f16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f18:	4b21      	ldr	r3, [pc, #132]	@ (8002fa0 <HAL_RCC_OscConfig+0x508>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d118      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f24:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa0 <HAL_RCC_OscConfig+0x508>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa0 <HAL_RCC_OscConfig+0x508>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f30:	f7ff f9f0 	bl	8002314 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f38:	f7ff f9ec 	bl	8002314 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e17a      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <HAL_RCC_OscConfig+0x508>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d108      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4d8>
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f64:	4a0d      	ldr	r2, [pc, #52]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f6e:	e029      	b.n	8002fc4 <HAL_RCC_OscConfig+0x52c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d115      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x50c>
 8002f78:	4b08      	ldr	r3, [pc, #32]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7e:	4a07      	ldr	r2, [pc, #28]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f88:	4b04      	ldr	r3, [pc, #16]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8e:	4a03      	ldr	r2, [pc, #12]	@ (8002f9c <HAL_RCC_OscConfig+0x504>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f98:	e014      	b.n	8002fc4 <HAL_RCC_OscConfig+0x52c>
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	4b9c      	ldr	r3, [pc, #624]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002faa:	4a9b      	ldr	r2, [pc, #620]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fb4:	4b98      	ldr	r3, [pc, #608]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	4a97      	ldr	r2, [pc, #604]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d016      	beq.n	8002ffa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7ff f9a2 	bl	8002314 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7ff f99e 	bl	8002314 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e12a      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fea:	4b8b      	ldr	r3, [pc, #556]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ed      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x53c>
 8002ff8:	e015      	b.n	8003026 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7ff f98b 	bl	8002314 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7ff f987 	bl	8002314 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e113      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003018:	4b7f      	ldr	r3, [pc, #508]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ed      	bne.n	8003002 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b7a      	ldr	r3, [pc, #488]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003030:	4a79      	ldr	r2, [pc, #484]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003036:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80fe 	beq.w	800323e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	2b02      	cmp	r3, #2
 8003048:	f040 80d0 	bne.w	80031ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800304c:	4b72      	ldr	r3, [pc, #456]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	429a      	cmp	r2, r3
 800305e:	d130      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	3b01      	subs	r3, #1
 800306c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d127      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d11f      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800308c:	2a07      	cmp	r2, #7
 800308e:	bf14      	ite	ne
 8003090:	2201      	movne	r2, #1
 8003092:	2200      	moveq	r2, #0
 8003094:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003096:	4293      	cmp	r3, r2
 8003098:	d113      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	3b01      	subs	r3, #1
 80030a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d109      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	3b01      	subs	r3, #1
 80030bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d06e      	beq.n	80031a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b0c      	cmp	r3, #12
 80030c6:	d069      	beq.n	800319c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030c8:	4b53      	ldr	r3, [pc, #332]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030d4:	4b50      	ldr	r3, [pc, #320]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0ad      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80030ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f0:	f7ff f910 	bl	8002314 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7ff f90c 	bl	8002314 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e09a      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310a:	4b43      	ldr	r3, [pc, #268]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003116:	4b40      	ldr	r3, [pc, #256]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	4b40      	ldr	r3, [pc, #256]	@ (800321c <HAL_RCC_OscConfig+0x784>)
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003126:	3a01      	subs	r2, #1
 8003128:	0112      	lsls	r2, r2, #4
 800312a:	4311      	orrs	r1, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003130:	0212      	lsls	r2, r2, #8
 8003132:	4311      	orrs	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003138:	0852      	lsrs	r2, r2, #1
 800313a:	3a01      	subs	r2, #1
 800313c:	0552      	lsls	r2, r2, #21
 800313e:	4311      	orrs	r1, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003144:	0852      	lsrs	r2, r2, #1
 8003146:	3a01      	subs	r2, #1
 8003148:	0652      	lsls	r2, r2, #25
 800314a:	4311      	orrs	r1, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003150:	0912      	lsrs	r2, r2, #4
 8003152:	0452      	lsls	r2, r2, #17
 8003154:	430a      	orrs	r2, r1
 8003156:	4930      	ldr	r1, [pc, #192]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 8003158:	4313      	orrs	r3, r2
 800315a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800315c:	4b2e      	ldr	r3, [pc, #184]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2d      	ldr	r2, [pc, #180]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003166:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003168:	4b2b      	ldr	r3, [pc, #172]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a2a      	ldr	r2, [pc, #168]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 800316e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003172:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003174:	f7ff f8ce 	bl	8002314 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317c:	f7ff f8ca 	bl	8002314 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e058      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318e:	4b22      	ldr	r3, [pc, #136]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800319a:	e050      	b.n	800323e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e04f      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d148      	bne.n	800323e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a19      	ldr	r2, [pc, #100]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b8:	4b17      	ldr	r3, [pc, #92]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80031be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031c4:	f7ff f8a6 	bl	8002314 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7ff f8a2 	bl	8002314 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e030      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031de:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x734>
 80031ea:	e028      	b.n	800323e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d023      	beq.n	800323a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a08      	ldr	r2, [pc, #32]	@ (8003218 <HAL_RCC_OscConfig+0x780>)
 80031f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7ff f889 	bl	8002314 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003204:	e00c      	b.n	8003220 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003206:	f7ff f885 	bl	8002314 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d905      	bls.n	8003220 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e013      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
 8003218:	40021000 	.word	0x40021000
 800321c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003220:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <HAL_RCC_OscConfig+0x7b0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ec      	bne.n	8003206 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800322c:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <HAL_RCC_OscConfig+0x7b0>)
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	4905      	ldr	r1, [pc, #20]	@ (8003248 <HAL_RCC_OscConfig+0x7b0>)
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_RCC_OscConfig+0x7b4>)
 8003234:	4013      	ands	r3, r2
 8003236:	60cb      	str	r3, [r1, #12]
 8003238:	e001      	b.n	800323e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	feeefffc 	.word	0xfeeefffc

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0e7      	b.n	8003434 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b75      	ldr	r3, [pc, #468]	@ (800343c <HAL_RCC_ClockConfig+0x1ec>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d910      	bls.n	8003294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b72      	ldr	r3, [pc, #456]	@ (800343c <HAL_RCC_ClockConfig+0x1ec>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 0207 	bic.w	r2, r3, #7
 800327a:	4970      	ldr	r1, [pc, #448]	@ (800343c <HAL_RCC_ClockConfig+0x1ec>)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b6e      	ldr	r3, [pc, #440]	@ (800343c <HAL_RCC_ClockConfig+0x1ec>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0cf      	b.n	8003434 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d010      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	4b66      	ldr	r3, [pc, #408]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d908      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b0:	4b63      	ldr	r3, [pc, #396]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4960      	ldr	r1, [pc, #384]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d04c      	beq.n	8003368 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d121      	bne.n	8003326 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0a6      	b.n	8003434 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ee:	4b54      	ldr	r3, [pc, #336]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d115      	bne.n	8003326 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e09a      	b.n	8003434 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003306:	4b4e      	ldr	r3, [pc, #312]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e08e      	b.n	8003434 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003316:	4b4a      	ldr	r3, [pc, #296]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e086      	b.n	8003434 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b46      	ldr	r3, [pc, #280]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4943      	ldr	r1, [pc, #268]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003338:	f7fe ffec 	bl	8002314 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fe ffe8 	bl	8002314 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e06e      	b.n	8003434 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b3a      	ldr	r3, [pc, #232]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d010      	beq.n	8003396 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003380:	429a      	cmp	r2, r3
 8003382:	d208      	bcs.n	8003396 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003384:	4b2e      	ldr	r3, [pc, #184]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	492b      	ldr	r1, [pc, #172]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003396:	4b29      	ldr	r3, [pc, #164]	@ (800343c <HAL_RCC_ClockConfig+0x1ec>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d210      	bcs.n	80033c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a4:	4b25      	ldr	r3, [pc, #148]	@ (800343c <HAL_RCC_ClockConfig+0x1ec>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 0207 	bic.w	r2, r3, #7
 80033ac:	4923      	ldr	r1, [pc, #140]	@ (800343c <HAL_RCC_ClockConfig+0x1ec>)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b4:	4b21      	ldr	r3, [pc, #132]	@ (800343c <HAL_RCC_ClockConfig+0x1ec>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e036      	b.n	8003434 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4918      	ldr	r1, [pc, #96]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d009      	beq.n	8003404 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f0:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4910      	ldr	r1, [pc, #64]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003404:	f000 f824 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <HAL_RCC_ClockConfig+0x1f0>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	490b      	ldr	r1, [pc, #44]	@ (8003444 <HAL_RCC_ClockConfig+0x1f4>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
 8003420:	4a09      	ldr	r2, [pc, #36]	@ (8003448 <HAL_RCC_ClockConfig+0x1f8>)
 8003422:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003424:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_ClockConfig+0x1fc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe ff23 	bl	8002274 <HAL_InitTick>
 800342e:	4603      	mov	r3, r0
 8003430:	72fb      	strb	r3, [r7, #11]

  return status;
 8003432:	7afb      	ldrb	r3, [r7, #11]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40022000 	.word	0x40022000
 8003440:	40021000 	.word	0x40021000
 8003444:	0801210c 	.word	0x0801210c
 8003448:	20000200 	.word	0x20000200
 800344c:	20000204 	.word	0x20000204

08003450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	@ 0x24
 8003454:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345e:	4b3e      	ldr	r3, [pc, #248]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003468:	4b3b      	ldr	r3, [pc, #236]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x34>
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d121      	bne.n	80034c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d11e      	bne.n	80034c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003484:	4b34      	ldr	r3, [pc, #208]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003490:	4b31      	ldr	r3, [pc, #196]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 8003492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	e005      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034ac:	4a2b      	ldr	r2, [pc, #172]	@ (800355c <HAL_RCC_GetSysClockFreq+0x10c>)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d102      	bne.n	80034ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034c8:	4b25      	ldr	r3, [pc, #148]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	e004      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034d4:	4b23      	ldr	r3, [pc, #140]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x114>)
 80034d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d134      	bne.n	8003548 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034de:	4b1e      	ldr	r3, [pc, #120]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d003      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0xac>
 80034f4:	e005      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x110>)
 80034f8:	617b      	str	r3, [r7, #20]
      break;
 80034fa:	e005      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x114>)
 80034fe:	617b      	str	r3, [r7, #20]
      break;
 8003500:	e002      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	617b      	str	r3, [r7, #20]
      break;
 8003506:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003508:	4b13      	ldr	r3, [pc, #76]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	3301      	adds	r3, #1
 8003514:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003516:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	fb03 f202 	mul.w	r2, r3, r2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800352e:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	0e5b      	lsrs	r3, r3, #25
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	3301      	adds	r3, #1
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003548:	69bb      	ldr	r3, [r7, #24]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	@ 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	08012124 	.word	0x08012124
 8003560:	00f42400 	.word	0x00f42400
 8003564:	007a1200 	.word	0x007a1200

08003568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	@ (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000200 	.word	0x20000200

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003584:	f7ff fff0 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4904      	ldr	r1, [pc, #16]	@ (80035a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	0801211c 	.word	0x0801211c

080035ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035b0:	f7ff ffda 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	0adb      	lsrs	r3, r3, #11
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4904      	ldr	r1, [pc, #16]	@ (80035d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	0801211c 	.word	0x0801211c

080035d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035f0:	f7ff f9ee 	bl	80029d0 <HAL_PWREx_GetVoltageRange>
 80035f4:	6178      	str	r0, [r7, #20]
 80035f6:	e014      	b.n	8003622 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035f8:	4b25      	ldr	r3, [pc, #148]	@ (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fc:	4a24      	ldr	r2, [pc, #144]	@ (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003602:	6593      	str	r3, [r2, #88]	@ 0x58
 8003604:	4b22      	ldr	r3, [pc, #136]	@ (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003610:	f7ff f9de 	bl	80029d0 <HAL_PWREx_GetVoltageRange>
 8003614:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b1e      	ldr	r3, [pc, #120]	@ (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	4a1d      	ldr	r2, [pc, #116]	@ (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003620:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003628:	d10b      	bne.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b80      	cmp	r3, #128	@ 0x80
 800362e:	d919      	bls.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2ba0      	cmp	r3, #160	@ 0xa0
 8003634:	d902      	bls.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003636:	2302      	movs	r3, #2
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	e013      	b.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800363c:	2301      	movs	r3, #1
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	e010      	b.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b80      	cmp	r3, #128	@ 0x80
 8003646:	d902      	bls.n	800364e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003648:	2303      	movs	r3, #3
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	e00a      	b.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b80      	cmp	r3, #128	@ 0x80
 8003652:	d102      	bne.n	800365a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003654:	2302      	movs	r3, #2
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	e004      	b.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b70      	cmp	r3, #112	@ 0x70
 800365e:	d101      	bne.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003660:	2301      	movs	r3, #1
 8003662:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003664:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 0207 	bic.w	r2, r3, #7
 800366c:	4909      	ldr	r1, [pc, #36]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003674:	4b07      	ldr	r3, [pc, #28]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	429a      	cmp	r2, r3
 8003680:	d001      	beq.n	8003686 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000
 8003694:	40022000 	.word	0x40022000

08003698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a0:	2300      	movs	r3, #0
 80036a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a4:	2300      	movs	r3, #0
 80036a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d041      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036bc:	d02a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036c2:	d824      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036c8:	d008      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ce:	d81e      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036d8:	d010      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036da:	e018      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036dc:	4b86      	ldr	r3, [pc, #536]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a85      	ldr	r2, [pc, #532]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036e8:	e015      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fabb 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036fa:	e00c      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3320      	adds	r3, #32
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fba6 	bl	8003e54 <RCCEx_PLLSAI2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	74fb      	strb	r3, [r7, #19]
      break;
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800371c:	4b76      	ldr	r3, [pc, #472]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003722:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372a:	4973      	ldr	r1, [pc, #460]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003732:	e001      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d041      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003748:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800374c:	d02a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800374e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003752:	d824      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003754:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003758:	d008      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800375a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800375e:	d81e      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003768:	d010      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800376a:	e018      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800376c:	4b62      	ldr	r3, [pc, #392]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a61      	ldr	r2, [pc, #388]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003776:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003778:	e015      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fa73 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800378a:	e00c      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3320      	adds	r3, #32
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fb5e 	bl	8003e54 <RCCEx_PLLSAI2_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	74fb      	strb	r3, [r7, #19]
      break;
 80037a2:	e000      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037ac:	4b52      	ldr	r3, [pc, #328]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ba:	494f      	ldr	r1, [pc, #316]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037c2:	e001      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a0 	beq.w	8003916 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037da:	4b47      	ldr	r3, [pc, #284]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037ea:	2300      	movs	r3, #0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00d      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f0:	4b41      	ldr	r3, [pc, #260]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f4:	4a40      	ldr	r2, [pc, #256]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80037fc:	4b3e      	ldr	r3, [pc, #248]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003808:	2301      	movs	r3, #1
 800380a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380c:	4b3b      	ldr	r3, [pc, #236]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a3a      	ldr	r2, [pc, #232]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003816:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003818:	f7fe fd7c 	bl	8002314 <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800381e:	e009      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fe fd78 	bl	8002314 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	74fb      	strb	r3, [r7, #19]
        break;
 8003832:	e005      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003834:	4b31      	ldr	r3, [pc, #196]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ef      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d15c      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003846:	4b2c      	ldr	r3, [pc, #176]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003850:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01f      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	d019      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003864:	4b24      	ldr	r3, [pc, #144]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800386e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003870:	4b21      	ldr	r3, [pc, #132]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003876:	4a20      	ldr	r2, [pc, #128]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003880:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003886:	4a1c      	ldr	r2, [pc, #112]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003890:	4a19      	ldr	r2, [pc, #100]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fe fd37 	bl	8002314 <HAL_GetTick>
 80038a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a8:	e00b      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fe fd33 	bl	8002314 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d902      	bls.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	74fb      	strb	r3, [r7, #19]
            break;
 80038c0:	e006      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ec      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038d6:	4b08      	ldr	r3, [pc, #32]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038e6:	4904      	ldr	r1, [pc, #16]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038ee:	e009      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	74bb      	strb	r3, [r7, #18]
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003904:	7c7b      	ldrb	r3, [r7, #17]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390a:	4b9e      	ldr	r3, [pc, #632]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390e:	4a9d      	ldr	r2, [pc, #628]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003914:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003922:	4b98      	ldr	r3, [pc, #608]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003928:	f023 0203 	bic.w	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	4994      	ldr	r1, [pc, #592]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003944:	4b8f      	ldr	r3, [pc, #572]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394a:	f023 020c 	bic.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	498c      	ldr	r1, [pc, #560]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003966:	4b87      	ldr	r3, [pc, #540]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	4983      	ldr	r1, [pc, #524]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003988:	4b7e      	ldr	r3, [pc, #504]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	497b      	ldr	r1, [pc, #492]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039aa:	4b76      	ldr	r3, [pc, #472]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b8:	4972      	ldr	r1, [pc, #456]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039da:	496a      	ldr	r1, [pc, #424]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ee:	4b65      	ldr	r3, [pc, #404]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fc:	4961      	ldr	r1, [pc, #388]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a10:	4b5c      	ldr	r3, [pc, #368]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1e:	4959      	ldr	r1, [pc, #356]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a32:	4b54      	ldr	r3, [pc, #336]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a40:	4950      	ldr	r1, [pc, #320]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a54:	4b4b      	ldr	r3, [pc, #300]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a62:	4948      	ldr	r1, [pc, #288]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a76:	4b43      	ldr	r3, [pc, #268]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	493f      	ldr	r1, [pc, #252]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d028      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a98:	4b3a      	ldr	r3, [pc, #232]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa6:	4937      	ldr	r1, [pc, #220]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab8:	4b32      	ldr	r3, [pc, #200]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a31      	ldr	r2, [pc, #196]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ac2:	60d3      	str	r3, [r2, #12]
 8003ac4:	e011      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ace:	d10c      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f8c8 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d028      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003af6:	4b23      	ldr	r3, [pc, #140]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	491f      	ldr	r1, [pc, #124]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b14:	d106      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b16:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b20:	60d3      	str	r3, [r2, #12]
 8003b22:	e011      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f899 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02b      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b62:	4908      	ldr	r1, [pc, #32]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b72:	d109      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b74:	4b03      	ldr	r3, [pc, #12]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a02      	ldr	r2, [pc, #8]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b7e:	60d3      	str	r3, [r2, #12]
 8003b80:	e014      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b90:	d10c      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2101      	movs	r1, #1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f867 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba2:	7cfb      	ldrb	r3, [r7, #19]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d02f      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bc6:	4928      	ldr	r1, [pc, #160]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bd6:	d10d      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	2102      	movs	r1, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f844 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d014      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bee:	7cfb      	ldrb	r3, [r7, #19]
 8003bf0:	74bb      	strb	r3, [r7, #18]
 8003bf2:	e011      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3320      	adds	r3, #32
 8003c02:	2102      	movs	r1, #2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f925 	bl	8003e54 <RCCEx_PLLSAI2_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c24:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c32:	490d      	ldr	r1, [pc, #52]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c46:	4b08      	ldr	r3, [pc, #32]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c56:	4904      	ldr	r1, [pc, #16]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000

08003c6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c7a:	4b75      	ldr	r3, [pc, #468]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d018      	beq.n	8003cb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c86:	4b72      	ldr	r3, [pc, #456]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0203 	and.w	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10d      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
       ||
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
       ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d047      	beq.n	8003d42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	e044      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d018      	beq.n	8003cf2 <RCCEx_PLLSAI1_Config+0x86>
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d825      	bhi.n	8003d10 <RCCEx_PLLSAI1_Config+0xa4>
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d002      	beq.n	8003cce <RCCEx_PLLSAI1_Config+0x62>
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d009      	beq.n	8003ce0 <RCCEx_PLLSAI1_Config+0x74>
 8003ccc:	e020      	b.n	8003d10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cce:	4b60      	ldr	r3, [pc, #384]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11d      	bne.n	8003d16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cde:	e01a      	b.n	8003d16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d116      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf0:	e013      	b.n	8003d1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cf2:	4b57      	ldr	r3, [pc, #348]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cfe:	4b54      	ldr	r3, [pc, #336]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d0e:	e006      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	e004      	b.n	8003d20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d26:	4b4a      	ldr	r3, [pc, #296]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	4944      	ldr	r1, [pc, #272]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d17d      	bne.n	8003e44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d48:	4b41      	ldr	r3, [pc, #260]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a40      	ldr	r2, [pc, #256]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d54:	f7fe fade 	bl	8002314 <HAL_GetTick>
 8003d58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d5a:	e009      	b.n	8003d70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d5c:	f7fe fada 	bl	8002314 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d902      	bls.n	8003d70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d6e:	e005      	b.n	8003d7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d70:	4b37      	ldr	r3, [pc, #220]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ef      	bne.n	8003d5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d160      	bne.n	8003e44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d111      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d88:	4b31      	ldr	r3, [pc, #196]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6892      	ldr	r2, [r2, #8]
 8003d98:	0211      	lsls	r1, r2, #8
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	0912      	lsrs	r2, r2, #4
 8003da0:	0452      	lsls	r2, r2, #17
 8003da2:	430a      	orrs	r2, r1
 8003da4:	492a      	ldr	r1, [pc, #168]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	610b      	str	r3, [r1, #16]
 8003daa:	e027      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d112      	bne.n	8003dd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db2:	4b27      	ldr	r3, [pc, #156]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6892      	ldr	r2, [r2, #8]
 8003dc2:	0211      	lsls	r1, r2, #8
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6912      	ldr	r2, [r2, #16]
 8003dc8:	0852      	lsrs	r2, r2, #1
 8003dca:	3a01      	subs	r2, #1
 8003dcc:	0552      	lsls	r2, r2, #21
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	491f      	ldr	r1, [pc, #124]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	610b      	str	r3, [r1, #16]
 8003dd6:	e011      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003de0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6892      	ldr	r2, [r2, #8]
 8003de8:	0211      	lsls	r1, r2, #8
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6952      	ldr	r2, [r2, #20]
 8003dee:	0852      	lsrs	r2, r2, #1
 8003df0:	3a01      	subs	r2, #1
 8003df2:	0652      	lsls	r2, r2, #25
 8003df4:	430a      	orrs	r2, r1
 8003df6:	4916      	ldr	r1, [pc, #88]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dfc:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a13      	ldr	r2, [pc, #76]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fe fa84 	bl	8002314 <HAL_GetTick>
 8003e0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e0e:	e009      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e10:	f7fe fa80 	bl	8002314 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	73fb      	strb	r3, [r7, #15]
          break;
 8003e22:	e005      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e24:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ef      	beq.n	8003e10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	4904      	ldr	r1, [pc, #16]	@ (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000

08003e54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e62:	4b6a      	ldr	r3, [pc, #424]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e6e:	4b67      	ldr	r3, [pc, #412]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0203 	and.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d10d      	bne.n	8003e9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
       ||
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e86:	4b61      	ldr	r3, [pc, #388]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
       ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d047      	beq.n	8003f2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e044      	b.n	8003f2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d018      	beq.n	8003eda <RCCEx_PLLSAI2_Config+0x86>
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d825      	bhi.n	8003ef8 <RCCEx_PLLSAI2_Config+0xa4>
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d002      	beq.n	8003eb6 <RCCEx_PLLSAI2_Config+0x62>
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d009      	beq.n	8003ec8 <RCCEx_PLLSAI2_Config+0x74>
 8003eb4:	e020      	b.n	8003ef8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eb6:	4b55      	ldr	r3, [pc, #340]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d11d      	bne.n	8003efe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec6:	e01a      	b.n	8003efe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ec8:	4b50      	ldr	r3, [pc, #320]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d116      	bne.n	8003f02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed8:	e013      	b.n	8003f02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eda:	4b4c      	ldr	r3, [pc, #304]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ee6:	4b49      	ldr	r3, [pc, #292]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ef6:	e006      	b.n	8003f06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      break;
 8003efc:	e004      	b.n	8003f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	430b      	orrs	r3, r1
 8003f24:	4939      	ldr	r1, [pc, #228]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d167      	bne.n	8004000 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f30:	4b36      	ldr	r3, [pc, #216]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a35      	ldr	r2, [pc, #212]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3c:	f7fe f9ea 	bl	8002314 <HAL_GetTick>
 8003f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f42:	e009      	b.n	8003f58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f44:	f7fe f9e6 	bl	8002314 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d902      	bls.n	8003f58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	73fb      	strb	r3, [r7, #15]
        break;
 8003f56:	e005      	b.n	8003f64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f58:	4b2c      	ldr	r3, [pc, #176]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ef      	bne.n	8003f44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d14a      	bne.n	8004000 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d111      	bne.n	8003f94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f70:	4b26      	ldr	r3, [pc, #152]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6892      	ldr	r2, [r2, #8]
 8003f80:	0211      	lsls	r1, r2, #8
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68d2      	ldr	r2, [r2, #12]
 8003f86:	0912      	lsrs	r2, r2, #4
 8003f88:	0452      	lsls	r2, r2, #17
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	491f      	ldr	r1, [pc, #124]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	614b      	str	r3, [r1, #20]
 8003f92:	e011      	b.n	8003fb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f94:	4b1d      	ldr	r3, [pc, #116]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6892      	ldr	r2, [r2, #8]
 8003fa4:	0211      	lsls	r1, r2, #8
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6912      	ldr	r2, [r2, #16]
 8003faa:	0852      	lsrs	r2, r2, #1
 8003fac:	3a01      	subs	r2, #1
 8003fae:	0652      	lsls	r2, r2, #25
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	4916      	ldr	r1, [pc, #88]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fb8:	4b14      	ldr	r3, [pc, #80]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a13      	ldr	r2, [pc, #76]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fe f9a6 	bl	8002314 <HAL_GetTick>
 8003fc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fca:	e009      	b.n	8003fe0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fcc:	f7fe f9a2 	bl	8002314 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d902      	bls.n	8003fe0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	73fb      	strb	r3, [r7, #15]
          break;
 8003fde:	e005      	b.n	8003fec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ef      	beq.n	8003fcc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ff2:	4b06      	ldr	r3, [pc, #24]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4904      	ldr	r1, [pc, #16]	@ (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000

08004010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e095      	b.n	800414e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d108      	bne.n	800403c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004032:	d009      	beq.n	8004048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	61da      	str	r2, [r3, #28]
 800403a:	e005      	b.n	8004048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd fe1e 	bl	8001ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800407e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004088:	d902      	bls.n	8004090 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	e002      	b.n	8004096 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004094:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800409e:	d007      	beq.n	80040b0 <HAL_SPI_Init+0xa0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040a8:	d002      	beq.n	80040b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f2:	ea42 0103 	orr.w	r1, r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	0c1b      	lsrs	r3, r3, #16
 800410c:	f003 0204 	and.w	r2, r3, #4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800412c:	ea42 0103 	orr.w	r1, r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b088      	sub	sp, #32
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004166:	f7fe f8d5 	bl	8002314 <HAL_GetTick>
 800416a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	d001      	beq.n	8004180 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
 800417e:	e15c      	b.n	800443a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_SPI_Transmit+0x36>
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e154      	b.n	800443a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_SPI_Transmit+0x48>
 800419a:	2302      	movs	r3, #2
 800419c:	e14d      	b.n	800443a <HAL_SPI_Transmit+0x2e4>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2203      	movs	r2, #3
 80041aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f0:	d10f      	bne.n	8004212 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004210:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421c:	2b40      	cmp	r3, #64	@ 0x40
 800421e:	d007      	beq.n	8004230 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800422e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004238:	d952      	bls.n	80042e0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_SPI_Transmit+0xf2>
 8004242:	8b7b      	ldrh	r3, [r7, #26]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d145      	bne.n	80042d4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424c:	881a      	ldrh	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004258:	1c9a      	adds	r2, r3, #2
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800426c:	e032      	b.n	80042d4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	d112      	bne.n	80042a2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	881a      	ldrh	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428c:	1c9a      	adds	r2, r3, #2
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042a0:	e018      	b.n	80042d4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042a2:	f7fe f837 	bl	8002314 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d803      	bhi.n	80042ba <HAL_SPI_Transmit+0x164>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d102      	bne.n	80042c0 <HAL_SPI_Transmit+0x16a>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d109      	bne.n	80042d4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0b2      	b.n	800443a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1c7      	bne.n	800426e <HAL_SPI_Transmit+0x118>
 80042de:	e083      	b.n	80043e8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_SPI_Transmit+0x198>
 80042e8:	8b7b      	ldrh	r3, [r7, #26]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d177      	bne.n	80043de <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d912      	bls.n	800431e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b02      	subs	r3, #2
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800431c:	e05f      	b.n	80043de <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	7812      	ldrb	r2, [r2, #0]
 800432a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004344:	e04b      	b.n	80043de <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b02      	cmp	r3, #2
 8004352:	d12b      	bne.n	80043ac <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d912      	bls.n	8004384 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004362:	881a      	ldrh	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436e:	1c9a      	adds	r2, r3, #2
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b02      	subs	r3, #2
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004382:	e02c      	b.n	80043de <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	7812      	ldrb	r2, [r2, #0]
 8004390:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043aa:	e018      	b.n	80043de <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ac:	f7fd ffb2 	bl	8002314 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d803      	bhi.n	80043c4 <HAL_SPI_Transmit+0x26e>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d102      	bne.n	80043ca <HAL_SPI_Transmit+0x274>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e02d      	b.n	800443a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ae      	bne.n	8004346 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	6839      	ldr	r1, [r7, #0]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f947 	bl	8004680 <SPI_EndRxTxTransaction>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004438:	2300      	movs	r3, #0
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004454:	f7fd ff5e 	bl	8002314 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	4413      	add	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004464:	f7fd ff56 	bl	8002314 <HAL_GetTick>
 8004468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800446a:	4b39      	ldr	r3, [pc, #228]	@ (8004550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	015b      	lsls	r3, r3, #5
 8004470:	0d1b      	lsrs	r3, r3, #20
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447a:	e054      	b.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d050      	beq.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004484:	f7fd ff46 	bl	8002314 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	429a      	cmp	r2, r3
 8004492:	d902      	bls.n	800449a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13d      	bne.n	8004516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044b2:	d111      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044bc:	d004      	beq.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c6:	d107      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e0:	d10f      	bne.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e017      	b.n	8004546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3b01      	subs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d19b      	bne.n	800447c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000200 	.word	0x20000200

08004554 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	@ 0x28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004566:	f7fd fed5 	bl	8002314 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	4413      	add	r3, r2
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004576:	f7fd fecd 	bl	8002314 <HAL_GetTick>
 800457a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004584:	4b3d      	ldr	r3, [pc, #244]	@ (800467c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00da      	lsls	r2, r3, #3
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	0d1b      	lsrs	r3, r3, #20
 8004594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800459c:	e060      	b.n	8004660 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045a4:	d107      	bne.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d050      	beq.n	8004660 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045be:	f7fd fea9 	bl	8002314 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d902      	bls.n	80045d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d13d      	bne.n	8004650 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ec:	d111      	bne.n	8004612 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f6:	d004      	beq.n	8004602 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004600:	d107      	bne.n	8004612 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004610:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800461a:	d10f      	bne.n	800463c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800463a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e010      	b.n	8004672 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3b01      	subs	r3, #1
 800465e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4013      	ands	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d196      	bne.n	800459e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3728      	adds	r7, #40	@ 0x28
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000200 	.word	0x20000200

08004680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2200      	movs	r2, #0
 8004694:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7ff ff5b 	bl	8004554 <SPI_WaitFifoStateUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a8:	f043 0220 	orr.w	r2, r3, #32
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e027      	b.n	8004704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2180      	movs	r1, #128	@ 0x80
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff fec0 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e014      	b.n	8004704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff ff34 	bl	8004554 <SPI_WaitFifoStateUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e000      	b.n	8004704 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e040      	b.n	80047a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fd fcfa 	bl	8002128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2224      	movs	r2, #36	@ 0x24
 8004738:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fea6 	bl	80054a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fbeb 	bl	8004f34 <UART_SetConfig>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e01b      	b.n	80047a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 ff25 	bl	80055e8 <UART_CheckIdleState>
 800479e:	4603      	mov	r3, r0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b08b      	sub	sp, #44	@ 0x2c
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d147      	bne.n	800484e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_UART_Transmit_IT+0x22>
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e040      	b.n	8004850 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2221      	movs	r2, #33	@ 0x21
 80047f6:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004800:	d107      	bne.n	8004812 <HAL_UART_Transmit_IT+0x6a>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d103      	bne.n	8004812 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a13      	ldr	r2, [pc, #76]	@ (800485c <HAL_UART_Transmit_IT+0xb4>)
 800480e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004810:	e002      	b.n	8004818 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a12      	ldr	r2, [pc, #72]	@ (8004860 <HAL_UART_Transmit_IT+0xb8>)
 8004816:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	623b      	str	r3, [r7, #32]
 8004838:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	69f9      	ldr	r1, [r7, #28]
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	61bb      	str	r3, [r7, #24]
   return(result);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e6      	bne.n	8004818 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	372c      	adds	r7, #44	@ 0x2c
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	08005b4b 	.word	0x08005b4b
 8004860:	08005a95 	.word	0x08005a95

08004864 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	@ 0x28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004878:	2b20      	cmp	r3, #32
 800487a:	d137      	bne.n	80048ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_UART_Receive_IT+0x24>
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e030      	b.n	80048ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a18      	ldr	r2, [pc, #96]	@ (80048f8 <HAL_UART_Receive_IT+0x94>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d01f      	beq.n	80048dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d018      	beq.n	80048dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	613b      	str	r3, [r7, #16]
   return(result);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	623b      	str	r3, [r7, #32]
 80048ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	6a3a      	ldr	r2, [r7, #32]
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	461a      	mov	r2, r3
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 ff96 	bl	8005814 <UART_Start_Receive_IT>
 80048e8:	4603      	mov	r3, r0
 80048ea:	e000      	b.n	80048ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3728      	adds	r7, #40	@ 0x28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40008000 	.word	0x40008000

080048fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b0ba      	sub	sp, #232	@ 0xe8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004922:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004926:	f640 030f 	movw	r3, #2063	@ 0x80f
 800492a:	4013      	ands	r3, r2
 800492c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d115      	bne.n	8004964 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00f      	beq.n	8004964 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 82ca 	beq.w	8004eee <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
      }
      return;
 8004962:	e2c4      	b.n	8004eee <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8117 	beq.w	8004b9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800496e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800497a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800497e:	4b85      	ldr	r3, [pc, #532]	@ (8004b94 <HAL_UART_IRQHandler+0x298>)
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 810a 	beq.w	8004b9c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d011      	beq.n	80049b8 <HAL_UART_IRQHandler+0xbc>
 8004994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2201      	movs	r2, #1
 80049a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d011      	beq.n	80049e8 <HAL_UART_IRQHandler+0xec>
 80049c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00b      	beq.n	80049e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2202      	movs	r2, #2
 80049d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049de:	f043 0204 	orr.w	r2, r3, #4
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d011      	beq.n	8004a18 <HAL_UART_IRQHandler+0x11c>
 80049f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2204      	movs	r2, #4
 8004a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a0e:	f043 0202 	orr.w	r2, r3, #2
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d017      	beq.n	8004a54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d105      	bne.n	8004a3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2208      	movs	r2, #8
 8004a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a4a:	f043 0208 	orr.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d012      	beq.n	8004a86 <HAL_UART_IRQHandler+0x18a>
 8004a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00c      	beq.n	8004a86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a7c:	f043 0220 	orr.w	r2, r3, #32
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8230 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ace:	2b40      	cmp	r3, #64	@ 0x40
 8004ad0:	d005      	beq.n	8004ade <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ad6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d04f      	beq.n	8004b7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 ff5e 	bl	80059a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aee:	2b40      	cmp	r3, #64	@ 0x40
 8004af0:	d141      	bne.n	8004b76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3308      	adds	r3, #8
 8004af8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3308      	adds	r3, #8
 8004b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1d9      	bne.n	8004af2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d013      	beq.n	8004b6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4a:	4a13      	ldr	r2, [pc, #76]	@ (8004b98 <HAL_UART_IRQHandler+0x29c>)
 8004b4c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fd39 	bl	80025ca <HAL_DMA_Abort_IT>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d017      	beq.n	8004b8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b68:	4610      	mov	r0, r2
 8004b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	e00f      	b.n	8004b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f9ca 	bl	8004f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	e00b      	b.n	8004b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9c6 	bl	8004f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	e007      	b.n	8004b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9c2 	bl	8004f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004b8c:	e1b1      	b.n	8004ef2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8e:	bf00      	nop
    return;
 8004b90:	e1af      	b.n	8004ef2 <HAL_UART_IRQHandler+0x5f6>
 8004b92:	bf00      	nop
 8004b94:	04000120 	.word	0x04000120
 8004b98:	08005a69 	.word	0x08005a69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	f040 816a 	bne.w	8004e7a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8163 	beq.w	8004e7a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 815c 	beq.w	8004e7a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2210      	movs	r2, #16
 8004bc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd4:	2b40      	cmp	r3, #64	@ 0x40
 8004bd6:	f040 80d4 	bne.w	8004d82 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80ad 	beq.w	8004d4a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	f080 80a5 	bcs.w	8004d4a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 8086 	bne.w	8004d28 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1da      	bne.n	8004c1c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e1      	bne.n	8004c66 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ccc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e3      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf8:	f023 0310 	bic.w	r3, r3, #16
 8004cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e4      	bne.n	8004ce8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd fc13 	bl	800254e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	4619      	mov	r1, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8ea 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004d48:	e0d5      	b.n	8004ef6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d54:	429a      	cmp	r2, r3
 8004d56:	f040 80ce 	bne.w	8004ef6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	f040 80c5 	bne.w	8004ef6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d78:	4619      	mov	r1, r3
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f8ce 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
      return;
 8004d80:	e0b9      	b.n	8004ef6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80ab 	beq.w	8004efa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a6 	beq.w	8004efa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e4      	bne.n	8004dae <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	623b      	str	r3, [r7, #32]
   return(result);
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3308      	adds	r3, #8
 8004e04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e08:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e3      	bne.n	8004de4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f023 0310 	bic.w	r3, r3, #16
 8004e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	69b9      	ldr	r1, [r7, #24]
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e4      	bne.n	8004e30 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f852 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e78:	e03f      	b.n	8004efa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00e      	beq.n	8004ea4 <HAL_UART_IRQHandler+0x5a8>
 8004e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004e9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f001 f89b 	bl	8005fd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ea2:	e02d      	b.n	8004f00 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00e      	beq.n	8004ece <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01c      	beq.n	8004efe <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
    }
    return;
 8004ecc:	e017      	b.n	8004efe <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d012      	beq.n	8004f00 <HAL_UART_IRQHandler+0x604>
 8004eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00c      	beq.n	8004f00 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fe8f 	bl	8005c0a <UART_EndTransmit_IT>
    return;
 8004eec:	e008      	b.n	8004f00 <HAL_UART_IRQHandler+0x604>
      return;
 8004eee:	bf00      	nop
 8004ef0:	e006      	b.n	8004f00 <HAL_UART_IRQHandler+0x604>
    return;
 8004ef2:	bf00      	nop
 8004ef4:	e004      	b.n	8004f00 <HAL_UART_IRQHandler+0x604>
      return;
 8004ef6:	bf00      	nop
 8004ef8:	e002      	b.n	8004f00 <HAL_UART_IRQHandler+0x604>
      return;
 8004efa:	bf00      	nop
 8004efc:	e000      	b.n	8004f00 <HAL_UART_IRQHandler+0x604>
    return;
 8004efe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f00:	37e8      	adds	r7, #232	@ 0xe8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop

08004f08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f38:	b08a      	sub	sp, #40	@ 0x28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4ba4      	ldr	r3, [pc, #656]	@ (80051f4 <UART_SetConfig+0x2c0>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a99      	ldr	r2, [pc, #612]	@ (80051f8 <UART_SetConfig+0x2c4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a90      	ldr	r2, [pc, #576]	@ (80051fc <UART_SetConfig+0x2c8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d126      	bne.n	800500c <UART_SetConfig+0xd8>
 8004fbe:	4b90      	ldr	r3, [pc, #576]	@ (8005200 <UART_SetConfig+0x2cc>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d81b      	bhi.n	8005004 <UART_SetConfig+0xd0>
 8004fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd4 <UART_SetConfig+0xa0>)
 8004fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd2:	bf00      	nop
 8004fd4:	08004fe5 	.word	0x08004fe5
 8004fd8:	08004ff5 	.word	0x08004ff5
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	08004ffd 	.word	0x08004ffd
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fea:	e116      	b.n	800521a <UART_SetConfig+0x2e6>
 8004fec:	2302      	movs	r3, #2
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff2:	e112      	b.n	800521a <UART_SetConfig+0x2e6>
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffa:	e10e      	b.n	800521a <UART_SetConfig+0x2e6>
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005002:	e10a      	b.n	800521a <UART_SetConfig+0x2e6>
 8005004:	2310      	movs	r3, #16
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500a:	e106      	b.n	800521a <UART_SetConfig+0x2e6>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a7c      	ldr	r2, [pc, #496]	@ (8005204 <UART_SetConfig+0x2d0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d138      	bne.n	8005088 <UART_SetConfig+0x154>
 8005016:	4b7a      	ldr	r3, [pc, #488]	@ (8005200 <UART_SetConfig+0x2cc>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501c:	f003 030c 	and.w	r3, r3, #12
 8005020:	2b0c      	cmp	r3, #12
 8005022:	d82d      	bhi.n	8005080 <UART_SetConfig+0x14c>
 8005024:	a201      	add	r2, pc, #4	@ (adr r2, 800502c <UART_SetConfig+0xf8>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005061 	.word	0x08005061
 8005030:	08005081 	.word	0x08005081
 8005034:	08005081 	.word	0x08005081
 8005038:	08005081 	.word	0x08005081
 800503c:	08005071 	.word	0x08005071
 8005040:	08005081 	.word	0x08005081
 8005044:	08005081 	.word	0x08005081
 8005048:	08005081 	.word	0x08005081
 800504c:	08005069 	.word	0x08005069
 8005050:	08005081 	.word	0x08005081
 8005054:	08005081 	.word	0x08005081
 8005058:	08005081 	.word	0x08005081
 800505c:	08005079 	.word	0x08005079
 8005060:	2300      	movs	r3, #0
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005066:	e0d8      	b.n	800521a <UART_SetConfig+0x2e6>
 8005068:	2302      	movs	r3, #2
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506e:	e0d4      	b.n	800521a <UART_SetConfig+0x2e6>
 8005070:	2304      	movs	r3, #4
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005076:	e0d0      	b.n	800521a <UART_SetConfig+0x2e6>
 8005078:	2308      	movs	r3, #8
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507e:	e0cc      	b.n	800521a <UART_SetConfig+0x2e6>
 8005080:	2310      	movs	r3, #16
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005086:	e0c8      	b.n	800521a <UART_SetConfig+0x2e6>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a5e      	ldr	r2, [pc, #376]	@ (8005208 <UART_SetConfig+0x2d4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d125      	bne.n	80050de <UART_SetConfig+0x1aa>
 8005092:	4b5b      	ldr	r3, [pc, #364]	@ (8005200 <UART_SetConfig+0x2cc>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005098:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800509c:	2b30      	cmp	r3, #48	@ 0x30
 800509e:	d016      	beq.n	80050ce <UART_SetConfig+0x19a>
 80050a0:	2b30      	cmp	r3, #48	@ 0x30
 80050a2:	d818      	bhi.n	80050d6 <UART_SetConfig+0x1a2>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d00a      	beq.n	80050be <UART_SetConfig+0x18a>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d814      	bhi.n	80050d6 <UART_SetConfig+0x1a2>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <UART_SetConfig+0x182>
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d008      	beq.n	80050c6 <UART_SetConfig+0x192>
 80050b4:	e00f      	b.n	80050d6 <UART_SetConfig+0x1a2>
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050bc:	e0ad      	b.n	800521a <UART_SetConfig+0x2e6>
 80050be:	2302      	movs	r3, #2
 80050c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c4:	e0a9      	b.n	800521a <UART_SetConfig+0x2e6>
 80050c6:	2304      	movs	r3, #4
 80050c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050cc:	e0a5      	b.n	800521a <UART_SetConfig+0x2e6>
 80050ce:	2308      	movs	r3, #8
 80050d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d4:	e0a1      	b.n	800521a <UART_SetConfig+0x2e6>
 80050d6:	2310      	movs	r3, #16
 80050d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050dc:	e09d      	b.n	800521a <UART_SetConfig+0x2e6>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a4a      	ldr	r2, [pc, #296]	@ (800520c <UART_SetConfig+0x2d8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d125      	bne.n	8005134 <UART_SetConfig+0x200>
 80050e8:	4b45      	ldr	r3, [pc, #276]	@ (8005200 <UART_SetConfig+0x2cc>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80050f4:	d016      	beq.n	8005124 <UART_SetConfig+0x1f0>
 80050f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050f8:	d818      	bhi.n	800512c <UART_SetConfig+0x1f8>
 80050fa:	2b80      	cmp	r3, #128	@ 0x80
 80050fc:	d00a      	beq.n	8005114 <UART_SetConfig+0x1e0>
 80050fe:	2b80      	cmp	r3, #128	@ 0x80
 8005100:	d814      	bhi.n	800512c <UART_SetConfig+0x1f8>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <UART_SetConfig+0x1d8>
 8005106:	2b40      	cmp	r3, #64	@ 0x40
 8005108:	d008      	beq.n	800511c <UART_SetConfig+0x1e8>
 800510a:	e00f      	b.n	800512c <UART_SetConfig+0x1f8>
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005112:	e082      	b.n	800521a <UART_SetConfig+0x2e6>
 8005114:	2302      	movs	r3, #2
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511a:	e07e      	b.n	800521a <UART_SetConfig+0x2e6>
 800511c:	2304      	movs	r3, #4
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005122:	e07a      	b.n	800521a <UART_SetConfig+0x2e6>
 8005124:	2308      	movs	r3, #8
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512a:	e076      	b.n	800521a <UART_SetConfig+0x2e6>
 800512c:	2310      	movs	r3, #16
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005132:	e072      	b.n	800521a <UART_SetConfig+0x2e6>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a35      	ldr	r2, [pc, #212]	@ (8005210 <UART_SetConfig+0x2dc>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d12a      	bne.n	8005194 <UART_SetConfig+0x260>
 800513e:	4b30      	ldr	r3, [pc, #192]	@ (8005200 <UART_SetConfig+0x2cc>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800514c:	d01a      	beq.n	8005184 <UART_SetConfig+0x250>
 800514e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005152:	d81b      	bhi.n	800518c <UART_SetConfig+0x258>
 8005154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005158:	d00c      	beq.n	8005174 <UART_SetConfig+0x240>
 800515a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800515e:	d815      	bhi.n	800518c <UART_SetConfig+0x258>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <UART_SetConfig+0x238>
 8005164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005168:	d008      	beq.n	800517c <UART_SetConfig+0x248>
 800516a:	e00f      	b.n	800518c <UART_SetConfig+0x258>
 800516c:	2300      	movs	r3, #0
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005172:	e052      	b.n	800521a <UART_SetConfig+0x2e6>
 8005174:	2302      	movs	r3, #2
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517a:	e04e      	b.n	800521a <UART_SetConfig+0x2e6>
 800517c:	2304      	movs	r3, #4
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005182:	e04a      	b.n	800521a <UART_SetConfig+0x2e6>
 8005184:	2308      	movs	r3, #8
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800518a:	e046      	b.n	800521a <UART_SetConfig+0x2e6>
 800518c:	2310      	movs	r3, #16
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005192:	e042      	b.n	800521a <UART_SetConfig+0x2e6>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a17      	ldr	r2, [pc, #92]	@ (80051f8 <UART_SetConfig+0x2c4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d13a      	bne.n	8005214 <UART_SetConfig+0x2e0>
 800519e:	4b18      	ldr	r3, [pc, #96]	@ (8005200 <UART_SetConfig+0x2cc>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051ac:	d01a      	beq.n	80051e4 <UART_SetConfig+0x2b0>
 80051ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051b2:	d81b      	bhi.n	80051ec <UART_SetConfig+0x2b8>
 80051b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051b8:	d00c      	beq.n	80051d4 <UART_SetConfig+0x2a0>
 80051ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051be:	d815      	bhi.n	80051ec <UART_SetConfig+0x2b8>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <UART_SetConfig+0x298>
 80051c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c8:	d008      	beq.n	80051dc <UART_SetConfig+0x2a8>
 80051ca:	e00f      	b.n	80051ec <UART_SetConfig+0x2b8>
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d2:	e022      	b.n	800521a <UART_SetConfig+0x2e6>
 80051d4:	2302      	movs	r3, #2
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051da:	e01e      	b.n	800521a <UART_SetConfig+0x2e6>
 80051dc:	2304      	movs	r3, #4
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e2:	e01a      	b.n	800521a <UART_SetConfig+0x2e6>
 80051e4:	2308      	movs	r3, #8
 80051e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ea:	e016      	b.n	800521a <UART_SetConfig+0x2e6>
 80051ec:	2310      	movs	r3, #16
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051f2:	e012      	b.n	800521a <UART_SetConfig+0x2e6>
 80051f4:	efff69f3 	.word	0xefff69f3
 80051f8:	40008000 	.word	0x40008000
 80051fc:	40013800 	.word	0x40013800
 8005200:	40021000 	.word	0x40021000
 8005204:	40004400 	.word	0x40004400
 8005208:	40004800 	.word	0x40004800
 800520c:	40004c00 	.word	0x40004c00
 8005210:	40005000 	.word	0x40005000
 8005214:	2310      	movs	r3, #16
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a9f      	ldr	r2, [pc, #636]	@ (800549c <UART_SetConfig+0x568>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d17a      	bne.n	800531a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005224:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005228:	2b08      	cmp	r3, #8
 800522a:	d824      	bhi.n	8005276 <UART_SetConfig+0x342>
 800522c:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <UART_SetConfig+0x300>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005259 	.word	0x08005259
 8005238:	08005277 	.word	0x08005277
 800523c:	08005261 	.word	0x08005261
 8005240:	08005277 	.word	0x08005277
 8005244:	08005267 	.word	0x08005267
 8005248:	08005277 	.word	0x08005277
 800524c:	08005277 	.word	0x08005277
 8005250:	08005277 	.word	0x08005277
 8005254:	0800526f 	.word	0x0800526f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005258:	f7fe f992 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 800525c:	61f8      	str	r0, [r7, #28]
        break;
 800525e:	e010      	b.n	8005282 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005260:	4b8f      	ldr	r3, [pc, #572]	@ (80054a0 <UART_SetConfig+0x56c>)
 8005262:	61fb      	str	r3, [r7, #28]
        break;
 8005264:	e00d      	b.n	8005282 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005266:	f7fe f8f3 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800526a:	61f8      	str	r0, [r7, #28]
        break;
 800526c:	e009      	b.n	8005282 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800526e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005272:	61fb      	str	r3, [r7, #28]
        break;
 8005274:	e005      	b.n	8005282 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80fb 	beq.w	8005480 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	4413      	add	r3, r2
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	429a      	cmp	r2, r3
 8005298:	d305      	bcc.n	80052a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d903      	bls.n	80052ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052ac:	e0e8      	b.n	8005480 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	2200      	movs	r2, #0
 80052b2:	461c      	mov	r4, r3
 80052b4:	4615      	mov	r5, r2
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	022b      	lsls	r3, r5, #8
 80052c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80052c4:	0222      	lsls	r2, r4, #8
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	6849      	ldr	r1, [r1, #4]
 80052ca:	0849      	lsrs	r1, r1, #1
 80052cc:	2000      	movs	r0, #0
 80052ce:	4688      	mov	r8, r1
 80052d0:	4681      	mov	r9, r0
 80052d2:	eb12 0a08 	adds.w	sl, r2, r8
 80052d6:	eb43 0b09 	adc.w	fp, r3, r9
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e8:	4650      	mov	r0, sl
 80052ea:	4659      	mov	r1, fp
 80052ec:	f7fa ffd8 	bl	80002a0 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4613      	mov	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052fe:	d308      	bcc.n	8005312 <UART_SetConfig+0x3de>
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005306:	d204      	bcs.n	8005312 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	60da      	str	r2, [r3, #12]
 8005310:	e0b6      	b.n	8005480 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005318:	e0b2      	b.n	8005480 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005322:	d15e      	bne.n	80053e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005324:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005328:	2b08      	cmp	r3, #8
 800532a:	d828      	bhi.n	800537e <UART_SetConfig+0x44a>
 800532c:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <UART_SetConfig+0x400>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005359 	.word	0x08005359
 8005338:	08005361 	.word	0x08005361
 800533c:	08005369 	.word	0x08005369
 8005340:	0800537f 	.word	0x0800537f
 8005344:	0800536f 	.word	0x0800536f
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800537f 	.word	0x0800537f
 8005350:	0800537f 	.word	0x0800537f
 8005354:	08005377 	.word	0x08005377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005358:	f7fe f912 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 800535c:	61f8      	str	r0, [r7, #28]
        break;
 800535e:	e014      	b.n	800538a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005360:	f7fe f924 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8005364:	61f8      	str	r0, [r7, #28]
        break;
 8005366:	e010      	b.n	800538a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005368:	4b4d      	ldr	r3, [pc, #308]	@ (80054a0 <UART_SetConfig+0x56c>)
 800536a:	61fb      	str	r3, [r7, #28]
        break;
 800536c:	e00d      	b.n	800538a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7fe f86f 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8005372:	61f8      	str	r0, [r7, #28]
        break;
 8005374:	e009      	b.n	800538a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800537a:	61fb      	str	r3, [r7, #28]
        break;
 800537c:	e005      	b.n	800538a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d077      	beq.n	8005480 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	005a      	lsls	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	441a      	add	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b0f      	cmp	r3, #15
 80053aa:	d916      	bls.n	80053da <UART_SetConfig+0x4a6>
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b2:	d212      	bcs.n	80053da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f023 030f 	bic.w	r3, r3, #15
 80053bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	8afb      	ldrh	r3, [r7, #22]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	8afa      	ldrh	r2, [r7, #22]
 80053d6:	60da      	str	r2, [r3, #12]
 80053d8:	e052      	b.n	8005480 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053e0:	e04e      	b.n	8005480 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d827      	bhi.n	800543a <UART_SetConfig+0x506>
 80053ea:	a201      	add	r2, pc, #4	@ (adr r2, 80053f0 <UART_SetConfig+0x4bc>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	0800543b 	.word	0x0800543b
 8005400:	0800542b 	.word	0x0800542b
 8005404:	0800543b 	.word	0x0800543b
 8005408:	0800543b 	.word	0x0800543b
 800540c:	0800543b 	.word	0x0800543b
 8005410:	08005433 	.word	0x08005433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7fe f8b4 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8005418:	61f8      	str	r0, [r7, #28]
        break;
 800541a:	e014      	b.n	8005446 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7fe f8c6 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8005420:	61f8      	str	r0, [r7, #28]
        break;
 8005422:	e010      	b.n	8005446 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005424:	4b1e      	ldr	r3, [pc, #120]	@ (80054a0 <UART_SetConfig+0x56c>)
 8005426:	61fb      	str	r3, [r7, #28]
        break;
 8005428:	e00d      	b.n	8005446 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542a:	f7fe f811 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800542e:	61f8      	str	r0, [r7, #28]
        break;
 8005430:	e009      	b.n	8005446 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005436:	61fb      	str	r3, [r7, #28]
        break;
 8005438:	e005      	b.n	8005446 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005444:	bf00      	nop
    }

    if (pclk != 0U)
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d019      	beq.n	8005480 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	085a      	lsrs	r2, r3, #1
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	441a      	add	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b0f      	cmp	r3, #15
 8005464:	d909      	bls.n	800547a <UART_SetConfig+0x546>
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800546c:	d205      	bcs.n	800547a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60da      	str	r2, [r3, #12]
 8005478:	e002      	b.n	8005480 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800548c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005490:	4618      	mov	r0, r3
 8005492:	3728      	adds	r7, #40	@ 0x28
 8005494:	46bd      	mov	sp, r7
 8005496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800549a:	bf00      	nop
 800549c:	40008000 	.word	0x40008000
 80054a0:	00f42400 	.word	0x00f42400

080054a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01a      	beq.n	80055ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055a2:	d10a      	bne.n	80055ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	605a      	str	r2, [r3, #4]
  }
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b098      	sub	sp, #96	@ 0x60
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055f8:	f7fc fe8c 	bl	8002314 <HAL_GetTick>
 80055fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b08      	cmp	r3, #8
 800560a:	d12e      	bne.n	800566a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800560c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005614:	2200      	movs	r2, #0
 8005616:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f88c 	bl	8005738 <UART_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d021      	beq.n	800566a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800563a:	653b      	str	r3, [r7, #80]	@ 0x50
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005644:	647b      	str	r3, [r7, #68]	@ 0x44
 8005646:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800564a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e6      	bne.n	8005626 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e062      	b.n	8005730 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b04      	cmp	r3, #4
 8005676:	d149      	bne.n	800570c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005678:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005680:	2200      	movs	r2, #0
 8005682:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f856 	bl	8005738 <UART_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d03c      	beq.n	800570c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	623b      	str	r3, [r7, #32]
   return(result);
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3308      	adds	r3, #8
 80056e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056e4:	61fa      	str	r2, [r7, #28]
 80056e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	69b9      	ldr	r1, [r7, #24]
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	617b      	str	r3, [r7, #20]
   return(result);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e011      	b.n	8005730 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3758      	adds	r7, #88	@ 0x58
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	4613      	mov	r3, r2
 8005746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005748:	e04f      	b.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d04b      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005752:	f7fc fddf 	bl	8002314 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <UART_WaitOnFlagUntilTimeout+0x30>
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e04e      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d037      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b80      	cmp	r3, #128	@ 0x80
 800577e:	d034      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b40      	cmp	r3, #64	@ 0x40
 8005784:	d031      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b08      	cmp	r3, #8
 8005792:	d110      	bne.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2208      	movs	r2, #8
 800579a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f8ff 	bl	80059a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2208      	movs	r2, #8
 80057a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e029      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057c4:	d111      	bne.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f8e5 	bl	80059a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e00f      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4013      	ands	r3, r2
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	bf0c      	ite	eq
 80057fa:	2301      	moveq	r3, #1
 80057fc:	2300      	movne	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	429a      	cmp	r2, r3
 8005806:	d0a0      	beq.n	800574a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005814:	b480      	push	{r7}
 8005816:	b097      	sub	sp, #92	@ 0x5c
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	4613      	mov	r3, r2
 8005820:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	88fa      	ldrh	r2, [r7, #6]
 800582c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005846:	d10e      	bne.n	8005866 <UART_Start_Receive_IT+0x52>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d105      	bne.n	800585c <UART_Start_Receive_IT+0x48>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005856:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800585a:	e02d      	b.n	80058b8 <UART_Start_Receive_IT+0xa4>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	22ff      	movs	r2, #255	@ 0xff
 8005860:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005864:	e028      	b.n	80058b8 <UART_Start_Receive_IT+0xa4>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10d      	bne.n	800588a <UART_Start_Receive_IT+0x76>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <UART_Start_Receive_IT+0x6c>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	22ff      	movs	r2, #255	@ 0xff
 800587a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800587e:	e01b      	b.n	80058b8 <UART_Start_Receive_IT+0xa4>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	227f      	movs	r2, #127	@ 0x7f
 8005884:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005888:	e016      	b.n	80058b8 <UART_Start_Receive_IT+0xa4>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005892:	d10d      	bne.n	80058b0 <UART_Start_Receive_IT+0x9c>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <UART_Start_Receive_IT+0x92>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	227f      	movs	r2, #127	@ 0x7f
 80058a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80058a4:	e008      	b.n	80058b8 <UART_Start_Receive_IT+0xa4>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	223f      	movs	r2, #63	@ 0x3f
 80058aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80058ae:	e003      	b.n	80058b8 <UART_Start_Receive_IT+0xa4>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2222      	movs	r2, #34	@ 0x22
 80058c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3308      	adds	r3, #8
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	657b      	str	r3, [r7, #84]	@ 0x54
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3308      	adds	r3, #8
 80058e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80058ea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80058f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e5      	bne.n	80058c8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005904:	d107      	bne.n	8005916 <UART_Start_Receive_IT+0x102>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a21      	ldr	r2, [pc, #132]	@ (8005998 <UART_Start_Receive_IT+0x184>)
 8005912:	669a      	str	r2, [r3, #104]	@ 0x68
 8005914:	e002      	b.n	800591c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a20      	ldr	r2, [pc, #128]	@ (800599c <UART_Start_Receive_IT+0x188>)
 800591a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d019      	beq.n	8005958 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
 8005944:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005948:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e6      	bne.n	8005924 <UART_Start_Receive_IT+0x110>
 8005956:	e018      	b.n	800598a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	613b      	str	r3, [r7, #16]
   return(result);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f043 0320 	orr.w	r3, r3, #32
 800596c:	653b      	str	r3, [r7, #80]	@ 0x50
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005976:	623b      	str	r3, [r7, #32]
 8005978:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	69f9      	ldr	r1, [r7, #28]
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	61bb      	str	r3, [r7, #24]
   return(result);
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e6      	bne.n	8005958 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	375c      	adds	r7, #92	@ 0x5c
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	08005e1d 	.word	0x08005e1d
 800599c:	08005c61 	.word	0x08005c61

080059a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b095      	sub	sp, #84	@ 0x54
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80059c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e6      	bne.n	80059a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3308      	adds	r3, #8
 80059f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e5      	bne.n	80059da <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d118      	bne.n	8005a48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f023 0310 	bic.w	r3, r3, #16
 8005a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6979      	ldr	r1, [r7, #20]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	613b      	str	r3, [r7, #16]
   return(result);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e6      	bne.n	8005a16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a5c:	bf00      	nop
 8005a5e:	3754      	adds	r7, #84	@ 0x54
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff fa3e 	bl	8004f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b08f      	sub	sp, #60	@ 0x3c
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aa0:	2b21      	cmp	r3, #33	@ 0x21
 8005aa2:	d14c      	bne.n	8005b3e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d132      	bne.n	8005b16 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ad0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e6      	bne.n	8005ab0 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005af6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6979      	ldr	r1, [r7, #20]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005b14:	e013      	b.n	8005b3e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005b3e:	bf00      	nop
 8005b40:	373c      	adds	r7, #60	@ 0x3c
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b091      	sub	sp, #68	@ 0x44
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b56:	2b21      	cmp	r3, #33	@ 0x21
 8005b58:	d151      	bne.n	8005bfe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d132      	bne.n	8005bcc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	623b      	str	r3, [r7, #32]
   return(result);
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e6      	bne.n	8005b66 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	69b9      	ldr	r1, [r7, #24]
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e6      	bne.n	8005b98 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005bca:	e018      	b.n	8005bfe <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd4:	881a      	ldrh	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bde:	b292      	uxth	r2, r2
 8005be0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005bfe:	bf00      	nop
 8005c00:	3744      	adds	r7, #68	@ 0x44
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b088      	sub	sp, #32
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c26:	61fb      	str	r3, [r7, #28]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6979      	ldr	r1, [r7, #20]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e6      	bne.n	8005c12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7fc f9c7 	bl	8001fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c56:	bf00      	nop
 8005c58:	3720      	adds	r7, #32
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b09c      	sub	sp, #112	@ 0x70
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c78:	2b22      	cmp	r3, #34	@ 0x22
 8005c7a:	f040 80be 	bne.w	8005dfa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c8c:	b2d9      	uxtb	r1, r3
 8005c8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c98:	400a      	ands	r2, r1
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f040 80a3 	bne.w	8005e0e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ce8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e6      	bne.n	8005cc8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3308      	adds	r3, #8
 8005d18:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e5      	bne.n	8005cfa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a34      	ldr	r2, [pc, #208]	@ (8005e18 <UART_RxISR_8BIT+0x1b8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d01f      	beq.n	8005d8c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d018      	beq.n	8005d8c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	623b      	str	r3, [r7, #32]
   return(result);
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e6      	bne.n	8005d5a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d12e      	bne.n	8005df2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0310 	bic.w	r3, r3, #16
 8005dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	69b9      	ldr	r1, [r7, #24]
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e6      	bne.n	8005d9a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	2b10      	cmp	r3, #16
 8005dd8:	d103      	bne.n	8005de2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2210      	movs	r2, #16
 8005de0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff f896 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005df0:	e00d      	b.n	8005e0e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fc f928 	bl	8002048 <HAL_UART_RxCpltCallback>
}
 8005df8:	e009      	b.n	8005e0e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	8b1b      	ldrh	r3, [r3, #24]
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0208 	orr.w	r2, r2, #8
 8005e0a:	b292      	uxth	r2, r2
 8005e0c:	831a      	strh	r2, [r3, #24]
}
 8005e0e:	bf00      	nop
 8005e10:	3770      	adds	r7, #112	@ 0x70
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40008000 	.word	0x40008000

08005e1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b09c      	sub	sp, #112	@ 0x70
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e34:	2b22      	cmp	r3, #34	@ 0x22
 8005e36:	f040 80be 	bne.w	8005fb6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e48:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005e4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e52:	4013      	ands	r3, r2
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5e:	1c9a      	adds	r2, r3, #2
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f040 80a3 	bne.w	8005fca <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e98:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ea2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ea4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ea8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e6      	bne.n	8005e84 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3308      	adds	r3, #8
 8005ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	f023 0301 	bic.w	r3, r3, #1
 8005ecc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ed6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005edc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e5      	bne.n	8005eb6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a34      	ldr	r2, [pc, #208]	@ (8005fd4 <UART_RxISR_16BIT+0x1b8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d01f      	beq.n	8005f48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d018      	beq.n	8005f48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f36:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e6      	bne.n	8005f16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d12e      	bne.n	8005fae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f023 0310 	bic.w	r3, r3, #16
 8005f6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6979      	ldr	r1, [r7, #20]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	613b      	str	r3, [r7, #16]
   return(result);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e6      	bne.n	8005f56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b10      	cmp	r3, #16
 8005f94:	d103      	bne.n	8005f9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2210      	movs	r2, #16
 8005f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fe ffb8 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fac:	e00d      	b.n	8005fca <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fc f84a 	bl	8002048 <HAL_UART_RxCpltCallback>
}
 8005fb4:	e009      	b.n	8005fca <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	8b1b      	ldrh	r3, [r3, #24]
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0208 	orr.w	r2, r2, #8
 8005fc6:	b292      	uxth	r2, r2
 8005fc8:	831a      	strh	r2, [r3, #24]
}
 8005fca:	bf00      	nop
 8005fcc:	3770      	adds	r7, #112	@ 0x70
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40008000 	.word	0x40008000

08005fd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	7992      	ldrb	r2, [r2, #6]
 8005ffe:	08d2      	lsrs	r2, r2, #3
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	fb13 f302 	smulbb	r3, r3, r2
 8006006:	b29a      	uxth	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	889b      	ldrh	r3, [r3, #4]
 8006010:	461a      	mov	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	885b      	ldrh	r3, [r3, #2]
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	60da      	str	r2, [r3, #12]
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006032:	b490      	push	{r4, r7}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	4604      	mov	r4, r0
 800603a:	4608      	mov	r0, r1
 800603c:	1d39      	adds	r1, r7, #4
 800603e:	e881 000c 	stmia.w	r1, {r2, r3}
 8006042:	4623      	mov	r3, r4
 8006044:	81fb      	strh	r3, [r7, #14]
 8006046:	4603      	mov	r3, r0
 8006048:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 800604e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006052:	88ba      	ldrh	r2, [r7, #4]
 8006054:	4293      	cmp	r3, r2
 8006056:	da04      	bge.n	8006062 <code+0x30>
        code |= LEFT;
 8006058:	2201      	movs	r2, #1
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	4313      	orrs	r3, r2
 800605e:	75fb      	strb	r3, [r7, #23]
 8006060:	e008      	b.n	8006074 <code+0x42>
    } else if (x0 > window.x1) {
 8006062:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006066:	893a      	ldrh	r2, [r7, #8]
 8006068:	4293      	cmp	r3, r2
 800606a:	dd03      	ble.n	8006074 <code+0x42>
        code |= RIGHT;
 800606c:	2202      	movs	r2, #2
 800606e:	7dfb      	ldrb	r3, [r7, #23]
 8006070:	4313      	orrs	r3, r2
 8006072:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006074:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006078:	88fa      	ldrh	r2, [r7, #6]
 800607a:	4293      	cmp	r3, r2
 800607c:	da04      	bge.n	8006088 <code+0x56>
        code |= BOTTOM;
 800607e:	2204      	movs	r2, #4
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	4313      	orrs	r3, r2
 8006084:	75fb      	strb	r3, [r7, #23]
 8006086:	e008      	b.n	800609a <code+0x68>
    } else if (y0 > window.y1) {
 8006088:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800608c:	897a      	ldrh	r2, [r7, #10]
 800608e:	4293      	cmp	r3, r2
 8006090:	dd03      	ble.n	800609a <code+0x68>
        code |= TOP;
 8006092:	2208      	movs	r2, #8
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	4313      	orrs	r3, r2
 8006098:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 800609a:	7dfb      	ldrb	r3, [r7, #23]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc90      	pop	{r4, r7}
 80060a4:	4770      	bx	lr

080060a6 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b088      	sub	sp, #32
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
 80060b2:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80060c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80060c4:	cb0c      	ldmia	r3, {r2, r3}
 80060c6:	f7ff ffb4 	bl	8006032 <code>
 80060ca:	4603      	mov	r3, r0
 80060cc:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80060da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80060de:	cb0c      	ldmia	r3, {r2, r3}
 80060e0:	f7ff ffa7 	bl	8006032 <code>
 80060e4:	4603      	mov	r3, r0
 80060e6:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 80060e8:	2300      	movs	r3, #0
 80060ea:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 80060ec:	7ffa      	ldrb	r2, [r7, #31]
 80060ee:	7fbb      	ldrb	r3, [r7, #30]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 80060f8:	2301      	movs	r3, #1
 80060fa:	777b      	strb	r3, [r7, #29]
            break;
 80060fc:	e0e9      	b.n	80062d2 <clip_line+0x22c>
        } else if (code0 & code1) {
 80060fe:	7ffa      	ldrb	r2, [r7, #31]
 8006100:	7fbb      	ldrb	r3, [r7, #30]
 8006102:	4013      	ands	r3, r2
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	f040 80e2 	bne.w	80062d0 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006114:	7ffb      	ldrb	r3, [r7, #31]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <clip_line+0x78>
 800611a:	7ffb      	ldrb	r3, [r7, #31]
 800611c:	e000      	b.n	8006120 <clip_line+0x7a>
 800611e:	7fbb      	ldrb	r3, [r7, #30]
 8006120:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006122:	2208      	movs	r2, #8
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	4013      	ands	r3, r2
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d024      	beq.n	8006178 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006134:	b29a      	uxth	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800613c:	4619      	mov	r1, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006144:	1acb      	subs	r3, r1, r3
 8006146:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006148:	4608      	mov	r0, r1
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006150:	1a41      	subs	r1, r0, r1
 8006152:	fb03 f101 	mul.w	r1, r3, r1
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800615c:	4618      	mov	r0, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006164:	1ac3      	subs	r3, r0, r3
 8006166:	fb91 f3f3 	sdiv	r3, r1, r3
 800616a:	b29b      	uxth	r3, r3
 800616c:	4413      	add	r3, r2
 800616e:	b29b      	uxth	r3, r3
 8006170:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006172:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006174:	833b      	strh	r3, [r7, #24]
 8006176:	e07f      	b.n	8006278 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006178:	2204      	movs	r2, #4
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	4013      	ands	r3, r2
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d024      	beq.n	80061ce <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800618a:	b29a      	uxth	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006192:	4619      	mov	r1, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800619a:	1acb      	subs	r3, r1, r3
 800619c:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800619e:	4608      	mov	r0, r1
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80061a6:	1a41      	subs	r1, r0, r1
 80061a8:	fb03 f101 	mul.w	r1, r3, r1
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061b2:	4618      	mov	r0, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ba:	1ac3      	subs	r3, r0, r3
 80061bc:	fb91 f3f3 	sdiv	r3, r1, r3
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 80061c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061ca:	833b      	strh	r3, [r7, #24]
 80061cc:	e054      	b.n	8006278 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 80061ce:	2202      	movs	r2, #2
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
 80061d2:	4013      	ands	r3, r2
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d024      	beq.n	8006224 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061e8:	4619      	mov	r1, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061f0:	1acb      	subs	r3, r1, r3
 80061f2:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80061f4:	4608      	mov	r0, r1
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80061fc:	1a41      	subs	r1, r0, r1
 80061fe:	fb03 f101 	mul.w	r1, r3, r1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006208:	4618      	mov	r0, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006210:	1ac3      	subs	r3, r0, r3
 8006212:	fb91 f3f3 	sdiv	r3, r1, r3
 8006216:	b29b      	uxth	r3, r3
 8006218:	4413      	add	r3, r2
 800621a:	b29b      	uxth	r3, r3
 800621c:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800621e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006220:	837b      	strh	r3, [r7, #26]
 8006222:	e029      	b.n	8006278 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006224:	2201      	movs	r2, #1
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	4013      	ands	r3, r2
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d023      	beq.n	8006278 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006236:	b29a      	uxth	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800623e:	4619      	mov	r1, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006246:	1acb      	subs	r3, r1, r3
 8006248:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800624a:	4608      	mov	r0, r1
 800624c:	68f9      	ldr	r1, [r7, #12]
 800624e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006252:	1a41      	subs	r1, r0, r1
 8006254:	fb03 f101 	mul.w	r1, r3, r1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800625e:	4618      	mov	r0, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006266:	1ac3      	subs	r3, r0, r3
 8006268:	fb91 f3f3 	sdiv	r3, r1, r3
 800626c:	b29b      	uxth	r3, r3
 800626e:	4413      	add	r3, r2
 8006270:	b29b      	uxth	r3, r3
 8006272:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006274:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006276:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006278:	7dfa      	ldrb	r2, [r7, #23]
 800627a:	7ffb      	ldrb	r3, [r7, #31]
 800627c:	429a      	cmp	r2, r3
 800627e:	d113      	bne.n	80062a8 <clip_line+0x202>
                *x0 = x;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8b7a      	ldrh	r2, [r7, #26]
 8006284:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	8b3a      	ldrh	r2, [r7, #24]
 800628a:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006298:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800629c:	cb0c      	ldmia	r3, {r2, r3}
 800629e:	f7ff fec8 	bl	8006032 <code>
 80062a2:	4603      	mov	r3, r0
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	e721      	b.n	80060ec <clip_line+0x46>
            } else {
                *x1 = x;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8b7a      	ldrh	r2, [r7, #26]
 80062ac:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	8b3a      	ldrh	r2, [r7, #24]
 80062b2:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80062c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80062c4:	cb0c      	ldmia	r3, {r2, r3}
 80062c6:	f7ff feb4 	bl	8006032 <code>
 80062ca:	4603      	mov	r3, r0
 80062cc:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 80062ce:	e70d      	b.n	80060ec <clip_line+0x46>
            break;
 80062d0:	bf00      	nop
            }
        }
    }

    return accept;
 80062d2:	7f7b      	ldrb	r3, [r7, #29]
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	3306      	adds	r3, #6
 80062ec:	2208      	movs	r2, #8
 80062ee:	4619      	mov	r1, r3
 80062f0:	f001 fdc7 	bl	8007e82 <memcpy>
    meta->width = font[FONTX_WIDTH];
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	330e      	adds	r3, #14
 80062f8:	781a      	ldrb	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	330f      	adds	r3, #15
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	3310      	adds	r3, #16
 800630c:	781a      	ldrb	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	72da      	strb	r2, [r3, #11]

    return 0;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800631c:	b580      	push	{r7, lr}
 800631e:	b08e      	sub	sp, #56	@ 0x38
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006328:	f107 0314 	add.w	r3, r7, #20
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ffd4 	bl	80062dc <fontx_meta>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 800633a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <fontx_glyph+0x2c>
        return status;
 8006342:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006346:	e077      	b.n	8006438 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006348:	7f7a      	ldrb	r2, [r7, #29]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 800634e:	7fba      	ldrb	r2, [r7, #30]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006354:	7f7b      	ldrb	r3, [r7, #29]
 8006356:	3307      	adds	r3, #7
 8006358:	2b00      	cmp	r3, #0
 800635a:	da00      	bge.n	800635e <fontx_glyph+0x42>
 800635c:	3307      	adds	r3, #7
 800635e:	10db      	asrs	r3, r3, #3
 8006360:	b2da      	uxtb	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	78da      	ldrb	r2, [r3, #3]
 800636a:	7fbb      	ldrb	r3, [r7, #30]
 800636c:	fb12 f303 	smulbb	r3, r2, r3
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006376:	7ffb      	ldrb	r3, [r7, #31]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10f      	bne.n	800639c <fontx_glyph+0x80>
        if (code < 0x100) {
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2bff      	cmp	r3, #255	@ 0xff
 8006380:	d859      	bhi.n	8006436 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	789b      	ldrb	r3, [r3, #2]
 8006386:	461a      	mov	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	3311      	adds	r3, #17
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	441a      	add	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	e04d      	b.n	8006438 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3312      	adds	r3, #18
 80063a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3311      	adds	r3, #17
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 80063ae:	e03d      	b.n	800642c <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b8:	3301      	adds	r3, #1
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	4413      	add	r3, r2
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80063c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c4:	3302      	adds	r3, #2
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063cc:	3303      	adds	r3, #3
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	4413      	add	r3, r2
 80063d4:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	429a      	cmp	r2, r3
 80063dc:	d31c      	bcc.n	8006418 <fontx_glyph+0xfc>
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d818      	bhi.n	8006418 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063ee:	4413      	add	r3, r2
 80063f0:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3311      	adds	r3, #17
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	461a      	mov	r2, r3
                    nc * glyph->size
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	789b      	ldrb	r3, [r3, #2]
 8006400:	4619      	mov	r1, r3
 8006402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006404:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006408:	4413      	add	r3, r2
 800640a:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	441a      	add	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	e00f      	b.n	8006438 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006418:	6a3a      	ldr	r2, [r7, #32]
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	1ad2      	subs	r2, r2, r3
 800641e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006420:	4413      	add	r3, r2
 8006422:	3301      	adds	r3, #1
 8006424:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006428:	3304      	adds	r3, #4
 800642a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	1e5a      	subs	r2, r3, #1
 8006430:	633a      	str	r2, [r7, #48]	@ 0x30
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1bc      	bne.n	80063b0 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006436:	2301      	movs	r3, #1
 8006438:	4618      	mov	r0, r3
 800643a:	3738      	adds	r7, #56	@ 0x38
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	dd01      	ble.n	8006456 <min+0x16>
        return b;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	e000      	b.n	8006458 <min+0x18>
    };
    return a;
 8006456:	687b      	ldr	r3, [r7, #4]
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <max>:

static inline int max(int a, int b) {
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	dd01      	ble.n	800647a <max+0x16>
        return a;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	e000      	b.n	800647c <max+0x18>
    }
    return b;
 800647a:	683b      	ldr	r3, [r7, #0]
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	80fb      	strh	r3, [r7, #6]
 8006492:	460b      	mov	r3, r1
 8006494:	80bb      	strh	r3, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800649a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800649e:	4a12      	ldr	r2, [pc, #72]	@ (80064e8 <hagl_put_pixel+0x60>)
 80064a0:	8812      	ldrh	r2, [r2, #0]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	db1a      	blt.n	80064dc <hagl_put_pixel+0x54>
 80064a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064aa:	4a0f      	ldr	r2, [pc, #60]	@ (80064e8 <hagl_put_pixel+0x60>)
 80064ac:	8852      	ldrh	r2, [r2, #2]
 80064ae:	4293      	cmp	r3, r2
 80064b0:	db14      	blt.n	80064dc <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80064b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064b6:	4a0c      	ldr	r2, [pc, #48]	@ (80064e8 <hagl_put_pixel+0x60>)
 80064b8:	8892      	ldrh	r2, [r2, #4]
 80064ba:	4293      	cmp	r3, r2
 80064bc:	dc10      	bgt.n	80064e0 <hagl_put_pixel+0x58>
 80064be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064c2:	4a09      	ldr	r2, [pc, #36]	@ (80064e8 <hagl_put_pixel+0x60>)
 80064c4:	88d2      	ldrh	r2, [r2, #6]
 80064c6:	4293      	cmp	r3, r2
 80064c8:	dc0a      	bgt.n	80064e0 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 80064ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80064d2:	887a      	ldrh	r2, [r7, #2]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fb faa5 	bl	8001a24 <lcd_put_pixel>
 80064da:	e002      	b.n	80064e2 <hagl_put_pixel+0x5a>
        return;
 80064dc:	bf00      	nop
 80064de:	e000      	b.n	80064e2 <hagl_put_pixel+0x5a>
        return;
 80064e0:	bf00      	nop
}
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	2000020c 	.word	0x2000020c

080064ec <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	4604      	mov	r4, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	461a      	mov	r2, r3
 80064fa:	4623      	mov	r3, r4
 80064fc:	80fb      	strh	r3, [r7, #6]
 80064fe:	4603      	mov	r3, r0
 8006500:	80bb      	strh	r3, [r7, #4]
 8006502:	460b      	mov	r3, r1
 8006504:	807b      	strh	r3, [r7, #2]
 8006506:	4613      	mov	r3, r2
 8006508:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	887b      	ldrh	r3, [r7, #2]
 800650e:	4413      	add	r3, r2
 8006510:	b29b      	uxth	r3, r3
 8006512:	b21a      	sxth	r2, r3
 8006514:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006518:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800651c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006520:	883b      	ldrh	r3, [r7, #0]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	4623      	mov	r3, r4
 8006526:	f000 f827 	bl	8006578 <hagl_draw_line>
#endif
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	bd90      	pop	{r4, r7, pc}

08006532 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006532:	b590      	push	{r4, r7, lr}
 8006534:	b085      	sub	sp, #20
 8006536:	af02      	add	r7, sp, #8
 8006538:	4604      	mov	r4, r0
 800653a:	4608      	mov	r0, r1
 800653c:	4611      	mov	r1, r2
 800653e:	461a      	mov	r2, r3
 8006540:	4623      	mov	r3, r4
 8006542:	80fb      	strh	r3, [r7, #6]
 8006544:	4603      	mov	r3, r0
 8006546:	80bb      	strh	r3, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	807b      	strh	r3, [r7, #2]
 800654c:	4613      	mov	r3, r2
 800654e:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006550:	88ba      	ldrh	r2, [r7, #4]
 8006552:	887b      	ldrh	r3, [r7, #2]
 8006554:	4413      	add	r3, r2
 8006556:	b29b      	uxth	r3, r3
 8006558:	b21c      	sxth	r4, r3
 800655a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800655e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006562:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006566:	883b      	ldrh	r3, [r7, #0]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	4623      	mov	r3, r4
 800656c:	f000 f804 	bl	8006578 <hagl_draw_line>
#endif
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	bd90      	pop	{r4, r7, pc}

08006578 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657a:	b089      	sub	sp, #36	@ 0x24
 800657c:	af02      	add	r7, sp, #8
 800657e:	4604      	mov	r4, r0
 8006580:	4608      	mov	r0, r1
 8006582:	4611      	mov	r1, r2
 8006584:	461a      	mov	r2, r3
 8006586:	4623      	mov	r3, r4
 8006588:	80fb      	strh	r3, [r7, #6]
 800658a:	4603      	mov	r3, r0
 800658c:	80bb      	strh	r3, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	807b      	strh	r3, [r7, #2]
 8006592:	4613      	mov	r3, r2
 8006594:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006596:	463b      	mov	r3, r7
 8006598:	1cba      	adds	r2, r7, #2
 800659a:	1d3d      	adds	r5, r7, #4
 800659c:	1dbc      	adds	r4, r7, #6
 800659e:	494a      	ldr	r1, [pc, #296]	@ (80066c8 <hagl_draw_line+0x150>)
 80065a0:	466e      	mov	r6, sp
 80065a2:	c903      	ldmia	r1, {r0, r1}
 80065a4:	e886 0003 	stmia.w	r6, {r0, r1}
 80065a8:	4629      	mov	r1, r5
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7ff fd7b 	bl	80060a6 <clip_line>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f083 0301 	eor.w	r3, r3, #1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d17e      	bne.n	80066ba <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80065bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065c0:	461a      	mov	r2, r3
 80065c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bfb8      	it	lt
 80065cc:	425b      	neglt	r3, r3
 80065ce:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 80065d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80065d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065d8:	429a      	cmp	r2, r3
 80065da:	da01      	bge.n	80065e0 <hagl_draw_line+0x68>
 80065dc:	2301      	movs	r3, #1
 80065de:	e001      	b.n	80065e4 <hagl_draw_line+0x6c>
 80065e0:	f04f 33ff 	mov.w	r3, #4294967295
 80065e4:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 80065e6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80065ea:	461a      	mov	r2, r3
 80065ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bfb8      	it	lt
 80065f6:	425b      	neglt	r3, r3
 80065f8:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 80065fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80065fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006602:	429a      	cmp	r2, r3
 8006604:	da01      	bge.n	800660a <hagl_draw_line+0x92>
 8006606:	2301      	movs	r3, #1
 8006608:	e001      	b.n	800660e <hagl_draw_line+0x96>
 800660a:	f04f 33ff 	mov.w	r3, #4294967295
 800660e:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006610:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006614:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006618:	429a      	cmp	r2, r3
 800661a:	dd06      	ble.n	800662a <hagl_draw_line+0xb2>
 800661c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006620:	0fda      	lsrs	r2, r3, #31
 8006622:	4413      	add	r3, r2
 8006624:	105b      	asrs	r3, r3, #1
 8006626:	b21b      	sxth	r3, r3
 8006628:	e006      	b.n	8006638 <hagl_draw_line+0xc0>
 800662a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800662e:	0fda      	lsrs	r2, r3, #31
 8006630:	4413      	add	r3, r2
 8006632:	105b      	asrs	r3, r3, #1
 8006634:	425b      	negs	r3, r3
 8006636:	b21b      	sxth	r3, r3
 8006638:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800663a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800663e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006642:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff ff1f 	bl	8006488 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800664a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800664e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006652:	429a      	cmp	r2, r3
 8006654:	d105      	bne.n	8006662 <hagl_draw_line+0xea>
 8006656:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800665a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800665e:	429a      	cmp	r2, r3
 8006660:	d02d      	beq.n	80066be <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006662:	8afb      	ldrh	r3, [r7, #22]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	b29b      	uxth	r3, r3
 8006668:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800666a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800666e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006672:	425b      	negs	r3, r3
 8006674:	429a      	cmp	r2, r3
 8006676:	dd0c      	ble.n	8006692 <hagl_draw_line+0x11a>
            err -= dy;
 8006678:	8afa      	ldrh	r2, [r7, #22]
 800667a:	8a3b      	ldrh	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	b29b      	uxth	r3, r3
 8006680:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8006682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006686:	b29a      	uxth	r2, r3
 8006688:	8a7b      	ldrh	r3, [r7, #18]
 800668a:	4413      	add	r3, r2
 800668c:	b29b      	uxth	r3, r3
 800668e:	b21b      	sxth	r3, r3
 8006690:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8006692:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006696:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800669a:	429a      	cmp	r2, r3
 800669c:	dacd      	bge.n	800663a <hagl_draw_line+0xc2>
            err += dx;
 800669e:	8afa      	ldrh	r2, [r7, #22]
 80066a0:	8abb      	ldrh	r3, [r7, #20]
 80066a2:	4413      	add	r3, r2
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80066a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	89fb      	ldrh	r3, [r7, #14]
 80066b0:	4413      	add	r3, r2
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	b21b      	sxth	r3, r3
 80066b6:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80066b8:	e7bf      	b.n	800663a <hagl_draw_line+0xc2>
        return;
 80066ba:	bf00      	nop
 80066bc:	e000      	b.n	80066c0 <hagl_draw_line+0x148>
            break;
 80066be:	bf00      	nop
        }
    }
}
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c6:	bf00      	nop
 80066c8:	2000020c 	.word	0x2000020c

080066cc <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80066cc:	b590      	push	{r4, r7, lr}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	461a      	mov	r2, r3
 80066da:	4623      	mov	r3, r4
 80066dc:	80fb      	strh	r3, [r7, #6]
 80066de:	4603      	mov	r3, r0
 80066e0:	80bb      	strh	r3, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	807b      	strh	r3, [r7, #2]
 80066e6:	4613      	mov	r3, r2
 80066e8:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80066ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80066ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	dd0e      	ble.n	8006714 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 80066f6:	88fa      	ldrh	r2, [r7, #6]
 80066f8:	887b      	ldrh	r3, [r7, #2]
 80066fa:	4413      	add	r3, r2
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	887b      	ldrh	r3, [r7, #2]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	b29b      	uxth	r3, r3
 8006708:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800670a:	88fa      	ldrh	r2, [r7, #6]
 800670c:	887b      	ldrh	r3, [r7, #2]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	b29b      	uxth	r3, r3
 8006712:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006714:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006718:	f9b7 3000 	ldrsh.w	r3, [r7]
 800671c:	429a      	cmp	r2, r3
 800671e:	dd0e      	ble.n	800673e <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8006720:	88ba      	ldrh	r2, [r7, #4]
 8006722:	883b      	ldrh	r3, [r7, #0]
 8006724:	4413      	add	r3, r2
 8006726:	b29b      	uxth	r3, r3
 8006728:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800672a:	88ba      	ldrh	r2, [r7, #4]
 800672c:	883b      	ldrh	r3, [r7, #0]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	b29b      	uxth	r3, r3
 8006732:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006734:	88ba      	ldrh	r2, [r7, #4]
 8006736:	883b      	ldrh	r3, [r7, #0]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	b29b      	uxth	r3, r3
 800673c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800673e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006742:	4a24      	ldr	r2, [pc, #144]	@ (80067d4 <hagl_draw_rectangle+0x108>)
 8006744:	8812      	ldrh	r2, [r2, #0]
 8006746:	4293      	cmp	r3, r2
 8006748:	db3e      	blt.n	80067c8 <hagl_draw_rectangle+0xfc>
 800674a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800674e:	4a21      	ldr	r2, [pc, #132]	@ (80067d4 <hagl_draw_rectangle+0x108>)
 8006750:	8852      	ldrh	r2, [r2, #2]
 8006752:	4293      	cmp	r3, r2
 8006754:	db38      	blt.n	80067c8 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800675a:	4a1e      	ldr	r2, [pc, #120]	@ (80067d4 <hagl_draw_rectangle+0x108>)
 800675c:	8892      	ldrh	r2, [r2, #4]
 800675e:	4293      	cmp	r3, r2
 8006760:	dc34      	bgt.n	80067cc <hagl_draw_rectangle+0x100>
 8006762:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006766:	4a1b      	ldr	r2, [pc, #108]	@ (80067d4 <hagl_draw_rectangle+0x108>)
 8006768:	88d2      	ldrh	r2, [r2, #6]
 800676a:	4293      	cmp	r3, r2
 800676c:	dc2e      	bgt.n	80067cc <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 800676e:	887a      	ldrh	r2, [r7, #2]
 8006770:	88fb      	ldrh	r3, [r7, #6]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	b29b      	uxth	r3, r3
 8006776:	3301      	adds	r3, #1
 8006778:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 800677a:	883a      	ldrh	r2, [r7, #0]
 800677c:	88bb      	ldrh	r3, [r7, #4]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	b29b      	uxth	r3, r3
 8006782:	3301      	adds	r3, #1
 8006784:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 8006786:	8c3b      	ldrh	r3, [r7, #32]
 8006788:	89fa      	ldrh	r2, [r7, #14]
 800678a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800678e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006792:	f7ff feab 	bl	80064ec <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 8006796:	8c3b      	ldrh	r3, [r7, #32]
 8006798:	89fa      	ldrh	r2, [r7, #14]
 800679a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800679e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80067a2:	f7ff fea3 	bl	80064ec <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 80067a6:	8c3b      	ldrh	r3, [r7, #32]
 80067a8:	89ba      	ldrh	r2, [r7, #12]
 80067aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80067ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80067b2:	f7ff febe 	bl	8006532 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 80067b6:	8c3b      	ldrh	r3, [r7, #32]
 80067b8:	89ba      	ldrh	r2, [r7, #12]
 80067ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80067be:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80067c2:	f7ff feb6 	bl	8006532 <hagl_draw_vline>
 80067c6:	e002      	b.n	80067ce <hagl_draw_rectangle+0x102>
        return;
 80067c8:	bf00      	nop
 80067ca:	e000      	b.n	80067ce <hagl_draw_rectangle+0x102>
        return;
 80067cc:	bf00      	nop
}
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd90      	pop	{r4, r7, pc}
 80067d4:	2000020c 	.word	0x2000020c

080067d8 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	4611      	mov	r1, r2
 80067e4:	461a      	mov	r2, r3
 80067e6:	4623      	mov	r3, r4
 80067e8:	80fb      	strh	r3, [r7, #6]
 80067ea:	4603      	mov	r3, r0
 80067ec:	80bb      	strh	r3, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	807b      	strh	r3, [r7, #2]
 80067f2:	4613      	mov	r3, r2
 80067f4:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80067f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067fe:	429a      	cmp	r2, r3
 8006800:	dd0e      	ble.n	8006820 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	887b      	ldrh	r3, [r7, #2]
 8006806:	4413      	add	r3, r2
 8006808:	b29b      	uxth	r3, r3
 800680a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800680c:	88fa      	ldrh	r2, [r7, #6]
 800680e:	887b      	ldrh	r3, [r7, #2]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	b29b      	uxth	r3, r3
 8006814:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8006816:	88fa      	ldrh	r2, [r7, #6]
 8006818:	887b      	ldrh	r3, [r7, #2]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	b29b      	uxth	r3, r3
 800681e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006820:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006824:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006828:	429a      	cmp	r2, r3
 800682a:	dd0e      	ble.n	800684a <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 800682c:	88ba      	ldrh	r2, [r7, #4]
 800682e:	883b      	ldrh	r3, [r7, #0]
 8006830:	4413      	add	r3, r2
 8006832:	b29b      	uxth	r3, r3
 8006834:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8006836:	88ba      	ldrh	r2, [r7, #4]
 8006838:	883b      	ldrh	r3, [r7, #0]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	b29b      	uxth	r3, r3
 800683e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006840:	88ba      	ldrh	r2, [r7, #4]
 8006842:	883b      	ldrh	r3, [r7, #0]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	b29b      	uxth	r3, r3
 8006848:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800684a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800684e:	4a33      	ldr	r2, [pc, #204]	@ (800691c <hagl_fill_rectangle+0x144>)
 8006850:	8812      	ldrh	r2, [r2, #0]
 8006852:	4293      	cmp	r3, r2
 8006854:	db5b      	blt.n	800690e <hagl_fill_rectangle+0x136>
 8006856:	f9b7 3000 	ldrsh.w	r3, [r7]
 800685a:	4a30      	ldr	r2, [pc, #192]	@ (800691c <hagl_fill_rectangle+0x144>)
 800685c:	8852      	ldrh	r2, [r2, #2]
 800685e:	4293      	cmp	r3, r2
 8006860:	db55      	blt.n	800690e <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006866:	4a2d      	ldr	r2, [pc, #180]	@ (800691c <hagl_fill_rectangle+0x144>)
 8006868:	8892      	ldrh	r2, [r2, #4]
 800686a:	4293      	cmp	r3, r2
 800686c:	dc51      	bgt.n	8006912 <hagl_fill_rectangle+0x13a>
 800686e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006872:	4a2a      	ldr	r2, [pc, #168]	@ (800691c <hagl_fill_rectangle+0x144>)
 8006874:	88d2      	ldrh	r2, [r2, #6]
 8006876:	4293      	cmp	r3, r2
 8006878:	dc4b      	bgt.n	8006912 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800687a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800687e:	4a27      	ldr	r2, [pc, #156]	@ (800691c <hagl_fill_rectangle+0x144>)
 8006880:	8812      	ldrh	r2, [r2, #0]
 8006882:	4611      	mov	r1, r2
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff fded 	bl	8006464 <max>
 800688a:	4603      	mov	r3, r0
 800688c:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 800688e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006892:	4a22      	ldr	r2, [pc, #136]	@ (800691c <hagl_fill_rectangle+0x144>)
 8006894:	8852      	ldrh	r2, [r2, #2]
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fde3 	bl	8006464 <max>
 800689e:	4603      	mov	r3, r0
 80068a0:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 80068a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80068a6:	4a1d      	ldr	r2, [pc, #116]	@ (800691c <hagl_fill_rectangle+0x144>)
 80068a8:	8892      	ldrh	r2, [r2, #4]
 80068aa:	4611      	mov	r1, r2
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff fdc7 	bl	8006440 <min>
 80068b2:	4603      	mov	r3, r0
 80068b4:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80068b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80068ba:	4a18      	ldr	r2, [pc, #96]	@ (800691c <hagl_fill_rectangle+0x144>)
 80068bc:	88d2      	ldrh	r2, [r2, #6]
 80068be:	4611      	mov	r1, r2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff fdbd 	bl	8006440 <min>
 80068c6:	4603      	mov	r3, r0
 80068c8:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80068ca:	887a      	ldrh	r2, [r7, #2]
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3301      	adds	r3, #1
 80068d4:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 80068d6:	883a      	ldrh	r2, [r7, #0]
 80068d8:	88bb      	ldrh	r3, [r7, #4]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3301      	adds	r3, #1
 80068e0:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 80068e2:	2300      	movs	r3, #0
 80068e4:	81fb      	strh	r3, [r7, #14]
 80068e6:	e00d      	b.n	8006904 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 80068e8:	88ba      	ldrh	r2, [r7, #4]
 80068ea:	89fb      	ldrh	r3, [r7, #14]
 80068ec:	4413      	add	r3, r2
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	b219      	sxth	r1, r3
 80068f2:	8c3b      	ldrh	r3, [r7, #32]
 80068f4:	89ba      	ldrh	r2, [r7, #12]
 80068f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80068fa:	f7ff fdf7 	bl	80064ec <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 80068fe:	89fb      	ldrh	r3, [r7, #14]
 8006900:	3301      	adds	r3, #1
 8006902:	81fb      	strh	r3, [r7, #14]
 8006904:	89fa      	ldrh	r2, [r7, #14]
 8006906:	897b      	ldrh	r3, [r7, #10]
 8006908:	429a      	cmp	r2, r3
 800690a:	d3ed      	bcc.n	80068e8 <hagl_fill_rectangle+0x110>
 800690c:	e002      	b.n	8006914 <hagl_fill_rectangle+0x13c>
        return;
 800690e:	bf00      	nop
 8006910:	e000      	b.n	8006914 <hagl_fill_rectangle+0x13c>
        return;
 8006912:	bf00      	nop
#endif
    }
}
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	bd90      	pop	{r4, r7, pc}
 800691a:	bf00      	nop
 800691c:	2000020c 	.word	0x2000020c

08006920 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8006920:	b590      	push	{r4, r7, lr}
 8006922:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800692e:	f844 0c24 	str.w	r0, [r4, #-36]
 8006932:	460c      	mov	r4, r1
 8006934:	4610      	mov	r0, r2
 8006936:	4619      	mov	r1, r3
 8006938:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800693c:	4622      	mov	r2, r4
 800693e:	f823 2c26 	strh.w	r2, [r3, #-38]
 8006942:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006946:	4602      	mov	r2, r0
 8006948:	f823 2c28 	strh.w	r2, [r3, #-40]
 800694c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006950:	460a      	mov	r2, r1
 8006952:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8006956:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800695a:	4619      	mov	r1, r3
 800695c:	f107 0310 	add.w	r3, r7, #16
 8006960:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	f851 1c24 	ldr.w	r1, [r1, #-36]
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff fcd6 	bl	800631c <fontx_glyph>
 8006970:	4603      	mov	r3, r0
 8006972:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006976:	f102 0209 	add.w	r2, r2, #9
 800697a:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 800697c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006980:	f103 0309 	add.w	r3, r3, #9
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <hagl_put_char+0x6e>
        return 0;
 800698a:	2300      	movs	r3, #0
 800698c:	e0c0      	b.n	8006b10 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 800698e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006992:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8006996:	461a      	mov	r2, r3
 8006998:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800699c:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80069a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069a4:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80069a8:	461a      	mov	r2, r3
 80069aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069ae:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80069b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069b6:	2210      	movs	r2, #16
 80069b8:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80069bc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80069c0:	3a08      	subs	r2, #8
 80069c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069c6:	3b18      	subs	r3, #24
 80069c8:	4611      	mov	r1, r2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fb0e 	bl	8005fec <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80069d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069d4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80069d8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80069dc:	f102 020c 	add.w	r2, r2, #12
 80069e0:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80069e2:	2300      	movs	r3, #0
 80069e4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80069e8:	f102 020b 	add.w	r2, r2, #11
 80069ec:	7013      	strb	r3, [r2, #0]
 80069ee:	e071      	b.n	8006ad4 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80069f0:	2300      	movs	r3, #0
 80069f2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80069f6:	f102 020a 	add.w	r2, r2, #10
 80069fa:	7013      	strb	r3, [r2, #0]
 80069fc:	e047      	b.n	8006a8e <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 80069fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006a02:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	b25a      	sxtb	r2, r3
 8006a0a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006a0e:	f103 030a 	add.w	r3, r3, #10
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	2180      	movs	r1, #128	@ 0x80
 8006a1a:	fa41 f303 	asr.w	r3, r1, r3
 8006a1e:	b25b      	sxtb	r3, r3
 8006a20:	4013      	ands	r3, r2
 8006a22:	b25b      	sxtb	r3, r3
 8006a24:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006a28:	f102 0208 	add.w	r2, r2, #8
 8006a2c:	7013      	strb	r3, [r2, #0]
            if (set) {
 8006a2e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006a32:	f103 0308 	add.w	r3, r3, #8
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d010      	beq.n	8006a5e <hagl_put_char+0x13e>
                *(ptr++) = color;
 8006a3c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006a40:	f103 030c 	add.w	r3, r3, #12
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	1c9a      	adds	r2, r3, #2
 8006a48:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8006a4c:	f101 010c 	add.w	r1, r1, #12
 8006a50:	600a      	str	r2, [r1, #0]
 8006a52:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006a56:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	e00c      	b.n	8006a78 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8006a5e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006a62:	f103 030c 	add.w	r3, r3, #12
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	1c9a      	adds	r2, r3, #2
 8006a6a:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8006a6e:	f101 010c 	add.w	r1, r1, #12
 8006a72:	600a      	str	r2, [r1, #0]
 8006a74:	2200      	movs	r2, #0
 8006a76:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006a78:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006a7c:	f103 030a 	add.w	r3, r3, #10
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006a88:	f102 020a 	add.w	r2, r2, #10
 8006a8c:	7013      	strb	r3, [r2, #0]
 8006a8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006a92:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8006a96:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006a9a:	f102 020a 	add.w	r2, r2, #10
 8006a9e:	7812      	ldrb	r2, [r2, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d3ac      	bcc.n	80069fe <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8006aa4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006aa8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006aac:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006ab0:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006aba:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8006abe:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006ac2:	f103 030b 	add.w	r3, r3, #11
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006ace:	f102 020b 	add.w	r2, r2, #11
 8006ad2:	7013      	strb	r3, [r2, #0]
 8006ad4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006ad8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8006adc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006ae0:	f102 020b 	add.w	r2, r2, #11
 8006ae4:	7812      	ldrb	r2, [r2, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d382      	bcc.n	80069f0 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8006aea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006aee:	3b18      	subs	r3, #24
 8006af0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006af4:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8006af8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006afc:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8006b00:	461a      	mov	r2, r3
 8006b02:	f000 f85a 	bl	8006bba <hagl_blit>

    return bitmap.width;
 8006b06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006b0a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006b0e:	b2db      	uxtb	r3, r3
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd90      	pop	{r4, r7, pc}

08006b1c <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08c      	sub	sp, #48	@ 0x30
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	4608      	mov	r0, r1
 8006b26:	4611      	mov	r1, r2
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	817b      	strh	r3, [r7, #10]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	813b      	strh	r3, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8006b36:	897b      	ldrh	r3, [r7, #10]
 8006b38:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006b3a:	f107 0314 	add.w	r3, r7, #20
 8006b3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff fbcb 	bl	80062dc <fontx_meta>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 8006b4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <hagl_put_text+0x3c>
        return 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e02c      	b.n	8006bb2 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	1d1a      	adds	r2, r3, #4
 8006b5c:	60fa      	str	r2, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	2b0d      	cmp	r3, #13
 8006b66:	d002      	beq.n	8006b6e <hagl_put_text+0x52>
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	2b0a      	cmp	r3, #10
 8006b6c:	d108      	bne.n	8006b80 <hagl_put_text+0x64>
            x0 = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8006b72:	7fbb      	ldrb	r3, [r7, #30]
 8006b74:	461a      	mov	r2, r3
 8006b76:	893b      	ldrh	r3, [r7, #8]
 8006b78:	4413      	add	r3, r2
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	813b      	strh	r3, [r7, #8]
 8006b7e:	e010      	b.n	8006ba2 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8006b80:	88f8      	ldrh	r0, [r7, #6]
 8006b82:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006b86:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6a38      	ldr	r0, [r7, #32]
 8006b92:	f7ff fec5 	bl	8006920 <hagl_put_char>
 8006b96:	4603      	mov	r3, r0
 8006b98:	461a      	mov	r2, r3
 8006b9a:	897b      	ldrh	r3, [r7, #10]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1d6      	bne.n	8006b58 <hagl_put_text+0x3c>

    return x0 - original;
 8006baa:	897a      	ldrh	r2, [r7, #10]
 8006bac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	b29b      	uxth	r3, r3
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3728      	adds	r7, #40	@ 0x28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b086      	sub	sp, #24
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	603a      	str	r2, [r7, #0]
 8006bc4:	80fb      	strh	r3, [r7, #6]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	827b      	strh	r3, [r7, #18]
 8006bd4:	e020      	b.n	8006c18 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	823b      	strh	r3, [r7, #16]
 8006bda:	e015      	b.n	8006c08 <hagl_blit+0x4e>
            color = *(ptr++);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	1c9a      	adds	r2, r3, #2
 8006be0:	617a      	str	r2, [r7, #20]
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8006be6:	88fa      	ldrh	r2, [r7, #6]
 8006be8:	8a3b      	ldrh	r3, [r7, #16]
 8006bea:	4413      	add	r3, r2
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	b218      	sxth	r0, r3
 8006bf0:	88ba      	ldrh	r2, [r7, #4]
 8006bf2:	8a7b      	ldrh	r3, [r7, #18]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	b21b      	sxth	r3, r3
 8006bfa:	89fa      	ldrh	r2, [r7, #14]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	f7ff fc43 	bl	8006488 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8006c02:	8a3b      	ldrh	r3, [r7, #16]
 8006c04:	3301      	adds	r3, #1
 8006c06:	823b      	strh	r3, [r7, #16]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	8a3a      	ldrh	r2, [r7, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d3e4      	bcc.n	8006bdc <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8006c12:	8a7b      	ldrh	r3, [r7, #18]
 8006c14:	3301      	adds	r3, #1
 8006c16:	827b      	strh	r3, [r7, #18]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	885b      	ldrh	r3, [r3, #2]
 8006c1c:	8a7a      	ldrh	r2, [r7, #18]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d3d9      	bcc.n	8006bd6 <hagl_blit+0x1c>
        }
    }
#endif
};
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <hagl_draw_circle>:
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
        0x00
    );
}

void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	4611      	mov	r1, r2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	80fb      	strh	r3, [r7, #6]
 8006c3e:	4603      	mov	r3, r0
 8006c40:	80bb      	strh	r3, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	807b      	strh	r3, [r7, #2]
 8006c46:	4613      	mov	r3, r2
 8006c48:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006c4e:	887b      	ldrh	r3, [r7, #2]
 8006c50:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006c52:	887b      	ldrh	r3, [r7, #2]
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f1c3 0303 	rsb	r3, r3, #3
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 8006c60:	88fa      	ldrh	r2, [r7, #6]
 8006c62:	89fb      	ldrh	r3, [r7, #14]
 8006c64:	4413      	add	r3, r2
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	b218      	sxth	r0, r3
 8006c6a:	88ba      	ldrh	r2, [r7, #4]
 8006c6c:	89bb      	ldrh	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	b21b      	sxth	r3, r3
 8006c74:	883a      	ldrh	r2, [r7, #0]
 8006c76:	4619      	mov	r1, r3
 8006c78:	f7ff fc06 	bl	8006488 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 8006c7c:	88fa      	ldrh	r2, [r7, #6]
 8006c7e:	89fb      	ldrh	r3, [r7, #14]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b218      	sxth	r0, r3
 8006c86:	88ba      	ldrh	r2, [r7, #4]
 8006c88:	89bb      	ldrh	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	b21b      	sxth	r3, r3
 8006c90:	883a      	ldrh	r2, [r7, #0]
 8006c92:	4619      	mov	r1, r3
 8006c94:	f7ff fbf8 	bl	8006488 <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	89fb      	ldrh	r3, [r7, #14]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	b218      	sxth	r0, r3
 8006ca2:	88ba      	ldrh	r2, [r7, #4]
 8006ca4:	89bb      	ldrh	r3, [r7, #12]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	b21b      	sxth	r3, r3
 8006cac:	883a      	ldrh	r2, [r7, #0]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	f7ff fbea 	bl	8006488 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	89fb      	ldrh	r3, [r7, #14]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	b218      	sxth	r0, r3
 8006cbe:	88ba      	ldrh	r2, [r7, #4]
 8006cc0:	89bb      	ldrh	r3, [r7, #12]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	b21b      	sxth	r3, r3
 8006cc8:	883a      	ldrh	r2, [r7, #0]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	f7ff fbdc 	bl	8006488 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8006cd0:	88fa      	ldrh	r2, [r7, #6]
 8006cd2:	89bb      	ldrh	r3, [r7, #12]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	b218      	sxth	r0, r3
 8006cda:	88ba      	ldrh	r2, [r7, #4]
 8006cdc:	89fb      	ldrh	r3, [r7, #14]
 8006cde:	4413      	add	r3, r2
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	b21b      	sxth	r3, r3
 8006ce4:	883a      	ldrh	r2, [r7, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f7ff fbce 	bl	8006488 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	89bb      	ldrh	r3, [r7, #12]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	b218      	sxth	r0, r3
 8006cf6:	88ba      	ldrh	r2, [r7, #4]
 8006cf8:	89fb      	ldrh	r3, [r7, #14]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	b21b      	sxth	r3, r3
 8006d00:	883a      	ldrh	r2, [r7, #0]
 8006d02:	4619      	mov	r1, r3
 8006d04:	f7ff fbc0 	bl	8006488 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8006d08:	88fa      	ldrh	r2, [r7, #6]
 8006d0a:	89bb      	ldrh	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	b218      	sxth	r0, r3
 8006d12:	88ba      	ldrh	r2, [r7, #4]
 8006d14:	89fb      	ldrh	r3, [r7, #14]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	b21b      	sxth	r3, r3
 8006d1c:	883a      	ldrh	r2, [r7, #0]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	f7ff fbb2 	bl	8006488 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8006d24:	88fa      	ldrh	r2, [r7, #6]
 8006d26:	89bb      	ldrh	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	b218      	sxth	r0, r3
 8006d2e:	88ba      	ldrh	r2, [r7, #4]
 8006d30:	89fb      	ldrh	r3, [r7, #14]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	b21b      	sxth	r3, r3
 8006d38:	883a      	ldrh	r2, [r7, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	f7ff fba4 	bl	8006488 <hagl_put_pixel>

    while (y >= x) {
 8006d40:	e097      	b.n	8006e72 <hagl_draw_circle+0x246>
        x++;
 8006d42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3301      	adds	r3, #1
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006d4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	dd14      	ble.n	8006d80 <hagl_draw_circle+0x154>
            y--;
 8006d56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006d62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006d66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	897b      	ldrh	r3, [r7, #10]
 8006d74:	4413      	add	r3, r2
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	330a      	adds	r3, #10
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	817b      	strh	r3, [r7, #10]
 8006d7e:	e008      	b.n	8006d92 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8006d80:	89fb      	ldrh	r3, [r7, #14]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	897b      	ldrh	r3, [r7, #10]
 8006d88:	4413      	add	r3, r2
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	3306      	adds	r3, #6
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8006d92:	88fa      	ldrh	r2, [r7, #6]
 8006d94:	89fb      	ldrh	r3, [r7, #14]
 8006d96:	4413      	add	r3, r2
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	b218      	sxth	r0, r3
 8006d9c:	88ba      	ldrh	r2, [r7, #4]
 8006d9e:	89bb      	ldrh	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	b21b      	sxth	r3, r3
 8006da6:	883a      	ldrh	r2, [r7, #0]
 8006da8:	4619      	mov	r1, r3
 8006daa:	f7ff fb6d 	bl	8006488 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	89fb      	ldrh	r3, [r7, #14]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	b218      	sxth	r0, r3
 8006db8:	88ba      	ldrh	r2, [r7, #4]
 8006dba:	89bb      	ldrh	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	b21b      	sxth	r3, r3
 8006dc2:	883a      	ldrh	r2, [r7, #0]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	f7ff fb5f 	bl	8006488 <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	89fb      	ldrh	r3, [r7, #14]
 8006dce:	4413      	add	r3, r2
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	b218      	sxth	r0, r3
 8006dd4:	88ba      	ldrh	r2, [r7, #4]
 8006dd6:	89bb      	ldrh	r3, [r7, #12]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	b21b      	sxth	r3, r3
 8006dde:	883a      	ldrh	r2, [r7, #0]
 8006de0:	4619      	mov	r1, r3
 8006de2:	f7ff fb51 	bl	8006488 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8006de6:	88fa      	ldrh	r2, [r7, #6]
 8006de8:	89fb      	ldrh	r3, [r7, #14]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	b218      	sxth	r0, r3
 8006df0:	88ba      	ldrh	r2, [r7, #4]
 8006df2:	89bb      	ldrh	r3, [r7, #12]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	b21b      	sxth	r3, r3
 8006dfa:	883a      	ldrh	r2, [r7, #0]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	f7ff fb43 	bl	8006488 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8006e02:	88fa      	ldrh	r2, [r7, #6]
 8006e04:	89bb      	ldrh	r3, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	b218      	sxth	r0, r3
 8006e0c:	88ba      	ldrh	r2, [r7, #4]
 8006e0e:	89fb      	ldrh	r3, [r7, #14]
 8006e10:	4413      	add	r3, r2
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	b21b      	sxth	r3, r3
 8006e16:	883a      	ldrh	r2, [r7, #0]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f7ff fb35 	bl	8006488 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8006e1e:	88fa      	ldrh	r2, [r7, #6]
 8006e20:	89bb      	ldrh	r3, [r7, #12]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	b218      	sxth	r0, r3
 8006e28:	88ba      	ldrh	r2, [r7, #4]
 8006e2a:	89fb      	ldrh	r3, [r7, #14]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	b21b      	sxth	r3, r3
 8006e32:	883a      	ldrh	r2, [r7, #0]
 8006e34:	4619      	mov	r1, r3
 8006e36:	f7ff fb27 	bl	8006488 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8006e3a:	88fa      	ldrh	r2, [r7, #6]
 8006e3c:	89bb      	ldrh	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	b218      	sxth	r0, r3
 8006e44:	88ba      	ldrh	r2, [r7, #4]
 8006e46:	89fb      	ldrh	r3, [r7, #14]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	b21b      	sxth	r3, r3
 8006e4e:	883a      	ldrh	r2, [r7, #0]
 8006e50:	4619      	mov	r1, r3
 8006e52:	f7ff fb19 	bl	8006488 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8006e56:	88fa      	ldrh	r2, [r7, #6]
 8006e58:	89bb      	ldrh	r3, [r7, #12]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	b218      	sxth	r0, r3
 8006e60:	88ba      	ldrh	r2, [r7, #4]
 8006e62:	89fb      	ldrh	r3, [r7, #14]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	b21b      	sxth	r3, r3
 8006e6a:	883a      	ldrh	r2, [r7, #0]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f7ff fb0b 	bl	8006488 <hagl_put_pixel>
    while (y >= x) {
 8006e72:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	f6bf af61 	bge.w	8006d42 <hagl_draw_circle+0x116>
    }
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd90      	pop	{r4, r7, pc}

08006e8a <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8006e8a:	b590      	push	{r4, r7, lr}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	4604      	mov	r4, r0
 8006e92:	4608      	mov	r0, r1
 8006e94:	4611      	mov	r1, r2
 8006e96:	461a      	mov	r2, r3
 8006e98:	4623      	mov	r3, r4
 8006e9a:	80fb      	strh	r3, [r7, #6]
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	80bb      	strh	r3, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	807b      	strh	r3, [r7, #2]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006eac:	887b      	ldrh	r3, [r7, #2]
 8006eae:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006eb0:	887b      	ldrh	r3, [r7, #2]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f1c3 0303 	rsb	r3, r3, #3
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8006ebe:	e067      	b.n	8006f90 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8006ec0:	88fa      	ldrh	r2, [r7, #6]
 8006ec2:	89fb      	ldrh	r3, [r7, #14]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	b218      	sxth	r0, r3
 8006eca:	88ba      	ldrh	r2, [r7, #4]
 8006ecc:	89bb      	ldrh	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	b219      	sxth	r1, r3
 8006ed4:	89fb      	ldrh	r3, [r7, #14]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	883b      	ldrh	r3, [r7, #0]
 8006edc:	f7ff fb06 	bl	80064ec <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8006ee0:	88fa      	ldrh	r2, [r7, #6]
 8006ee2:	89fb      	ldrh	r3, [r7, #14]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	b218      	sxth	r0, r3
 8006eea:	88ba      	ldrh	r2, [r7, #4]
 8006eec:	89bb      	ldrh	r3, [r7, #12]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	b219      	sxth	r1, r3
 8006ef4:	89fb      	ldrh	r3, [r7, #14]
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	883b      	ldrh	r3, [r7, #0]
 8006efc:	f7ff faf6 	bl	80064ec <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	89bb      	ldrh	r3, [r7, #12]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	b218      	sxth	r0, r3
 8006f0a:	88ba      	ldrh	r2, [r7, #4]
 8006f0c:	89fb      	ldrh	r3, [r7, #14]
 8006f0e:	4413      	add	r3, r2
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	b219      	sxth	r1, r3
 8006f14:	89bb      	ldrh	r3, [r7, #12]
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	883b      	ldrh	r3, [r7, #0]
 8006f1c:	f7ff fae6 	bl	80064ec <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8006f20:	88fa      	ldrh	r2, [r7, #6]
 8006f22:	89bb      	ldrh	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	b218      	sxth	r0, r3
 8006f2a:	88ba      	ldrh	r2, [r7, #4]
 8006f2c:	89fb      	ldrh	r3, [r7, #14]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	b219      	sxth	r1, r3
 8006f34:	89bb      	ldrh	r3, [r7, #12]
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	883b      	ldrh	r3, [r7, #0]
 8006f3c:	f7ff fad6 	bl	80064ec <hagl_draw_hline>
        x++;
 8006f40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3301      	adds	r3, #1
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006f4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	dd14      	ble.n	8006f7e <hagl_fill_circle+0xf4>
            y--;
 8006f54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006f60:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006f64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	897b      	ldrh	r3, [r7, #10]
 8006f72:	4413      	add	r3, r2
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	330a      	adds	r3, #10
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	817b      	strh	r3, [r7, #10]
 8006f7c:	e008      	b.n	8006f90 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8006f7e:	89fb      	ldrh	r3, [r7, #14]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	897b      	ldrh	r3, [r7, #10]
 8006f86:	4413      	add	r3, r2
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3306      	adds	r3, #6
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8006f90:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006f94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	da91      	bge.n	8006ec0 <hagl_fill_circle+0x36>
        }
    }
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd90      	pop	{r4, r7, pc}

08006fa6 <hagl_draw_polygon>:
        hagl_draw_hline(x0 - wx, y0 + wy, wx * 2, color);
    }
}


void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8006fa6:	b590      	push	{r4, r7, lr}
 8006fa8:	b087      	sub	sp, #28
 8006faa:	af02      	add	r7, sp, #8
 8006fac:	4603      	mov	r3, r0
 8006fae:	6039      	str	r1, [r7, #0]
 8006fb0:	80fb      	strh	r3, [r7, #6]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	81fb      	strh	r3, [r7, #14]
 8006fba:	e02a      	b.n	8007012 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8006fbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4413      	add	r3, r2
        hagl_draw_line(
 8006fc6:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8006fca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	4413      	add	r3, r2
        hagl_draw_line(
 8006fd6:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8006fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	4413      	add	r3, r2
        hagl_draw_line(
 8006fe6:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8006fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	3306      	adds	r3, #6
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	4413      	add	r3, r2
        hagl_draw_line(
 8006ff6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006ffa:	88bb      	ldrh	r3, [r7, #4]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	4622      	mov	r2, r4
 8007002:	f7ff fab9 	bl	8006578 <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007006:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800700a:	b29b      	uxth	r3, r3
 800700c:	3301      	adds	r3, #1
 800700e:	b29b      	uxth	r3, r3
 8007010:	81fb      	strh	r3, [r7, #14]
 8007012:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800701a:	3b01      	subs	r3, #1
 800701c:	429a      	cmp	r2, r3
 800701e:	dbcd      	blt.n	8006fbc <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	3302      	adds	r3, #2
    hagl_draw_line(
 800702a:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 800702e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007032:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007036:	3b01      	subs	r3, #1
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	4413      	add	r3, r2
    hagl_draw_line(
 800703e:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	3b02      	subs	r3, #2
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4413      	add	r3, r2
    hagl_draw_line(
 800704e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007052:	88bb      	ldrh	r3, [r7, #4]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	4613      	mov	r3, r2
 8007058:	4622      	mov	r2, r4
 800705a:	f7ff fa8d 	bl	8006578 <hagl_draw_line>
        color
    );
}
 800705e:	bf00      	nop
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	bd90      	pop	{r4, r7, pc}

08007066 <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007066:	b580      	push	{r7, lr}
 8007068:	b0ac      	sub	sp, #176	@ 0xb0
 800706a:	af00      	add	r7, sp, #0
 800706c:	4603      	mov	r3, r0
 800706e:	6039      	str	r1, [r7, #0]
 8007070:	80fb      	strh	r3, [r7, #6]
 8007072:	4613      	mov	r3, r2
 8007074:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8007076:	2380      	movs	r3, #128	@ 0x80
 8007078:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007082:	2300      	movs	r3, #0
 8007084:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007088:	e02e      	b.n	80070e8 <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 800708a:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	3302      	adds	r3, #2
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4413      	add	r3, r2
 8007096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800709a:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 800709e:	429a      	cmp	r2, r3
 80070a0:	dd08      	ble.n	80070b4 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 80070a2:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	3302      	adds	r3, #2
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	4413      	add	r3, r2
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 80070b4:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	3302      	adds	r3, #2
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	4413      	add	r3, r2
 80070c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070c4:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 80070c8:	429a      	cmp	r2, r3
 80070ca:	da08      	bge.n	80070de <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 80070cc:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	3302      	adds	r3, #2
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	4413      	add	r3, r2
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 80070de:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80070e2:	3301      	adds	r3, #1
 80070e4:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 80070e8:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 80070ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	dbca      	blt.n	800708a <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 80070f4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 80070f8:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80070fc:	e144      	b.n	8007388 <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	3b01      	subs	r3, #1
 8007108:	b29b      	uxth	r3, r3
 800710a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 800710e:	2300      	movs	r3, #0
 8007110:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007114:	e0a6      	b.n	8007264 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007116:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	4413      	add	r3, r2
 8007120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800712c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007130:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	3302      	adds	r3, #2
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	4413      	add	r3, r2
 800713c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007148:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 800714c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	4413      	add	r3, r2
 8007156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007162:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007166:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	3302      	adds	r3, #2
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4413      	add	r3, r2
 8007172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800717e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007182:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 800718e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719a:	d50c      	bpl.n	80071b6 <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 800719c:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80071a0:	ee07 3a90 	vmov	s15, r3
 80071a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071a8:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80071ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b4:	da19      	bge.n	80071ea <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 80071b6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 80071c2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80071c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ce:	d53e      	bpl.n	800724e <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 80071d0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071dc:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80071e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e8:	db31      	blt.n	800724e <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 80071ea:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071f6:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80071fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80071fe:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007202:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800720a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720e:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007212:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800721a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800721e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800722a:	ee17 3a90 	vmov	r3, s15
 800722e:	b21a      	sxth	r2, r3
 8007230:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007234:	b292      	uxth	r2, r2
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	33b0      	adds	r3, #176	@ 0xb0
 800723a:	443b      	add	r3, r7
 800723c:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007240:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007244:	b29b      	uxth	r3, r3
 8007246:	3301      	adds	r3, #1
 8007248:	b29b      	uxth	r3, r3
 800724a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 800724e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007252:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007256:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 800725a:	b29b      	uxth	r3, r3
 800725c:	3301      	adds	r3, #1
 800725e:	b29b      	uxth	r3, r3
 8007260:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007264:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800726c:	429a      	cmp	r2, r3
 800726e:	f6ff af52 	blt.w	8007116 <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007278:	e046      	b.n	8007308 <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 800727a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	33b0      	adds	r3, #176	@ 0xb0
 8007282:	443b      	add	r3, r7
 8007284:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007288:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800728c:	3301      	adds	r3, #1
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	33b0      	adds	r3, #176	@ 0xb0
 8007292:	443b      	add	r3, r7
 8007294:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007298:	429a      	cmp	r2, r3
 800729a:	d92e      	bls.n	80072fa <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 800729c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	33b0      	adds	r3, #176	@ 0xb0
 80072a4:	443b      	add	r3, r7
 80072a6:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80072aa:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 80072ae:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072b2:	3301      	adds	r3, #1
 80072b4:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	33b0      	adds	r3, #176	@ 0xb0
 80072bc:	443b      	add	r3, r7
 80072be:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 80072c2:	0053      	lsls	r3, r2, #1
 80072c4:	33b0      	adds	r3, #176	@ 0xb0
 80072c6:	443b      	add	r3, r7
 80072c8:	460a      	mov	r2, r1
 80072ca:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 80072ce:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072d2:	3301      	adds	r3, #1
 80072d4:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	33b0      	adds	r3, #176	@ 0xb0
 80072dc:	443b      	add	r3, r7
 80072de:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 80072e2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00e      	beq.n	8007308 <hagl_fill_polygon+0x2a2>
                    i--;
 80072ea:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 80072f8:	e006      	b.n	8007308 <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 80072fa:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3301      	adds	r3, #1
 8007302:	b29b      	uxth	r3, r3
 8007304:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007308:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 800730c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007310:	3b01      	subs	r3, #1
 8007312:	429a      	cmp	r2, r3
 8007314:	dbb1      	blt.n	800727a <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007316:	2300      	movs	r3, #0
 8007318:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 800731c:	e027      	b.n	800736e <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 800731e:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007322:	3301      	adds	r3, #1
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	33b0      	adds	r3, #176	@ 0xb0
 8007328:	443b      	add	r3, r7
 800732a:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 800732e:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	33b0      	adds	r3, #176	@ 0xb0
 8007336:	443b      	add	r3, r7
 8007338:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	b29b      	uxth	r3, r3
 8007340:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007344:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	33b0      	adds	r3, #176	@ 0xb0
 800734c:	443b      	add	r3, r7
 800734e:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007352:	b218      	sxth	r0, r3
 8007354:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8007358:	88bb      	ldrh	r3, [r7, #4]
 800735a:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 800735e:	f7ff f8c5 	bl	80064ec <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007362:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007366:	3302      	adds	r3, #2
 8007368:	b29b      	uxth	r3, r3
 800736a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 800736e:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007372:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007376:	429a      	cmp	r2, r3
 8007378:	dbd1      	blt.n	800731e <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 800737a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800737e:	b29b      	uxth	r3, r3
 8007380:	3301      	adds	r3, #1
 8007382:	b29b      	uxth	r3, r3
 8007384:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007388:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800738c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007390:	429a      	cmp	r2, r3
 8007392:	f6ff aeb4 	blt.w	80070fe <hagl_fill_polygon+0x98>
        }
    }
}
 8007396:	bf00      	nop
 8007398:	bf00      	nop
 800739a:	37b0      	adds	r7, #176	@ 0xb0
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 80073a0:	b590      	push	{r4, r7, lr}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	4611      	mov	r1, r2
 80073ac:	461a      	mov	r2, r3
 80073ae:	4623      	mov	r3, r4
 80073b0:	80fb      	strh	r3, [r7, #6]
 80073b2:	4603      	mov	r3, r0
 80073b4:	80bb      	strh	r3, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	807b      	strh	r3, [r7, #2]
 80073ba:	4613      	mov	r3, r2
 80073bc:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 80073be:	88fb      	ldrh	r3, [r7, #6]
 80073c0:	81bb      	strh	r3, [r7, #12]
 80073c2:	88bb      	ldrh	r3, [r7, #4]
 80073c4:	81fb      	strh	r3, [r7, #14]
 80073c6:	887b      	ldrh	r3, [r7, #2]
 80073c8:	823b      	strh	r3, [r7, #16]
 80073ca:	883b      	ldrh	r3, [r7, #0]
 80073cc:	827b      	strh	r3, [r7, #18]
 80073ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80073d0:	82bb      	strh	r3, [r7, #20]
 80073d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80073d4:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 80073d6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	4619      	mov	r1, r3
 80073de:	2003      	movs	r0, #3
 80073e0:	f7ff fde1 	bl	8006fa6 <hagl_draw_polygon>
};
 80073e4:	bf00      	nop
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd90      	pop	{r4, r7, pc}

080073ec <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 80073ec:	b590      	push	{r4, r7, lr}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4623      	mov	r3, r4
 80073fc:	80fb      	strh	r3, [r7, #6]
 80073fe:	4603      	mov	r3, r0
 8007400:	80bb      	strh	r3, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	807b      	strh	r3, [r7, #2]
 8007406:	4613      	mov	r3, r2
 8007408:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	81bb      	strh	r3, [r7, #12]
 800740e:	88bb      	ldrh	r3, [r7, #4]
 8007410:	81fb      	strh	r3, [r7, #14]
 8007412:	887b      	ldrh	r3, [r7, #2]
 8007414:	823b      	strh	r3, [r7, #16]
 8007416:	883b      	ldrh	r3, [r7, #0]
 8007418:	827b      	strh	r3, [r7, #18]
 800741a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800741c:	82bb      	strh	r3, [r7, #20]
 800741e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007420:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007422:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007424:	f107 030c 	add.w	r3, r7, #12
 8007428:	4619      	mov	r1, r3
 800742a:	2003      	movs	r0, #3
 800742c:	f7ff fe1b 	bl	8007066 <hagl_fill_polygon>
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	bd90      	pop	{r4, r7, pc}

08007438 <atoi>:
 8007438:	220a      	movs	r2, #10
 800743a:	2100      	movs	r1, #0
 800743c:	f000 b954 	b.w	80076e8 <strtol>

08007440 <calloc>:
 8007440:	4b02      	ldr	r3, [pc, #8]	@ (800744c <calloc+0xc>)
 8007442:	460a      	mov	r2, r1
 8007444:	4601      	mov	r1, r0
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	f000 b802 	b.w	8007450 <_calloc_r>
 800744c:	20000220 	.word	0x20000220

08007450 <_calloc_r>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	fba1 5402 	umull	r5, r4, r1, r2
 8007456:	b93c      	cbnz	r4, 8007468 <_calloc_r+0x18>
 8007458:	4629      	mov	r1, r5
 800745a:	f000 f83f 	bl	80074dc <_malloc_r>
 800745e:	4606      	mov	r6, r0
 8007460:	b928      	cbnz	r0, 800746e <_calloc_r+0x1e>
 8007462:	2600      	movs	r6, #0
 8007464:	4630      	mov	r0, r6
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	220c      	movs	r2, #12
 800746a:	6002      	str	r2, [r0, #0]
 800746c:	e7f9      	b.n	8007462 <_calloc_r+0x12>
 800746e:	462a      	mov	r2, r5
 8007470:	4621      	mov	r1, r4
 8007472:	f000 fbf9 	bl	8007c68 <memset>
 8007476:	e7f5      	b.n	8007464 <_calloc_r+0x14>

08007478 <malloc>:
 8007478:	4b02      	ldr	r3, [pc, #8]	@ (8007484 <malloc+0xc>)
 800747a:	4601      	mov	r1, r0
 800747c:	6818      	ldr	r0, [r3, #0]
 800747e:	f000 b82d 	b.w	80074dc <_malloc_r>
 8007482:	bf00      	nop
 8007484:	20000220 	.word	0x20000220

08007488 <free>:
 8007488:	4b02      	ldr	r3, [pc, #8]	@ (8007494 <free+0xc>)
 800748a:	4601      	mov	r1, r0
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	f000 bd25 	b.w	8007edc <_free_r>
 8007492:	bf00      	nop
 8007494:	20000220 	.word	0x20000220

08007498 <sbrk_aligned>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	4e0f      	ldr	r6, [pc, #60]	@ (80074d8 <sbrk_aligned+0x40>)
 800749c:	460c      	mov	r4, r1
 800749e:	6831      	ldr	r1, [r6, #0]
 80074a0:	4605      	mov	r5, r0
 80074a2:	b911      	cbnz	r1, 80074aa <sbrk_aligned+0x12>
 80074a4:	f000 fc9e 	bl	8007de4 <_sbrk_r>
 80074a8:	6030      	str	r0, [r6, #0]
 80074aa:	4621      	mov	r1, r4
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 fc99 	bl	8007de4 <_sbrk_r>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d103      	bne.n	80074be <sbrk_aligned+0x26>
 80074b6:	f04f 34ff 	mov.w	r4, #4294967295
 80074ba:	4620      	mov	r0, r4
 80074bc:	bd70      	pop	{r4, r5, r6, pc}
 80074be:	1cc4      	adds	r4, r0, #3
 80074c0:	f024 0403 	bic.w	r4, r4, #3
 80074c4:	42a0      	cmp	r0, r4
 80074c6:	d0f8      	beq.n	80074ba <sbrk_aligned+0x22>
 80074c8:	1a21      	subs	r1, r4, r0
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 fc8a 	bl	8007de4 <_sbrk_r>
 80074d0:	3001      	adds	r0, #1
 80074d2:	d1f2      	bne.n	80074ba <sbrk_aligned+0x22>
 80074d4:	e7ef      	b.n	80074b6 <sbrk_aligned+0x1e>
 80074d6:	bf00      	nop
 80074d8:	2000ae44 	.word	0x2000ae44

080074dc <_malloc_r>:
 80074dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e0:	1ccd      	adds	r5, r1, #3
 80074e2:	f025 0503 	bic.w	r5, r5, #3
 80074e6:	3508      	adds	r5, #8
 80074e8:	2d0c      	cmp	r5, #12
 80074ea:	bf38      	it	cc
 80074ec:	250c      	movcc	r5, #12
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	4606      	mov	r6, r0
 80074f2:	db01      	blt.n	80074f8 <_malloc_r+0x1c>
 80074f4:	42a9      	cmp	r1, r5
 80074f6:	d904      	bls.n	8007502 <_malloc_r+0x26>
 80074f8:	230c      	movs	r3, #12
 80074fa:	6033      	str	r3, [r6, #0]
 80074fc:	2000      	movs	r0, #0
 80074fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075d8 <_malloc_r+0xfc>
 8007506:	f000 f869 	bl	80075dc <__malloc_lock>
 800750a:	f8d8 3000 	ldr.w	r3, [r8]
 800750e:	461c      	mov	r4, r3
 8007510:	bb44      	cbnz	r4, 8007564 <_malloc_r+0x88>
 8007512:	4629      	mov	r1, r5
 8007514:	4630      	mov	r0, r6
 8007516:	f7ff ffbf 	bl	8007498 <sbrk_aligned>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	4604      	mov	r4, r0
 800751e:	d158      	bne.n	80075d2 <_malloc_r+0xf6>
 8007520:	f8d8 4000 	ldr.w	r4, [r8]
 8007524:	4627      	mov	r7, r4
 8007526:	2f00      	cmp	r7, #0
 8007528:	d143      	bne.n	80075b2 <_malloc_r+0xd6>
 800752a:	2c00      	cmp	r4, #0
 800752c:	d04b      	beq.n	80075c6 <_malloc_r+0xea>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	4639      	mov	r1, r7
 8007532:	4630      	mov	r0, r6
 8007534:	eb04 0903 	add.w	r9, r4, r3
 8007538:	f000 fc54 	bl	8007de4 <_sbrk_r>
 800753c:	4581      	cmp	r9, r0
 800753e:	d142      	bne.n	80075c6 <_malloc_r+0xea>
 8007540:	6821      	ldr	r1, [r4, #0]
 8007542:	1a6d      	subs	r5, r5, r1
 8007544:	4629      	mov	r1, r5
 8007546:	4630      	mov	r0, r6
 8007548:	f7ff ffa6 	bl	8007498 <sbrk_aligned>
 800754c:	3001      	adds	r0, #1
 800754e:	d03a      	beq.n	80075c6 <_malloc_r+0xea>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	442b      	add	r3, r5
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	f8d8 3000 	ldr.w	r3, [r8]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	bb62      	cbnz	r2, 80075b8 <_malloc_r+0xdc>
 800755e:	f8c8 7000 	str.w	r7, [r8]
 8007562:	e00f      	b.n	8007584 <_malloc_r+0xa8>
 8007564:	6822      	ldr	r2, [r4, #0]
 8007566:	1b52      	subs	r2, r2, r5
 8007568:	d420      	bmi.n	80075ac <_malloc_r+0xd0>
 800756a:	2a0b      	cmp	r2, #11
 800756c:	d917      	bls.n	800759e <_malloc_r+0xc2>
 800756e:	1961      	adds	r1, r4, r5
 8007570:	42a3      	cmp	r3, r4
 8007572:	6025      	str	r5, [r4, #0]
 8007574:	bf18      	it	ne
 8007576:	6059      	strne	r1, [r3, #4]
 8007578:	6863      	ldr	r3, [r4, #4]
 800757a:	bf08      	it	eq
 800757c:	f8c8 1000 	streq.w	r1, [r8]
 8007580:	5162      	str	r2, [r4, r5]
 8007582:	604b      	str	r3, [r1, #4]
 8007584:	4630      	mov	r0, r6
 8007586:	f000 f82f 	bl	80075e8 <__malloc_unlock>
 800758a:	f104 000b 	add.w	r0, r4, #11
 800758e:	1d23      	adds	r3, r4, #4
 8007590:	f020 0007 	bic.w	r0, r0, #7
 8007594:	1ac2      	subs	r2, r0, r3
 8007596:	bf1c      	itt	ne
 8007598:	1a1b      	subne	r3, r3, r0
 800759a:	50a3      	strne	r3, [r4, r2]
 800759c:	e7af      	b.n	80074fe <_malloc_r+0x22>
 800759e:	6862      	ldr	r2, [r4, #4]
 80075a0:	42a3      	cmp	r3, r4
 80075a2:	bf0c      	ite	eq
 80075a4:	f8c8 2000 	streq.w	r2, [r8]
 80075a8:	605a      	strne	r2, [r3, #4]
 80075aa:	e7eb      	b.n	8007584 <_malloc_r+0xa8>
 80075ac:	4623      	mov	r3, r4
 80075ae:	6864      	ldr	r4, [r4, #4]
 80075b0:	e7ae      	b.n	8007510 <_malloc_r+0x34>
 80075b2:	463c      	mov	r4, r7
 80075b4:	687f      	ldr	r7, [r7, #4]
 80075b6:	e7b6      	b.n	8007526 <_malloc_r+0x4a>
 80075b8:	461a      	mov	r2, r3
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	42a3      	cmp	r3, r4
 80075be:	d1fb      	bne.n	80075b8 <_malloc_r+0xdc>
 80075c0:	2300      	movs	r3, #0
 80075c2:	6053      	str	r3, [r2, #4]
 80075c4:	e7de      	b.n	8007584 <_malloc_r+0xa8>
 80075c6:	230c      	movs	r3, #12
 80075c8:	6033      	str	r3, [r6, #0]
 80075ca:	4630      	mov	r0, r6
 80075cc:	f000 f80c 	bl	80075e8 <__malloc_unlock>
 80075d0:	e794      	b.n	80074fc <_malloc_r+0x20>
 80075d2:	6005      	str	r5, [r0, #0]
 80075d4:	e7d6      	b.n	8007584 <_malloc_r+0xa8>
 80075d6:	bf00      	nop
 80075d8:	2000ae48 	.word	0x2000ae48

080075dc <__malloc_lock>:
 80075dc:	4801      	ldr	r0, [pc, #4]	@ (80075e4 <__malloc_lock+0x8>)
 80075de:	f000 bc4e 	b.w	8007e7e <__retarget_lock_acquire_recursive>
 80075e2:	bf00      	nop
 80075e4:	2000af8c 	.word	0x2000af8c

080075e8 <__malloc_unlock>:
 80075e8:	4801      	ldr	r0, [pc, #4]	@ (80075f0 <__malloc_unlock+0x8>)
 80075ea:	f000 bc49 	b.w	8007e80 <__retarget_lock_release_recursive>
 80075ee:	bf00      	nop
 80075f0:	2000af8c 	.word	0x2000af8c

080075f4 <_strtol_l.constprop.0>:
 80075f4:	2b24      	cmp	r3, #36	@ 0x24
 80075f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075fa:	4686      	mov	lr, r0
 80075fc:	4690      	mov	r8, r2
 80075fe:	d801      	bhi.n	8007604 <_strtol_l.constprop.0+0x10>
 8007600:	2b01      	cmp	r3, #1
 8007602:	d106      	bne.n	8007612 <_strtol_l.constprop.0+0x1e>
 8007604:	f000 fc10 	bl	8007e28 <__errno>
 8007608:	2316      	movs	r3, #22
 800760a:	6003      	str	r3, [r0, #0]
 800760c:	2000      	movs	r0, #0
 800760e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007612:	4834      	ldr	r0, [pc, #208]	@ (80076e4 <_strtol_l.constprop.0+0xf0>)
 8007614:	460d      	mov	r5, r1
 8007616:	462a      	mov	r2, r5
 8007618:	f815 4b01 	ldrb.w	r4, [r5], #1
 800761c:	5d06      	ldrb	r6, [r0, r4]
 800761e:	f016 0608 	ands.w	r6, r6, #8
 8007622:	d1f8      	bne.n	8007616 <_strtol_l.constprop.0+0x22>
 8007624:	2c2d      	cmp	r4, #45	@ 0x2d
 8007626:	d12d      	bne.n	8007684 <_strtol_l.constprop.0+0x90>
 8007628:	782c      	ldrb	r4, [r5, #0]
 800762a:	2601      	movs	r6, #1
 800762c:	1c95      	adds	r5, r2, #2
 800762e:	f033 0210 	bics.w	r2, r3, #16
 8007632:	d109      	bne.n	8007648 <_strtol_l.constprop.0+0x54>
 8007634:	2c30      	cmp	r4, #48	@ 0x30
 8007636:	d12a      	bne.n	800768e <_strtol_l.constprop.0+0x9a>
 8007638:	782a      	ldrb	r2, [r5, #0]
 800763a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800763e:	2a58      	cmp	r2, #88	@ 0x58
 8007640:	d125      	bne.n	800768e <_strtol_l.constprop.0+0x9a>
 8007642:	786c      	ldrb	r4, [r5, #1]
 8007644:	2310      	movs	r3, #16
 8007646:	3502      	adds	r5, #2
 8007648:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800764c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007650:	2200      	movs	r2, #0
 8007652:	fbbc f9f3 	udiv	r9, ip, r3
 8007656:	4610      	mov	r0, r2
 8007658:	fb03 ca19 	mls	sl, r3, r9, ip
 800765c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007660:	2f09      	cmp	r7, #9
 8007662:	d81b      	bhi.n	800769c <_strtol_l.constprop.0+0xa8>
 8007664:	463c      	mov	r4, r7
 8007666:	42a3      	cmp	r3, r4
 8007668:	dd27      	ble.n	80076ba <_strtol_l.constprop.0+0xc6>
 800766a:	1c57      	adds	r7, r2, #1
 800766c:	d007      	beq.n	800767e <_strtol_l.constprop.0+0x8a>
 800766e:	4581      	cmp	r9, r0
 8007670:	d320      	bcc.n	80076b4 <_strtol_l.constprop.0+0xc0>
 8007672:	d101      	bne.n	8007678 <_strtol_l.constprop.0+0x84>
 8007674:	45a2      	cmp	sl, r4
 8007676:	db1d      	blt.n	80076b4 <_strtol_l.constprop.0+0xc0>
 8007678:	fb00 4003 	mla	r0, r0, r3, r4
 800767c:	2201      	movs	r2, #1
 800767e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007682:	e7eb      	b.n	800765c <_strtol_l.constprop.0+0x68>
 8007684:	2c2b      	cmp	r4, #43	@ 0x2b
 8007686:	bf04      	itt	eq
 8007688:	782c      	ldrbeq	r4, [r5, #0]
 800768a:	1c95      	addeq	r5, r2, #2
 800768c:	e7cf      	b.n	800762e <_strtol_l.constprop.0+0x3a>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1da      	bne.n	8007648 <_strtol_l.constprop.0+0x54>
 8007692:	2c30      	cmp	r4, #48	@ 0x30
 8007694:	bf0c      	ite	eq
 8007696:	2308      	moveq	r3, #8
 8007698:	230a      	movne	r3, #10
 800769a:	e7d5      	b.n	8007648 <_strtol_l.constprop.0+0x54>
 800769c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80076a0:	2f19      	cmp	r7, #25
 80076a2:	d801      	bhi.n	80076a8 <_strtol_l.constprop.0+0xb4>
 80076a4:	3c37      	subs	r4, #55	@ 0x37
 80076a6:	e7de      	b.n	8007666 <_strtol_l.constprop.0+0x72>
 80076a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80076ac:	2f19      	cmp	r7, #25
 80076ae:	d804      	bhi.n	80076ba <_strtol_l.constprop.0+0xc6>
 80076b0:	3c57      	subs	r4, #87	@ 0x57
 80076b2:	e7d8      	b.n	8007666 <_strtol_l.constprop.0+0x72>
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	e7e1      	b.n	800767e <_strtol_l.constprop.0+0x8a>
 80076ba:	1c53      	adds	r3, r2, #1
 80076bc:	d108      	bne.n	80076d0 <_strtol_l.constprop.0+0xdc>
 80076be:	2322      	movs	r3, #34	@ 0x22
 80076c0:	f8ce 3000 	str.w	r3, [lr]
 80076c4:	4660      	mov	r0, ip
 80076c6:	f1b8 0f00 	cmp.w	r8, #0
 80076ca:	d0a0      	beq.n	800760e <_strtol_l.constprop.0+0x1a>
 80076cc:	1e69      	subs	r1, r5, #1
 80076ce:	e006      	b.n	80076de <_strtol_l.constprop.0+0xea>
 80076d0:	b106      	cbz	r6, 80076d4 <_strtol_l.constprop.0+0xe0>
 80076d2:	4240      	negs	r0, r0
 80076d4:	f1b8 0f00 	cmp.w	r8, #0
 80076d8:	d099      	beq.n	800760e <_strtol_l.constprop.0+0x1a>
 80076da:	2a00      	cmp	r2, #0
 80076dc:	d1f6      	bne.n	80076cc <_strtol_l.constprop.0+0xd8>
 80076de:	f8c8 1000 	str.w	r1, [r8]
 80076e2:	e794      	b.n	800760e <_strtol_l.constprop.0+0x1a>
 80076e4:	08012155 	.word	0x08012155

080076e8 <strtol>:
 80076e8:	4613      	mov	r3, r2
 80076ea:	460a      	mov	r2, r1
 80076ec:	4601      	mov	r1, r0
 80076ee:	4802      	ldr	r0, [pc, #8]	@ (80076f8 <strtol+0x10>)
 80076f0:	6800      	ldr	r0, [r0, #0]
 80076f2:	f7ff bf7f 	b.w	80075f4 <_strtol_l.constprop.0>
 80076f6:	bf00      	nop
 80076f8:	20000220 	.word	0x20000220

080076fc <_strtoul_l.constprop.0>:
 80076fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007700:	4e34      	ldr	r6, [pc, #208]	@ (80077d4 <_strtoul_l.constprop.0+0xd8>)
 8007702:	4686      	mov	lr, r0
 8007704:	460d      	mov	r5, r1
 8007706:	4628      	mov	r0, r5
 8007708:	f815 4b01 	ldrb.w	r4, [r5], #1
 800770c:	5d37      	ldrb	r7, [r6, r4]
 800770e:	f017 0708 	ands.w	r7, r7, #8
 8007712:	d1f8      	bne.n	8007706 <_strtoul_l.constprop.0+0xa>
 8007714:	2c2d      	cmp	r4, #45	@ 0x2d
 8007716:	d12f      	bne.n	8007778 <_strtoul_l.constprop.0+0x7c>
 8007718:	782c      	ldrb	r4, [r5, #0]
 800771a:	2701      	movs	r7, #1
 800771c:	1c85      	adds	r5, r0, #2
 800771e:	f033 0010 	bics.w	r0, r3, #16
 8007722:	d109      	bne.n	8007738 <_strtoul_l.constprop.0+0x3c>
 8007724:	2c30      	cmp	r4, #48	@ 0x30
 8007726:	d12c      	bne.n	8007782 <_strtoul_l.constprop.0+0x86>
 8007728:	7828      	ldrb	r0, [r5, #0]
 800772a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800772e:	2858      	cmp	r0, #88	@ 0x58
 8007730:	d127      	bne.n	8007782 <_strtoul_l.constprop.0+0x86>
 8007732:	786c      	ldrb	r4, [r5, #1]
 8007734:	2310      	movs	r3, #16
 8007736:	3502      	adds	r5, #2
 8007738:	f04f 38ff 	mov.w	r8, #4294967295
 800773c:	2600      	movs	r6, #0
 800773e:	fbb8 f8f3 	udiv	r8, r8, r3
 8007742:	fb03 f908 	mul.w	r9, r3, r8
 8007746:	ea6f 0909 	mvn.w	r9, r9
 800774a:	4630      	mov	r0, r6
 800774c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007750:	f1bc 0f09 	cmp.w	ip, #9
 8007754:	d81c      	bhi.n	8007790 <_strtoul_l.constprop.0+0x94>
 8007756:	4664      	mov	r4, ip
 8007758:	42a3      	cmp	r3, r4
 800775a:	dd2a      	ble.n	80077b2 <_strtoul_l.constprop.0+0xb6>
 800775c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007760:	d007      	beq.n	8007772 <_strtoul_l.constprop.0+0x76>
 8007762:	4580      	cmp	r8, r0
 8007764:	d322      	bcc.n	80077ac <_strtoul_l.constprop.0+0xb0>
 8007766:	d101      	bne.n	800776c <_strtoul_l.constprop.0+0x70>
 8007768:	45a1      	cmp	r9, r4
 800776a:	db1f      	blt.n	80077ac <_strtoul_l.constprop.0+0xb0>
 800776c:	fb00 4003 	mla	r0, r0, r3, r4
 8007770:	2601      	movs	r6, #1
 8007772:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007776:	e7e9      	b.n	800774c <_strtoul_l.constprop.0+0x50>
 8007778:	2c2b      	cmp	r4, #43	@ 0x2b
 800777a:	bf04      	itt	eq
 800777c:	782c      	ldrbeq	r4, [r5, #0]
 800777e:	1c85      	addeq	r5, r0, #2
 8007780:	e7cd      	b.n	800771e <_strtoul_l.constprop.0+0x22>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1d8      	bne.n	8007738 <_strtoul_l.constprop.0+0x3c>
 8007786:	2c30      	cmp	r4, #48	@ 0x30
 8007788:	bf0c      	ite	eq
 800778a:	2308      	moveq	r3, #8
 800778c:	230a      	movne	r3, #10
 800778e:	e7d3      	b.n	8007738 <_strtoul_l.constprop.0+0x3c>
 8007790:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007794:	f1bc 0f19 	cmp.w	ip, #25
 8007798:	d801      	bhi.n	800779e <_strtoul_l.constprop.0+0xa2>
 800779a:	3c37      	subs	r4, #55	@ 0x37
 800779c:	e7dc      	b.n	8007758 <_strtoul_l.constprop.0+0x5c>
 800779e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80077a2:	f1bc 0f19 	cmp.w	ip, #25
 80077a6:	d804      	bhi.n	80077b2 <_strtoul_l.constprop.0+0xb6>
 80077a8:	3c57      	subs	r4, #87	@ 0x57
 80077aa:	e7d5      	b.n	8007758 <_strtoul_l.constprop.0+0x5c>
 80077ac:	f04f 36ff 	mov.w	r6, #4294967295
 80077b0:	e7df      	b.n	8007772 <_strtoul_l.constprop.0+0x76>
 80077b2:	1c73      	adds	r3, r6, #1
 80077b4:	d106      	bne.n	80077c4 <_strtoul_l.constprop.0+0xc8>
 80077b6:	2322      	movs	r3, #34	@ 0x22
 80077b8:	f8ce 3000 	str.w	r3, [lr]
 80077bc:	4630      	mov	r0, r6
 80077be:	b932      	cbnz	r2, 80077ce <_strtoul_l.constprop.0+0xd2>
 80077c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077c4:	b107      	cbz	r7, 80077c8 <_strtoul_l.constprop.0+0xcc>
 80077c6:	4240      	negs	r0, r0
 80077c8:	2a00      	cmp	r2, #0
 80077ca:	d0f9      	beq.n	80077c0 <_strtoul_l.constprop.0+0xc4>
 80077cc:	b106      	cbz	r6, 80077d0 <_strtoul_l.constprop.0+0xd4>
 80077ce:	1e69      	subs	r1, r5, #1
 80077d0:	6011      	str	r1, [r2, #0]
 80077d2:	e7f5      	b.n	80077c0 <_strtoul_l.constprop.0+0xc4>
 80077d4:	08012155 	.word	0x08012155

080077d8 <strtoul>:
 80077d8:	4613      	mov	r3, r2
 80077da:	460a      	mov	r2, r1
 80077dc:	4601      	mov	r1, r0
 80077de:	4802      	ldr	r0, [pc, #8]	@ (80077e8 <strtoul+0x10>)
 80077e0:	6800      	ldr	r0, [r0, #0]
 80077e2:	f7ff bf8b 	b.w	80076fc <_strtoul_l.constprop.0>
 80077e6:	bf00      	nop
 80077e8:	20000220 	.word	0x20000220

080077ec <__sflush_r>:
 80077ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f4:	0716      	lsls	r6, r2, #28
 80077f6:	4605      	mov	r5, r0
 80077f8:	460c      	mov	r4, r1
 80077fa:	d454      	bmi.n	80078a6 <__sflush_r+0xba>
 80077fc:	684b      	ldr	r3, [r1, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	dc02      	bgt.n	8007808 <__sflush_r+0x1c>
 8007802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd48      	ble.n	800789a <__sflush_r+0xae>
 8007808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800780a:	2e00      	cmp	r6, #0
 800780c:	d045      	beq.n	800789a <__sflush_r+0xae>
 800780e:	2300      	movs	r3, #0
 8007810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007814:	682f      	ldr	r7, [r5, #0]
 8007816:	6a21      	ldr	r1, [r4, #32]
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	d030      	beq.n	800787e <__sflush_r+0x92>
 800781c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	0759      	lsls	r1, r3, #29
 8007822:	d505      	bpl.n	8007830 <__sflush_r+0x44>
 8007824:	6863      	ldr	r3, [r4, #4]
 8007826:	1ad2      	subs	r2, r2, r3
 8007828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800782a:	b10b      	cbz	r3, 8007830 <__sflush_r+0x44>
 800782c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	2300      	movs	r3, #0
 8007832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007834:	6a21      	ldr	r1, [r4, #32]
 8007836:	4628      	mov	r0, r5
 8007838:	47b0      	blx	r6
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	89a3      	ldrh	r3, [r4, #12]
 800783e:	d106      	bne.n	800784e <__sflush_r+0x62>
 8007840:	6829      	ldr	r1, [r5, #0]
 8007842:	291d      	cmp	r1, #29
 8007844:	d82b      	bhi.n	800789e <__sflush_r+0xb2>
 8007846:	4a2a      	ldr	r2, [pc, #168]	@ (80078f0 <__sflush_r+0x104>)
 8007848:	410a      	asrs	r2, r1
 800784a:	07d6      	lsls	r6, r2, #31
 800784c:	d427      	bmi.n	800789e <__sflush_r+0xb2>
 800784e:	2200      	movs	r2, #0
 8007850:	6062      	str	r2, [r4, #4]
 8007852:	04d9      	lsls	r1, r3, #19
 8007854:	6922      	ldr	r2, [r4, #16]
 8007856:	6022      	str	r2, [r4, #0]
 8007858:	d504      	bpl.n	8007864 <__sflush_r+0x78>
 800785a:	1c42      	adds	r2, r0, #1
 800785c:	d101      	bne.n	8007862 <__sflush_r+0x76>
 800785e:	682b      	ldr	r3, [r5, #0]
 8007860:	b903      	cbnz	r3, 8007864 <__sflush_r+0x78>
 8007862:	6560      	str	r0, [r4, #84]	@ 0x54
 8007864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007866:	602f      	str	r7, [r5, #0]
 8007868:	b1b9      	cbz	r1, 800789a <__sflush_r+0xae>
 800786a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800786e:	4299      	cmp	r1, r3
 8007870:	d002      	beq.n	8007878 <__sflush_r+0x8c>
 8007872:	4628      	mov	r0, r5
 8007874:	f000 fb32 	bl	8007edc <_free_r>
 8007878:	2300      	movs	r3, #0
 800787a:	6363      	str	r3, [r4, #52]	@ 0x34
 800787c:	e00d      	b.n	800789a <__sflush_r+0xae>
 800787e:	2301      	movs	r3, #1
 8007880:	4628      	mov	r0, r5
 8007882:	47b0      	blx	r6
 8007884:	4602      	mov	r2, r0
 8007886:	1c50      	adds	r0, r2, #1
 8007888:	d1c9      	bne.n	800781e <__sflush_r+0x32>
 800788a:	682b      	ldr	r3, [r5, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0c6      	beq.n	800781e <__sflush_r+0x32>
 8007890:	2b1d      	cmp	r3, #29
 8007892:	d001      	beq.n	8007898 <__sflush_r+0xac>
 8007894:	2b16      	cmp	r3, #22
 8007896:	d11e      	bne.n	80078d6 <__sflush_r+0xea>
 8007898:	602f      	str	r7, [r5, #0]
 800789a:	2000      	movs	r0, #0
 800789c:	e022      	b.n	80078e4 <__sflush_r+0xf8>
 800789e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a2:	b21b      	sxth	r3, r3
 80078a4:	e01b      	b.n	80078de <__sflush_r+0xf2>
 80078a6:	690f      	ldr	r7, [r1, #16]
 80078a8:	2f00      	cmp	r7, #0
 80078aa:	d0f6      	beq.n	800789a <__sflush_r+0xae>
 80078ac:	0793      	lsls	r3, r2, #30
 80078ae:	680e      	ldr	r6, [r1, #0]
 80078b0:	bf08      	it	eq
 80078b2:	694b      	ldreq	r3, [r1, #20]
 80078b4:	600f      	str	r7, [r1, #0]
 80078b6:	bf18      	it	ne
 80078b8:	2300      	movne	r3, #0
 80078ba:	eba6 0807 	sub.w	r8, r6, r7
 80078be:	608b      	str	r3, [r1, #8]
 80078c0:	f1b8 0f00 	cmp.w	r8, #0
 80078c4:	dde9      	ble.n	800789a <__sflush_r+0xae>
 80078c6:	6a21      	ldr	r1, [r4, #32]
 80078c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078ca:	4643      	mov	r3, r8
 80078cc:	463a      	mov	r2, r7
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b0      	blx	r6
 80078d2:	2800      	cmp	r0, #0
 80078d4:	dc08      	bgt.n	80078e8 <__sflush_r+0xfc>
 80078d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078de:	81a3      	strh	r3, [r4, #12]
 80078e0:	f04f 30ff 	mov.w	r0, #4294967295
 80078e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e8:	4407      	add	r7, r0
 80078ea:	eba8 0800 	sub.w	r8, r8, r0
 80078ee:	e7e7      	b.n	80078c0 <__sflush_r+0xd4>
 80078f0:	dfbffffe 	.word	0xdfbffffe

080078f4 <_fflush_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	690b      	ldr	r3, [r1, #16]
 80078f8:	4605      	mov	r5, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	b913      	cbnz	r3, 8007904 <_fflush_r+0x10>
 80078fe:	2500      	movs	r5, #0
 8007900:	4628      	mov	r0, r5
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	b118      	cbz	r0, 800790e <_fflush_r+0x1a>
 8007906:	6a03      	ldr	r3, [r0, #32]
 8007908:	b90b      	cbnz	r3, 800790e <_fflush_r+0x1a>
 800790a:	f000 f8a7 	bl	8007a5c <__sinit>
 800790e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0f3      	beq.n	80078fe <_fflush_r+0xa>
 8007916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007918:	07d0      	lsls	r0, r2, #31
 800791a:	d404      	bmi.n	8007926 <_fflush_r+0x32>
 800791c:	0599      	lsls	r1, r3, #22
 800791e:	d402      	bmi.n	8007926 <_fflush_r+0x32>
 8007920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007922:	f000 faac 	bl	8007e7e <__retarget_lock_acquire_recursive>
 8007926:	4628      	mov	r0, r5
 8007928:	4621      	mov	r1, r4
 800792a:	f7ff ff5f 	bl	80077ec <__sflush_r>
 800792e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007930:	07da      	lsls	r2, r3, #31
 8007932:	4605      	mov	r5, r0
 8007934:	d4e4      	bmi.n	8007900 <_fflush_r+0xc>
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	059b      	lsls	r3, r3, #22
 800793a:	d4e1      	bmi.n	8007900 <_fflush_r+0xc>
 800793c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800793e:	f000 fa9f 	bl	8007e80 <__retarget_lock_release_recursive>
 8007942:	e7dd      	b.n	8007900 <_fflush_r+0xc>

08007944 <std>:
 8007944:	2300      	movs	r3, #0
 8007946:	b510      	push	{r4, lr}
 8007948:	4604      	mov	r4, r0
 800794a:	e9c0 3300 	strd	r3, r3, [r0]
 800794e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007952:	6083      	str	r3, [r0, #8]
 8007954:	8181      	strh	r1, [r0, #12]
 8007956:	6643      	str	r3, [r0, #100]	@ 0x64
 8007958:	81c2      	strh	r2, [r0, #14]
 800795a:	6183      	str	r3, [r0, #24]
 800795c:	4619      	mov	r1, r3
 800795e:	2208      	movs	r2, #8
 8007960:	305c      	adds	r0, #92	@ 0x5c
 8007962:	f000 f981 	bl	8007c68 <memset>
 8007966:	4b0d      	ldr	r3, [pc, #52]	@ (800799c <std+0x58>)
 8007968:	6263      	str	r3, [r4, #36]	@ 0x24
 800796a:	4b0d      	ldr	r3, [pc, #52]	@ (80079a0 <std+0x5c>)
 800796c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800796e:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <std+0x60>)
 8007970:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007972:	4b0d      	ldr	r3, [pc, #52]	@ (80079a8 <std+0x64>)
 8007974:	6323      	str	r3, [r4, #48]	@ 0x30
 8007976:	4b0d      	ldr	r3, [pc, #52]	@ (80079ac <std+0x68>)
 8007978:	6224      	str	r4, [r4, #32]
 800797a:	429c      	cmp	r4, r3
 800797c:	d006      	beq.n	800798c <std+0x48>
 800797e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007982:	4294      	cmp	r4, r2
 8007984:	d002      	beq.n	800798c <std+0x48>
 8007986:	33d0      	adds	r3, #208	@ 0xd0
 8007988:	429c      	cmp	r4, r3
 800798a:	d105      	bne.n	8007998 <std+0x54>
 800798c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007994:	f000 ba72 	b.w	8007e7c <__retarget_lock_init_recursive>
 8007998:	bd10      	pop	{r4, pc}
 800799a:	bf00      	nop
 800799c:	08007b31 	.word	0x08007b31
 80079a0:	08007b53 	.word	0x08007b53
 80079a4:	08007b8b 	.word	0x08007b8b
 80079a8:	08007baf 	.word	0x08007baf
 80079ac:	2000ae4c 	.word	0x2000ae4c

080079b0 <stdio_exit_handler>:
 80079b0:	4a02      	ldr	r2, [pc, #8]	@ (80079bc <stdio_exit_handler+0xc>)
 80079b2:	4903      	ldr	r1, [pc, #12]	@ (80079c0 <stdio_exit_handler+0x10>)
 80079b4:	4803      	ldr	r0, [pc, #12]	@ (80079c4 <stdio_exit_handler+0x14>)
 80079b6:	f000 b869 	b.w	8007a8c <_fwalk_sglue>
 80079ba:	bf00      	nop
 80079bc:	20000214 	.word	0x20000214
 80079c0:	080078f5 	.word	0x080078f5
 80079c4:	20000224 	.word	0x20000224

080079c8 <cleanup_stdio>:
 80079c8:	6841      	ldr	r1, [r0, #4]
 80079ca:	4b0c      	ldr	r3, [pc, #48]	@ (80079fc <cleanup_stdio+0x34>)
 80079cc:	4299      	cmp	r1, r3
 80079ce:	b510      	push	{r4, lr}
 80079d0:	4604      	mov	r4, r0
 80079d2:	d001      	beq.n	80079d8 <cleanup_stdio+0x10>
 80079d4:	f7ff ff8e 	bl	80078f4 <_fflush_r>
 80079d8:	68a1      	ldr	r1, [r4, #8]
 80079da:	4b09      	ldr	r3, [pc, #36]	@ (8007a00 <cleanup_stdio+0x38>)
 80079dc:	4299      	cmp	r1, r3
 80079de:	d002      	beq.n	80079e6 <cleanup_stdio+0x1e>
 80079e0:	4620      	mov	r0, r4
 80079e2:	f7ff ff87 	bl	80078f4 <_fflush_r>
 80079e6:	68e1      	ldr	r1, [r4, #12]
 80079e8:	4b06      	ldr	r3, [pc, #24]	@ (8007a04 <cleanup_stdio+0x3c>)
 80079ea:	4299      	cmp	r1, r3
 80079ec:	d004      	beq.n	80079f8 <cleanup_stdio+0x30>
 80079ee:	4620      	mov	r0, r4
 80079f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f4:	f7ff bf7e 	b.w	80078f4 <_fflush_r>
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	bf00      	nop
 80079fc:	2000ae4c 	.word	0x2000ae4c
 8007a00:	2000aeb4 	.word	0x2000aeb4
 8007a04:	2000af1c 	.word	0x2000af1c

08007a08 <global_stdio_init.part.0>:
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a38 <global_stdio_init.part.0+0x30>)
 8007a0c:	4c0b      	ldr	r4, [pc, #44]	@ (8007a3c <global_stdio_init.part.0+0x34>)
 8007a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8007a40 <global_stdio_init.part.0+0x38>)
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	4620      	mov	r0, r4
 8007a14:	2200      	movs	r2, #0
 8007a16:	2104      	movs	r1, #4
 8007a18:	f7ff ff94 	bl	8007944 <std>
 8007a1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a20:	2201      	movs	r2, #1
 8007a22:	2109      	movs	r1, #9
 8007a24:	f7ff ff8e 	bl	8007944 <std>
 8007a28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a32:	2112      	movs	r1, #18
 8007a34:	f7ff bf86 	b.w	8007944 <std>
 8007a38:	2000af84 	.word	0x2000af84
 8007a3c:	2000ae4c 	.word	0x2000ae4c
 8007a40:	080079b1 	.word	0x080079b1

08007a44 <__sfp_lock_acquire>:
 8007a44:	4801      	ldr	r0, [pc, #4]	@ (8007a4c <__sfp_lock_acquire+0x8>)
 8007a46:	f000 ba1a 	b.w	8007e7e <__retarget_lock_acquire_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	2000af8d 	.word	0x2000af8d

08007a50 <__sfp_lock_release>:
 8007a50:	4801      	ldr	r0, [pc, #4]	@ (8007a58 <__sfp_lock_release+0x8>)
 8007a52:	f000 ba15 	b.w	8007e80 <__retarget_lock_release_recursive>
 8007a56:	bf00      	nop
 8007a58:	2000af8d 	.word	0x2000af8d

08007a5c <__sinit>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	4604      	mov	r4, r0
 8007a60:	f7ff fff0 	bl	8007a44 <__sfp_lock_acquire>
 8007a64:	6a23      	ldr	r3, [r4, #32]
 8007a66:	b11b      	cbz	r3, 8007a70 <__sinit+0x14>
 8007a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a6c:	f7ff bff0 	b.w	8007a50 <__sfp_lock_release>
 8007a70:	4b04      	ldr	r3, [pc, #16]	@ (8007a84 <__sinit+0x28>)
 8007a72:	6223      	str	r3, [r4, #32]
 8007a74:	4b04      	ldr	r3, [pc, #16]	@ (8007a88 <__sinit+0x2c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f5      	bne.n	8007a68 <__sinit+0xc>
 8007a7c:	f7ff ffc4 	bl	8007a08 <global_stdio_init.part.0>
 8007a80:	e7f2      	b.n	8007a68 <__sinit+0xc>
 8007a82:	bf00      	nop
 8007a84:	080079c9 	.word	0x080079c9
 8007a88:	2000af84 	.word	0x2000af84

08007a8c <_fwalk_sglue>:
 8007a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a90:	4607      	mov	r7, r0
 8007a92:	4688      	mov	r8, r1
 8007a94:	4614      	mov	r4, r2
 8007a96:	2600      	movs	r6, #0
 8007a98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a9c:	f1b9 0901 	subs.w	r9, r9, #1
 8007aa0:	d505      	bpl.n	8007aae <_fwalk_sglue+0x22>
 8007aa2:	6824      	ldr	r4, [r4, #0]
 8007aa4:	2c00      	cmp	r4, #0
 8007aa6:	d1f7      	bne.n	8007a98 <_fwalk_sglue+0xc>
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aae:	89ab      	ldrh	r3, [r5, #12]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d907      	bls.n	8007ac4 <_fwalk_sglue+0x38>
 8007ab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	d003      	beq.n	8007ac4 <_fwalk_sglue+0x38>
 8007abc:	4629      	mov	r1, r5
 8007abe:	4638      	mov	r0, r7
 8007ac0:	47c0      	blx	r8
 8007ac2:	4306      	orrs	r6, r0
 8007ac4:	3568      	adds	r5, #104	@ 0x68
 8007ac6:	e7e9      	b.n	8007a9c <_fwalk_sglue+0x10>

08007ac8 <sniprintf>:
 8007ac8:	b40c      	push	{r2, r3}
 8007aca:	b530      	push	{r4, r5, lr}
 8007acc:	4b17      	ldr	r3, [pc, #92]	@ (8007b2c <sniprintf+0x64>)
 8007ace:	1e0c      	subs	r4, r1, #0
 8007ad0:	681d      	ldr	r5, [r3, #0]
 8007ad2:	b09d      	sub	sp, #116	@ 0x74
 8007ad4:	da08      	bge.n	8007ae8 <sniprintf+0x20>
 8007ad6:	238b      	movs	r3, #139	@ 0x8b
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	f04f 30ff 	mov.w	r0, #4294967295
 8007ade:	b01d      	add	sp, #116	@ 0x74
 8007ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ae4:	b002      	add	sp, #8
 8007ae6:	4770      	bx	lr
 8007ae8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007aec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007af0:	bf14      	ite	ne
 8007af2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007af6:	4623      	moveq	r3, r4
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	9307      	str	r3, [sp, #28]
 8007afc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b00:	9002      	str	r0, [sp, #8]
 8007b02:	9006      	str	r0, [sp, #24]
 8007b04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b0a:	ab21      	add	r3, sp, #132	@ 0x84
 8007b0c:	a902      	add	r1, sp, #8
 8007b0e:	4628      	mov	r0, r5
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	f000 fa89 	bl	8008028 <_svfiprintf_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	bfbc      	itt	lt
 8007b1a:	238b      	movlt	r3, #139	@ 0x8b
 8007b1c:	602b      	strlt	r3, [r5, #0]
 8007b1e:	2c00      	cmp	r4, #0
 8007b20:	d0dd      	beq.n	8007ade <sniprintf+0x16>
 8007b22:	9b02      	ldr	r3, [sp, #8]
 8007b24:	2200      	movs	r2, #0
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	e7d9      	b.n	8007ade <sniprintf+0x16>
 8007b2a:	bf00      	nop
 8007b2c:	20000220 	.word	0x20000220

08007b30 <__sread>:
 8007b30:	b510      	push	{r4, lr}
 8007b32:	460c      	mov	r4, r1
 8007b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b38:	f000 f942 	bl	8007dc0 <_read_r>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	bfab      	itete	ge
 8007b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b42:	89a3      	ldrhlt	r3, [r4, #12]
 8007b44:	181b      	addge	r3, r3, r0
 8007b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b4a:	bfac      	ite	ge
 8007b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b4e:	81a3      	strhlt	r3, [r4, #12]
 8007b50:	bd10      	pop	{r4, pc}

08007b52 <__swrite>:
 8007b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b56:	461f      	mov	r7, r3
 8007b58:	898b      	ldrh	r3, [r1, #12]
 8007b5a:	05db      	lsls	r3, r3, #23
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	4616      	mov	r6, r2
 8007b62:	d505      	bpl.n	8007b70 <__swrite+0x1e>
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	2302      	movs	r3, #2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f000 f916 	bl	8007d9c <_lseek_r>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	4632      	mov	r2, r6
 8007b7e:	463b      	mov	r3, r7
 8007b80:	4628      	mov	r0, r5
 8007b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b86:	f000 b93d 	b.w	8007e04 <_write_r>

08007b8a <__sseek>:
 8007b8a:	b510      	push	{r4, lr}
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b92:	f000 f903 	bl	8007d9c <_lseek_r>
 8007b96:	1c43      	adds	r3, r0, #1
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	bf15      	itete	ne
 8007b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ba6:	81a3      	strheq	r3, [r4, #12]
 8007ba8:	bf18      	it	ne
 8007baa:	81a3      	strhne	r3, [r4, #12]
 8007bac:	bd10      	pop	{r4, pc}

08007bae <__sclose>:
 8007bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb2:	f000 b8e3 	b.w	8007d7c <_close_r>

08007bb6 <_vsniprintf_r>:
 8007bb6:	b530      	push	{r4, r5, lr}
 8007bb8:	4614      	mov	r4, r2
 8007bba:	2c00      	cmp	r4, #0
 8007bbc:	b09b      	sub	sp, #108	@ 0x6c
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	da05      	bge.n	8007bd0 <_vsniprintf_r+0x1a>
 8007bc4:	238b      	movs	r3, #139	@ 0x8b
 8007bc6:	6003      	str	r3, [r0, #0]
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	b01b      	add	sp, #108	@ 0x6c
 8007bce:	bd30      	pop	{r4, r5, pc}
 8007bd0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007bd4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007bd8:	bf14      	ite	ne
 8007bda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007bde:	4623      	moveq	r3, r4
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	9305      	str	r3, [sp, #20]
 8007be4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007be8:	9100      	str	r1, [sp, #0]
 8007bea:	9104      	str	r1, [sp, #16]
 8007bec:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007bf0:	4669      	mov	r1, sp
 8007bf2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007bf4:	f000 fa18 	bl	8008028 <_svfiprintf_r>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	bfbc      	itt	lt
 8007bfc:	238b      	movlt	r3, #139	@ 0x8b
 8007bfe:	602b      	strlt	r3, [r5, #0]
 8007c00:	2c00      	cmp	r4, #0
 8007c02:	d0e3      	beq.n	8007bcc <_vsniprintf_r+0x16>
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	2200      	movs	r2, #0
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e7df      	b.n	8007bcc <_vsniprintf_r+0x16>

08007c0c <vsniprintf>:
 8007c0c:	b507      	push	{r0, r1, r2, lr}
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	4613      	mov	r3, r2
 8007c12:	460a      	mov	r2, r1
 8007c14:	4601      	mov	r1, r0
 8007c16:	4803      	ldr	r0, [pc, #12]	@ (8007c24 <vsniprintf+0x18>)
 8007c18:	6800      	ldr	r0, [r0, #0]
 8007c1a:	f7ff ffcc 	bl	8007bb6 <_vsniprintf_r>
 8007c1e:	b003      	add	sp, #12
 8007c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c24:	20000220 	.word	0x20000220

08007c28 <_vsiprintf_r>:
 8007c28:	b500      	push	{lr}
 8007c2a:	b09b      	sub	sp, #108	@ 0x6c
 8007c2c:	9100      	str	r1, [sp, #0]
 8007c2e:	9104      	str	r1, [sp, #16]
 8007c30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c34:	9105      	str	r1, [sp, #20]
 8007c36:	9102      	str	r1, [sp, #8]
 8007c38:	4905      	ldr	r1, [pc, #20]	@ (8007c50 <_vsiprintf_r+0x28>)
 8007c3a:	9103      	str	r1, [sp, #12]
 8007c3c:	4669      	mov	r1, sp
 8007c3e:	f000 f9f3 	bl	8008028 <_svfiprintf_r>
 8007c42:	9b00      	ldr	r3, [sp, #0]
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
 8007c48:	b01b      	add	sp, #108	@ 0x6c
 8007c4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c4e:	bf00      	nop
 8007c50:	ffff0208 	.word	0xffff0208

08007c54 <vsiprintf>:
 8007c54:	4613      	mov	r3, r2
 8007c56:	460a      	mov	r2, r1
 8007c58:	4601      	mov	r1, r0
 8007c5a:	4802      	ldr	r0, [pc, #8]	@ (8007c64 <vsiprintf+0x10>)
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f7ff bfe3 	b.w	8007c28 <_vsiprintf_r>
 8007c62:	bf00      	nop
 8007c64:	20000220 	.word	0x20000220

08007c68 <memset>:
 8007c68:	4402      	add	r2, r0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d100      	bne.n	8007c72 <memset+0xa>
 8007c70:	4770      	bx	lr
 8007c72:	f803 1b01 	strb.w	r1, [r3], #1
 8007c76:	e7f9      	b.n	8007c6c <memset+0x4>

08007c78 <strncmp>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	b16a      	cbz	r2, 8007c98 <strncmp+0x20>
 8007c7c:	3901      	subs	r1, #1
 8007c7e:	1884      	adds	r4, r0, r2
 8007c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d103      	bne.n	8007c94 <strncmp+0x1c>
 8007c8c:	42a0      	cmp	r0, r4
 8007c8e:	d001      	beq.n	8007c94 <strncmp+0x1c>
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d1f5      	bne.n	8007c80 <strncmp+0x8>
 8007c94:	1ad0      	subs	r0, r2, r3
 8007c96:	bd10      	pop	{r4, pc}
 8007c98:	4610      	mov	r0, r2
 8007c9a:	e7fc      	b.n	8007c96 <strncmp+0x1e>

08007c9c <strncpy>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	3901      	subs	r1, #1
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	b132      	cbz	r2, 8007cb2 <strncpy+0x16>
 8007ca4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007ca8:	f803 4b01 	strb.w	r4, [r3], #1
 8007cac:	3a01      	subs	r2, #1
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	d1f7      	bne.n	8007ca2 <strncpy+0x6>
 8007cb2:	441a      	add	r2, r3
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d100      	bne.n	8007cbc <strncpy+0x20>
 8007cba:	bd10      	pop	{r4, pc}
 8007cbc:	f803 1b01 	strb.w	r1, [r3], #1
 8007cc0:	e7f9      	b.n	8007cb6 <strncpy+0x1a>
	...

08007cc4 <strtok>:
 8007cc4:	4b16      	ldr	r3, [pc, #88]	@ (8007d20 <strtok+0x5c>)
 8007cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cca:	681f      	ldr	r7, [r3, #0]
 8007ccc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007cce:	4605      	mov	r5, r0
 8007cd0:	460e      	mov	r6, r1
 8007cd2:	b9ec      	cbnz	r4, 8007d10 <strtok+0x4c>
 8007cd4:	2050      	movs	r0, #80	@ 0x50
 8007cd6:	f7ff fbcf 	bl	8007478 <malloc>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6478      	str	r0, [r7, #68]	@ 0x44
 8007cde:	b920      	cbnz	r0, 8007cea <strtok+0x26>
 8007ce0:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <strtok+0x60>)
 8007ce2:	4811      	ldr	r0, [pc, #68]	@ (8007d28 <strtok+0x64>)
 8007ce4:	215b      	movs	r1, #91	@ 0x5b
 8007ce6:	f000 f8db 	bl	8007ea0 <__assert_func>
 8007cea:	e9c0 4400 	strd	r4, r4, [r0]
 8007cee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007cf2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007cf6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007cfa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007cfe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007d02:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007d06:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007d0a:	6184      	str	r4, [r0, #24]
 8007d0c:	7704      	strb	r4, [r0, #28]
 8007d0e:	6244      	str	r4, [r0, #36]	@ 0x24
 8007d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d12:	4631      	mov	r1, r6
 8007d14:	4628      	mov	r0, r5
 8007d16:	2301      	movs	r3, #1
 8007d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	f000 b806 	b.w	8007d2c <__strtok_r>
 8007d20:	20000220 	.word	0x20000220
 8007d24:	08012255 	.word	0x08012255
 8007d28:	0801226c 	.word	0x0801226c

08007d2c <__strtok_r>:
 8007d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d2e:	4604      	mov	r4, r0
 8007d30:	b908      	cbnz	r0, 8007d36 <__strtok_r+0xa>
 8007d32:	6814      	ldr	r4, [r2, #0]
 8007d34:	b144      	cbz	r4, 8007d48 <__strtok_r+0x1c>
 8007d36:	4620      	mov	r0, r4
 8007d38:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007d42:	b91e      	cbnz	r6, 8007d4c <__strtok_r+0x20>
 8007d44:	b965      	cbnz	r5, 8007d60 <__strtok_r+0x34>
 8007d46:	6015      	str	r5, [r2, #0]
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e005      	b.n	8007d58 <__strtok_r+0x2c>
 8007d4c:	42b5      	cmp	r5, r6
 8007d4e:	d1f6      	bne.n	8007d3e <__strtok_r+0x12>
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1f0      	bne.n	8007d36 <__strtok_r+0xa>
 8007d54:	6014      	str	r4, [r2, #0]
 8007d56:	7003      	strb	r3, [r0, #0]
 8007d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d5a:	461c      	mov	r4, r3
 8007d5c:	e00c      	b.n	8007d78 <__strtok_r+0x4c>
 8007d5e:	b915      	cbnz	r5, 8007d66 <__strtok_r+0x3a>
 8007d60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d64:	460e      	mov	r6, r1
 8007d66:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007d6a:	42ab      	cmp	r3, r5
 8007d6c:	d1f7      	bne.n	8007d5e <__strtok_r+0x32>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f3      	beq.n	8007d5a <__strtok_r+0x2e>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007d78:	6014      	str	r4, [r2, #0]
 8007d7a:	e7ed      	b.n	8007d58 <__strtok_r+0x2c>

08007d7c <_close_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d06      	ldr	r5, [pc, #24]	@ (8007d98 <_close_r+0x1c>)
 8007d80:	2300      	movs	r3, #0
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	f7fa f8b0 	bl	8001eec <_close>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_close_r+0x1a>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_close_r+0x1a>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	2000af88 	.word	0x2000af88

08007d9c <_lseek_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	4d07      	ldr	r5, [pc, #28]	@ (8007dbc <_lseek_r+0x20>)
 8007da0:	4604      	mov	r4, r0
 8007da2:	4608      	mov	r0, r1
 8007da4:	4611      	mov	r1, r2
 8007da6:	2200      	movs	r2, #0
 8007da8:	602a      	str	r2, [r5, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	f7fa f8c5 	bl	8001f3a <_lseek>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_lseek_r+0x1e>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_lseek_r+0x1e>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	2000af88 	.word	0x2000af88

08007dc0 <_read_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	@ (8007de0 <_read_r+0x20>)
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	602a      	str	r2, [r5, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f7fa f853 	bl	8001e7a <_read>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_read_r+0x1e>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_read_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	2000af88 	.word	0x2000af88

08007de4 <_sbrk_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d06      	ldr	r5, [pc, #24]	@ (8007e00 <_sbrk_r+0x1c>)
 8007de8:	2300      	movs	r3, #0
 8007dea:	4604      	mov	r4, r0
 8007dec:	4608      	mov	r0, r1
 8007dee:	602b      	str	r3, [r5, #0]
 8007df0:	f7fa f8b0 	bl	8001f54 <_sbrk>
 8007df4:	1c43      	adds	r3, r0, #1
 8007df6:	d102      	bne.n	8007dfe <_sbrk_r+0x1a>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	b103      	cbz	r3, 8007dfe <_sbrk_r+0x1a>
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	bd38      	pop	{r3, r4, r5, pc}
 8007e00:	2000af88 	.word	0x2000af88

08007e04 <_write_r>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	4d07      	ldr	r5, [pc, #28]	@ (8007e24 <_write_r+0x20>)
 8007e08:	4604      	mov	r4, r0
 8007e0a:	4608      	mov	r0, r1
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	2200      	movs	r2, #0
 8007e10:	602a      	str	r2, [r5, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	f7fa f84e 	bl	8001eb4 <_write>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_write_r+0x1e>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_write_r+0x1e>
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	2000af88 	.word	0x2000af88

08007e28 <__errno>:
 8007e28:	4b01      	ldr	r3, [pc, #4]	@ (8007e30 <__errno+0x8>)
 8007e2a:	6818      	ldr	r0, [r3, #0]
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000220 	.word	0x20000220

08007e34 <__libc_init_array>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	4d0d      	ldr	r5, [pc, #52]	@ (8007e6c <__libc_init_array+0x38>)
 8007e38:	4c0d      	ldr	r4, [pc, #52]	@ (8007e70 <__libc_init_array+0x3c>)
 8007e3a:	1b64      	subs	r4, r4, r5
 8007e3c:	10a4      	asrs	r4, r4, #2
 8007e3e:	2600      	movs	r6, #0
 8007e40:	42a6      	cmp	r6, r4
 8007e42:	d109      	bne.n	8007e58 <__libc_init_array+0x24>
 8007e44:	4d0b      	ldr	r5, [pc, #44]	@ (8007e74 <__libc_init_array+0x40>)
 8007e46:	4c0c      	ldr	r4, [pc, #48]	@ (8007e78 <__libc_init_array+0x44>)
 8007e48:	f000 fe7e 	bl	8008b48 <_init>
 8007e4c:	1b64      	subs	r4, r4, r5
 8007e4e:	10a4      	asrs	r4, r4, #2
 8007e50:	2600      	movs	r6, #0
 8007e52:	42a6      	cmp	r6, r4
 8007e54:	d105      	bne.n	8007e62 <__libc_init_array+0x2e>
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5c:	4798      	blx	r3
 8007e5e:	3601      	adds	r6, #1
 8007e60:	e7ee      	b.n	8007e40 <__libc_init_array+0xc>
 8007e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e66:	4798      	blx	r3
 8007e68:	3601      	adds	r6, #1
 8007e6a:	e7f2      	b.n	8007e52 <__libc_init_array+0x1e>
 8007e6c:	08012340 	.word	0x08012340
 8007e70:	08012340 	.word	0x08012340
 8007e74:	08012340 	.word	0x08012340
 8007e78:	08012344 	.word	0x08012344

08007e7c <__retarget_lock_init_recursive>:
 8007e7c:	4770      	bx	lr

08007e7e <__retarget_lock_acquire_recursive>:
 8007e7e:	4770      	bx	lr

08007e80 <__retarget_lock_release_recursive>:
 8007e80:	4770      	bx	lr

08007e82 <memcpy>:
 8007e82:	440a      	add	r2, r1
 8007e84:	4291      	cmp	r1, r2
 8007e86:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e8a:	d100      	bne.n	8007e8e <memcpy+0xc>
 8007e8c:	4770      	bx	lr
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e98:	4291      	cmp	r1, r2
 8007e9a:	d1f9      	bne.n	8007e90 <memcpy+0xe>
 8007e9c:	bd10      	pop	{r4, pc}
	...

08007ea0 <__assert_func>:
 8007ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ea2:	4614      	mov	r4, r2
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	4b09      	ldr	r3, [pc, #36]	@ (8007ecc <__assert_func+0x2c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4605      	mov	r5, r0
 8007eac:	68d8      	ldr	r0, [r3, #12]
 8007eae:	b954      	cbnz	r4, 8007ec6 <__assert_func+0x26>
 8007eb0:	4b07      	ldr	r3, [pc, #28]	@ (8007ed0 <__assert_func+0x30>)
 8007eb2:	461c      	mov	r4, r3
 8007eb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007eb8:	9100      	str	r1, [sp, #0]
 8007eba:	462b      	mov	r3, r5
 8007ebc:	4905      	ldr	r1, [pc, #20]	@ (8007ed4 <__assert_func+0x34>)
 8007ebe:	f000 fb3d 	bl	800853c <fiprintf>
 8007ec2:	f000 fbeb 	bl	800869c <abort>
 8007ec6:	4b04      	ldr	r3, [pc, #16]	@ (8007ed8 <__assert_func+0x38>)
 8007ec8:	e7f4      	b.n	8007eb4 <__assert_func+0x14>
 8007eca:	bf00      	nop
 8007ecc:	20000220 	.word	0x20000220
 8007ed0:	08012301 	.word	0x08012301
 8007ed4:	080122d3 	.word	0x080122d3
 8007ed8:	080122c6 	.word	0x080122c6

08007edc <_free_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4605      	mov	r5, r0
 8007ee0:	2900      	cmp	r1, #0
 8007ee2:	d041      	beq.n	8007f68 <_free_r+0x8c>
 8007ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee8:	1f0c      	subs	r4, r1, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	bfb8      	it	lt
 8007eee:	18e4      	addlt	r4, r4, r3
 8007ef0:	f7ff fb74 	bl	80075dc <__malloc_lock>
 8007ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f6c <_free_r+0x90>)
 8007ef6:	6813      	ldr	r3, [r2, #0]
 8007ef8:	b933      	cbnz	r3, 8007f08 <_free_r+0x2c>
 8007efa:	6063      	str	r3, [r4, #4]
 8007efc:	6014      	str	r4, [r2, #0]
 8007efe:	4628      	mov	r0, r5
 8007f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f04:	f7ff bb70 	b.w	80075e8 <__malloc_unlock>
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d908      	bls.n	8007f1e <_free_r+0x42>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	1821      	adds	r1, r4, r0
 8007f10:	428b      	cmp	r3, r1
 8007f12:	bf01      	itttt	eq
 8007f14:	6819      	ldreq	r1, [r3, #0]
 8007f16:	685b      	ldreq	r3, [r3, #4]
 8007f18:	1809      	addeq	r1, r1, r0
 8007f1a:	6021      	streq	r1, [r4, #0]
 8007f1c:	e7ed      	b.n	8007efa <_free_r+0x1e>
 8007f1e:	461a      	mov	r2, r3
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	b10b      	cbz	r3, 8007f28 <_free_r+0x4c>
 8007f24:	42a3      	cmp	r3, r4
 8007f26:	d9fa      	bls.n	8007f1e <_free_r+0x42>
 8007f28:	6811      	ldr	r1, [r2, #0]
 8007f2a:	1850      	adds	r0, r2, r1
 8007f2c:	42a0      	cmp	r0, r4
 8007f2e:	d10b      	bne.n	8007f48 <_free_r+0x6c>
 8007f30:	6820      	ldr	r0, [r4, #0]
 8007f32:	4401      	add	r1, r0
 8007f34:	1850      	adds	r0, r2, r1
 8007f36:	4283      	cmp	r3, r0
 8007f38:	6011      	str	r1, [r2, #0]
 8007f3a:	d1e0      	bne.n	8007efe <_free_r+0x22>
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	6053      	str	r3, [r2, #4]
 8007f42:	4408      	add	r0, r1
 8007f44:	6010      	str	r0, [r2, #0]
 8007f46:	e7da      	b.n	8007efe <_free_r+0x22>
 8007f48:	d902      	bls.n	8007f50 <_free_r+0x74>
 8007f4a:	230c      	movs	r3, #12
 8007f4c:	602b      	str	r3, [r5, #0]
 8007f4e:	e7d6      	b.n	8007efe <_free_r+0x22>
 8007f50:	6820      	ldr	r0, [r4, #0]
 8007f52:	1821      	adds	r1, r4, r0
 8007f54:	428b      	cmp	r3, r1
 8007f56:	bf04      	itt	eq
 8007f58:	6819      	ldreq	r1, [r3, #0]
 8007f5a:	685b      	ldreq	r3, [r3, #4]
 8007f5c:	6063      	str	r3, [r4, #4]
 8007f5e:	bf04      	itt	eq
 8007f60:	1809      	addeq	r1, r1, r0
 8007f62:	6021      	streq	r1, [r4, #0]
 8007f64:	6054      	str	r4, [r2, #4]
 8007f66:	e7ca      	b.n	8007efe <_free_r+0x22>
 8007f68:	bd38      	pop	{r3, r4, r5, pc}
 8007f6a:	bf00      	nop
 8007f6c:	2000ae48 	.word	0x2000ae48

08007f70 <__ssputs_r>:
 8007f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f74:	688e      	ldr	r6, [r1, #8]
 8007f76:	461f      	mov	r7, r3
 8007f78:	42be      	cmp	r6, r7
 8007f7a:	680b      	ldr	r3, [r1, #0]
 8007f7c:	4682      	mov	sl, r0
 8007f7e:	460c      	mov	r4, r1
 8007f80:	4690      	mov	r8, r2
 8007f82:	d82d      	bhi.n	8007fe0 <__ssputs_r+0x70>
 8007f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f8c:	d026      	beq.n	8007fdc <__ssputs_r+0x6c>
 8007f8e:	6965      	ldr	r5, [r4, #20]
 8007f90:	6909      	ldr	r1, [r1, #16]
 8007f92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f96:	eba3 0901 	sub.w	r9, r3, r1
 8007f9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f9e:	1c7b      	adds	r3, r7, #1
 8007fa0:	444b      	add	r3, r9
 8007fa2:	106d      	asrs	r5, r5, #1
 8007fa4:	429d      	cmp	r5, r3
 8007fa6:	bf38      	it	cc
 8007fa8:	461d      	movcc	r5, r3
 8007faa:	0553      	lsls	r3, r2, #21
 8007fac:	d527      	bpl.n	8007ffe <__ssputs_r+0x8e>
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7ff fa94 	bl	80074dc <_malloc_r>
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	b360      	cbz	r0, 8008012 <__ssputs_r+0xa2>
 8007fb8:	6921      	ldr	r1, [r4, #16]
 8007fba:	464a      	mov	r2, r9
 8007fbc:	f7ff ff61 	bl	8007e82 <memcpy>
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	6126      	str	r6, [r4, #16]
 8007fce:	6165      	str	r5, [r4, #20]
 8007fd0:	444e      	add	r6, r9
 8007fd2:	eba5 0509 	sub.w	r5, r5, r9
 8007fd6:	6026      	str	r6, [r4, #0]
 8007fd8:	60a5      	str	r5, [r4, #8]
 8007fda:	463e      	mov	r6, r7
 8007fdc:	42be      	cmp	r6, r7
 8007fde:	d900      	bls.n	8007fe2 <__ssputs_r+0x72>
 8007fe0:	463e      	mov	r6, r7
 8007fe2:	6820      	ldr	r0, [r4, #0]
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	4641      	mov	r1, r8
 8007fe8:	f000 fb1c 	bl	8008624 <memmove>
 8007fec:	68a3      	ldr	r3, [r4, #8]
 8007fee:	1b9b      	subs	r3, r3, r6
 8007ff0:	60a3      	str	r3, [r4, #8]
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	4433      	add	r3, r6
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ffe:	462a      	mov	r2, r5
 8008000:	f000 fb53 	bl	80086aa <_realloc_r>
 8008004:	4606      	mov	r6, r0
 8008006:	2800      	cmp	r0, #0
 8008008:	d1e0      	bne.n	8007fcc <__ssputs_r+0x5c>
 800800a:	6921      	ldr	r1, [r4, #16]
 800800c:	4650      	mov	r0, sl
 800800e:	f7ff ff65 	bl	8007edc <_free_r>
 8008012:	230c      	movs	r3, #12
 8008014:	f8ca 3000 	str.w	r3, [sl]
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	f04f 30ff 	mov.w	r0, #4294967295
 8008024:	e7e9      	b.n	8007ffa <__ssputs_r+0x8a>
	...

08008028 <_svfiprintf_r>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	4698      	mov	r8, r3
 800802e:	898b      	ldrh	r3, [r1, #12]
 8008030:	061b      	lsls	r3, r3, #24
 8008032:	b09d      	sub	sp, #116	@ 0x74
 8008034:	4607      	mov	r7, r0
 8008036:	460d      	mov	r5, r1
 8008038:	4614      	mov	r4, r2
 800803a:	d510      	bpl.n	800805e <_svfiprintf_r+0x36>
 800803c:	690b      	ldr	r3, [r1, #16]
 800803e:	b973      	cbnz	r3, 800805e <_svfiprintf_r+0x36>
 8008040:	2140      	movs	r1, #64	@ 0x40
 8008042:	f7ff fa4b 	bl	80074dc <_malloc_r>
 8008046:	6028      	str	r0, [r5, #0]
 8008048:	6128      	str	r0, [r5, #16]
 800804a:	b930      	cbnz	r0, 800805a <_svfiprintf_r+0x32>
 800804c:	230c      	movs	r3, #12
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	f04f 30ff 	mov.w	r0, #4294967295
 8008054:	b01d      	add	sp, #116	@ 0x74
 8008056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805a:	2340      	movs	r3, #64	@ 0x40
 800805c:	616b      	str	r3, [r5, #20]
 800805e:	2300      	movs	r3, #0
 8008060:	9309      	str	r3, [sp, #36]	@ 0x24
 8008062:	2320      	movs	r3, #32
 8008064:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008068:	f8cd 800c 	str.w	r8, [sp, #12]
 800806c:	2330      	movs	r3, #48	@ 0x30
 800806e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800820c <_svfiprintf_r+0x1e4>
 8008072:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008076:	f04f 0901 	mov.w	r9, #1
 800807a:	4623      	mov	r3, r4
 800807c:	469a      	mov	sl, r3
 800807e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008082:	b10a      	cbz	r2, 8008088 <_svfiprintf_r+0x60>
 8008084:	2a25      	cmp	r2, #37	@ 0x25
 8008086:	d1f9      	bne.n	800807c <_svfiprintf_r+0x54>
 8008088:	ebba 0b04 	subs.w	fp, sl, r4
 800808c:	d00b      	beq.n	80080a6 <_svfiprintf_r+0x7e>
 800808e:	465b      	mov	r3, fp
 8008090:	4622      	mov	r2, r4
 8008092:	4629      	mov	r1, r5
 8008094:	4638      	mov	r0, r7
 8008096:	f7ff ff6b 	bl	8007f70 <__ssputs_r>
 800809a:	3001      	adds	r0, #1
 800809c:	f000 80a7 	beq.w	80081ee <_svfiprintf_r+0x1c6>
 80080a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080a2:	445a      	add	r2, fp
 80080a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80080a6:	f89a 3000 	ldrb.w	r3, [sl]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 809f 	beq.w	80081ee <_svfiprintf_r+0x1c6>
 80080b0:	2300      	movs	r3, #0
 80080b2:	f04f 32ff 	mov.w	r2, #4294967295
 80080b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ba:	f10a 0a01 	add.w	sl, sl, #1
 80080be:	9304      	str	r3, [sp, #16]
 80080c0:	9307      	str	r3, [sp, #28]
 80080c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80080c8:	4654      	mov	r4, sl
 80080ca:	2205      	movs	r2, #5
 80080cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d0:	484e      	ldr	r0, [pc, #312]	@ (800820c <_svfiprintf_r+0x1e4>)
 80080d2:	f7f8 f895 	bl	8000200 <memchr>
 80080d6:	9a04      	ldr	r2, [sp, #16]
 80080d8:	b9d8      	cbnz	r0, 8008112 <_svfiprintf_r+0xea>
 80080da:	06d0      	lsls	r0, r2, #27
 80080dc:	bf44      	itt	mi
 80080de:	2320      	movmi	r3, #32
 80080e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080e4:	0711      	lsls	r1, r2, #28
 80080e6:	bf44      	itt	mi
 80080e8:	232b      	movmi	r3, #43	@ 0x2b
 80080ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ee:	f89a 3000 	ldrb.w	r3, [sl]
 80080f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80080f4:	d015      	beq.n	8008122 <_svfiprintf_r+0xfa>
 80080f6:	9a07      	ldr	r2, [sp, #28]
 80080f8:	4654      	mov	r4, sl
 80080fa:	2000      	movs	r0, #0
 80080fc:	f04f 0c0a 	mov.w	ip, #10
 8008100:	4621      	mov	r1, r4
 8008102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008106:	3b30      	subs	r3, #48	@ 0x30
 8008108:	2b09      	cmp	r3, #9
 800810a:	d94b      	bls.n	80081a4 <_svfiprintf_r+0x17c>
 800810c:	b1b0      	cbz	r0, 800813c <_svfiprintf_r+0x114>
 800810e:	9207      	str	r2, [sp, #28]
 8008110:	e014      	b.n	800813c <_svfiprintf_r+0x114>
 8008112:	eba0 0308 	sub.w	r3, r0, r8
 8008116:	fa09 f303 	lsl.w	r3, r9, r3
 800811a:	4313      	orrs	r3, r2
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	46a2      	mov	sl, r4
 8008120:	e7d2      	b.n	80080c8 <_svfiprintf_r+0xa0>
 8008122:	9b03      	ldr	r3, [sp, #12]
 8008124:	1d19      	adds	r1, r3, #4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	9103      	str	r1, [sp, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	bfbb      	ittet	lt
 800812e:	425b      	neglt	r3, r3
 8008130:	f042 0202 	orrlt.w	r2, r2, #2
 8008134:	9307      	strge	r3, [sp, #28]
 8008136:	9307      	strlt	r3, [sp, #28]
 8008138:	bfb8      	it	lt
 800813a:	9204      	strlt	r2, [sp, #16]
 800813c:	7823      	ldrb	r3, [r4, #0]
 800813e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008140:	d10a      	bne.n	8008158 <_svfiprintf_r+0x130>
 8008142:	7863      	ldrb	r3, [r4, #1]
 8008144:	2b2a      	cmp	r3, #42	@ 0x2a
 8008146:	d132      	bne.n	80081ae <_svfiprintf_r+0x186>
 8008148:	9b03      	ldr	r3, [sp, #12]
 800814a:	1d1a      	adds	r2, r3, #4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	9203      	str	r2, [sp, #12]
 8008150:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008154:	3402      	adds	r4, #2
 8008156:	9305      	str	r3, [sp, #20]
 8008158:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800821c <_svfiprintf_r+0x1f4>
 800815c:	7821      	ldrb	r1, [r4, #0]
 800815e:	2203      	movs	r2, #3
 8008160:	4650      	mov	r0, sl
 8008162:	f7f8 f84d 	bl	8000200 <memchr>
 8008166:	b138      	cbz	r0, 8008178 <_svfiprintf_r+0x150>
 8008168:	9b04      	ldr	r3, [sp, #16]
 800816a:	eba0 000a 	sub.w	r0, r0, sl
 800816e:	2240      	movs	r2, #64	@ 0x40
 8008170:	4082      	lsls	r2, r0
 8008172:	4313      	orrs	r3, r2
 8008174:	3401      	adds	r4, #1
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817c:	4824      	ldr	r0, [pc, #144]	@ (8008210 <_svfiprintf_r+0x1e8>)
 800817e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008182:	2206      	movs	r2, #6
 8008184:	f7f8 f83c 	bl	8000200 <memchr>
 8008188:	2800      	cmp	r0, #0
 800818a:	d036      	beq.n	80081fa <_svfiprintf_r+0x1d2>
 800818c:	4b21      	ldr	r3, [pc, #132]	@ (8008214 <_svfiprintf_r+0x1ec>)
 800818e:	bb1b      	cbnz	r3, 80081d8 <_svfiprintf_r+0x1b0>
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	3307      	adds	r3, #7
 8008194:	f023 0307 	bic.w	r3, r3, #7
 8008198:	3308      	adds	r3, #8
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819e:	4433      	add	r3, r6
 80081a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a2:	e76a      	b.n	800807a <_svfiprintf_r+0x52>
 80081a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a8:	460c      	mov	r4, r1
 80081aa:	2001      	movs	r0, #1
 80081ac:	e7a8      	b.n	8008100 <_svfiprintf_r+0xd8>
 80081ae:	2300      	movs	r3, #0
 80081b0:	3401      	adds	r4, #1
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f04f 0c0a 	mov.w	ip, #10
 80081ba:	4620      	mov	r0, r4
 80081bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c0:	3a30      	subs	r2, #48	@ 0x30
 80081c2:	2a09      	cmp	r2, #9
 80081c4:	d903      	bls.n	80081ce <_svfiprintf_r+0x1a6>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0c6      	beq.n	8008158 <_svfiprintf_r+0x130>
 80081ca:	9105      	str	r1, [sp, #20]
 80081cc:	e7c4      	b.n	8008158 <_svfiprintf_r+0x130>
 80081ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d2:	4604      	mov	r4, r0
 80081d4:	2301      	movs	r3, #1
 80081d6:	e7f0      	b.n	80081ba <_svfiprintf_r+0x192>
 80081d8:	ab03      	add	r3, sp, #12
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	462a      	mov	r2, r5
 80081de:	4b0e      	ldr	r3, [pc, #56]	@ (8008218 <_svfiprintf_r+0x1f0>)
 80081e0:	a904      	add	r1, sp, #16
 80081e2:	4638      	mov	r0, r7
 80081e4:	f3af 8000 	nop.w
 80081e8:	1c42      	adds	r2, r0, #1
 80081ea:	4606      	mov	r6, r0
 80081ec:	d1d6      	bne.n	800819c <_svfiprintf_r+0x174>
 80081ee:	89ab      	ldrh	r3, [r5, #12]
 80081f0:	065b      	lsls	r3, r3, #25
 80081f2:	f53f af2d 	bmi.w	8008050 <_svfiprintf_r+0x28>
 80081f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081f8:	e72c      	b.n	8008054 <_svfiprintf_r+0x2c>
 80081fa:	ab03      	add	r3, sp, #12
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	462a      	mov	r2, r5
 8008200:	4b05      	ldr	r3, [pc, #20]	@ (8008218 <_svfiprintf_r+0x1f0>)
 8008202:	a904      	add	r1, sp, #16
 8008204:	4638      	mov	r0, r7
 8008206:	f000 f879 	bl	80082fc <_printf_i>
 800820a:	e7ed      	b.n	80081e8 <_svfiprintf_r+0x1c0>
 800820c:	08012302 	.word	0x08012302
 8008210:	0801230c 	.word	0x0801230c
 8008214:	00000000 	.word	0x00000000
 8008218:	08007f71 	.word	0x08007f71
 800821c:	08012308 	.word	0x08012308

08008220 <_printf_common>:
 8008220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008224:	4616      	mov	r6, r2
 8008226:	4698      	mov	r8, r3
 8008228:	688a      	ldr	r2, [r1, #8]
 800822a:	690b      	ldr	r3, [r1, #16]
 800822c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008230:	4293      	cmp	r3, r2
 8008232:	bfb8      	it	lt
 8008234:	4613      	movlt	r3, r2
 8008236:	6033      	str	r3, [r6, #0]
 8008238:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800823c:	4607      	mov	r7, r0
 800823e:	460c      	mov	r4, r1
 8008240:	b10a      	cbz	r2, 8008246 <_printf_common+0x26>
 8008242:	3301      	adds	r3, #1
 8008244:	6033      	str	r3, [r6, #0]
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	0699      	lsls	r1, r3, #26
 800824a:	bf42      	ittt	mi
 800824c:	6833      	ldrmi	r3, [r6, #0]
 800824e:	3302      	addmi	r3, #2
 8008250:	6033      	strmi	r3, [r6, #0]
 8008252:	6825      	ldr	r5, [r4, #0]
 8008254:	f015 0506 	ands.w	r5, r5, #6
 8008258:	d106      	bne.n	8008268 <_printf_common+0x48>
 800825a:	f104 0a19 	add.w	sl, r4, #25
 800825e:	68e3      	ldr	r3, [r4, #12]
 8008260:	6832      	ldr	r2, [r6, #0]
 8008262:	1a9b      	subs	r3, r3, r2
 8008264:	42ab      	cmp	r3, r5
 8008266:	dc26      	bgt.n	80082b6 <_printf_common+0x96>
 8008268:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800826c:	6822      	ldr	r2, [r4, #0]
 800826e:	3b00      	subs	r3, #0
 8008270:	bf18      	it	ne
 8008272:	2301      	movne	r3, #1
 8008274:	0692      	lsls	r2, r2, #26
 8008276:	d42b      	bmi.n	80082d0 <_printf_common+0xb0>
 8008278:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800827c:	4641      	mov	r1, r8
 800827e:	4638      	mov	r0, r7
 8008280:	47c8      	blx	r9
 8008282:	3001      	adds	r0, #1
 8008284:	d01e      	beq.n	80082c4 <_printf_common+0xa4>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	6922      	ldr	r2, [r4, #16]
 800828a:	f003 0306 	and.w	r3, r3, #6
 800828e:	2b04      	cmp	r3, #4
 8008290:	bf02      	ittt	eq
 8008292:	68e5      	ldreq	r5, [r4, #12]
 8008294:	6833      	ldreq	r3, [r6, #0]
 8008296:	1aed      	subeq	r5, r5, r3
 8008298:	68a3      	ldr	r3, [r4, #8]
 800829a:	bf0c      	ite	eq
 800829c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082a0:	2500      	movne	r5, #0
 80082a2:	4293      	cmp	r3, r2
 80082a4:	bfc4      	itt	gt
 80082a6:	1a9b      	subgt	r3, r3, r2
 80082a8:	18ed      	addgt	r5, r5, r3
 80082aa:	2600      	movs	r6, #0
 80082ac:	341a      	adds	r4, #26
 80082ae:	42b5      	cmp	r5, r6
 80082b0:	d11a      	bne.n	80082e8 <_printf_common+0xc8>
 80082b2:	2000      	movs	r0, #0
 80082b4:	e008      	b.n	80082c8 <_printf_common+0xa8>
 80082b6:	2301      	movs	r3, #1
 80082b8:	4652      	mov	r2, sl
 80082ba:	4641      	mov	r1, r8
 80082bc:	4638      	mov	r0, r7
 80082be:	47c8      	blx	r9
 80082c0:	3001      	adds	r0, #1
 80082c2:	d103      	bne.n	80082cc <_printf_common+0xac>
 80082c4:	f04f 30ff 	mov.w	r0, #4294967295
 80082c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082cc:	3501      	adds	r5, #1
 80082ce:	e7c6      	b.n	800825e <_printf_common+0x3e>
 80082d0:	18e1      	adds	r1, r4, r3
 80082d2:	1c5a      	adds	r2, r3, #1
 80082d4:	2030      	movs	r0, #48	@ 0x30
 80082d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082da:	4422      	add	r2, r4
 80082dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082e4:	3302      	adds	r3, #2
 80082e6:	e7c7      	b.n	8008278 <_printf_common+0x58>
 80082e8:	2301      	movs	r3, #1
 80082ea:	4622      	mov	r2, r4
 80082ec:	4641      	mov	r1, r8
 80082ee:	4638      	mov	r0, r7
 80082f0:	47c8      	blx	r9
 80082f2:	3001      	adds	r0, #1
 80082f4:	d0e6      	beq.n	80082c4 <_printf_common+0xa4>
 80082f6:	3601      	adds	r6, #1
 80082f8:	e7d9      	b.n	80082ae <_printf_common+0x8e>
	...

080082fc <_printf_i>:
 80082fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008300:	7e0f      	ldrb	r7, [r1, #24]
 8008302:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008304:	2f78      	cmp	r7, #120	@ 0x78
 8008306:	4691      	mov	r9, r2
 8008308:	4680      	mov	r8, r0
 800830a:	460c      	mov	r4, r1
 800830c:	469a      	mov	sl, r3
 800830e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008312:	d807      	bhi.n	8008324 <_printf_i+0x28>
 8008314:	2f62      	cmp	r7, #98	@ 0x62
 8008316:	d80a      	bhi.n	800832e <_printf_i+0x32>
 8008318:	2f00      	cmp	r7, #0
 800831a:	f000 80d2 	beq.w	80084c2 <_printf_i+0x1c6>
 800831e:	2f58      	cmp	r7, #88	@ 0x58
 8008320:	f000 80b9 	beq.w	8008496 <_printf_i+0x19a>
 8008324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800832c:	e03a      	b.n	80083a4 <_printf_i+0xa8>
 800832e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008332:	2b15      	cmp	r3, #21
 8008334:	d8f6      	bhi.n	8008324 <_printf_i+0x28>
 8008336:	a101      	add	r1, pc, #4	@ (adr r1, 800833c <_printf_i+0x40>)
 8008338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800833c:	08008395 	.word	0x08008395
 8008340:	080083a9 	.word	0x080083a9
 8008344:	08008325 	.word	0x08008325
 8008348:	08008325 	.word	0x08008325
 800834c:	08008325 	.word	0x08008325
 8008350:	08008325 	.word	0x08008325
 8008354:	080083a9 	.word	0x080083a9
 8008358:	08008325 	.word	0x08008325
 800835c:	08008325 	.word	0x08008325
 8008360:	08008325 	.word	0x08008325
 8008364:	08008325 	.word	0x08008325
 8008368:	080084a9 	.word	0x080084a9
 800836c:	080083d3 	.word	0x080083d3
 8008370:	08008463 	.word	0x08008463
 8008374:	08008325 	.word	0x08008325
 8008378:	08008325 	.word	0x08008325
 800837c:	080084cb 	.word	0x080084cb
 8008380:	08008325 	.word	0x08008325
 8008384:	080083d3 	.word	0x080083d3
 8008388:	08008325 	.word	0x08008325
 800838c:	08008325 	.word	0x08008325
 8008390:	0800846b 	.word	0x0800846b
 8008394:	6833      	ldr	r3, [r6, #0]
 8008396:	1d1a      	adds	r2, r3, #4
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6032      	str	r2, [r6, #0]
 800839c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083a4:	2301      	movs	r3, #1
 80083a6:	e09d      	b.n	80084e4 <_printf_i+0x1e8>
 80083a8:	6833      	ldr	r3, [r6, #0]
 80083aa:	6820      	ldr	r0, [r4, #0]
 80083ac:	1d19      	adds	r1, r3, #4
 80083ae:	6031      	str	r1, [r6, #0]
 80083b0:	0606      	lsls	r6, r0, #24
 80083b2:	d501      	bpl.n	80083b8 <_printf_i+0xbc>
 80083b4:	681d      	ldr	r5, [r3, #0]
 80083b6:	e003      	b.n	80083c0 <_printf_i+0xc4>
 80083b8:	0645      	lsls	r5, r0, #25
 80083ba:	d5fb      	bpl.n	80083b4 <_printf_i+0xb8>
 80083bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083c0:	2d00      	cmp	r5, #0
 80083c2:	da03      	bge.n	80083cc <_printf_i+0xd0>
 80083c4:	232d      	movs	r3, #45	@ 0x2d
 80083c6:	426d      	negs	r5, r5
 80083c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083cc:	4859      	ldr	r0, [pc, #356]	@ (8008534 <_printf_i+0x238>)
 80083ce:	230a      	movs	r3, #10
 80083d0:	e011      	b.n	80083f6 <_printf_i+0xfa>
 80083d2:	6821      	ldr	r1, [r4, #0]
 80083d4:	6833      	ldr	r3, [r6, #0]
 80083d6:	0608      	lsls	r0, r1, #24
 80083d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80083dc:	d402      	bmi.n	80083e4 <_printf_i+0xe8>
 80083de:	0649      	lsls	r1, r1, #25
 80083e0:	bf48      	it	mi
 80083e2:	b2ad      	uxthmi	r5, r5
 80083e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80083e6:	4853      	ldr	r0, [pc, #332]	@ (8008534 <_printf_i+0x238>)
 80083e8:	6033      	str	r3, [r6, #0]
 80083ea:	bf14      	ite	ne
 80083ec:	230a      	movne	r3, #10
 80083ee:	2308      	moveq	r3, #8
 80083f0:	2100      	movs	r1, #0
 80083f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083f6:	6866      	ldr	r6, [r4, #4]
 80083f8:	60a6      	str	r6, [r4, #8]
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	bfa2      	ittt	ge
 80083fe:	6821      	ldrge	r1, [r4, #0]
 8008400:	f021 0104 	bicge.w	r1, r1, #4
 8008404:	6021      	strge	r1, [r4, #0]
 8008406:	b90d      	cbnz	r5, 800840c <_printf_i+0x110>
 8008408:	2e00      	cmp	r6, #0
 800840a:	d04b      	beq.n	80084a4 <_printf_i+0x1a8>
 800840c:	4616      	mov	r6, r2
 800840e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008412:	fb03 5711 	mls	r7, r3, r1, r5
 8008416:	5dc7      	ldrb	r7, [r0, r7]
 8008418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800841c:	462f      	mov	r7, r5
 800841e:	42bb      	cmp	r3, r7
 8008420:	460d      	mov	r5, r1
 8008422:	d9f4      	bls.n	800840e <_printf_i+0x112>
 8008424:	2b08      	cmp	r3, #8
 8008426:	d10b      	bne.n	8008440 <_printf_i+0x144>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	07df      	lsls	r7, r3, #31
 800842c:	d508      	bpl.n	8008440 <_printf_i+0x144>
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	6861      	ldr	r1, [r4, #4]
 8008432:	4299      	cmp	r1, r3
 8008434:	bfde      	ittt	le
 8008436:	2330      	movle	r3, #48	@ 0x30
 8008438:	f806 3c01 	strble.w	r3, [r6, #-1]
 800843c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008440:	1b92      	subs	r2, r2, r6
 8008442:	6122      	str	r2, [r4, #16]
 8008444:	f8cd a000 	str.w	sl, [sp]
 8008448:	464b      	mov	r3, r9
 800844a:	aa03      	add	r2, sp, #12
 800844c:	4621      	mov	r1, r4
 800844e:	4640      	mov	r0, r8
 8008450:	f7ff fee6 	bl	8008220 <_printf_common>
 8008454:	3001      	adds	r0, #1
 8008456:	d14a      	bne.n	80084ee <_printf_i+0x1f2>
 8008458:	f04f 30ff 	mov.w	r0, #4294967295
 800845c:	b004      	add	sp, #16
 800845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	f043 0320 	orr.w	r3, r3, #32
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	4833      	ldr	r0, [pc, #204]	@ (8008538 <_printf_i+0x23c>)
 800846c:	2778      	movs	r7, #120	@ 0x78
 800846e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	6831      	ldr	r1, [r6, #0]
 8008476:	061f      	lsls	r7, r3, #24
 8008478:	f851 5b04 	ldr.w	r5, [r1], #4
 800847c:	d402      	bmi.n	8008484 <_printf_i+0x188>
 800847e:	065f      	lsls	r7, r3, #25
 8008480:	bf48      	it	mi
 8008482:	b2ad      	uxthmi	r5, r5
 8008484:	6031      	str	r1, [r6, #0]
 8008486:	07d9      	lsls	r1, r3, #31
 8008488:	bf44      	itt	mi
 800848a:	f043 0320 	orrmi.w	r3, r3, #32
 800848e:	6023      	strmi	r3, [r4, #0]
 8008490:	b11d      	cbz	r5, 800849a <_printf_i+0x19e>
 8008492:	2310      	movs	r3, #16
 8008494:	e7ac      	b.n	80083f0 <_printf_i+0xf4>
 8008496:	4827      	ldr	r0, [pc, #156]	@ (8008534 <_printf_i+0x238>)
 8008498:	e7e9      	b.n	800846e <_printf_i+0x172>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	f023 0320 	bic.w	r3, r3, #32
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	e7f6      	b.n	8008492 <_printf_i+0x196>
 80084a4:	4616      	mov	r6, r2
 80084a6:	e7bd      	b.n	8008424 <_printf_i+0x128>
 80084a8:	6833      	ldr	r3, [r6, #0]
 80084aa:	6825      	ldr	r5, [r4, #0]
 80084ac:	6961      	ldr	r1, [r4, #20]
 80084ae:	1d18      	adds	r0, r3, #4
 80084b0:	6030      	str	r0, [r6, #0]
 80084b2:	062e      	lsls	r6, r5, #24
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	d501      	bpl.n	80084bc <_printf_i+0x1c0>
 80084b8:	6019      	str	r1, [r3, #0]
 80084ba:	e002      	b.n	80084c2 <_printf_i+0x1c6>
 80084bc:	0668      	lsls	r0, r5, #25
 80084be:	d5fb      	bpl.n	80084b8 <_printf_i+0x1bc>
 80084c0:	8019      	strh	r1, [r3, #0]
 80084c2:	2300      	movs	r3, #0
 80084c4:	6123      	str	r3, [r4, #16]
 80084c6:	4616      	mov	r6, r2
 80084c8:	e7bc      	b.n	8008444 <_printf_i+0x148>
 80084ca:	6833      	ldr	r3, [r6, #0]
 80084cc:	1d1a      	adds	r2, r3, #4
 80084ce:	6032      	str	r2, [r6, #0]
 80084d0:	681e      	ldr	r6, [r3, #0]
 80084d2:	6862      	ldr	r2, [r4, #4]
 80084d4:	2100      	movs	r1, #0
 80084d6:	4630      	mov	r0, r6
 80084d8:	f7f7 fe92 	bl	8000200 <memchr>
 80084dc:	b108      	cbz	r0, 80084e2 <_printf_i+0x1e6>
 80084de:	1b80      	subs	r0, r0, r6
 80084e0:	6060      	str	r0, [r4, #4]
 80084e2:	6863      	ldr	r3, [r4, #4]
 80084e4:	6123      	str	r3, [r4, #16]
 80084e6:	2300      	movs	r3, #0
 80084e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084ec:	e7aa      	b.n	8008444 <_printf_i+0x148>
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	4632      	mov	r2, r6
 80084f2:	4649      	mov	r1, r9
 80084f4:	4640      	mov	r0, r8
 80084f6:	47d0      	blx	sl
 80084f8:	3001      	adds	r0, #1
 80084fa:	d0ad      	beq.n	8008458 <_printf_i+0x15c>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	079b      	lsls	r3, r3, #30
 8008500:	d413      	bmi.n	800852a <_printf_i+0x22e>
 8008502:	68e0      	ldr	r0, [r4, #12]
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	4298      	cmp	r0, r3
 8008508:	bfb8      	it	lt
 800850a:	4618      	movlt	r0, r3
 800850c:	e7a6      	b.n	800845c <_printf_i+0x160>
 800850e:	2301      	movs	r3, #1
 8008510:	4632      	mov	r2, r6
 8008512:	4649      	mov	r1, r9
 8008514:	4640      	mov	r0, r8
 8008516:	47d0      	blx	sl
 8008518:	3001      	adds	r0, #1
 800851a:	d09d      	beq.n	8008458 <_printf_i+0x15c>
 800851c:	3501      	adds	r5, #1
 800851e:	68e3      	ldr	r3, [r4, #12]
 8008520:	9903      	ldr	r1, [sp, #12]
 8008522:	1a5b      	subs	r3, r3, r1
 8008524:	42ab      	cmp	r3, r5
 8008526:	dcf2      	bgt.n	800850e <_printf_i+0x212>
 8008528:	e7eb      	b.n	8008502 <_printf_i+0x206>
 800852a:	2500      	movs	r5, #0
 800852c:	f104 0619 	add.w	r6, r4, #25
 8008530:	e7f5      	b.n	800851e <_printf_i+0x222>
 8008532:	bf00      	nop
 8008534:	08012313 	.word	0x08012313
 8008538:	08012324 	.word	0x08012324

0800853c <fiprintf>:
 800853c:	b40e      	push	{r1, r2, r3}
 800853e:	b503      	push	{r0, r1, lr}
 8008540:	4601      	mov	r1, r0
 8008542:	ab03      	add	r3, sp, #12
 8008544:	4805      	ldr	r0, [pc, #20]	@ (800855c <fiprintf+0x20>)
 8008546:	f853 2b04 	ldr.w	r2, [r3], #4
 800854a:	6800      	ldr	r0, [r0, #0]
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	f000 f903 	bl	8008758 <_vfiprintf_r>
 8008552:	b002      	add	sp, #8
 8008554:	f85d eb04 	ldr.w	lr, [sp], #4
 8008558:	b003      	add	sp, #12
 800855a:	4770      	bx	lr
 800855c:	20000220 	.word	0x20000220

08008560 <__swhatbuf_r>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	460c      	mov	r4, r1
 8008564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008568:	2900      	cmp	r1, #0
 800856a:	b096      	sub	sp, #88	@ 0x58
 800856c:	4615      	mov	r5, r2
 800856e:	461e      	mov	r6, r3
 8008570:	da0d      	bge.n	800858e <__swhatbuf_r+0x2e>
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008578:	f04f 0100 	mov.w	r1, #0
 800857c:	bf14      	ite	ne
 800857e:	2340      	movne	r3, #64	@ 0x40
 8008580:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008584:	2000      	movs	r0, #0
 8008586:	6031      	str	r1, [r6, #0]
 8008588:	602b      	str	r3, [r5, #0]
 800858a:	b016      	add	sp, #88	@ 0x58
 800858c:	bd70      	pop	{r4, r5, r6, pc}
 800858e:	466a      	mov	r2, sp
 8008590:	f000 f862 	bl	8008658 <_fstat_r>
 8008594:	2800      	cmp	r0, #0
 8008596:	dbec      	blt.n	8008572 <__swhatbuf_r+0x12>
 8008598:	9901      	ldr	r1, [sp, #4]
 800859a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800859e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085a2:	4259      	negs	r1, r3
 80085a4:	4159      	adcs	r1, r3
 80085a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085aa:	e7eb      	b.n	8008584 <__swhatbuf_r+0x24>

080085ac <__smakebuf_r>:
 80085ac:	898b      	ldrh	r3, [r1, #12]
 80085ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085b0:	079d      	lsls	r5, r3, #30
 80085b2:	4606      	mov	r6, r0
 80085b4:	460c      	mov	r4, r1
 80085b6:	d507      	bpl.n	80085c8 <__smakebuf_r+0x1c>
 80085b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	6123      	str	r3, [r4, #16]
 80085c0:	2301      	movs	r3, #1
 80085c2:	6163      	str	r3, [r4, #20]
 80085c4:	b003      	add	sp, #12
 80085c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c8:	ab01      	add	r3, sp, #4
 80085ca:	466a      	mov	r2, sp
 80085cc:	f7ff ffc8 	bl	8008560 <__swhatbuf_r>
 80085d0:	9f00      	ldr	r7, [sp, #0]
 80085d2:	4605      	mov	r5, r0
 80085d4:	4639      	mov	r1, r7
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7fe ff80 	bl	80074dc <_malloc_r>
 80085dc:	b948      	cbnz	r0, 80085f2 <__smakebuf_r+0x46>
 80085de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e2:	059a      	lsls	r2, r3, #22
 80085e4:	d4ee      	bmi.n	80085c4 <__smakebuf_r+0x18>
 80085e6:	f023 0303 	bic.w	r3, r3, #3
 80085ea:	f043 0302 	orr.w	r3, r3, #2
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	e7e2      	b.n	80085b8 <__smakebuf_r+0xc>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	6020      	str	r0, [r4, #0]
 80085f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	9b01      	ldr	r3, [sp, #4]
 80085fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008602:	b15b      	cbz	r3, 800861c <__smakebuf_r+0x70>
 8008604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008608:	4630      	mov	r0, r6
 800860a:	f000 f837 	bl	800867c <_isatty_r>
 800860e:	b128      	cbz	r0, 800861c <__smakebuf_r+0x70>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f023 0303 	bic.w	r3, r3, #3
 8008616:	f043 0301 	orr.w	r3, r3, #1
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	431d      	orrs	r5, r3
 8008620:	81a5      	strh	r5, [r4, #12]
 8008622:	e7cf      	b.n	80085c4 <__smakebuf_r+0x18>

08008624 <memmove>:
 8008624:	4288      	cmp	r0, r1
 8008626:	b510      	push	{r4, lr}
 8008628:	eb01 0402 	add.w	r4, r1, r2
 800862c:	d902      	bls.n	8008634 <memmove+0x10>
 800862e:	4284      	cmp	r4, r0
 8008630:	4623      	mov	r3, r4
 8008632:	d807      	bhi.n	8008644 <memmove+0x20>
 8008634:	1e43      	subs	r3, r0, #1
 8008636:	42a1      	cmp	r1, r4
 8008638:	d008      	beq.n	800864c <memmove+0x28>
 800863a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800863e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008642:	e7f8      	b.n	8008636 <memmove+0x12>
 8008644:	4402      	add	r2, r0
 8008646:	4601      	mov	r1, r0
 8008648:	428a      	cmp	r2, r1
 800864a:	d100      	bne.n	800864e <memmove+0x2a>
 800864c:	bd10      	pop	{r4, pc}
 800864e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008656:	e7f7      	b.n	8008648 <memmove+0x24>

08008658 <_fstat_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	4d07      	ldr	r5, [pc, #28]	@ (8008678 <_fstat_r+0x20>)
 800865c:	2300      	movs	r3, #0
 800865e:	4604      	mov	r4, r0
 8008660:	4608      	mov	r0, r1
 8008662:	4611      	mov	r1, r2
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	f7f9 fc4d 	bl	8001f04 <_fstat>
 800866a:	1c43      	adds	r3, r0, #1
 800866c:	d102      	bne.n	8008674 <_fstat_r+0x1c>
 800866e:	682b      	ldr	r3, [r5, #0]
 8008670:	b103      	cbz	r3, 8008674 <_fstat_r+0x1c>
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	bd38      	pop	{r3, r4, r5, pc}
 8008676:	bf00      	nop
 8008678:	2000af88 	.word	0x2000af88

0800867c <_isatty_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d06      	ldr	r5, [pc, #24]	@ (8008698 <_isatty_r+0x1c>)
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7f9 fc4c 	bl	8001f24 <_isatty>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_isatty_r+0x1a>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_isatty_r+0x1a>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	2000af88 	.word	0x2000af88

0800869c <abort>:
 800869c:	b508      	push	{r3, lr}
 800869e:	2006      	movs	r0, #6
 80086a0:	f000 fa2e 	bl	8008b00 <raise>
 80086a4:	2001      	movs	r0, #1
 80086a6:	f7f9 fbdd 	bl	8001e64 <_exit>

080086aa <_realloc_r>:
 80086aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ae:	4680      	mov	r8, r0
 80086b0:	4615      	mov	r5, r2
 80086b2:	460c      	mov	r4, r1
 80086b4:	b921      	cbnz	r1, 80086c0 <_realloc_r+0x16>
 80086b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ba:	4611      	mov	r1, r2
 80086bc:	f7fe bf0e 	b.w	80074dc <_malloc_r>
 80086c0:	b92a      	cbnz	r2, 80086ce <_realloc_r+0x24>
 80086c2:	f7ff fc0b 	bl	8007edc <_free_r>
 80086c6:	2400      	movs	r4, #0
 80086c8:	4620      	mov	r0, r4
 80086ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ce:	f000 fa33 	bl	8008b38 <_malloc_usable_size_r>
 80086d2:	4285      	cmp	r5, r0
 80086d4:	4606      	mov	r6, r0
 80086d6:	d802      	bhi.n	80086de <_realloc_r+0x34>
 80086d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086dc:	d8f4      	bhi.n	80086c8 <_realloc_r+0x1e>
 80086de:	4629      	mov	r1, r5
 80086e0:	4640      	mov	r0, r8
 80086e2:	f7fe fefb 	bl	80074dc <_malloc_r>
 80086e6:	4607      	mov	r7, r0
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d0ec      	beq.n	80086c6 <_realloc_r+0x1c>
 80086ec:	42b5      	cmp	r5, r6
 80086ee:	462a      	mov	r2, r5
 80086f0:	4621      	mov	r1, r4
 80086f2:	bf28      	it	cs
 80086f4:	4632      	movcs	r2, r6
 80086f6:	f7ff fbc4 	bl	8007e82 <memcpy>
 80086fa:	4621      	mov	r1, r4
 80086fc:	4640      	mov	r0, r8
 80086fe:	f7ff fbed 	bl	8007edc <_free_r>
 8008702:	463c      	mov	r4, r7
 8008704:	e7e0      	b.n	80086c8 <_realloc_r+0x1e>

08008706 <__sfputc_r>:
 8008706:	6893      	ldr	r3, [r2, #8]
 8008708:	3b01      	subs	r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	b410      	push	{r4}
 800870e:	6093      	str	r3, [r2, #8]
 8008710:	da08      	bge.n	8008724 <__sfputc_r+0x1e>
 8008712:	6994      	ldr	r4, [r2, #24]
 8008714:	42a3      	cmp	r3, r4
 8008716:	db01      	blt.n	800871c <__sfputc_r+0x16>
 8008718:	290a      	cmp	r1, #10
 800871a:	d103      	bne.n	8008724 <__sfputc_r+0x1e>
 800871c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008720:	f000 b932 	b.w	8008988 <__swbuf_r>
 8008724:	6813      	ldr	r3, [r2, #0]
 8008726:	1c58      	adds	r0, r3, #1
 8008728:	6010      	str	r0, [r2, #0]
 800872a:	7019      	strb	r1, [r3, #0]
 800872c:	4608      	mov	r0, r1
 800872e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008732:	4770      	bx	lr

08008734 <__sfputs_r>:
 8008734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008736:	4606      	mov	r6, r0
 8008738:	460f      	mov	r7, r1
 800873a:	4614      	mov	r4, r2
 800873c:	18d5      	adds	r5, r2, r3
 800873e:	42ac      	cmp	r4, r5
 8008740:	d101      	bne.n	8008746 <__sfputs_r+0x12>
 8008742:	2000      	movs	r0, #0
 8008744:	e007      	b.n	8008756 <__sfputs_r+0x22>
 8008746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874a:	463a      	mov	r2, r7
 800874c:	4630      	mov	r0, r6
 800874e:	f7ff ffda 	bl	8008706 <__sfputc_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d1f3      	bne.n	800873e <__sfputs_r+0xa>
 8008756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008758 <_vfiprintf_r>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	460d      	mov	r5, r1
 800875e:	b09d      	sub	sp, #116	@ 0x74
 8008760:	4614      	mov	r4, r2
 8008762:	4698      	mov	r8, r3
 8008764:	4606      	mov	r6, r0
 8008766:	b118      	cbz	r0, 8008770 <_vfiprintf_r+0x18>
 8008768:	6a03      	ldr	r3, [r0, #32]
 800876a:	b90b      	cbnz	r3, 8008770 <_vfiprintf_r+0x18>
 800876c:	f7ff f976 	bl	8007a5c <__sinit>
 8008770:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008772:	07d9      	lsls	r1, r3, #31
 8008774:	d405      	bmi.n	8008782 <_vfiprintf_r+0x2a>
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	059a      	lsls	r2, r3, #22
 800877a:	d402      	bmi.n	8008782 <_vfiprintf_r+0x2a>
 800877c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800877e:	f7ff fb7e 	bl	8007e7e <__retarget_lock_acquire_recursive>
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	071b      	lsls	r3, r3, #28
 8008786:	d501      	bpl.n	800878c <_vfiprintf_r+0x34>
 8008788:	692b      	ldr	r3, [r5, #16]
 800878a:	b99b      	cbnz	r3, 80087b4 <_vfiprintf_r+0x5c>
 800878c:	4629      	mov	r1, r5
 800878e:	4630      	mov	r0, r6
 8008790:	f000 f938 	bl	8008a04 <__swsetup_r>
 8008794:	b170      	cbz	r0, 80087b4 <_vfiprintf_r+0x5c>
 8008796:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008798:	07dc      	lsls	r4, r3, #31
 800879a:	d504      	bpl.n	80087a6 <_vfiprintf_r+0x4e>
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	b01d      	add	sp, #116	@ 0x74
 80087a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	0598      	lsls	r0, r3, #22
 80087aa:	d4f7      	bmi.n	800879c <_vfiprintf_r+0x44>
 80087ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ae:	f7ff fb67 	bl	8007e80 <__retarget_lock_release_recursive>
 80087b2:	e7f3      	b.n	800879c <_vfiprintf_r+0x44>
 80087b4:	2300      	movs	r3, #0
 80087b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b8:	2320      	movs	r3, #32
 80087ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087be:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c2:	2330      	movs	r3, #48	@ 0x30
 80087c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008974 <_vfiprintf_r+0x21c>
 80087c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087cc:	f04f 0901 	mov.w	r9, #1
 80087d0:	4623      	mov	r3, r4
 80087d2:	469a      	mov	sl, r3
 80087d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d8:	b10a      	cbz	r2, 80087de <_vfiprintf_r+0x86>
 80087da:	2a25      	cmp	r2, #37	@ 0x25
 80087dc:	d1f9      	bne.n	80087d2 <_vfiprintf_r+0x7a>
 80087de:	ebba 0b04 	subs.w	fp, sl, r4
 80087e2:	d00b      	beq.n	80087fc <_vfiprintf_r+0xa4>
 80087e4:	465b      	mov	r3, fp
 80087e6:	4622      	mov	r2, r4
 80087e8:	4629      	mov	r1, r5
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7ff ffa2 	bl	8008734 <__sfputs_r>
 80087f0:	3001      	adds	r0, #1
 80087f2:	f000 80a7 	beq.w	8008944 <_vfiprintf_r+0x1ec>
 80087f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f8:	445a      	add	r2, fp
 80087fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80087fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 809f 	beq.w	8008944 <_vfiprintf_r+0x1ec>
 8008806:	2300      	movs	r3, #0
 8008808:	f04f 32ff 	mov.w	r2, #4294967295
 800880c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008810:	f10a 0a01 	add.w	sl, sl, #1
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	9307      	str	r3, [sp, #28]
 8008818:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800881c:	931a      	str	r3, [sp, #104]	@ 0x68
 800881e:	4654      	mov	r4, sl
 8008820:	2205      	movs	r2, #5
 8008822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008826:	4853      	ldr	r0, [pc, #332]	@ (8008974 <_vfiprintf_r+0x21c>)
 8008828:	f7f7 fcea 	bl	8000200 <memchr>
 800882c:	9a04      	ldr	r2, [sp, #16]
 800882e:	b9d8      	cbnz	r0, 8008868 <_vfiprintf_r+0x110>
 8008830:	06d1      	lsls	r1, r2, #27
 8008832:	bf44      	itt	mi
 8008834:	2320      	movmi	r3, #32
 8008836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800883a:	0713      	lsls	r3, r2, #28
 800883c:	bf44      	itt	mi
 800883e:	232b      	movmi	r3, #43	@ 0x2b
 8008840:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008844:	f89a 3000 	ldrb.w	r3, [sl]
 8008848:	2b2a      	cmp	r3, #42	@ 0x2a
 800884a:	d015      	beq.n	8008878 <_vfiprintf_r+0x120>
 800884c:	9a07      	ldr	r2, [sp, #28]
 800884e:	4654      	mov	r4, sl
 8008850:	2000      	movs	r0, #0
 8008852:	f04f 0c0a 	mov.w	ip, #10
 8008856:	4621      	mov	r1, r4
 8008858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800885c:	3b30      	subs	r3, #48	@ 0x30
 800885e:	2b09      	cmp	r3, #9
 8008860:	d94b      	bls.n	80088fa <_vfiprintf_r+0x1a2>
 8008862:	b1b0      	cbz	r0, 8008892 <_vfiprintf_r+0x13a>
 8008864:	9207      	str	r2, [sp, #28]
 8008866:	e014      	b.n	8008892 <_vfiprintf_r+0x13a>
 8008868:	eba0 0308 	sub.w	r3, r0, r8
 800886c:	fa09 f303 	lsl.w	r3, r9, r3
 8008870:	4313      	orrs	r3, r2
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	46a2      	mov	sl, r4
 8008876:	e7d2      	b.n	800881e <_vfiprintf_r+0xc6>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	1d19      	adds	r1, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	9103      	str	r1, [sp, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	bfbb      	ittet	lt
 8008884:	425b      	neglt	r3, r3
 8008886:	f042 0202 	orrlt.w	r2, r2, #2
 800888a:	9307      	strge	r3, [sp, #28]
 800888c:	9307      	strlt	r3, [sp, #28]
 800888e:	bfb8      	it	lt
 8008890:	9204      	strlt	r2, [sp, #16]
 8008892:	7823      	ldrb	r3, [r4, #0]
 8008894:	2b2e      	cmp	r3, #46	@ 0x2e
 8008896:	d10a      	bne.n	80088ae <_vfiprintf_r+0x156>
 8008898:	7863      	ldrb	r3, [r4, #1]
 800889a:	2b2a      	cmp	r3, #42	@ 0x2a
 800889c:	d132      	bne.n	8008904 <_vfiprintf_r+0x1ac>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	1d1a      	adds	r2, r3, #4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	9203      	str	r2, [sp, #12]
 80088a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088aa:	3402      	adds	r4, #2
 80088ac:	9305      	str	r3, [sp, #20]
 80088ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008984 <_vfiprintf_r+0x22c>
 80088b2:	7821      	ldrb	r1, [r4, #0]
 80088b4:	2203      	movs	r2, #3
 80088b6:	4650      	mov	r0, sl
 80088b8:	f7f7 fca2 	bl	8000200 <memchr>
 80088bc:	b138      	cbz	r0, 80088ce <_vfiprintf_r+0x176>
 80088be:	9b04      	ldr	r3, [sp, #16]
 80088c0:	eba0 000a 	sub.w	r0, r0, sl
 80088c4:	2240      	movs	r2, #64	@ 0x40
 80088c6:	4082      	lsls	r2, r0
 80088c8:	4313      	orrs	r3, r2
 80088ca:	3401      	adds	r4, #1
 80088cc:	9304      	str	r3, [sp, #16]
 80088ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d2:	4829      	ldr	r0, [pc, #164]	@ (8008978 <_vfiprintf_r+0x220>)
 80088d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088d8:	2206      	movs	r2, #6
 80088da:	f7f7 fc91 	bl	8000200 <memchr>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d03f      	beq.n	8008962 <_vfiprintf_r+0x20a>
 80088e2:	4b26      	ldr	r3, [pc, #152]	@ (800897c <_vfiprintf_r+0x224>)
 80088e4:	bb1b      	cbnz	r3, 800892e <_vfiprintf_r+0x1d6>
 80088e6:	9b03      	ldr	r3, [sp, #12]
 80088e8:	3307      	adds	r3, #7
 80088ea:	f023 0307 	bic.w	r3, r3, #7
 80088ee:	3308      	adds	r3, #8
 80088f0:	9303      	str	r3, [sp, #12]
 80088f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f4:	443b      	add	r3, r7
 80088f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f8:	e76a      	b.n	80087d0 <_vfiprintf_r+0x78>
 80088fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80088fe:	460c      	mov	r4, r1
 8008900:	2001      	movs	r0, #1
 8008902:	e7a8      	b.n	8008856 <_vfiprintf_r+0xfe>
 8008904:	2300      	movs	r3, #0
 8008906:	3401      	adds	r4, #1
 8008908:	9305      	str	r3, [sp, #20]
 800890a:	4619      	mov	r1, r3
 800890c:	f04f 0c0a 	mov.w	ip, #10
 8008910:	4620      	mov	r0, r4
 8008912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008916:	3a30      	subs	r2, #48	@ 0x30
 8008918:	2a09      	cmp	r2, #9
 800891a:	d903      	bls.n	8008924 <_vfiprintf_r+0x1cc>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0c6      	beq.n	80088ae <_vfiprintf_r+0x156>
 8008920:	9105      	str	r1, [sp, #20]
 8008922:	e7c4      	b.n	80088ae <_vfiprintf_r+0x156>
 8008924:	fb0c 2101 	mla	r1, ip, r1, r2
 8008928:	4604      	mov	r4, r0
 800892a:	2301      	movs	r3, #1
 800892c:	e7f0      	b.n	8008910 <_vfiprintf_r+0x1b8>
 800892e:	ab03      	add	r3, sp, #12
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	462a      	mov	r2, r5
 8008934:	4b12      	ldr	r3, [pc, #72]	@ (8008980 <_vfiprintf_r+0x228>)
 8008936:	a904      	add	r1, sp, #16
 8008938:	4630      	mov	r0, r6
 800893a:	f3af 8000 	nop.w
 800893e:	4607      	mov	r7, r0
 8008940:	1c78      	adds	r0, r7, #1
 8008942:	d1d6      	bne.n	80088f2 <_vfiprintf_r+0x19a>
 8008944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008946:	07d9      	lsls	r1, r3, #31
 8008948:	d405      	bmi.n	8008956 <_vfiprintf_r+0x1fe>
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	059a      	lsls	r2, r3, #22
 800894e:	d402      	bmi.n	8008956 <_vfiprintf_r+0x1fe>
 8008950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008952:	f7ff fa95 	bl	8007e80 <__retarget_lock_release_recursive>
 8008956:	89ab      	ldrh	r3, [r5, #12]
 8008958:	065b      	lsls	r3, r3, #25
 800895a:	f53f af1f 	bmi.w	800879c <_vfiprintf_r+0x44>
 800895e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008960:	e71e      	b.n	80087a0 <_vfiprintf_r+0x48>
 8008962:	ab03      	add	r3, sp, #12
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	462a      	mov	r2, r5
 8008968:	4b05      	ldr	r3, [pc, #20]	@ (8008980 <_vfiprintf_r+0x228>)
 800896a:	a904      	add	r1, sp, #16
 800896c:	4630      	mov	r0, r6
 800896e:	f7ff fcc5 	bl	80082fc <_printf_i>
 8008972:	e7e4      	b.n	800893e <_vfiprintf_r+0x1e6>
 8008974:	08012302 	.word	0x08012302
 8008978:	0801230c 	.word	0x0801230c
 800897c:	00000000 	.word	0x00000000
 8008980:	08008735 	.word	0x08008735
 8008984:	08012308 	.word	0x08012308

08008988 <__swbuf_r>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	460e      	mov	r6, r1
 800898c:	4614      	mov	r4, r2
 800898e:	4605      	mov	r5, r0
 8008990:	b118      	cbz	r0, 800899a <__swbuf_r+0x12>
 8008992:	6a03      	ldr	r3, [r0, #32]
 8008994:	b90b      	cbnz	r3, 800899a <__swbuf_r+0x12>
 8008996:	f7ff f861 	bl	8007a5c <__sinit>
 800899a:	69a3      	ldr	r3, [r4, #24]
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	071a      	lsls	r2, r3, #28
 80089a2:	d501      	bpl.n	80089a8 <__swbuf_r+0x20>
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	b943      	cbnz	r3, 80089ba <__swbuf_r+0x32>
 80089a8:	4621      	mov	r1, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f82a 	bl	8008a04 <__swsetup_r>
 80089b0:	b118      	cbz	r0, 80089ba <__swbuf_r+0x32>
 80089b2:	f04f 37ff 	mov.w	r7, #4294967295
 80089b6:	4638      	mov	r0, r7
 80089b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	6922      	ldr	r2, [r4, #16]
 80089be:	1a98      	subs	r0, r3, r2
 80089c0:	6963      	ldr	r3, [r4, #20]
 80089c2:	b2f6      	uxtb	r6, r6
 80089c4:	4283      	cmp	r3, r0
 80089c6:	4637      	mov	r7, r6
 80089c8:	dc05      	bgt.n	80089d6 <__swbuf_r+0x4e>
 80089ca:	4621      	mov	r1, r4
 80089cc:	4628      	mov	r0, r5
 80089ce:	f7fe ff91 	bl	80078f4 <_fflush_r>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d1ed      	bne.n	80089b2 <__swbuf_r+0x2a>
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	3b01      	subs	r3, #1
 80089da:	60a3      	str	r3, [r4, #8]
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	6022      	str	r2, [r4, #0]
 80089e2:	701e      	strb	r6, [r3, #0]
 80089e4:	6962      	ldr	r2, [r4, #20]
 80089e6:	1c43      	adds	r3, r0, #1
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d004      	beq.n	80089f6 <__swbuf_r+0x6e>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	07db      	lsls	r3, r3, #31
 80089f0:	d5e1      	bpl.n	80089b6 <__swbuf_r+0x2e>
 80089f2:	2e0a      	cmp	r6, #10
 80089f4:	d1df      	bne.n	80089b6 <__swbuf_r+0x2e>
 80089f6:	4621      	mov	r1, r4
 80089f8:	4628      	mov	r0, r5
 80089fa:	f7fe ff7b 	bl	80078f4 <_fflush_r>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d0d9      	beq.n	80089b6 <__swbuf_r+0x2e>
 8008a02:	e7d6      	b.n	80089b2 <__swbuf_r+0x2a>

08008a04 <__swsetup_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4b29      	ldr	r3, [pc, #164]	@ (8008aac <__swsetup_r+0xa8>)
 8008a08:	4605      	mov	r5, r0
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	b118      	cbz	r0, 8008a18 <__swsetup_r+0x14>
 8008a10:	6a03      	ldr	r3, [r0, #32]
 8008a12:	b90b      	cbnz	r3, 8008a18 <__swsetup_r+0x14>
 8008a14:	f7ff f822 	bl	8007a5c <__sinit>
 8008a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1c:	0719      	lsls	r1, r3, #28
 8008a1e:	d422      	bmi.n	8008a66 <__swsetup_r+0x62>
 8008a20:	06da      	lsls	r2, r3, #27
 8008a22:	d407      	bmi.n	8008a34 <__swsetup_r+0x30>
 8008a24:	2209      	movs	r2, #9
 8008a26:	602a      	str	r2, [r5, #0]
 8008a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a32:	e033      	b.n	8008a9c <__swsetup_r+0x98>
 8008a34:	0758      	lsls	r0, r3, #29
 8008a36:	d512      	bpl.n	8008a5e <__swsetup_r+0x5a>
 8008a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a3a:	b141      	cbz	r1, 8008a4e <__swsetup_r+0x4a>
 8008a3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a40:	4299      	cmp	r1, r3
 8008a42:	d002      	beq.n	8008a4a <__swsetup_r+0x46>
 8008a44:	4628      	mov	r0, r5
 8008a46:	f7ff fa49 	bl	8007edc <_free_r>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	2300      	movs	r3, #0
 8008a58:	6063      	str	r3, [r4, #4]
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	f043 0308 	orr.w	r3, r3, #8
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	b94b      	cbnz	r3, 8008a7e <__swsetup_r+0x7a>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a74:	d003      	beq.n	8008a7e <__swsetup_r+0x7a>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f7ff fd97 	bl	80085ac <__smakebuf_r>
 8008a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a82:	f013 0201 	ands.w	r2, r3, #1
 8008a86:	d00a      	beq.n	8008a9e <__swsetup_r+0x9a>
 8008a88:	2200      	movs	r2, #0
 8008a8a:	60a2      	str	r2, [r4, #8]
 8008a8c:	6962      	ldr	r2, [r4, #20]
 8008a8e:	4252      	negs	r2, r2
 8008a90:	61a2      	str	r2, [r4, #24]
 8008a92:	6922      	ldr	r2, [r4, #16]
 8008a94:	b942      	cbnz	r2, 8008aa8 <__swsetup_r+0xa4>
 8008a96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a9a:	d1c5      	bne.n	8008a28 <__swsetup_r+0x24>
 8008a9c:	bd38      	pop	{r3, r4, r5, pc}
 8008a9e:	0799      	lsls	r1, r3, #30
 8008aa0:	bf58      	it	pl
 8008aa2:	6962      	ldrpl	r2, [r4, #20]
 8008aa4:	60a2      	str	r2, [r4, #8]
 8008aa6:	e7f4      	b.n	8008a92 <__swsetup_r+0x8e>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e7f7      	b.n	8008a9c <__swsetup_r+0x98>
 8008aac:	20000220 	.word	0x20000220

08008ab0 <_raise_r>:
 8008ab0:	291f      	cmp	r1, #31
 8008ab2:	b538      	push	{r3, r4, r5, lr}
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	d904      	bls.n	8008ac4 <_raise_r+0x14>
 8008aba:	2316      	movs	r3, #22
 8008abc:	6003      	str	r3, [r0, #0]
 8008abe:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
 8008ac4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ac6:	b112      	cbz	r2, 8008ace <_raise_r+0x1e>
 8008ac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008acc:	b94b      	cbnz	r3, 8008ae2 <_raise_r+0x32>
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f000 f830 	bl	8008b34 <_getpid_r>
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	4601      	mov	r1, r0
 8008ad8:	4628      	mov	r0, r5
 8008ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ade:	f000 b817 	b.w	8008b10 <_kill_r>
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d00a      	beq.n	8008afc <_raise_r+0x4c>
 8008ae6:	1c59      	adds	r1, r3, #1
 8008ae8:	d103      	bne.n	8008af2 <_raise_r+0x42>
 8008aea:	2316      	movs	r3, #22
 8008aec:	6003      	str	r3, [r0, #0]
 8008aee:	2001      	movs	r0, #1
 8008af0:	e7e7      	b.n	8008ac2 <_raise_r+0x12>
 8008af2:	2100      	movs	r1, #0
 8008af4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008af8:	4620      	mov	r0, r4
 8008afa:	4798      	blx	r3
 8008afc:	2000      	movs	r0, #0
 8008afe:	e7e0      	b.n	8008ac2 <_raise_r+0x12>

08008b00 <raise>:
 8008b00:	4b02      	ldr	r3, [pc, #8]	@ (8008b0c <raise+0xc>)
 8008b02:	4601      	mov	r1, r0
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	f7ff bfd3 	b.w	8008ab0 <_raise_r>
 8008b0a:	bf00      	nop
 8008b0c:	20000220 	.word	0x20000220

08008b10 <_kill_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d07      	ldr	r5, [pc, #28]	@ (8008b30 <_kill_r+0x20>)
 8008b14:	2300      	movs	r3, #0
 8008b16:	4604      	mov	r4, r0
 8008b18:	4608      	mov	r0, r1
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	602b      	str	r3, [r5, #0]
 8008b1e:	f7f9 f991 	bl	8001e44 <_kill>
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	d102      	bne.n	8008b2c <_kill_r+0x1c>
 8008b26:	682b      	ldr	r3, [r5, #0]
 8008b28:	b103      	cbz	r3, 8008b2c <_kill_r+0x1c>
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	bd38      	pop	{r3, r4, r5, pc}
 8008b2e:	bf00      	nop
 8008b30:	2000af88 	.word	0x2000af88

08008b34 <_getpid_r>:
 8008b34:	f7f9 b97e 	b.w	8001e34 <_getpid>

08008b38 <_malloc_usable_size_r>:
 8008b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3c:	1f18      	subs	r0, r3, #4
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bfbc      	itt	lt
 8008b42:	580b      	ldrlt	r3, [r1, r0]
 8008b44:	18c0      	addlt	r0, r0, r3
 8008b46:	4770      	bx	lr

08008b48 <_init>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr

08008b54 <_fini>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr
