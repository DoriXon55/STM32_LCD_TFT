
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009698  08008c48  08008c48  00009c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122e0  080122e0  00014264  2**0
                  CONTENTS
  4 .ARM          00000008  080122e0  080122e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122e8  080122e8  00014264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122e8  080122e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080122ec  080122ec  000132ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  080122f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae34  20000264  08012554  00014264  2**2
                  ALLOC
 10 ._user_heap_stack 00001300  2000b098  08012554  00015098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f9c  00000000  00000000  00014294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003604  00000000  00000000  00027230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb8  00000000  00000000  0002b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289c6  00000000  00000000  0002c368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001658f  00000000  00000000  00054d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec21a  00000000  00000000  0006b2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001574d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000433c  00000000  00000000  0015751c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015b858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c30 	.word	0x08008c30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	08008c30 	.word	0x08008c30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ringBufferSetup>:
/************************************************************************
* Funkcja: ringBufferSetup()
* (Utworzenie instancji bufora)
************************************************************************/
void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	60da      	str	r2, [r3, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <USART_kbhit>:
/************************************************************************
* Funkcja: USART_kbhit()
* (Sprawdza czy w buforze odbiorczym znajdują się dane
* Zwraca 1 jeśli bufor zawiera dane do odczytu)
************************************************************************/
uint8_t USART_kbhit(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <USART_kbhit+0x20>)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <USART_kbhit+0x20>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d101      	bne.n	80005b8 <USART_kbhit+0x14>
		return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e000      	b.n	80005ba <USART_kbhit+0x16>
	}else{
		return 1;
 80005b8:	2301      	movs	r3, #1
	}
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	20000280 	.word	0x20000280

080005c8 <USART_getchar>:
* Jeśli bufor pusty = -1
* Jeśli jest dostępny bajt to funkcja zwraca jesgo wartość
* oraz aktualizuje index RX_Busy tak aby wskazywał na kolejny
* bajt do odczytu)
************************************************************************/
int16_t USART_getchar() {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <USART_getchar+0x44>)
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <USART_getchar+0x44>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d00f      	beq.n	80005fa <USART_getchar+0x32>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <USART_getchar+0x44>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <USART_getchar+0x48>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) & rxRingBuffer.mask;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <USART_getchar+0x44>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <USART_getchar+0x44>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4013      	ands	r3, r2
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <USART_getchar+0x44>)
 80005f2:	6053      	str	r3, [r2, #4]
        return tmp;
 80005f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f8:	e001      	b.n	80005fe <USART_getchar+0x36>
    }
    return -1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000280 	.word	0x20000280
 8000610:	20000aa0 	.word	0x20000aa0

08000614 <USART_sendFrame>:
*    - bufor był pusty (writeIndex == readIndex)
*    - rejestr nadawczy jest gotowy (TXE = 1)
* 6. Aktualizuje wskaźnik zapisu w buforze kołowym
* 7. Włącza przerwania
************************************************************************/
void USART_sendFrame(const uint8_t* data, size_t length) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 800061e:	4b32      	ldr	r3, [pc, #200]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop

    __disable_irq();

    // Dodaj początek ramki
    USART_TxBuf[idx] = FRAME_START;
 8000628:	4a30      	ldr	r2, [pc, #192]	@ (80006ec <USART_sendFrame+0xd8>)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	4413      	add	r3, r2
 800062e:	227e      	movs	r2, #126	@ 0x7e
 8000630:	701a      	strb	r2, [r3, #0]
    idx = (idx + 1) & txRingBuffer.mask;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	461a      	mov	r2, r3
 8000638:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <USART_sendFrame+0xd4>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4013      	ands	r3, r2
 800063e:	617b      	str	r3, [r7, #20]

    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e012      	b.n	800066c <USART_sendFrame+0x58>
        USART_TxBuf[idx] = data[i];
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <USART_sendFrame+0xd8>)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
        idx = (idx + 1) & txRingBuffer.mask;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	461a      	mov	r2, r3
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	4013      	ands	r3, r2
 8000664:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3301      	adds	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3e8      	bcc.n	8000646 <USART_sendFrame+0x32>
    }

    // Dodaj koniec ramki
    USART_TxBuf[idx] = FRAME_END;
 8000674:	4a1d      	ldr	r2, [pc, #116]	@ (80006ec <USART_sendFrame+0xd8>)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	4413      	add	r3, r2
 800067a:	2260      	movs	r2, #96	@ 0x60
 800067c:	701a      	strb	r2, [r3, #0]
    idx = (idx + 1) & txRingBuffer.mask;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	461a      	mov	r2, r3
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4013      	ands	r3, r2
 800068a:	617b      	str	r3, [r7, #20]

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <USART_sendFrame+0xd4>)
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	d11e      	bne.n	80006d6 <USART_sendFrame+0xc2>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <USART_sendFrame+0xdc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 80006a2:	2b80      	cmp	r3, #128	@ 0x80
 80006a4:	d117      	bne.n	80006d6 <USART_sendFrame+0xc2>
        txRingBuffer.writeIndex = idx;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006aa:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4a0e      	ldr	r2, [pc, #56]	@ (80006ec <USART_sendFrame+0xd8>)
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) & txRingBuffer.mask;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	4013      	ands	r3, r2
 80006c2:	4a09      	ldr	r2, [pc, #36]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006c4:	6053      	str	r3, [r2, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006c6:	f107 030f 	add.w	r3, r7, #15
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <USART_sendFrame+0xdc>)
 80006d0:	f004 ff24 	bl	800551c <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006d4:	e002      	b.n	80006dc <USART_sendFrame+0xc8>
    } else {
        txRingBuffer.writeIndex = idx;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	4a03      	ldr	r2, [pc, #12]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006da:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006dc:	b662      	cpsie	i
}
 80006de:	bf00      	nop
    }

    __enable_irq();
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000290 	.word	0x20000290
 80006ec:	200002a0 	.word	0x200002a0
 80006f0:	2000aec4 	.word	0x2000aec4

080006f4 <calculateCrc16>:
*      - crc_out[1] = crc & 0xFF (młodszy bajt)
*
* Korzysta z:
*   - crc16_table: Tablica lookup z wstępnie obliczonymi wartościami
************************************************************************/
void calculateCrc16(uint8_t *data, size_t length, char crc_out[2]) {
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	@ 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF;
 8000700:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000704:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	e019      	b.n	8000740 <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte;
 8000716:	8bfb      	ldrh	r3, [r7, #30]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2da      	uxtb	r2, r3
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	4053      	eors	r3, r2
 8000722:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index];
 8000724:	8bfb      	ldrh	r3, [r7, #30]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21a      	sxth	r2, r3
 800072a:	7dbb      	ldrb	r3, [r7, #22]
 800072c:	490f      	ldr	r1, [pc, #60]	@ (800076c <calculateCrc16+0x78>)
 800072e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4053      	eors	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	3301      	adds	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69ba      	ldr	r2, [r7, #24]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	429a      	cmp	r2, r3
 8000746:	d3e1      	bcc.n	800070c <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF);
 8000748:	8bfb      	ldrh	r3, [r7, #30]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2da      	uxtb	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	8bfa      	ldrh	r2, [r7, #30]
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	701a      	strb	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	3724      	adds	r7, #36	@ 0x24
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000

08000770 <debugCRCCalculation>:
void debugCRCCalculation(uint8_t *data, size_t length) {
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b0a5      	sub	sp, #148	@ 0x94
 8000774:	af04      	add	r7, sp, #16
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 800077a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800077e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    USART_sendFrame((uint8_t*)"CRC Calculation:\r\n", 17);
 8000782:	2111      	movs	r1, #17
 8000784:	484c      	ldr	r0, [pc, #304]	@ (80008b8 <debugCRCCalculation+0x148>)
 8000786:	f7ff ff45 	bl	8000614 <USART_sendFrame>

    char buf[100];
    int idx;

    // Pokaż dane wejściowe
    idx = sprintf(buf, "Input data: ");
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	494b      	ldr	r1, [pc, #300]	@ (80008bc <debugCRCCalculation+0x14c>)
 8000790:	4618      	mov	r0, r3
 8000792:	f007 fdfd 	bl	8008390 <siprintf>
 8000796:	67b8      	str	r0, [r7, #120]	@ 0x78
    for(size_t i = 0; i < length; i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	677b      	str	r3, [r7, #116]	@ 0x74
 800079c:	e012      	b.n	80007c4 <debugCRCCalculation+0x54>
        idx += sprintf(buf + idx, "%02X ", data[i]);
 800079e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007a0:	f107 0208 	add.w	r2, r7, #8
 80007a4:	18d0      	adds	r0, r2, r3
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4943      	ldr	r1, [pc, #268]	@ (80008c0 <debugCRCCalculation+0x150>)
 80007b2:	f007 fded 	bl	8008390 <siprintf>
 80007b6:	4602      	mov	r2, r0
 80007b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007ba:	4413      	add	r3, r2
 80007bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    for(size_t i = 0; i < length; i++) {
 80007be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007c0:	3301      	adds	r3, #1
 80007c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80007c4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d3e8      	bcc.n	800079e <debugCRCCalculation+0x2e>
    }
    sprintf(buf + idx, "\r\n");
 80007cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007ce:	f107 0208 	add.w	r2, r7, #8
 80007d2:	4413      	add	r3, r2
 80007d4:	493b      	ldr	r1, [pc, #236]	@ (80008c4 <debugCRCCalculation+0x154>)
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fdda 	bl	8008390 <siprintf>
    USART_sendFrame((uint8_t*)buf, strlen(buf));
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcf5 	bl	80001d0 <strlen>
 80007e6:	4602      	mov	r2, r0
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff10 	bl	8000614 <USART_sendFrame>

    // Pokaż proces
    for (size_t i = 0; i < length; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80007f8:	e03d      	b.n	8000876 <debugCRCCalculation+0x106>
        uint8_t byte = data[i];
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        uint8_t table_index = (crc >> 8) ^ byte;
 8000806:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800080a:	0a1b      	lsrs	r3, r3, #8
 800080c:	b29b      	uxth	r3, r3
 800080e:	b2da      	uxtb	r2, r3
 8000810:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000814:	4053      	eors	r3, r2
 8000816:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        uint16_t old_crc = crc;
 800081a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800081e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
        crc = (crc << 8) ^ crc16_table[table_index];
 8000822:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	b21a      	sxth	r2, r3
 800082a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800082e:	4926      	ldr	r1, [pc, #152]	@ (80008c8 <debugCRCCalculation+0x158>)
 8000830:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4053      	eors	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

        idx = sprintf(buf, "Step %zu: byte=%02X, index=%02X, old_crc=%04X, new_crc=%04X\r\n",
 800083e:	f897 406f 	ldrb.w	r4, [r7, #111]	@ 0x6f
 8000842:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000846:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800084a:	f8b7 107e 	ldrh.w	r1, [r7, #126]	@ 0x7e
 800084e:	f107 0008 	add.w	r0, r7, #8
 8000852:	9102      	str	r1, [sp, #8]
 8000854:	9201      	str	r2, [sp, #4]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4623      	mov	r3, r4
 800085a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800085c:	491b      	ldr	r1, [pc, #108]	@ (80008cc <debugCRCCalculation+0x15c>)
 800085e:	f007 fd97 	bl	8008390 <siprintf>
 8000862:	67b8      	str	r0, [r7, #120]	@ 0x78
                     i, byte, table_index, old_crc, crc);
        USART_sendFrame((uint8_t*)buf, idx);
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fed2 	bl	8000614 <USART_sendFrame>
    for (size_t i = 0; i < length; i++) {
 8000870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000872:	3301      	adds	r3, #1
 8000874:	673b      	str	r3, [r7, #112]	@ 0x70
 8000876:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3bd      	bcc.n	80007fa <debugCRCCalculation+0x8a>
    }

    // Pokaż wynik końcowy
    sprintf(buf, "Final CRC: %02X %02X\r\n", (crc >> 8) & 0xFF, crc & 0xFF);
 800087e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	b2da      	uxtb	r2, r3
 8000888:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f107 0008 	add.w	r0, r7, #8
 8000892:	490f      	ldr	r1, [pc, #60]	@ (80008d0 <debugCRCCalculation+0x160>)
 8000894:	f007 fd7c 	bl	8008390 <siprintf>
    USART_sendFrame((uint8_t*)buf, strlen(buf));
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fc97 	bl	80001d0 <strlen>
 80008a2:	4602      	mov	r2, r0
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff feb2 	bl	8000614 <USART_sendFrame>
}
 80008b0:	bf00      	nop
 80008b2:	3784      	adds	r7, #132	@ 0x84
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	08008c48 	.word	0x08008c48
 80008bc:	08008c5c 	.word	0x08008c5c
 80008c0:	08008c6c 	.word	0x08008c6c
 80008c4:	08008c74 	.word	0x08008c74
 80008c8:	20000000 	.word	0x20000000
 80008cc:	08008c78 	.word	0x08008c78
 80008d0:	08008cb8 	.word	0x08008cb8

080008d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_DMA_Init+0x38>)
 80008dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008de:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <MX_DMA_Init+0x38>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_DMA_Init+0x38>)
 80008e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	200f      	movs	r0, #15
 80008f8:	f002 f829 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008fc:	200f      	movs	r0, #15
 80008fe:	f002 f842 	bl	8002986 <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <debugData>:
int bx_index = 0;
bool in_frame = false;
uint8_t received_char;
Frame frame;
ScrollingTextState text = {0};
static void debugData(const char* message, uint8_t *data, size_t len) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b0c8      	sub	sp, #288	@ 0x120
 8000914:	af00      	add	r7, sp, #0
 8000916:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800091a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800091e:	6018      	str	r0, [r3, #0]
 8000920:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000924:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000928:	6019      	str	r1, [r3, #0]
 800092a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800092e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000932:	601a      	str	r2, [r3, #0]
    // Bufor na wiadomość debugową (zakładając maksymalną długość)
    uint8_t debug_buffer[256];
    uint8_t hex_str[4];  // Bufor na pojedynczą wartość hex
    int idx = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    // Kopiuj wiadomość
    while (*message) {
 800093a:	e015      	b.n	8000968 <debugData+0x58>
        debug_buffer[idx++] = *message++;
 800093c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000940:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800094a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800094e:	1c51      	adds	r1, r2, #1
 8000950:	6019      	str	r1, [r3, #0]
 8000952:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000956:	1c59      	adds	r1, r3, #1
 8000958:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 800095c:	7811      	ldrb	r1, [r2, #0]
 800095e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000962:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000966:	54d1      	strb	r1, [r2, r3]
    while (*message) {
 8000968:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800096c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1e1      	bne.n	800093c <debugData+0x2c>
    }

    debug_buffer[idx++] = ':';
 8000978:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000982:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000986:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800098a:	213a      	movs	r1, #58	@ 0x3a
 800098c:	54d1      	strb	r1, [r2, r3]
    debug_buffer[idx++] = ' ';
 800098e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000998:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800099c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80009a0:	2120      	movs	r1, #32
 80009a2:	54d1      	strb	r1, [r2, r3]

    // Konwertuj każdy bajt na hex string
    for(size_t i = 0; i < len; i++) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80009aa:	e03d      	b.n	8000a28 <debugData+0x118>
        // Konwersja na hex (np. 0xFF -> "FF ")
        sprintf((char*)hex_str, "%02X ", data[i]);
 80009ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	492e      	ldr	r1, [pc, #184]	@ (8000a80 <debugData+0x170>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f007 fce2 	bl	8008390 <siprintf>
        debug_buffer[idx++] = hex_str[0];
 80009cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80009d6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009da:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80009de:	7811      	ldrb	r1, [r2, #0]
 80009e0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009e4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80009e8:	54d1      	strb	r1, [r2, r3]
        debug_buffer[idx++] = hex_str[1];
 80009ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80009f4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009f8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80009fc:	7851      	ldrb	r1, [r2, #1]
 80009fe:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a02:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a06:	54d1      	strb	r1, [r2, r3]
        debug_buffer[idx++] = ' ';
 8000a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000a12:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a16:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	54d1      	strb	r1, [r2, r3]
    for(size_t i = 0; i < len; i++) {
 8000a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000a22:	3301      	adds	r3, #1
 8000a24:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000a28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000a30:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d3b8      	bcc.n	80009ac <debugData+0x9c>
    }

    debug_buffer[idx++] = '\r';
 8000a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000a44:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a48:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a4c:	210d      	movs	r1, #13
 8000a4e:	54d1      	strb	r1, [r2, r3]
    debug_buffer[idx++] = '\n';
 8000a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000a5a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a5e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a62:	210a      	movs	r1, #10
 8000a64:	54d1      	strb	r1, [r2, r3]

    // Wyślij przez UART
    USART_sendFrame(debug_buffer, idx);
 8000a66:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000a6a:	f107 0318 	add.w	r3, r7, #24
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fdcf 	bl	8000614 <USART_sendFrame>
}
 8000a76:	bf00      	nop
 8000a78:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	08008d0c 	.word	0x08008d0c

08000a84 <stopAnimation>:
static void stopAnimation(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	text.isScrolling = false;
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <stopAnimation+0x18>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000d34 	.word	0x20000d34

08000aa0 <copyToBuffer>:

static void copyToBuffer(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	if (!lcdIsBusy()) {
 8000aa4:	f001 fa34 	bl	8001f10 <lcdIsBusy>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <copyToBuffer+0x18>
		lcdCopy();
 8000ab4:	f001 f994 	bl	8001de0 <lcdCopy>
	}
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <safeCompare>:
static bool safeCompare(const char* str1, const char* str2, size_t len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	if(str1 == NULL || str2 == NULL)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <safeCompare+0x18>
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <safeCompare+0x1c>
	{
		return false;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e00a      	b.n	8000aee <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f007 fcb1 	bl	8008444 <memcmp>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <parseColor>:
* Korzysta z:
*   - color_map: Globalna tablica struktur ColorMap zawierająca:
*   - name: string z nazwą koloru
*   - value: wartość Color_t w formacie RGB565
************************************************************************/
bool parseColor(const char* color_name, Color_t* color) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    if (color_name == NULL || color == NULL) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <parseColor+0x16>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <parseColor+0x1a>
        return false;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e026      	b.n	8000b60 <parseColor+0x68>
    }

    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e01f      	b.n	8000b58 <parseColor+0x60>
        size_t color_len = strlen(color_map[i].name); // Get the expected color name length
 8000b18:	4a13      	ldr	r2, [pc, #76]	@ (8000b68 <parseColor+0x70>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb55 	bl	80001d0 <strlen>
 8000b26:	60b8      	str	r0, [r7, #8]
        if (safeCompare(color_name, color_map[i].name, color_len)) {
 8000b28:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <parseColor+0x70>)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	4619      	mov	r1, r3
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ffc1 	bl	8000abc <safeCompare>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d008      	beq.n	8000b52 <parseColor+0x5a>
            *color = color_map[i].value;
 8000b40:	4a09      	ldr	r2, [pc, #36]	@ (8000b68 <parseColor+0x70>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4413      	add	r3, r2
 8000b48:	889a      	ldrh	r2, [r3, #4]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	801a      	strh	r2, [r3, #0]
            return true;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e006      	b.n	8000b60 <parseColor+0x68>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	d9dc      	bls.n	8000b18 <parseColor+0x20>
        }
    }
    return false;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08008e28 	.word	0x08008e28

08000b6c <resetFrameState>:
* Zmienne globalne:
*   - in_frame: Flaga oznaczająca czy jesteśmy w trakcie odbierania ramki
*   - escape_detected: Flaga oznaczająca wykrycie znaku escape
*   - bx_index: Indeks w buforze odbiorczym
************************************************************************/
static void resetFrameState() {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
    in_frame = false;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <resetFrameState+0x20>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <resetFrameState+0x24>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <resetFrameState+0x28>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	20000ca8 	.word	0x20000ca8
 8000b90:	20000ca0 	.word	0x20000ca0
 8000b94:	20000ca4 	.word	0x20000ca4

08000b98 <debugData.0>:
    const char* fmt_ptr = format;
    uint8_t token[51];
    size_t token_idx = 0;

    // Debug helper
    void debugData(const char* msg, const uint8_t* data, size_t len) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0a0      	sub	sp, #128	@ 0x80
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	f8c7 c000 	str.w	ip, [r7]
        uint8_t buf[100];
        int idx = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (*msg) buf[idx++] = *msg++;
 8000bac:	e00a      	b.n	8000bc4 <debugData.0+0x2c>
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	1c53      	adds	r3, r2, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bb6:	1c59      	adds	r1, r3, #1
 8000bb8:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8000bba:	7812      	ldrb	r2, [r2, #0]
 8000bbc:	3380      	adds	r3, #128	@ 0x80
 8000bbe:	443b      	add	r3, r7
 8000bc0:	f803 2c6c 	strb.w	r2, [r3, #-108]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1f0      	bne.n	8000bae <debugData.0+0x16>
        buf[idx++] = ':';
 8000bcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000bd2:	3380      	adds	r3, #128	@ 0x80
 8000bd4:	443b      	add	r3, r7
 8000bd6:	223a      	movs	r2, #58	@ 0x3a
 8000bd8:	f803 2c6c 	strb.w	r2, [r3, #-108]
        buf[idx++] = ' ';
 8000bdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000be2:	3380      	adds	r3, #128	@ 0x80
 8000be4:	443b      	add	r3, r7
 8000be6:	2220      	movs	r2, #32
 8000be8:	f803 2c6c 	strb.w	r2, [r3, #-108]
        for (size_t i = 0; i < len; i++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000bf0:	e00d      	b.n	8000c0e <debugData.0+0x76>
            buf[idx++] = data[i];
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000bf6:	441a      	add	r2, r3
 8000bf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bfa:	1c59      	adds	r1, r3, #1
 8000bfc:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	3380      	adds	r3, #128	@ 0x80
 8000c02:	443b      	add	r3, r7
 8000c04:	f803 2c6c 	strb.w	r2, [r3, #-108]
        for (size_t i = 0; i < len; i++) {
 8000c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000c0e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3ed      	bcc.n	8000bf2 <debugData.0+0x5a>
        }
        buf[idx++] = '\r';
 8000c16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000c1c:	3380      	adds	r3, #128	@ 0x80
 8000c1e:	443b      	add	r3, r7
 8000c20:	220d      	movs	r2, #13
 8000c22:	f803 2c6c 	strb.w	r2, [r3, #-108]
        buf[idx++] = '\n';
 8000c26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000c2c:	3380      	adds	r3, #128	@ 0x80
 8000c2e:	443b      	add	r3, r7
 8000c30:	220a      	movs	r2, #10
 8000c32:	f803 2c6c 	strb.w	r2, [r3, #-108]
        USART_sendFrame(buf, idx);
 8000c36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fce8 	bl	8000614 <USART_sendFrame>
    }
 8000c44:	bf00      	nop
 8000c46:	3780      	adds	r7, #128	@ 0x80
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <parseParameters>:
bool parseParameters(const uint8_t* data, const char* format, ...) {
 8000c4c:	b40e      	push	{r1, r2, r3}
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b09d      	sub	sp, #116	@ 0x74
 8000c52:	af02      	add	r7, sp, #8
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c5a:	60fb      	str	r3, [r7, #12]
    if (!data || !format) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <parseParameters+0x1c>
 8000c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <parseParameters+0x20>
        return false;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e0e0      	b.n	8000e2e <parseParameters+0x1e2>
    va_start(args, format);
 8000c6c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c70:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint8_t* data_ptr = data;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	667b      	str	r3, [r7, #100]	@ 0x64
    const char* fmt_ptr = format;
 8000c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c78:	663b      	str	r3, [r7, #96]	@ 0x60
    size_t token_idx = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // Store scrollSpeed for text length validation
    uint8_t scrollSpeed = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    bool hasScrollSpeed = false;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

    while (*fmt_ptr) {
 8000c8a:	e0ca      	b.n	8000e22 <parseParameters+0x1d6>
        switch (*fmt_ptr) {
 8000c8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b75      	cmp	r3, #117	@ 0x75
 8000c92:	d007      	beq.n	8000ca4 <parseParameters+0x58>
 8000c94:	2b75      	cmp	r3, #117	@ 0x75
 8000c96:	f300 80bf 	bgt.w	8000e18 <parseParameters+0x1cc>
 8000c9a:	2b73      	cmp	r3, #115	@ 0x73
 8000c9c:	d02b      	beq.n	8000cf6 <parseParameters+0xaa>
 8000c9e:	2b74      	cmp	r3, #116	@ 0x74
 8000ca0:	d06d      	beq.n	8000d7e <parseParameters+0x132>
 8000ca2:	e0b9      	b.n	8000e18 <parseParameters+0x1cc>
            case 'u': {
                uint8_t* value_ptr = va_arg(args, uint8_t*);
 8000ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ca6:	1d1a      	adds	r2, r3, #4
 8000ca8:	647a      	str	r2, [r7, #68]	@ 0x44
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	657b      	str	r3, [r7, #84]	@ 0x54
                *value_ptr = *data_ptr++;  // Bezpośrednio odczytaj bajt
 8000cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cb8:	701a      	strb	r2, [r3, #0]

                // Store scrollSpeed for later validation
                if (!hasScrollSpeed) {
 8000cba:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8000cbe:	f083 0301 	eor.w	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <parseParameters+0x8a>
                    scrollSpeed = *value_ptr;
 8000cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                    hasScrollSpeed = true;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
                }

                // Jeśli następny znak to przecinek, pomiń go
                if (*data_ptr == ',') {
 8000cd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cdc:	d102      	bne.n	8000ce4 <parseParameters+0x98>
                    data_ptr++;
 8000cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	667b      	str	r3, [r7, #100]	@ 0x64
                }
                debugData("read u", value_ptr, 1);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	469c      	mov	ip, r3
 8000cea:	2201      	movs	r2, #1
 8000cec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000cee:	4853      	ldr	r0, [pc, #332]	@ (8000e3c <parseParameters+0x1f0>)
 8000cf0:	f7ff ff52 	bl	8000b98 <debugData.0>
                break;
 8000cf4:	e092      	b.n	8000e1c <parseParameters+0x1d0>
            }
            case 's': {
                // Zbierz znaki do przecinka
                token_idx = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (*data_ptr && *data_ptr != ',' && token_idx < 50) {
 8000cfa:	e00a      	b.n	8000d12 <parseParameters+0xc6>
                    token[token_idx++] = *data_ptr++;
 8000cfc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000cfe:	1c53      	adds	r3, r2, #1
 8000d00:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d04:	1c59      	adds	r1, r3, #1
 8000d06:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	3368      	adds	r3, #104	@ 0x68
 8000d0c:	443b      	add	r3, r7
 8000d0e:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && *data_ptr != ',' && token_idx < 50) {
 8000d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <parseParameters+0xdc>
 8000d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d20:	d002      	beq.n	8000d28 <parseParameters+0xdc>
 8000d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d24:	2b31      	cmp	r3, #49	@ 0x31
 8000d26:	d9e9      	bls.n	8000cfc <parseParameters+0xb0>
                }
                token[token_idx] = '\0';
 8000d28:	f107 0210 	add.w	r2, r7, #16
 8000d2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d2e:	4413      	add	r3, r2
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
                if (*data_ptr == ',') data_ptr++;
 8000d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d3a:	d102      	bne.n	8000d42 <parseParameters+0xf6>
 8000d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d3e:	3301      	adds	r3, #1
 8000d40:	667b      	str	r3, [r7, #100]	@ 0x64

                Color_t* color_ptr = va_arg(args, Color_t*);
 8000d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d44:	1d1a      	adds	r2, r3, #4
 8000d46:	647a      	str	r2, [r7, #68]	@ 0x44
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (!parseColor((char*)token, color_ptr)) {
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fed0 	bl	8000af8 <parseColor>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f083 0301 	eor.w	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <parseParameters+0x11c>
                    va_end(args);
                    return false;
 8000d64:	2300      	movs	r3, #0
 8000d66:	e062      	b.n	8000e2e <parseParameters+0x1e2>
                }
                debugData("read color", token, token_idx);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	f107 020c 	add.w	r2, r7, #12
 8000d70:	4694      	mov	ip, r2
 8000d72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000d74:	4619      	mov	r1, r3
 8000d76:	4832      	ldr	r0, [pc, #200]	@ (8000e40 <parseParameters+0x1f4>)
 8000d78:	f7ff ff0e 	bl	8000b98 <debugData.0>
                break;
 8000d7c:	e04e      	b.n	8000e1c <parseParameters+0x1d0>
            }
            case 't': {
                // Zbierz pozostały tekst
                token_idx = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (*data_ptr && token_idx < 50) {
 8000d82:	e00a      	b.n	8000d9a <parseParameters+0x14e>
                    token[token_idx++] = *data_ptr++;
 8000d84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d86:	1c53      	adds	r3, r2, #1
 8000d88:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d8c:	1c59      	adds	r1, r3, #1
 8000d8e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8000d90:	7812      	ldrb	r2, [r2, #0]
 8000d92:	3368      	adds	r3, #104	@ 0x68
 8000d94:	443b      	add	r3, r7
 8000d96:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && token_idx < 50) {
 8000d9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <parseParameters+0x15c>
 8000da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000da4:	2b31      	cmp	r3, #49	@ 0x31
 8000da6:	d9ed      	bls.n	8000d84 <parseParameters+0x138>
                }
                token[token_idx] = '\0';
 8000da8:	f107 0210 	add.w	r2, r7, #16
 8000dac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dae:	4413      	add	r3, r2
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]

                // Sprawdź długość tekstu na podstawie scrollSpeed
                size_t maxLength = (scrollSpeed == 0) ? 25 : 50;
 8000db4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <parseParameters+0x174>
 8000dbc:	2319      	movs	r3, #25
 8000dbe:	e000      	b.n	8000dc2 <parseParameters+0x176>
 8000dc0:	2332      	movs	r3, #50	@ 0x32
 8000dc2:	653b      	str	r3, [r7, #80]	@ 0x50
                if (token_idx > maxLength) {
 8000dc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d909      	bls.n	8000de0 <parseParameters+0x194>
                    va_end(args);
                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "TOO_MUCH_TEXT%s", token_idx);
 8000dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <parseParameters+0x1f8>)
 8000dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e48 <parseParameters+0x1fc>)
 8000dd4:	2167      	movs	r1, #103	@ 0x67
 8000dd6:	2068      	movs	r0, #104	@ 0x68
 8000dd8:	f000 fb0a 	bl	80013f0 <prepareFrame>
                    return false;  // Tekst jest za długi
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e026      	b.n	8000e2e <parseParameters+0x1e2>
                }

                char* text_ptr = va_arg(args, char*);
 8000de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000de2:	1d1a      	adds	r2, r3, #4
 8000de4:	647a      	str	r2, [r7, #68]	@ 0x44
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                strncpy(text_ptr, (char*)token, token_idx);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000df0:	4619      	mov	r1, r3
 8000df2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000df4:	f007 fb3e 	bl	8008474 <strncpy>
                text_ptr[token_idx] = '\0';
 8000df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
                debugData("read text", token, token_idx);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	f107 020c 	add.w	r2, r7, #12
 8000e0a:	4694      	mov	ip, r2
 8000e0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480e      	ldr	r0, [pc, #56]	@ (8000e4c <parseParameters+0x200>)
 8000e12:	f7ff fec1 	bl	8000b98 <debugData.0>
                break;
 8000e16:	e001      	b.n	8000e1c <parseParameters+0x1d0>
            }
            default:
                va_end(args);
                return false;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e008      	b.n	8000e2e <parseParameters+0x1e2>
        }
        fmt_ptr++;
 8000e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e1e:	3301      	adds	r3, #1
 8000e20:	663b      	str	r3, [r7, #96]	@ 0x60
    while (*fmt_ptr) {
 8000e22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f47f af30 	bne.w	8000c8c <parseParameters+0x40>
    }

    va_end(args);
    return true;
 8000e2c:	2301      	movs	r3, #1
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	376c      	adds	r7, #108	@ 0x6c
 8000e32:	46bd      	mov	sp, r7
 8000e34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e38:	b003      	add	sp, #12
 8000e3a:	4770      	bx	lr
 8000e3c:	08008d14 	.word	0x08008d14
 8000e40:	08008d1c 	.word	0x08008d1c
 8000e44:	08008d28 	.word	0x08008d28
 8000e48:	08008d38 	.word	0x08008d38
 8000e4c:	08008d3c 	.word	0x08008d3c

08000e50 <clearFrame>:
*   - Parametry: (void* ptr, int value, size_t num)
*   - ptr: Wskaźnik na początek bloku pamięci
*   - value: Wartość do wypełnienia (0 dla wyzerowania)
*   - num: Liczba bajtów do wypełnienia
************************************************************************/
void clearFrame(Frame* frame) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00d      	beq.n	8000e7a <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3305      	adds	r3, #5
 8000e62:	2280      	movs	r2, #128	@ 0x80
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f007 fafc 	bl	8008464 <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3302      	adds	r3, #2
 8000e70:	2203      	movs	r2, #3
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f007 faf5 	bl	8008464 <memset>
    }
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <executeONK>:
*      - Parametry: (x, y, r, color)
*
*   3. prepareFrame(): Wysyła odpowiedź w przypadku błędu
************************************************************************/
static void executeONK(Frame *frame)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af04      	add	r7, sp, #16
 8000e8a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	2300      	movs	r3, #0
 8000e92:	73bb      	strb	r3, [r7, #14]
 8000e94:	2300      	movs	r3, #0
 8000e96:	737b      	strb	r3, [r7, #13]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	1d58      	adds	r0, r3, #5
 8000ea4:	f107 010e 	add.w	r1, r7, #14
 8000ea8:	f107 020f 	add.w	r2, r7, #15
 8000eac:	f107 030a 	add.w	r3, r7, #10
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	f107 030d 	add.w	r3, r7, #13
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4917      	ldr	r1, [pc, #92]	@ (8000f20 <executeONK+0x9c>)
 8000ec2:	f7ff fec3 	bl	8000c4c <parseParameters>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f083 0301 	eor.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3305      	adds	r3, #5
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <executeONK+0xa0>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <executeONK+0xa4>)
 8000edc:	2167      	movs	r1, #103	@ 0x67
 8000ede:	2068      	movs	r0, #104	@ 0x68
 8000ee0:	f000 fa86 	bl	80013f0 <prepareFrame>
 8000ee4:	e019      	b.n	8000f1a <executeONK+0x96>
        return;
    }
	switch(filling)
 8000ee6:	7b3b      	ldrb	r3, [r7, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <executeONK+0x6e>
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d00a      	beq.n	8000f06 <executeONK+0x82>
 8000ef0:	e013      	b.n	8000f1a <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	b218      	sxth	r0, r3
 8000ef6:	7bbb      	ldrb	r3, [r7, #14]
 8000ef8:	b219      	sxth	r1, r3
 8000efa:	7b7b      	ldrb	r3, [r7, #13]
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	897b      	ldrh	r3, [r7, #10]
 8000f00:	f006 fd4e 	bl	80079a0 <hagl_draw_circle>
		break;
 8000f04:	e009      	b.n	8000f1a <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	b218      	sxth	r0, r3
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	b219      	sxth	r1, r3
 8000f0e:	7b7b      	ldrb	r3, [r7, #13]
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	897b      	ldrh	r3, [r7, #10]
 8000f14:	f006 fe73 	bl	8007bfe <hagl_fill_circle>
		break;
 8000f18:	bf00      	nop
	}
}
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	08008d48 	.word	0x08008d48
 8000f24:	08008d50 	.word	0x08008d50
 8000f28:	08008d38 	.word	0x08008d38

08000f2c <executeONP>:
*   2. hagl_draw_rectangle() / hagl_fill_rectangle():
*      Funkcje HAGL do rysowania prostokątów
*      - Parametry: (x, y, width, height, color)
************************************************************************/
static void executeONP(Frame *frame)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af04      	add	r7, sp, #16
 8000f32:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73bb      	strb	r3, [r7, #14]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	737b      	strb	r3, [r7, #13]
 8000f40:	2300      	movs	r3, #0
 8000f42:	733b      	strb	r3, [r7, #12]
 8000f44:	2300      	movs	r3, #0
 8000f46:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1d58      	adds	r0, r3, #5
 8000f50:	f107 010e 	add.w	r1, r7, #14
 8000f54:	f107 020f 	add.w	r2, r7, #15
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	9303      	str	r3, [sp, #12]
 8000f5e:	f107 030b 	add.w	r3, r7, #11
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	f107 030d 	add.w	r3, r7, #13
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	460b      	mov	r3, r1
 8000f72:	491c      	ldr	r1, [pc, #112]	@ (8000fe4 <executeONP+0xb8>)
 8000f74:	f7ff fe6a 	bl	8000c4c <parseParameters>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d009      	beq.n	8000f98 <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3305      	adds	r3, #5
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <executeONP+0xbc>)
 8000f8c:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <executeONP+0xc0>)
 8000f8e:	2167      	movs	r1, #103	@ 0x67
 8000f90:	2068      	movs	r0, #104	@ 0x68
 8000f92:	f000 fa2d 	bl	80013f0 <prepareFrame>
 8000f96:	e021      	b.n	8000fdc <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <executeONP+0x78>
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d00e      	beq.n	8000fc0 <executeONP+0x94>
 8000fa2:	e01b      	b.n	8000fdc <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	b218      	sxth	r0, r3
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	b219      	sxth	r1, r3
 8000fac:	7b7b      	ldrb	r3, [r7, #13]
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	b21c      	sxth	r4, r3
 8000fb4:	893b      	ldrh	r3, [r7, #8]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4623      	mov	r3, r4
 8000fba:	f006 fa41 	bl	8007440 <hagl_draw_rectangle>
		break;
 8000fbe:	e00d      	b.n	8000fdc <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	b218      	sxth	r0, r3
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	b219      	sxth	r1, r3
 8000fc8:	7b7b      	ldrb	r3, [r7, #13]
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	7b3b      	ldrb	r3, [r7, #12]
 8000fce:	b21c      	sxth	r4, r3
 8000fd0:	893b      	ldrh	r3, [r7, #8]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	4623      	mov	r3, r4
 8000fd6:	f006 fab9 	bl	800754c <hagl_fill_rectangle>
		break;
 8000fda:	bf00      	nop
	}
}
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08008d64 	.word	0x08008d64
 8000fe8:	08008d50 	.word	0x08008d50
 8000fec:	08008d38 	.word	0x08008d38

08000ff0 <executeONT>:
*   2. hagl_draw_triangle() / hagl_fill_triangle():
*      Funkcje HAGL do rysowania trójkątów
*      - Parametry: (x1,y1, x2,y2, x3,y3, color)
************************************************************************/
static void executeONT(Frame *frame)
{
 8000ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff2:	b08d      	sub	sp, #52	@ 0x34
 8000ff4:	af06      	add	r7, sp, #24
 8000ff6:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	75bb      	strb	r3, [r7, #22]
 8001000:	2300      	movs	r3, #0
 8001002:	757b      	strb	r3, [r7, #21]
 8001004:	2300      	movs	r3, #0
 8001006:	753b      	strb	r3, [r7, #20]
 8001008:	2300      	movs	r3, #0
 800100a:	74fb      	strb	r3, [r7, #19]
 800100c:	2300      	movs	r3, #0
 800100e:	74bb      	strb	r3, [r7, #18]
 8001010:	2300      	movs	r3, #0
 8001012:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	1d58      	adds	r0, r3, #5
 800101c:	f107 0116 	add.w	r1, r7, #22
 8001020:	f107 0217 	add.w	r2, r7, #23
 8001024:	f107 030e 	add.w	r3, r7, #14
 8001028:	9305      	str	r3, [sp, #20]
 800102a:	f107 0311 	add.w	r3, r7, #17
 800102e:	9304      	str	r3, [sp, #16]
 8001030:	f107 0312 	add.w	r3, r7, #18
 8001034:	9303      	str	r3, [sp, #12]
 8001036:	f107 0313 	add.w	r3, r7, #19
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 0315 	add.w	r3, r7, #21
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	460b      	mov	r3, r1
 800104a:	4924      	ldr	r1, [pc, #144]	@ (80010dc <executeONT+0xec>)
 800104c:	f7ff fdfe 	bl	8000c4c <parseParameters>
 8001050:	4603      	mov	r3, r0
 8001052:	f083 0301 	eor.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d009      	beq.n	8001070 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3305      	adds	r3, #5
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <executeONT+0xf0>)
 8001064:	4a1f      	ldr	r2, [pc, #124]	@ (80010e4 <executeONT+0xf4>)
 8001066:	2167      	movs	r1, #103	@ 0x67
 8001068:	2068      	movs	r0, #104	@ 0x68
 800106a:	f000 f9c1 	bl	80013f0 <prepareFrame>
 800106e:	e031      	b.n	80010d4 <executeONT+0xe4>
        return;
    }
    switch(filling)
 8001070:	7c7b      	ldrb	r3, [r7, #17]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <executeONT+0x8c>
 8001076:	2b01      	cmp	r3, #1
 8001078:	d016      	beq.n	80010a8 <executeONT+0xb8>
 800107a:	e02b      	b.n	80010d4 <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	b218      	sxth	r0, r3
 8001080:	7dbb      	ldrb	r3, [r7, #22]
 8001082:	b21c      	sxth	r4, r3
 8001084:	7d7b      	ldrb	r3, [r7, #21]
 8001086:	b21d      	sxth	r5, r3
 8001088:	7d3b      	ldrb	r3, [r7, #20]
 800108a:	b21e      	sxth	r6, r3
 800108c:	7cfb      	ldrb	r3, [r7, #19]
 800108e:	b21b      	sxth	r3, r3
 8001090:	7cba      	ldrb	r2, [r7, #18]
 8001092:	b212      	sxth	r2, r2
 8001094:	89f9      	ldrh	r1, [r7, #14]
 8001096:	9102      	str	r1, [sp, #8]
 8001098:	9201      	str	r2, [sp, #4]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4633      	mov	r3, r6
 800109e:	462a      	mov	r2, r5
 80010a0:	4621      	mov	r1, r4
 80010a2:	f007 f837 	bl	8008114 <hagl_draw_triangle>
            break;
 80010a6:	e015      	b.n	80010d4 <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	b218      	sxth	r0, r3
 80010ac:	7dbb      	ldrb	r3, [r7, #22]
 80010ae:	b21c      	sxth	r4, r3
 80010b0:	7d7b      	ldrb	r3, [r7, #21]
 80010b2:	b21d      	sxth	r5, r3
 80010b4:	7d3b      	ldrb	r3, [r7, #20]
 80010b6:	b21e      	sxth	r6, r3
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	7cba      	ldrb	r2, [r7, #18]
 80010be:	b212      	sxth	r2, r2
 80010c0:	89f9      	ldrh	r1, [r7, #14]
 80010c2:	9102      	str	r1, [sp, #8]
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4633      	mov	r3, r6
 80010ca:	462a      	mov	r2, r5
 80010cc:	4621      	mov	r1, r4
 80010ce:	f007 f847 	bl	8008160 <hagl_fill_triangle>
            break;
 80010d2:	bf00      	nop
    }
}
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010da:	bf00      	nop
 80010dc:	08008d6c 	.word	0x08008d6c
 80010e0:	08008d50 	.word	0x08008d50
 80010e4:	08008d38 	.word	0x08008d38

080010e8 <executeONN>:
*      - Parametry: (wtext, x, y, color, font)
*      - Dostępne fonty: font5x7, font5x8, font6x9

************************************************************************/
static void executeONN(Frame *frame)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	@ 0x50
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	6078      	str	r0, [r7, #4]
    const char charText[50] = {0};
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	222e      	movs	r2, #46	@ 0x2e
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f007 f9b1 	bl	8008464 <memset>

    if (!parseParameters(frame->data, "uuuust", &text.x, &text.y, &text.fontSize, &text.scrollSpeed, &text.color, charText)) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	1d58      	adds	r0, r3, #5
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	4b4c      	ldr	r3, [pc, #304]	@ (8001240 <executeONN+0x158>)
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	4b4c      	ldr	r3, [pc, #304]	@ (8001244 <executeONN+0x15c>)
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	4b4c      	ldr	r3, [pc, #304]	@ (8001248 <executeONN+0x160>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	4b4c      	ldr	r3, [pc, #304]	@ (800124c <executeONN+0x164>)
 800111a:	4a4d      	ldr	r2, [pc, #308]	@ (8001250 <executeONN+0x168>)
 800111c:	494d      	ldr	r1, [pc, #308]	@ (8001254 <executeONN+0x16c>)
 800111e:	f7ff fd95 	bl	8000c4c <parseParameters>
 8001122:	4603      	mov	r3, r0
 8001124:	f083 0301 	eor.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d009      	beq.n	8001142 <executeONN+0x5a>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3305      	adds	r3, #5
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	4b48      	ldr	r3, [pc, #288]	@ (8001258 <executeONN+0x170>)
 8001136:	4a49      	ldr	r2, [pc, #292]	@ (800125c <executeONN+0x174>)
 8001138:	2167      	movs	r1, #103	@ 0x67
 800113a:	2068      	movs	r0, #104	@ 0x68
 800113c:	f000 f958 	bl	80013f0 <prepareFrame>
 8001140:	e07b      	b.n	800123a <executeONN+0x152>
        return;
    }

    // Zapisz początkowe pozycje
    memset(text.displayText, 0, sizeof(text.displayText));
 8001142:	22c8      	movs	r2, #200	@ 0xc8
 8001144:	2100      	movs	r1, #0
 8001146:	4846      	ldr	r0, [pc, #280]	@ (8001260 <executeONN+0x178>)
 8001148:	f007 f98c 	bl	8008464 <memset>
    text.startX = text.x;
 800114c:	4b44      	ldr	r3, [pc, #272]	@ (8001260 <executeONN+0x178>)
 800114e:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 8001152:	4b43      	ldr	r3, [pc, #268]	@ (8001260 <executeONN+0x178>)
 8001154:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
    text.startY = text.y;
 8001158:	4b41      	ldr	r3, [pc, #260]	@ (8001260 <executeONN+0x178>)
 800115a:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 800115e:	4b40      	ldr	r3, [pc, #256]	@ (8001260 <executeONN+0x178>)
 8001160:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
    text.textLength = 0;
 8001164:	4b3e      	ldr	r3, [pc, #248]	@ (8001260 <executeONN+0x178>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    text.firstIteration = true;
 800116c:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <executeONN+0x178>)
 800116e:	2201      	movs	r2, #1
 8001170:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
    // Konwersja tekstu
    while (charText[text.textLength] && text.textLength < 50) {
 8001174:	e015      	b.n	80011a2 <executeONN+0xba>
        text.displayText[text.textLength] = (wchar_t)charText[text.textLength];
 8001176:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <executeONN+0x178>)
 8001178:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800117c:	3340      	adds	r3, #64	@ 0x40
 800117e:	443b      	add	r3, r7
 8001180:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8001184:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <executeONN+0x178>)
 8001186:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800118a:	461a      	mov	r2, r3
 800118c:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <executeONN+0x178>)
 800118e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        text.textLength++;
 8001192:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <executeONN+0x178>)
 8001194:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001198:	3301      	adds	r3, #1
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <executeONN+0x178>)
 800119e:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    while (charText[text.textLength] && text.textLength < 50) {
 80011a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <executeONN+0x178>)
 80011a4:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80011a8:	3340      	adds	r3, #64	@ 0x40
 80011aa:	443b      	add	r3, r7
 80011ac:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <executeONN+0xd6>
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <executeONN+0x178>)
 80011b6:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80011ba:	2b31      	cmp	r3, #49	@ 0x31
 80011bc:	d9db      	bls.n	8001176 <executeONN+0x8e>
    }

    text.isScrolling = (text.scrollSpeed > 0);
 80011be:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <executeONN+0x178>)
 80011c0:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf14      	ite	ne
 80011c8:	2301      	movne	r3, #1
 80011ca:	2300      	moveq	r3, #0
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <executeONN+0x178>)
 80011d0:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    text.lastUpdate = HAL_GetTick();
 80011d4:	f001 fad4 	bl	8002780 <HAL_GetTick>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <executeONN+0x178>)
 80011dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

    const uint8_t* font;
    switch(text.fontSize) {
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <executeONN+0x178>)
 80011e2:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d00c      	beq.n	8001204 <executeONN+0x11c>
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	dc0d      	bgt.n	800120a <executeONN+0x122>
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d002      	beq.n	80011f8 <executeONN+0x110>
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d003      	beq.n	80011fe <executeONN+0x116>
 80011f6:	e008      	b.n	800120a <executeONN+0x122>
        case 1: font = font5x7; break;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <executeONN+0x17c>)
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011fc:	e007      	b.n	800120e <executeONN+0x126>
        case 2: font = font5x8; break;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <executeONN+0x180>)
 8001200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001202:	e004      	b.n	800120e <executeONN+0x126>
        case 3: font = font6x9; break;
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <executeONN+0x184>)
 8001206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001208:	e001      	b.n	800120e <executeONN+0x126>
        default: font = font5x7;
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <executeONN+0x17c>)
 800120c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    if(!text.scrollSpeed) {
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <executeONN+0x178>)
 8001210:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8001214:	2b00      	cmp	r3, #0
 8001216:	d110      	bne.n	800123a <executeONN+0x152>
        hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <executeONN+0x178>)
 800121a:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800121e:	b219      	sxth	r1, r3
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <executeONN+0x178>)
 8001222:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <executeONN+0x178>)
 800122a:	f8b3 00ce 	ldrh.w	r0, [r3, #206]	@ 0xce
 800122e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	4603      	mov	r3, r0
 8001234:	480a      	ldr	r0, [pc, #40]	@ (8001260 <executeONN+0x178>)
 8001236:	f006 fb2b 	bl	8007890 <hagl_put_text>
    }
}
 800123a:	3740      	adds	r7, #64	@ 0x40
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000e02 	.word	0x20000e02
 8001244:	20000e01 	.word	0x20000e01
 8001248:	20000e00 	.word	0x20000e00
 800124c:	20000dfd 	.word	0x20000dfd
 8001250:	20000dfc 	.word	0x20000dfc
 8001254:	08008d78 	.word	0x08008d78
 8001258:	08008d50 	.word	0x08008d50
 800125c:	08008d38 	.word	0x08008d38
 8001260:	20000d34 	.word	0x20000d34
 8001264:	08008e68 	.word	0x08008e68
 8001268:	0800c370 	.word	0x0800c370
 800126c:	0800f214 	.word	0x0800f214

08001270 <executeOFF>:
*     - Używa hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK)
*
* TODO naprawic wylaczenie oraz reset
************************************************************************/
static void executeOFF(Frame *frame)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	795b      	ldrb	r3, [r3, #5]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <executeOFF+0x16>
 8001280:	2b01      	cmp	r3, #1
 8001282:	d006      	beq.n	8001292 <executeOFF+0x22>
 8001284:	e008      	b.n	8001298 <executeOFF+0x28>
	{
	case 0:
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2102      	movs	r1, #2
 800128a:	480a      	ldr	r0, [pc, #40]	@ (80012b4 <executeOFF+0x44>)
 800128c:	f001 ffb6 	bl	80031fc <HAL_GPIO_WritePin>
		break;
 8001290:	e00c      	b.n	80012ac <executeOFF+0x3c>
	case 1:
		lcdClear();
 8001292:	f000 fdd1 	bl	8001e38 <lcdClear>
		break;
 8001296:	e009      	b.n	80012ac <executeOFF+0x3c>
	default:
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "WRONG_DATA%c", frame->data[0]);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	795b      	ldrb	r3, [r3, #5]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <executeOFF+0x48>)
 80012a0:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <executeOFF+0x4c>)
 80012a2:	2167      	movs	r1, #103	@ 0x67
 80012a4:	2068      	movs	r0, #104	@ 0x68
 80012a6:	f000 f8a3 	bl	80013f0 <prepareFrame>
	}
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	48000400 	.word	0x48000400
 80012b8:	08008d80 	.word	0x08008d80
 80012bc:	08008d38 	.word	0x08008d38

080012c0 <isWithinBounds>:
* Korzysta z:
*   - LCD_WIDTH: Stała określająca szerokość ekranu
*   - LCD_HEIGHT: Stała określająca wysokość ekranu
************************************************************************/
bool isWithinBounds(int x, int y)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <isWithinBounds+0x26>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b9f      	cmp	r3, #159	@ 0x9f
 80012d4:	dc07      	bgt.n	80012e6 <isWithinBounds+0x26>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db04      	blt.n	80012e6 <isWithinBounds+0x26>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2b7f      	cmp	r3, #127	@ 0x7f
 80012e0:	dc01      	bgt.n	80012e6 <isWithinBounds+0x26>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <isWithinBounds+0x28>
 80012e6:	2300      	movs	r3, #0
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <parseCoordinates>:
*      - Kolejne z NULL
*
*   3. atoi(): Konwertuje string na int
************************************************************************/
bool parseCoordinates(const uint8_t* data, int* x, int* y)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b085      	sub	sp, #20
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
	 *x = data[0];  // Pierwszy bajt to x
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	601a      	str	r2, [r3, #0]
	 *y = data[2];  // Drugi bajt to y
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3302      	adds	r3, #2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	601a      	str	r2, [r3, #0]
    return true;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <byteStuffing>:
*   '}' 			 	-> "}]"
*   '~'              	-> "}^"
*   '`'              	-> "}&"

************************************************************************/
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 800132a:	b480      	push	{r7}
 800132c:	b087      	sub	sp, #28
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	e04b      	b.n	80013d8 <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b7d      	cmp	r3, #125	@ 0x7d
 800134a:	d10e      	bne.n	800136a <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	617a      	str	r2, [r7, #20]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	227d      	movs	r2, #125	@ 0x7d
 8001358:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	617a      	str	r2, [r7, #20]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	225d      	movs	r2, #93	@ 0x5d
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e033      	b.n	80013d2 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b7e      	cmp	r3, #126	@ 0x7e
 8001374:	d10e      	bne.n	8001394 <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	617a      	str	r2, [r7, #20]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	227d      	movs	r2, #125	@ 0x7d
 8001382:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	617a      	str	r2, [r7, #20]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	225e      	movs	r2, #94	@ 0x5e
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e01e      	b.n	80013d2 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b60      	cmp	r3, #96	@ 0x60
 800139e:	d10e      	bne.n	80013be <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	617a      	str	r2, [r7, #20]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	227d      	movs	r2, #125	@ 0x7d
 80013ac:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	617a      	str	r2, [r7, #20]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	2226      	movs	r2, #38	@ 0x26
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e009      	b.n	80013d2 <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	441a      	add	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	1c59      	adds	r1, r3, #1
 80013c8:	6179      	str	r1, [r7, #20]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	440b      	add	r3, r1
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	3301      	adds	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3af      	bcc.n	8001340 <byteStuffing+0x16>
        }
    }
    return j;
 80013e0:	697b      	ldr	r3, [r7, #20]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <prepareFrame>:
*   4. Konwertuje CRC na hex
*   5. Przygotowuje payload
*   6. Wykonuje byte stuffing
*   7. Wysyła ramkę
************************************************************************/
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 80013f0:	b408      	push	{r3}
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b0b3      	sub	sp, #204	@ 0xcc
 80013f6:	af02      	add	r7, sp, #8
 80013f8:	4603      	mov	r3, r0
 80013fa:	603a      	str	r2, [r7, #0]
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	460b      	mov	r3, r1
 8001400:	71bb      	strb	r3, [r7, #6]
	Frame frame = {0};
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	2285      	movs	r2, #133	@ 0x85
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f007 f82a 	bl	8008464 <memset>
    frame.sender = sender;
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	763b      	strb	r3, [r7, #24]
    frame.receiver = receiver;
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	767b      	strb	r3, [r7, #25]
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	3302      	adds	r3, #2
 800141e:	2203      	movs	r2, #3
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f007 f826 	bl	8008474 <strncpy>

    // Użycie dynamicznej alokacji do przechowywania danych sformatowanych
    char *formatted_data = (char *)malloc(MAX_DATA_SIZE);
 8001428:	2080      	movs	r0, #128	@ 0x80
 800142a:	f006 febf 	bl	80081ac <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (formatted_data == NULL) {
 8001434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80c2 	beq.w	80015c2 <prepareFrame+0x1d2>
        // Obsługa błędu alokacji pamięci
        return;
    }

    va_list args;
    va_start(args, format);
 800143e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001442:	617b      	str	r3, [r7, #20]
    vsnprintf(formatted_data, MAX_DATA_SIZE, format, args);
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800144a:	2180      	movs	r1, #128	@ 0x80
 800144c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001450:	f006 ffea 	bl	8008428 <vsniprintf>
    va_end(args);

    size_t data_len = strlen(formatted_data);
 8001454:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001458:	f7fe feba 	bl	80001d0 <strlen>
 800145c:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

    // Użycie dynamicznej alokacji do obliczeń CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 8001460:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001464:	3305      	adds	r3, #5
 8001466:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint8_t *crc_input = (uint8_t *)malloc(crc_input_len);
 800146a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800146e:	f006 fe9d 	bl	80081ac <malloc>
 8001472:	4603      	mov	r3, r0
 8001474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (crc_input == NULL) {
 8001478:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d104      	bne.n	800148a <prepareFrame+0x9a>
        // Obsługa błędu alokacji pamięci
        free(formatted_data);
 8001480:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001484:	f006 fe9a 	bl	80081bc <free>
        return;
 8001488:	e09c      	b.n	80015c4 <prepareFrame+0x1d4>
    }

    crc_input[0] = frame.sender;
 800148a:	7e3a      	ldrb	r2, [r7, #24]
 800148c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001490:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 8001492:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001496:	3301      	adds	r3, #1
 8001498:	7e7a      	ldrb	r2, [r7, #25]
 800149a:	701a      	strb	r2, [r3, #0]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 800149c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014a0:	3302      	adds	r3, #2
 80014a2:	461a      	mov	r2, r3
 80014a4:	f107 031a 	add.w	r3, r7, #26
 80014a8:	8819      	ldrh	r1, [r3, #0]
 80014aa:	789b      	ldrb	r3, [r3, #2]
 80014ac:	8011      	strh	r1, [r2, #0]
 80014ae:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, formatted_data, data_len);
 80014b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014b4:	3305      	adds	r3, #5
 80014b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80014ba:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 f828 	bl	8008514 <memcpy>

    char crc_output[2];
    calculateCrc16(crc_input, crc_input_len, crc_output);
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	461a      	mov	r2, r3
 80014ca:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80014ce:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80014d2:	f7ff f90f 	bl	80006f4 <calculateCrc16>
    free(crc_input);  // Zwolnienie pamięci po zakończeniu używania
 80014d6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80014da:	f006 fe6f 	bl	80081bc <free>

    // Użycie dynamicznej alokacji do przechowywania ramki
    size_t raw_payload_len = 2 + COMMAND_LENGTH + data_len + 4;
 80014de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014e2:	3309      	adds	r3, #9
 80014e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    uint8_t *raw_payload = (uint8_t *)malloc(raw_payload_len);
 80014e8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80014ec:	f006 fe5e 	bl	80081ac <malloc>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (raw_payload == NULL) {
 80014f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d104      	bne.n	8001508 <prepareFrame+0x118>
        free(formatted_data);
 80014fe:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001502:	f006 fe5b 	bl	80081bc <free>
        return;
 8001506:	e05d      	b.n	80015c4 <prepareFrame+0x1d4>
    }

    raw_payload[0] = frame.sender;
 8001508:	7e3a      	ldrb	r2, [r7, #24]
 800150a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800150e:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 8001510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001514:	3301      	adds	r3, #1
 8001516:	7e7a      	ldrb	r2, [r7, #25]
 8001518:	701a      	strb	r2, [r3, #0]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 800151a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800151e:	3302      	adds	r3, #2
 8001520:	461a      	mov	r2, r3
 8001522:	f107 031a 	add.w	r3, r7, #26
 8001526:	8819      	ldrh	r1, [r3, #0]
 8001528:	789b      	ldrb	r3, [r3, #2]
 800152a:	8011      	strh	r1, [r2, #0]
 800152c:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, formatted_data, data_len);
 800152e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001532:	3305      	adds	r3, #5
 8001534:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001538:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800153c:	4618      	mov	r0, r3
 800153e:	f006 ffe9 	bl	8008514 <memcpy>

    char crc_hex[5];
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 8001542:	7c3b      	ldrb	r3, [r7, #16]
 8001544:	461a      	mov	r2, r3
 8001546:	7c7b      	ldrb	r3, [r7, #17]
 8001548:	f107 0008 	add.w	r0, r7, #8
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4613      	mov	r3, r2
 8001550:	4a1f      	ldr	r2, [pc, #124]	@ (80015d0 <prepareFrame+0x1e0>)
 8001552:	2105      	movs	r1, #5
 8001554:	f006 fee8 	bl	8008328 <sniprintf>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4);
 8001558:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800155c:	3305      	adds	r3, #5
 800155e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001562:	4413      	add	r3, r2
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	601a      	str	r2, [r3, #0]
    free(formatted_data);  // Zwolnienie pamięci po zakończeniu używania
 8001568:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800156c:	f006 fe26 	bl	80081bc <free>

    // Użycie dynamicznej alokacji do przechowywania danych po byte stuffing
    uint8_t *stuffed_payload = (uint8_t *)malloc(512);  // Maksymalny rozmiar bufora
 8001570:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001574:	f006 fe1a 	bl	80081ac <malloc>
 8001578:	4603      	mov	r3, r0
 800157a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (stuffed_payload == NULL) {
 800157e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d104      	bne.n	8001590 <prepareFrame+0x1a0>
        free(raw_payload);
 8001586:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800158a:	f006 fe17 	bl	80081bc <free>
        return;
 800158e:	e019      	b.n	80015c4 <prepareFrame+0x1d4>
    }

    size_t stuffed_len = byteStuffing(raw_payload, raw_payload_len, stuffed_payload);
 8001590:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001594:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001598:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800159c:	f7ff fec5 	bl	800132a <byteStuffing>
 80015a0:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    free(raw_payload);  // Zwolnienie pamięci po zakończeniu używania
 80015a4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80015a8:	f006 fe08 	bl	80081bc <free>

    // Wysyłanie ramki przez UART
    USART_sendFrame(stuffed_payload, stuffed_len);
 80015ac:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80015b0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80015b4:	f7ff f82e 	bl	8000614 <USART_sendFrame>
    free(stuffed_payload);  // Zwolnienie pamięci po zakończeniu używania
 80015b8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80015bc:	f006 fdfe 	bl	80081bc <free>
 80015c0:	e000      	b.n	80015c4 <prepareFrame+0x1d4>
        return;
 80015c2:	bf00      	nop
}
 80015c4:	37c4      	adds	r7, #196	@ 0xc4
 80015c6:	46bd      	mov	sp, r7
 80015c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015cc:	b001      	add	sp, #4
 80015ce:	4770      	bx	lr
 80015d0:	08008d90 	.word	0x08008d90

080015d4 <decodeFrame>:
*
* Używa:
*   - memcpy: Kopiowanie danych
*   - calculateCrc16: Obliczanie sumy kontrolnej
************************************************************************/
bool decodeFrame(uint8_t *bx, Frame *frame, uint8_t len) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	4613      	mov	r3, r2
 80015e0:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];

    if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	d970      	bls.n	80016ca <decodeFrame+0xf6>
        uint8_t k = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]

        // Debug otrzymanych danych
        debugData("Received data", bx, len);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68f9      	ldr	r1, [r7, #12]
 80015f2:	4838      	ldr	r0, [pc, #224]	@ (80016d4 <decodeFrame+0x100>)
 80015f4:	f7ff f98c 	bl	8000910 <debugData>


        frame->sender = bx[k++];
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	75fa      	strb	r2, [r7, #23]
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	701a      	strb	r2, [r3, #0]
        if(frame->sender != 'g')
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b67      	cmp	r3, #103	@ 0x67
 8001610:	d001      	beq.n	8001616 <decodeFrame+0x42>
        {
        	return false;
 8001612:	2300      	movs	r3, #0
 8001614:	e05a      	b.n	80016cc <decodeFrame+0xf8>
        }
        frame->receiver = bx[k++];
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	75fa      	strb	r2, [r7, #23]
 800161c:	461a      	mov	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	705a      	strb	r2, [r3, #1]

        memcpy(frame->command, &bx[k], COMMAND_LENGTH);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c98      	adds	r0, r3, #2
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	2203      	movs	r2, #3
 8001634:	4619      	mov	r1, r3
 8001636:	f006 ff6d 	bl	8008514 <memcpy>
        k += COMMAND_LENGTH;
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	3303      	adds	r3, #3
 800163e:	75fb      	strb	r3, [r7, #23]

        uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	3b07      	subs	r3, #7
 8001644:	75bb      	strb	r3, [r7, #22]
        memcpy(frame->data, &bx[k], data_len);
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1d58      	adds	r0, r3, #5
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	7dba      	ldrb	r2, [r7, #22]
 8001652:	4619      	mov	r1, r3
 8001654:	f006 ff5e 	bl	8008514 <memcpy>
        frame->data[data_len] = '\0';
 8001658:	7dbb      	ldrb	r3, [r7, #22]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	4413      	add	r3, r2
 800165e:	2200      	movs	r2, #0
 8001660:	715a      	strb	r2, [r3, #5]
        k += data_len;
 8001662:	7dfa      	ldrb	r2, [r7, #23]
 8001664:	7dbb      	ldrb	r3, [r7, #22]
 8001666:	4413      	add	r3, r2
 8001668:	75fb      	strb	r3, [r7, #23]

        memcpy(incCrc, &bx[k], 2);
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	823b      	strh	r3, [r7, #16]
        debugCRCCalculation((uint8_t*)frame, k);
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	4619      	mov	r1, r3
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f7ff f878 	bl	8000770 <debugCRCCalculation>
        calculateCrc16((uint8_t *)frame, k, ownCrc);
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	f107 0214 	add.w	r2, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f7ff f833 	bl	80006f4 <calculateCrc16>

        // Debug CRC
        debugData("Calculated CRC", ownCrc, 2);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2202      	movs	r2, #2
 8001694:	4619      	mov	r1, r3
 8001696:	4810      	ldr	r0, [pc, #64]	@ (80016d8 <decodeFrame+0x104>)
 8001698:	f7ff f93a 	bl	8000910 <debugData>
        debugData("Received CRC", incCrc, 2);
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	2202      	movs	r2, #2
 80016a2:	4619      	mov	r1, r3
 80016a4:	480d      	ldr	r0, [pc, #52]	@ (80016dc <decodeFrame+0x108>)
 80016a6:	f7ff f933 	bl	8000910 <debugData>

        if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 80016aa:	7d3a      	ldrb	r2, [r7, #20]
 80016ac:	7c3b      	ldrb	r3, [r7, #16]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d103      	bne.n	80016ba <decodeFrame+0xe6>
 80016b2:	7d7a      	ldrb	r2, [r7, #21]
 80016b4:	7c7b      	ldrb	r3, [r7, #17]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d005      	beq.n	80016c6 <decodeFrame+0xf2>
            USART_sendFrame((uint8_t*)"CRC mismatch\r\n", 13);
 80016ba:	210d      	movs	r1, #13
 80016bc:	4808      	ldr	r0, [pc, #32]	@ (80016e0 <decodeFrame+0x10c>)
 80016be:	f7fe ffa9 	bl	8000614 <USART_sendFrame>
            return false;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e002      	b.n	80016cc <decodeFrame+0xf8>
        }
        return true;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <decodeFrame+0xf8>
    }
    return false;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	08008d9c 	.word	0x08008d9c
 80016d8:	08008dac 	.word	0x08008dac
 80016dc:	08008dbc 	.word	0x08008dbc
 80016e0:	08008dcc 	.word	0x08008dcc

080016e4 <processReceivedChar>:
* Błędy:
*   - Nieprawidłowe sekwencje escape
*   - Przepełnienie bufora
*   - Nieoczekiwane znaki początku/końca
************************************************************************/
void processReceivedChar(uint8_t received_char) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
    if (received_char == FRAME_START) {
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80016f2:	d112      	bne.n	800171a <processReceivedChar+0x36>
    	if(in_frame) {
 80016f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001834 <processReceivedChar+0x150>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <processReceivedChar+0x22>
    		resetFrameState();
 80016fc:	f7ff fa36 	bl	8000b6c <resetFrameState>
    		in_frame = true;
 8001700:	4b4c      	ldr	r3, [pc, #304]	@ (8001834 <processReceivedChar+0x150>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
    	}
    	in_frame = true;
 8001706:	4b4b      	ldr	r3, [pc, #300]	@ (8001834 <processReceivedChar+0x150>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
    	bx_index = 0;
 800170c:	4b4a      	ldr	r3, [pc, #296]	@ (8001838 <processReceivedChar+0x154>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
    	escape_detected = false;
 8001712:	4b4a      	ldr	r3, [pc, #296]	@ (800183c <processReceivedChar+0x158>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
    	resetFrameState();
    }
}
 8001718:	e088      	b.n	800182c <processReceivedChar+0x148>
    } else if (received_char == FRAME_END && escape_detected == false) {
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b60      	cmp	r3, #96	@ 0x60
 800171e:	d133      	bne.n	8001788 <processReceivedChar+0xa4>
 8001720:	4b46      	ldr	r3, [pc, #280]	@ (800183c <processReceivedChar+0x158>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d02c      	beq.n	8001788 <processReceivedChar+0xa4>
        if (in_frame) {
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <processReceivedChar+0x150>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01f      	beq.n	8001776 <processReceivedChar+0x92>
            if (decodeFrame(bx, &frame, bx_index)) {
 8001736:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <processReceivedChar+0x154>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	4940      	ldr	r1, [pc, #256]	@ (8001840 <processReceivedChar+0x15c>)
 8001740:	4840      	ldr	r0, [pc, #256]	@ (8001844 <processReceivedChar+0x160>)
 8001742:	f7ff ff47 	bl	80015d4 <decodeFrame>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00b      	beq.n	8001764 <processReceivedChar+0x80>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 800174c:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <processReceivedChar+0x164>)
 800174e:	4a3f      	ldr	r2, [pc, #252]	@ (800184c <processReceivedChar+0x168>)
 8001750:	2167      	movs	r1, #103	@ 0x67
 8001752:	2068      	movs	r0, #104	@ 0x68
 8001754:	f7ff fe4c 	bl	80013f0 <prepareFrame>
            	stopAnimation();
 8001758:	f7ff f994 	bl	8000a84 <stopAnimation>
                handleCommand(&frame);
 800175c:	4838      	ldr	r0, [pc, #224]	@ (8001840 <processReceivedChar+0x15c>)
 800175e:	f000 f879 	bl	8001854 <handleCommand>
 8001762:	e005      	b.n	8001770 <processReceivedChar+0x8c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001764:	4b3a      	ldr	r3, [pc, #232]	@ (8001850 <processReceivedChar+0x16c>)
 8001766:	4a39      	ldr	r2, [pc, #228]	@ (800184c <processReceivedChar+0x168>)
 8001768:	2167      	movs	r1, #103	@ 0x67
 800176a:	2068      	movs	r0, #104	@ 0x68
 800176c:	f7ff fe40 	bl	80013f0 <prepareFrame>
            resetFrameState();
 8001770:	f7ff f9fc 	bl	8000b6c <resetFrameState>
        if (in_frame) {
 8001774:	e05a      	b.n	800182c <processReceivedChar+0x148>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001776:	4b36      	ldr	r3, [pc, #216]	@ (8001850 <processReceivedChar+0x16c>)
 8001778:	4a34      	ldr	r2, [pc, #208]	@ (800184c <processReceivedChar+0x168>)
 800177a:	2167      	movs	r1, #103	@ 0x67
 800177c:	2068      	movs	r0, #104	@ 0x68
 800177e:	f7ff fe37 	bl	80013f0 <prepareFrame>
            resetFrameState();
 8001782:	f7ff f9f3 	bl	8000b6c <resetFrameState>
        if (in_frame) {
 8001786:	e051      	b.n	800182c <processReceivedChar+0x148>
    } else if (in_frame) {
 8001788:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <processReceivedChar+0x150>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d04a      	beq.n	8001826 <processReceivedChar+0x142>
        if (escape_detected) {
 8001790:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <processReceivedChar+0x158>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d02f      	beq.n	80017f8 <processReceivedChar+0x114>
            if (received_char == FRAME_START_STUFF) {
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b5e      	cmp	r3, #94	@ 0x5e
 800179c:	d108      	bne.n	80017b0 <processReceivedChar+0xcc>
                bx[bx_index++] = FRAME_START;
 800179e:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <processReceivedChar+0x154>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	4924      	ldr	r1, [pc, #144]	@ (8001838 <processReceivedChar+0x154>)
 80017a6:	600a      	str	r2, [r1, #0]
 80017a8:	4a26      	ldr	r2, [pc, #152]	@ (8001844 <processReceivedChar+0x160>)
 80017aa:	217e      	movs	r1, #126	@ 0x7e
 80017ac:	54d1      	strb	r1, [r2, r3]
 80017ae:	e01f      	b.n	80017f0 <processReceivedChar+0x10c>
            } else if (received_char == ESCAPE_CHAR_STUFF) {
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b5d      	cmp	r3, #93	@ 0x5d
 80017b4:	d108      	bne.n	80017c8 <processReceivedChar+0xe4>
                bx[bx_index++] = ESCAPE_CHAR;
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <processReceivedChar+0x154>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	491e      	ldr	r1, [pc, #120]	@ (8001838 <processReceivedChar+0x154>)
 80017be:	600a      	str	r2, [r1, #0]
 80017c0:	4a20      	ldr	r2, [pc, #128]	@ (8001844 <processReceivedChar+0x160>)
 80017c2:	217d      	movs	r1, #125	@ 0x7d
 80017c4:	54d1      	strb	r1, [r2, r3]
 80017c6:	e013      	b.n	80017f0 <processReceivedChar+0x10c>
            } else if (received_char == FRAME_END_STUFF) {
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b26      	cmp	r3, #38	@ 0x26
 80017cc:	d108      	bne.n	80017e0 <processReceivedChar+0xfc>
                bx[bx_index++] = FRAME_END;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <processReceivedChar+0x154>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	4918      	ldr	r1, [pc, #96]	@ (8001838 <processReceivedChar+0x154>)
 80017d6:	600a      	str	r2, [r1, #0]
 80017d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001844 <processReceivedChar+0x160>)
 80017da:	2160      	movs	r1, #96	@ 0x60
 80017dc:	54d1      	strb	r1, [r2, r3]
 80017de:	e007      	b.n	80017f0 <processReceivedChar+0x10c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <processReceivedChar+0x16c>)
 80017e2:	4a1a      	ldr	r2, [pc, #104]	@ (800184c <processReceivedChar+0x168>)
 80017e4:	2167      	movs	r1, #103	@ 0x67
 80017e6:	2068      	movs	r0, #104	@ 0x68
 80017e8:	f7ff fe02 	bl	80013f0 <prepareFrame>
                resetFrameState();
 80017ec:	f7ff f9be 	bl	8000b6c <resetFrameState>
            escape_detected = false;
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <processReceivedChar+0x158>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
}
 80017f6:	e019      	b.n	800182c <processReceivedChar+0x148>
        } else if (received_char == ESCAPE_CHAR) {
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b7d      	cmp	r3, #125	@ 0x7d
 80017fc:	d103      	bne.n	8001806 <processReceivedChar+0x122>
            escape_detected = true;
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <processReceivedChar+0x158>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
}
 8001804:	e012      	b.n	800182c <processReceivedChar+0x148>
            if (bx_index < sizeof(bx)) {
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <processReceivedChar+0x154>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2bff      	cmp	r3, #255	@ 0xff
 800180c:	d808      	bhi.n	8001820 <processReceivedChar+0x13c>
                bx[bx_index++] = received_char;
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <processReceivedChar+0x154>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	4908      	ldr	r1, [pc, #32]	@ (8001838 <processReceivedChar+0x154>)
 8001816:	600a      	str	r2, [r1, #0]
 8001818:	490a      	ldr	r1, [pc, #40]	@ (8001844 <processReceivedChar+0x160>)
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	54ca      	strb	r2, [r1, r3]
}
 800181e:	e005      	b.n	800182c <processReceivedChar+0x148>
            	resetFrameState();
 8001820:	f7ff f9a4 	bl	8000b6c <resetFrameState>
}
 8001824:	e002      	b.n	800182c <processReceivedChar+0x148>
    	resetFrameState();
 8001826:	f7ff f9a1 	bl	8000b6c <resetFrameState>
}
 800182a:	e7ff      	b.n	800182c <processReceivedChar+0x148>
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000ca8 	.word	0x20000ca8
 8001838:	20000ca4 	.word	0x20000ca4
 800183c:	20000ca0 	.word	0x20000ca0
 8001840:	20000cac 	.word	0x20000cac
 8001844:	20000ba0 	.word	0x20000ba0
 8001848:	08008ddc 	.word	0x08008ddc
 800184c:	08008d38 	.word	0x08008d38
 8001850:	08008de4 	.word	0x08008de4

08001854 <handleCommand>:
* Błędy:
*   - Nieznana komenda
*   - Nieprawidłowe współrzędne
*   - Przekroczenie obszaru wyświetlacza
************************************************************************/
void handleCommand(Frame *frame) {
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b092      	sub	sp, #72	@ 0x48
 8001858:	af02      	add	r7, sp, #8
 800185a:	6078      	str	r0, [r7, #4]
    if (frame == NULL) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8084 	beq.w	800196c <handleCommand+0x118>
        return;
    }

    CommandEntry commandTable[COMMAND_COUNT] = {
 8001864:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <handleCommand+0x120>)
 8001866:	f107 0414 	add.w	r4, r7, #20
 800186a:	461d      	mov	r5, r3
 800186c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001874:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001878:	e884 0003 	stmia.w	r4, {r0, r1}
        {"ONT", executeONT},
        {"ONN", executeONN},
        {"OFF", executeOFF}
    };

    for (int i = 0; i < COMMAND_COUNT; i++) {
 800187c:	2300      	movs	r3, #0
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001880:	e067      	b.n	8001952 <handleCommand+0xfe>
            if (safeCompare(frame->command, commandTable[i].command, COMMAND_LENGTH)) {
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	1c98      	adds	r0, r3, #2
 8001886:	f107 0214 	add.w	r2, r7, #20
 800188a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4413      	add	r3, r2
 8001890:	2203      	movs	r2, #3
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff f912 	bl	8000abc <safeCompare>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d056      	beq.n	800194c <handleCommand+0xf8>
                if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 800189e:	f107 0214 	add.w	r2, r7, #20
 80018a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4413      	add	r3, r2
 80018a8:	2203      	movs	r2, #3
 80018aa:	4933      	ldr	r1, [pc, #204]	@ (8001978 <handleCommand+0x124>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f905 	bl	8000abc <safeCompare>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00f      	beq.n	80018d8 <handleCommand+0x84>
                    lcdClear();
 80018b8:	f000 fabe 	bl	8001e38 <lcdClear>
                    commandTable[i].function(frame);
 80018bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	3340      	adds	r3, #64	@ 0x40
 80018c2:	443b      	add	r3, r7
 80018c4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	4798      	blx	r3
                    copyToBuffer();
 80018cc:	f7ff f8e8 	bl	8000aa0 <copyToBuffer>
                    clearFrame(frame);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fabd 	bl	8000e50 <clearFrame>
                    return;
 80018d6:	e04a      	b.n	800196e <handleCommand+0x11a>
                }

                int x, y;
                if (parseCoordinates(frame->data, &x, &y)) {
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3305      	adds	r3, #5
 80018dc:	f107 020c 	add.w	r2, r7, #12
 80018e0:	f107 0110 	add.w	r1, r7, #16
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd08 	bl	80012fa <parseCoordinates>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01f      	beq.n	8001930 <handleCommand+0xdc>
                    if (isWithinBounds(x, y)) {
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fce2 	bl	80012c0 <isWithinBounds>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00f      	beq.n	8001922 <handleCommand+0xce>
                        lcdClear();
 8001902:	f000 fa99 	bl	8001e38 <lcdClear>
                        commandTable[i].function(frame);
 8001906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	3340      	adds	r3, #64	@ 0x40
 800190c:	443b      	add	r3, r7
 800190e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
                        copyToBuffer();
 8001916:	f7ff f8c3 	bl	8000aa0 <copyToBuffer>
                        clearFrame(frame);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fa98 	bl	8000e50 <clearFrame>
                        return;
 8001920:	e025      	b.n	800196e <handleCommand+0x11a>
                    } else {
                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "DISPLAY_AREA");
 8001922:	4b16      	ldr	r3, [pc, #88]	@ (800197c <handleCommand+0x128>)
 8001924:	4a16      	ldr	r2, [pc, #88]	@ (8001980 <handleCommand+0x12c>)
 8001926:	2167      	movs	r1, #103	@ 0x67
 8001928:	2068      	movs	r0, #104	@ 0x68
 800192a:	f7ff fd61 	bl	80013f0 <prepareFrame>
                    return;
 800192e:	e01e      	b.n	800196e <handleCommand+0x11a>
                }
            } else {
            	lcdClear();
 8001930:	f000 fa82 	bl	8001e38 <lcdClear>
            	copyToBuffer();
 8001934:	f7ff f8b4 	bl	8000aa0 <copyToBuffer>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3305      	adds	r3, #5
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <handleCommand+0x130>)
 8001940:	4a0f      	ldr	r2, [pc, #60]	@ (8001980 <handleCommand+0x12c>)
 8001942:	2167      	movs	r1, #103	@ 0x67
 8001944:	2068      	movs	r0, #104	@ 0x68
 8001946:	f7ff fd53 	bl	80013f0 <prepareFrame>
                return;
 800194a:	e010      	b.n	800196e <handleCommand+0x11a>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 800194c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800194e:	3301      	adds	r3, #1
 8001950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001954:	2b04      	cmp	r3, #4
 8001956:	dd94      	ble.n	8001882 <handleCommand+0x2e>
            }
        }
    }
    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3302      	adds	r3, #2
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <handleCommand+0x130>)
 8001960:	4a07      	ldr	r2, [pc, #28]	@ (8001980 <handleCommand+0x12c>)
 8001962:	2167      	movs	r1, #103	@ 0x67
 8001964:	2068      	movs	r0, #104	@ 0x68
 8001966:	f7ff fd43 	bl	80013f0 <prepareFrame>
 800196a:	e000      	b.n	800196e <handleCommand+0x11a>
        return;
 800196c:	bf00      	nop
}
 800196e:	3740      	adds	r7, #64	@ 0x40
 8001970:	46bd      	mov	sp, r7
 8001972:	bdb0      	pop	{r4, r5, r7, pc}
 8001974:	08008e00 	.word	0x08008e00
 8001978:	08008dec 	.word	0x08008dec
 800197c:	08008df0 	.word	0x08008df0
 8001980:	08008d38 	.word	0x08008d38
 8001984:	08008d50 	.word	0x08008d50

08001988 <updateScrollingText>:



void updateScrollingText(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
	if (!text.isScrolling || text.scrollSpeed == 0) {
 800198e:	4b64      	ldr	r3, [pc, #400]	@ (8001b20 <updateScrollingText+0x198>)
 8001990:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 80bb 	bne.w	8001b16 <updateScrollingText+0x18e>
 80019a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b20 <updateScrollingText+0x198>)
 80019a2:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80b5 	beq.w	8001b16 <updateScrollingText+0x18e>
	        return;
	}
    uint32_t currentTime = HAL_GetTick();
 80019ac:	f000 fee8 	bl	8002780 <HAL_GetTick>
 80019b0:	6078      	str	r0, [r7, #4]
    if ((currentTime - text.lastUpdate) >= (256 - text.scrollSpeed)) {
 80019b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b20 <updateScrollingText+0x198>)
 80019b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	4a58      	ldr	r2, [pc, #352]	@ (8001b20 <updateScrollingText+0x198>)
 80019be:	f892 20cd 	ldrb.w	r2, [r2, #205]	@ 0xcd
 80019c2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80019c6:	4293      	cmp	r3, r2
 80019c8:	f0c0 80a6 	bcc.w	8001b18 <updateScrollingText+0x190>
        text.lastUpdate = currentTime;
 80019cc:	4a54      	ldr	r2, [pc, #336]	@ (8001b20 <updateScrollingText+0x198>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

        // Oblicz szerokość znaku w zależności od fontu
        uint8_t charWidth;
        uint8_t charHeight;
        const uint8_t* font;
        switch(text.fontSize) {
 80019d4:	4b52      	ldr	r3, [pc, #328]	@ (8001b20 <updateScrollingText+0x198>)
 80019d6:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d014      	beq.n	8001a08 <updateScrollingText+0x80>
 80019de:	2b03      	cmp	r3, #3
 80019e0:	dc19      	bgt.n	8001a16 <updateScrollingText+0x8e>
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d002      	beq.n	80019ec <updateScrollingText+0x64>
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d007      	beq.n	80019fa <updateScrollingText+0x72>
 80019ea:	e014      	b.n	8001a16 <updateScrollingText+0x8e>
            case 1: charWidth = 5; charHeight = 7; font=font5x7; break;
 80019ec:	2305      	movs	r3, #5
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	2307      	movs	r3, #7
 80019f2:	73bb      	strb	r3, [r7, #14]
 80019f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b24 <updateScrollingText+0x19c>)
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	e014      	b.n	8001a24 <updateScrollingText+0x9c>
            case 2: charWidth = 5; charHeight = 8; font=font5x8; break;
 80019fa:	2305      	movs	r3, #5
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	2308      	movs	r3, #8
 8001a00:	73bb      	strb	r3, [r7, #14]
 8001a02:	4b49      	ldr	r3, [pc, #292]	@ (8001b28 <updateScrollingText+0x1a0>)
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	e00d      	b.n	8001a24 <updateScrollingText+0x9c>
            case 3: charWidth = 6; charHeight = 9; font=font6x9;break;
 8001a08:	2306      	movs	r3, #6
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	2309      	movs	r3, #9
 8001a0e:	73bb      	strb	r3, [r7, #14]
 8001a10:	4b46      	ldr	r3, [pc, #280]	@ (8001b2c <updateScrollingText+0x1a4>)
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	e006      	b.n	8001a24 <updateScrollingText+0x9c>
            default: charWidth = 5; charHeight = 7; font=font5x7; break;
 8001a16:	2305      	movs	r3, #5
 8001a18:	73fb      	strb	r3, [r7, #15]
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	73bb      	strb	r3, [r7, #14]
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <updateScrollingText+0x19c>)
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	bf00      	nop
        }

        text.x += charWidth;
 8001a24:	4b3e      	ldr	r3, [pc, #248]	@ (8001b20 <updateScrollingText+0x198>)
 8001a26:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b3b      	ldr	r3, [pc, #236]	@ (8001b20 <updateScrollingText+0x198>)
 8001a32:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8

                // Oblicz całkowitą szerokość tekstu

                // Jeśli tekst wyszedł całkowicie za ekran
                if (text.x >= LCD_WIDTH - (charWidth * text.textLength)) {
 8001a36:	4b3a      	ldr	r3, [pc, #232]	@ (8001b20 <updateScrollingText+0x198>)
 8001a38:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	4a37      	ldr	r2, [pc, #220]	@ (8001b20 <updateScrollingText+0x198>)
 8001a42:	f892 20d0 	ldrb.w	r2, [r2, #208]	@ 0xd0
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001a4e:	4299      	cmp	r1, r3
 8001a50:	db43      	blt.n	8001ada <updateScrollingText+0x152>
                    if (text.firstIteration) {
 8001a52:	4b33      	ldr	r3, [pc, #204]	@ (8001b20 <updateScrollingText+0x198>)
 8001a54:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d024      	beq.n	8001aa6 <updateScrollingText+0x11e>
                        // W pierwszej iteracji używamy startowych współrzędnych
                        text.x = text.startX;  // Zaczynamy zza lewej krawędzi
 8001a5c:	4b30      	ldr	r3, [pc, #192]	@ (8001b20 <updateScrollingText+0x198>)
 8001a5e:	f893 20ca 	ldrb.w	r2, [r3, #202]	@ 0xca
 8001a62:	4b2f      	ldr	r3, [pc, #188]	@ (8001b20 <updateScrollingText+0x198>)
 8001a64:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                        text.y += charHeight;
 8001a68:	4b2d      	ldr	r3, [pc, #180]	@ (8001b20 <updateScrollingText+0x198>)
 8001a6a:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	4413      	add	r3, r2
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <updateScrollingText+0x198>)
 8001a76:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

                        // Jeśli doszliśmy do dołu ekranu w pierwszej iteracji
                        if (text.y >= LCD_HEIGHT - charHeight) {
 8001a7a:	4b29      	ldr	r3, [pc, #164]	@ (8001b20 <updateScrollingText+0x198>)
 8001a7c:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001a80:	461a      	mov	r2, r3
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	db26      	blt.n	8001ada <updateScrollingText+0x152>
                            text.firstIteration = false;  // Kończymy pierwszą iterację
 8001a8c:	4b24      	ldr	r3, [pc, #144]	@ (8001b20 <updateScrollingText+0x198>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
                            text.x = 0;
 8001a94:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <updateScrollingText+0x198>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                            text.y = 0;
 8001a9c:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <updateScrollingText+0x198>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 8001aa4:	e019      	b.n	8001ada <updateScrollingText+0x152>
                        }
                    } else {
                        // W kolejnych iteracjach zaczynamy od lewej krawędzi
                        text.x = 0;
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <updateScrollingText+0x198>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                        text.y += charHeight;
 8001aae:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <updateScrollingText+0x198>)
 8001ab0:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <updateScrollingText+0x198>)
 8001abc:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

                        // Jeśli doszliśmy do dołu ekranu
                        if (text.y >= LCD_HEIGHT - charHeight) {
 8001ac0:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <updateScrollingText+0x198>)
 8001ac2:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	db03      	blt.n	8001ada <updateScrollingText+0x152>
                            text.y = 0;
 8001ad2:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <updateScrollingText+0x198>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
                        }
                    }
                }

        if (!lcdIsBusy()) {
 8001ada:	f000 fa19 	bl	8001f10 <lcdIsBusy>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f083 0301 	eor.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <updateScrollingText+0x190>
            lcdClear();
 8001aea:	f000 f9a5 	bl	8001e38 <lcdClear>
            hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8001aee:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <updateScrollingText+0x198>)
 8001af0:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001af4:	b219      	sxth	r1, r3
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <updateScrollingText+0x198>)
 8001af8:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <updateScrollingText+0x198>)
 8001b00:	f8b3 00ce 	ldrh.w	r0, [r3, #206]	@ 0xce
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <updateScrollingText+0x198>)
 8001b0c:	f005 fec0 	bl	8007890 <hagl_put_text>
            lcdCopy();
 8001b10:	f000 f966 	bl	8001de0 <lcdCopy>
 8001b14:	e000      	b.n	8001b18 <updateScrollingText+0x190>
	        return;
 8001b16:	bf00      	nop
        }
    }
}
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000d34 	.word	0x20000d34
 8001b24:	08008e68 	.word	0x08008e68
 8001b28:	0800c370 	.word	0x0800c370
 8001b2c:	0800f214 	.word	0x0800f214

08001b30 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b46:	4b4a      	ldr	r3, [pc, #296]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	4a49      	ldr	r2, [pc, #292]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b52:	4b47      	ldr	r3, [pc, #284]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5e:	4b44      	ldr	r3, [pc, #272]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	4a43      	ldr	r2, [pc, #268]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6a:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b3e      	ldr	r3, [pc, #248]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b82:	4b3b      	ldr	r3, [pc, #236]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b38      	ldr	r3, [pc, #224]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	4a37      	ldr	r2, [pc, #220]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9a:	4b35      	ldr	r3, [pc, #212]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba6:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	4a31      	ldr	r2, [pc, #196]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <MX_GPIO_Init+0x140>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f641 0106 	movw	r1, #6150	@ 0x1806
 8001bc4:	482b      	ldr	r0, [pc, #172]	@ (8001c74 <MX_GPIO_Init+0x144>)
 8001bc6:	f001 fb19 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001bca:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8001bce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4826      	ldr	r0, [pc, #152]	@ (8001c78 <MX_GPIO_Init+0x148>)
 8001be0:	f001 f962 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001be4:	2303      	movs	r3, #3
 8001be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be8:	2303      	movs	r3, #3
 8001bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4821      	ldr	r0, [pc, #132]	@ (8001c7c <MX_GPIO_Init+0x14c>)
 8001bf8:	f001 f956 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001bfc:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8001c00:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c02:	2303      	movs	r3, #3
 8001c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c14:	f001 f948 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001c18:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 8001c1c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4811      	ldr	r0, [pc, #68]	@ (8001c74 <MX_GPIO_Init+0x144>)
 8001c2e:	f001 f93b 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 8001c32:	f641 0306 	movw	r3, #6150	@ 0x1806
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480a      	ldr	r0, [pc, #40]	@ (8001c74 <MX_GPIO_Init+0x144>)
 8001c4c:	f001 f92c 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c50:	2304      	movs	r3, #4
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c54:	2303      	movs	r3, #3
 8001c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	4807      	ldr	r0, [pc, #28]	@ (8001c80 <MX_GPIO_Init+0x150>)
 8001c64:	f001 f920 	bl	8002ea8 <HAL_GPIO_Init>

}
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	@ 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	48000400 	.word	0x48000400
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	48001c00 	.word	0x48001c00
 8001c80:	48000c00 	.word	0x48000c00

08001c84 <lcdCmd>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdCmd(uint8_t cmd)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c94:	480c      	ldr	r0, [pc, #48]	@ (8001cc8 <lcdCmd+0x44>)
 8001c96:	f001 fab1 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ca0:	4809      	ldr	r0, [pc, #36]	@ (8001cc8 <lcdCmd+0x44>)
 8001ca2:	f001 faab 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001ca6:	1df9      	adds	r1, r7, #7
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	2201      	movs	r2, #1
 8001cae:	4807      	ldr	r0, [pc, #28]	@ (8001ccc <lcdCmd+0x48>)
 8001cb0:	f002 fe7f 	bl	80049b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cba:	4803      	ldr	r0, [pc, #12]	@ (8001cc8 <lcdCmd+0x44>)
 8001cbc:	f001 fa9e 	bl	80031fc <HAL_GPIO_WritePin>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	48000400 	.word	0x48000400
 8001ccc:	2000ae14 	.word	0x2000ae14

08001cd0 <lcdData>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdData(uint8_t data)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ce0:	480c      	ldr	r0, [pc, #48]	@ (8001d14 <lcdData+0x44>)
 8001ce2:	f001 fa8b 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cec:	4809      	ldr	r0, [pc, #36]	@ (8001d14 <lcdData+0x44>)
 8001cee:	f001 fa85 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001cf2:	1df9      	adds	r1, r7, #7
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4807      	ldr	r0, [pc, #28]	@ (8001d18 <lcdData+0x48>)
 8001cfc:	f002 fe59 	bl	80049b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d06:	4803      	ldr	r0, [pc, #12]	@ (8001d14 <lcdData+0x44>)
 8001d08:	f001 fa78 	bl	80031fc <HAL_GPIO_WritePin>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	48000400 	.word	0x48000400
 8001d18:	2000ae14 	.word	0x2000ae14

08001d1c <lcdSend>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komendy
*   - lcd_data: wysyłanie danych
************************************************************************/
static void lcdSend(uint16_t value)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <lcdSend+0x20>
		lcdCmd(value);
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ffa5 	bl	8001c84 <lcdCmd>
	} else {
		lcdData(value);
	}
}
 8001d3a:	e004      	b.n	8001d46 <lcdSend+0x2a>
		lcdData(value);
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ffc5 	bl	8001cd0 <lcdData>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <lcdData16>:
*   - value: 16-bitowa wartość do wysłania
* Korzysta z:
*   - lcd_data: wysyłanie pojedynczych bajtów
************************************************************************/
static void lcdData16(uint16_t value)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ffb5 	bl	8001cd0 <lcdData>
	lcdData(value);
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ffb0 	bl	8001cd0 <lcdData>
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <lcdSetWindow>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komend CASET i RASET
*   - lcd_data16: wysyłanie współrzędnych
************************************************************************/
static void lcdSetWindow(int x, int y, int width, int height)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 8001d86:	202a      	movs	r0, #42	@ 0x2a
 8001d88:	f7ff ff7c 	bl	8001c84 <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3301      	adds	r3, #1
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ffda 	bl	8001d4e <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ffd1 	bl	8001d4e <lcdData16>

  lcdCmd(ST7735S_RASET);
 8001dac:	202b      	movs	r0, #43	@ 0x2b
 8001dae:	f7ff ff69 	bl	8001c84 <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3302      	adds	r3, #2
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ffc7 	bl	8001d4e <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ffbc 	bl	8001d4e <lcdData16>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <lcdCopy>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdCopy(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) {
 8001de4:	f000 f894 	bl	8001f10 <lcdIsBusy>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d11b      	bne.n	8001e26 <lcdCopy+0x46>
        return;
    }

    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001dee:	2380      	movs	r3, #128	@ 0x80
 8001df0:	22a0      	movs	r2, #160	@ 0xa0
 8001df2:	2100      	movs	r1, #0
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff ffbf 	bl	8001d78 <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 8001dfa:	202c      	movs	r0, #44	@ 0x2c
 8001dfc:	f7ff ff42 	bl	8001c84 <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e06:	4809      	ldr	r0, [pc, #36]	@ (8001e2c <lcdCopy+0x4c>)
 8001e08:	f001 f9f8 	bl	80031fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e12:	4806      	ldr	r0, [pc, #24]	@ (8001e2c <lcdCopy+0x4c>)
 8001e14:	f001 f9f2 	bl	80031fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer));
 8001e18:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001e1c:	4904      	ldr	r1, [pc, #16]	@ (8001e30 <lcdCopy+0x50>)
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <lcdCopy+0x54>)
 8001e20:	f002 ff3e 	bl	8004ca0 <HAL_SPI_Transmit_DMA>
 8001e24:	e000      	b.n	8001e28 <lcdCopy+0x48>
        return;
 8001e26:	bf00      	nop
}
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	20000e0c 	.word	0x20000e0c
 8001e34:	2000ae14 	.word	0x2000ae14

08001e38 <lcdClear>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdClear(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001e3c:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001e40:	2100      	movs	r1, #0
 8001e42:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <lcdClear+0x14>)
 8001e44:	f006 fb0e 	bl	8008464 <memset>
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000e0c 	.word	0x20000e0c

08001e50 <lcdInit>:
*   4. Włącza wyświetlacz i podświetlenie
* Korzysta z:
*   - lcd_send: wysyłanie komend inicjalizacyjnych
*   - HAL_GPIO_WritePin: sterowanie pinami RST i BL
************************************************************************/
void lcdInit(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2104      	movs	r1, #4
 8001e5a:	481c      	ldr	r0, [pc, #112]	@ (8001ecc <lcdInit+0x7c>)
 8001e5c:	f001 f9ce 	bl	80031fc <HAL_GPIO_WritePin>
    delay(100);
 8001e60:	2064      	movs	r0, #100	@ 0x64
 8001e62:	f000 f8c9 	bl	8001ff8 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2104      	movs	r1, #4
 8001e6a:	4818      	ldr	r0, [pc, #96]	@ (8001ecc <lcdInit+0x7c>)
 8001e6c:	f001 f9c6 	bl	80031fc <HAL_GPIO_WritePin>
    delay(100);
 8001e70:	2064      	movs	r0, #100	@ 0x64
 8001e72:	f000 f8c1 	bl	8001ff8 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	e009      	b.n	8001e90 <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001e7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <lcdInit+0x80>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff49 	bl	8001d1c <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b4b      	cmp	r3, #75	@ 0x4b
 8001e94:	d9f2      	bls.n	8001e7c <lcdInit+0x2c>
    }
    delay(200);
 8001e96:	20c8      	movs	r0, #200	@ 0xc8
 8001e98:	f000 f8ae 	bl	8001ff8 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001e9c:	2011      	movs	r0, #17
 8001e9e:	f7ff fef1 	bl	8001c84 <lcdCmd>
    delay(120);
 8001ea2:	2078      	movs	r0, #120	@ 0x78
 8001ea4:	f000 f8a8 	bl	8001ff8 <delay>
    lcdCmd(ST7735S_DISPON);
 8001ea8:	2029      	movs	r0, #41	@ 0x29
 8001eaa:	f7ff feeb 	bl	8001c84 <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4806      	ldr	r0, [pc, #24]	@ (8001ecc <lcdInit+0x7c>)
 8001eb4:	f001 f9a2 	bl	80031fc <HAL_GPIO_WritePin>
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001eb8:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <lcdInit+0x84>)
 8001ec0:	f006 fad0 	bl	8008464 <memset>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	080121cc 	.word	0x080121cc
 8001ed4:	20000e0c 	.word	0x20000e0c

08001ed8 <lcdPutPixel>:
* Parametry:
*   - x, y: Współrzędne piksela
*   - color: Kolor w formacie RGB565
************************************************************************/
void lcdPutPixel(int x, int y, uint16_t color)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	80fb      	strh	r3, [r7, #6]
        frameBuffer[y * LCD_WIDTH + x] = color;
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	015b      	lsls	r3, r3, #5
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4905      	ldr	r1, [pc, #20]	@ (8001f0c <lcdPutPixel+0x34>)
 8001ef8:	88fa      	ldrh	r2, [r7, #6]
 8001efa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000e0c 	.word	0x20000e0c

08001f10 <lcdIsBusy>:
bool lcdIsBusy(void) {
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
    return transferInProgress;
 8001f14:	4b03      	ldr	r3, [pc, #12]	@ (8001f24 <lcdIsBusy+0x14>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	2000ae0c 	.word	0x2000ae0c

08001f28 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a08      	ldr	r2, [pc, #32]	@ (8001f54 <HAL_SPI_TxCpltCallback+0x2c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <HAL_SPI_TxCpltCallback+0x22>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f3e:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <HAL_SPI_TxCpltCallback+0x30>)
 8001f40:	f001 f95c 	bl	80031fc <HAL_GPIO_WritePin>
        transferInProgress = false;
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <HAL_SPI_TxCpltCallback+0x34>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
    }
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2000ae14 	.word	0x2000ae14
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	2000ae0c 	.word	0x2000ae0c

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	@ (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	@ (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc4:	d301      	bcc.n	8001fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <SysTick_Config+0x40>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f7ff ffc2 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <SysTick_Config+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe2:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <SysTick_Config+0x40>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <delay>:
*   - delayMs: Liczba milisekund do odczekania

* Korzysta z:
*   - tick: Globalna zmienna zwiększana w przerwaniu systemowym
************************************************************************/
void delay(uint32_t delayMs){
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8002000:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <delay+0x2c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8002006:	bf00      	nop
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	441a      	add	r2, r3
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <delay+0x2c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d8f8      	bhi.n	8002008 <delay+0x10>
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	2000ae10 	.word	0x2000ae10

08002028 <waitForFrame>:
*   - USART_kbhit: Sprawdzenie dostępności danych
*   - USART_getchar: Pobranie znaku z UART
*   - processReceivedChar: Przetworzenie odebranego znaku
************************************************************************/
void waitForFrame(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 800202e:	f7fe fab9 	bl	80005a4 <USART_kbhit>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <waitForFrame+0x20>
	        uint8_t received_char = USART_getchar();
 8002038:	f7fe fac6 	bl	80005c8 <USART_getchar>
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(received_char);
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fb4e 	bl	80016e4 <processReceivedChar>
	 }
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002054:	f000 fb2b 	bl	80026ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002058:	f000 f812 	bl	8002080 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 800205c:	4807      	ldr	r0, [pc, #28]	@ (800207c <main+0x2c>)
 800205e:	f7ff ffa9 	bl	8001fb4 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002062:	f7ff fd65 	bl	8001b30 <MX_GPIO_Init>
  MX_DMA_Init();
 8002066:	f7fe fc35 	bl	80008d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800206a:	f000 fa4b 	bl	8002504 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800206e:	f000 f85f 	bl	8002130 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(); // inicjalizacja wyświetlacza
 8002072:	f7ff feed 	bl	8001e50 <lcdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
	  waitForFrame();
 8002076:	f7ff ffd7 	bl	8002028 <waitForFrame>
 800207a:	e7fc      	b.n	8002076 <main+0x26>
 800207c:	00013880 	.word	0x00013880

08002080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b096      	sub	sp, #88	@ 0x58
 8002084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	2244      	movs	r2, #68	@ 0x44
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f006 f9e8 	bl	8008464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002094:	463b      	mov	r3, r7
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020a6:	f001 f8cf 	bl	8003248 <HAL_PWREx_ControlVoltageScaling>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80020b0:	f000 f838 	bl	8002124 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80020b4:	2310      	movs	r3, #16
 80020b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020b8:	2301      	movs	r3, #1
 80020ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80020c0:	2360      	movs	r3, #96	@ 0x60
 80020c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020c4:	2302      	movs	r3, #2
 80020c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80020c8:	2301      	movs	r3, #1
 80020ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80020d0:	2328      	movs	r3, #40	@ 0x28
 80020d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020d4:	2307      	movs	r3, #7
 80020d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020d8:	2302      	movs	r3, #2
 80020da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020dc:	2302      	movs	r3, #2
 80020de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4618      	mov	r0, r3
 80020e6:	f001 f905 	bl	80032f4 <HAL_RCC_OscConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80020f0:	f000 f818 	bl	8002124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f4:	230f      	movs	r3, #15
 80020f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f8:	2303      	movs	r3, #3
 80020fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002108:	463b      	mov	r3, r7
 800210a:	2104      	movs	r1, #4
 800210c:	4618      	mov	r0, r3
 800210e:	f001 fccd 	bl	8003aac <HAL_RCC_ClockConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002118:	f000 f804 	bl	8002124 <Error_Handler>
  }
}
 800211c:	bf00      	nop
 800211e:	3758      	adds	r7, #88	@ 0x58
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002128:	b672      	cpsid	i
}
 800212a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <Error_Handler+0x8>

08002130 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <MX_SPI2_Init+0x74>)
 8002136:	4a1c      	ldr	r2, [pc, #112]	@ (80021a8 <MX_SPI2_Init+0x78>)
 8002138:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800213a:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <MX_SPI2_Init+0x74>)
 800213c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002140:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002142:	4b18      	ldr	r3, [pc, #96]	@ (80021a4 <MX_SPI2_Init+0x74>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002148:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <MX_SPI2_Init+0x74>)
 800214a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800214e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002150:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <MX_SPI2_Init+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002156:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <MX_SPI2_Init+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <MX_SPI2_Init+0x74>)
 800215e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002162:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002164:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <MX_SPI2_Init+0x74>)
 8002166:	2210      	movs	r2, #16
 8002168:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <MX_SPI2_Init+0x74>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <MX_SPI2_Init+0x74>)
 8002172:	2200      	movs	r2, #0
 8002174:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002176:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <MX_SPI2_Init+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <MX_SPI2_Init+0x74>)
 800217e:	2207      	movs	r2, #7
 8002180:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002182:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <MX_SPI2_Init+0x74>)
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <MX_SPI2_Init+0x74>)
 800218a:	2200      	movs	r2, #0
 800218c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <MX_SPI2_Init+0x74>)
 8002190:	f002 fb6c 	bl	800486c <HAL_SPI_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800219a:	f7ff ffc3 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000ae14 	.word	0x2000ae14
 80021a8:	40003800 	.word	0x40003800

080021ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	@ 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a3e      	ldr	r2, [pc, #248]	@ (80022c4 <HAL_SPI_MspInit+0x118>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d175      	bne.n	80022ba <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021ce:	4b3e      	ldr	r3, [pc, #248]	@ (80022c8 <HAL_SPI_MspInit+0x11c>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d2:	4a3d      	ldr	r2, [pc, #244]	@ (80022c8 <HAL_SPI_MspInit+0x11c>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021da:	4b3b      	ldr	r3, [pc, #236]	@ (80022c8 <HAL_SPI_MspInit+0x11c>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	4b38      	ldr	r3, [pc, #224]	@ (80022c8 <HAL_SPI_MspInit+0x11c>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	4a37      	ldr	r2, [pc, #220]	@ (80022c8 <HAL_SPI_MspInit+0x11c>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f2:	4b35      	ldr	r3, [pc, #212]	@ (80022c8 <HAL_SPI_MspInit+0x11c>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	4b32      	ldr	r3, [pc, #200]	@ (80022c8 <HAL_SPI_MspInit+0x11c>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	4a31      	ldr	r2, [pc, #196]	@ (80022c8 <HAL_SPI_MspInit+0x11c>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220a:	4b2f      	ldr	r3, [pc, #188]	@ (80022c8 <HAL_SPI_MspInit+0x11c>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8002216:	2308      	movs	r3, #8
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002226:	2305      	movs	r3, #5
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4826      	ldr	r0, [pc, #152]	@ (80022cc <HAL_SPI_MspInit+0x120>)
 8002232:	f000 fe39 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8002236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002248:	2305      	movs	r3, #5
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	481f      	ldr	r0, [pc, #124]	@ (80022d0 <HAL_SPI_MspInit+0x124>)
 8002254:	f000 fe28 	bl	8002ea8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002258:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 800225a:	4a1f      	ldr	r2, [pc, #124]	@ (80022d8 <HAL_SPI_MspInit+0x12c>)
 800225c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 8002260:	2201      	movs	r2, #1
 8002262:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 8002266:	2210      	movs	r2, #16
 8002268:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800226a:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002270:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 8002272:	2280      	movs	r2, #128	@ 0x80
 8002274:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002276:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800227c:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 800228a:	2200      	movs	r2, #0
 800228c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800228e:	4811      	ldr	r0, [pc, #68]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 8002290:	f000 fb94 	bl	80029bc <HAL_DMA_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 800229a:	f7ff ff43 	bl	8002124 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a0c      	ldr	r2, [pc, #48]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80022a4:	4a0b      	ldr	r2, [pc, #44]	@ (80022d4 <HAL_SPI_MspInit+0x128>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2102      	movs	r1, #2
 80022ae:	2024      	movs	r0, #36	@ 0x24
 80022b0:	f000 fb4d 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80022b4:	2024      	movs	r0, #36	@ 0x24
 80022b6:	f000 fb66 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022ba:	bf00      	nop
 80022bc:	3728      	adds	r7, #40	@ 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40003800 	.word	0x40003800
 80022c8:	40021000 	.word	0x40021000
 80022cc:	48000800 	.word	0x48000800
 80022d0:	48000400 	.word	0x48000400
 80022d4:	2000ae78 	.word	0x2000ae78
 80022d8:	40020058 	.word	0x40020058

080022dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <HAL_MspInit+0x44>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002320 <HAL_MspInit+0x44>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <HAL_MspInit+0x44>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <HAL_MspInit+0x44>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <HAL_MspInit+0x44>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002304:	6593      	str	r3, [r2, #88]	@ 0x58
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_MspInit+0x44>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000

08002324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <NMI_Handler+0x4>

0800232c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <MemManage_Handler+0x4>

0800233c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <BusFault_Handler+0x4>

08002344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <UsageFault_Handler+0x4>

0800234c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800237c:	f000 f9ec 	bl	8002758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  tick++; // zwiększanie zmiennej dla funkcji delay()
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <SysTick_Handler+0x1c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4a03      	ldr	r2, [pc, #12]	@ (8002394 <SysTick_Handler+0x1c>)
 8002388:	6013      	str	r3, [r2, #0]
  updateScrollingText();
 800238a:	f7ff fafd 	bl	8001988 <updateScrollingText>

  /* USER CODE END SysTick_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000ae10 	.word	0x2000ae10

08002398 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800239c:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <DMA1_Channel5_IRQHandler+0x10>)
 800239e:	f000 fca4 	bl	8002cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000ae78 	.word	0x2000ae78

080023ac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80023b0:	4802      	ldr	r0, [pc, #8]	@ (80023bc <SPI2_IRQHandler+0x10>)
 80023b2:	f002 fd63 	bl	8004e7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000ae14 	.word	0x2000ae14

080023c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023c4:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <USART2_IRQHandler+0x10>)
 80023c6:	f003 f953 	bl	8005670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000aec4 	.word	0x2000aec4

080023d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023dc:	4a14      	ldr	r2, [pc, #80]	@ (8002430 <_sbrk+0x5c>)
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <_sbrk+0x60>)
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <_sbrk+0x64>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	@ (800243c <_sbrk+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f6:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d207      	bcs.n	8002414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002404:	f006 f85a 	bl	80084bc <__errno>
 8002408:	4603      	mov	r3, r0
 800240a:	220c      	movs	r2, #12
 800240c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	e009      	b.n	8002428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002414:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <_sbrk+0x64>)
 8002424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20018000 	.word	0x20018000
 8002434:	00001000 	.word	0x00001000
 8002438:	2000aec0 	.word	0x2000aec0
 800243c:	2000b098 	.word	0x2000b098

08002440 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <SystemInit+0x20>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <SystemInit+0x20>)
 800244c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <HAL_UART_TxCpltCallback>:
* Korzysta z:
*   txRingBuffer - struktura bufora kołowego transmisji
*   USART_TxBuf - bufor danych do transmisji
*   HAL_UART_Transmit_IT - funkcja HAL rozpoczynająca transmisję
************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a10      	ldr	r2, [pc, #64]	@ (80024b0 <HAL_UART_TxCpltCallback+0x4c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d119      	bne.n	80024a8 <HAL_UART_TxCpltCallback+0x44>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8002474:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <HAL_UART_TxCpltCallback+0x50>)
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <HAL_UART_TxCpltCallback+0x50>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d013      	beq.n	80024a8 <HAL_UART_TxCpltCallback+0x44>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <HAL_UART_TxCpltCallback+0x50>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a0c      	ldr	r2, [pc, #48]	@ (80024b8 <HAL_UART_TxCpltCallback+0x54>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) & txRingBuffer.mask;
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_UART_TxCpltCallback+0x50>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_UART_TxCpltCallback+0x50>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4013      	ands	r3, r2
 8002496:	4a07      	ldr	r2, [pc, #28]	@ (80024b4 <HAL_UART_TxCpltCallback+0x50>)
 8002498:	6053      	str	r3, [r2, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800249a:	f107 030f 	add.w	r3, r7, #15
 800249e:	2201      	movs	r2, #1
 80024a0:	4619      	mov	r1, r3
 80024a2:	4803      	ldr	r0, [pc, #12]	@ (80024b0 <HAL_UART_TxCpltCallback+0x4c>)
 80024a4:	f003 f83a 	bl	800551c <HAL_UART_Transmit_IT>
	   }
   }
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	2000aec4 	.word	0x2000aec4
 80024b4:	20000290 	.word	0x20000290
 80024b8:	200002a0 	.word	0x200002a0

080024bc <HAL_UART_RxCpltCallback>:
* Korzysta z:
*   rxRingBuffer - struktura bufora kołowego odbioru
*   USART_RxBuf - bufor danych odebranych
*   HAL_UART_Receive_IT - funkcja HAL rozpoczynająca odbiór
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <HAL_UART_RxCpltCallback+0x3c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d110      	bne.n	80024ee <HAL_UART_RxCpltCallback+0x32>
		 rxRingBuffer.writeIndex = (rxRingBuffer.writeIndex + 1) & rxRingBuffer.mask;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	@ (80024fc <HAL_UART_RxCpltCallback+0x40>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_UART_RxCpltCallback+0x40>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	4013      	ands	r3, r2
 80024d8:	4a08      	ldr	r2, [pc, #32]	@ (80024fc <HAL_UART_RxCpltCallback+0x40>)
 80024da:	6093      	str	r3, [r2, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 80024dc:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <HAL_UART_RxCpltCallback+0x40>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <HAL_UART_RxCpltCallback+0x44>)
 80024e2:	4413      	add	r3, r2
 80024e4:	2201      	movs	r2, #1
 80024e6:	4619      	mov	r1, r3
 80024e8:	4803      	ldr	r0, [pc, #12]	@ (80024f8 <HAL_UART_RxCpltCallback+0x3c>)
 80024ea:	f003 f875 	bl	80055d8 <HAL_UART_Receive_IT>

	 }
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000aec4 	.word	0x2000aec4
 80024fc:	20000280 	.word	0x20000280
 8002500:	20000aa0 	.word	0x20000aa0

08002504 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <MX_USART2_UART_Init+0x78>)
 800250a:	4a1d      	ldr	r2, [pc, #116]	@ (8002580 <MX_USART2_UART_Init+0x7c>)
 800250c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800250e:	4b1b      	ldr	r3, [pc, #108]	@ (800257c <MX_USART2_UART_Init+0x78>)
 8002510:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002516:	4b19      	ldr	r3, [pc, #100]	@ (800257c <MX_USART2_UART_Init+0x78>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <MX_USART2_UART_Init+0x78>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002522:	4b16      	ldr	r3, [pc, #88]	@ (800257c <MX_USART2_UART_Init+0x78>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <MX_USART2_UART_Init+0x78>)
 800252a:	220c      	movs	r2, #12
 800252c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252e:	4b13      	ldr	r3, [pc, #76]	@ (800257c <MX_USART2_UART_Init+0x78>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <MX_USART2_UART_Init+0x78>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <MX_USART2_UART_Init+0x78>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002540:	4b0e      	ldr	r3, [pc, #56]	@ (800257c <MX_USART2_UART_Init+0x78>)
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002546:	480d      	ldr	r0, [pc, #52]	@ (800257c <MX_USART2_UART_Init+0x78>)
 8002548:	f002 ff9a 	bl	8005480 <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002552:	f7ff fde7 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 8002556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800255a:	490a      	ldr	r1, [pc, #40]	@ (8002584 <MX_USART2_UART_Init+0x80>)
 800255c:	480a      	ldr	r0, [pc, #40]	@ (8002588 <MX_USART2_UART_Init+0x84>)
 800255e:	f7fe f807 	bl	8000570 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 8002562:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002566:	4909      	ldr	r1, [pc, #36]	@ (800258c <MX_USART2_UART_Init+0x88>)
 8002568:	4809      	ldr	r0, [pc, #36]	@ (8002590 <MX_USART2_UART_Init+0x8c>)
 800256a:	f7fe f801 	bl	8000570 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 800256e:	2201      	movs	r2, #1
 8002570:	4904      	ldr	r1, [pc, #16]	@ (8002584 <MX_USART2_UART_Init+0x80>)
 8002572:	4802      	ldr	r0, [pc, #8]	@ (800257c <MX_USART2_UART_Init+0x78>)
 8002574:	f003 f830 	bl	80055d8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2000aec4 	.word	0x2000aec4
 8002580:	40004400 	.word	0x40004400
 8002584:	20000aa0 	.word	0x20000aa0
 8002588:	20000280 	.word	0x20000280
 800258c:	200002a0 	.word	0x200002a0
 8002590:	20000290 	.word	0x20000290

08002594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b0ac      	sub	sp, #176	@ 0xb0
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2288      	movs	r2, #136	@ 0x88
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f005 ff55 	bl	8008464 <memset>
  if(uartHandle->Instance==USART2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a25      	ldr	r2, [pc, #148]	@ (8002654 <HAL_UART_MspInit+0xc0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d143      	bne.n	800264c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025c4:	2302      	movs	r3, #2
 80025c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 fc8f 	bl	8003ef4 <HAL_RCCEx_PeriphCLKConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025dc:	f7ff fda2 	bl	8002124 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <HAL_UART_MspInit+0xc4>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <HAL_UART_MspInit+0xc4>)
 80025e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <HAL_UART_MspInit+0xc4>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <HAL_UART_MspInit+0xc4>)
 80025fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fc:	4a16      	ldr	r2, [pc, #88]	@ (8002658 <HAL_UART_MspInit+0xc4>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002604:	4b14      	ldr	r3, [pc, #80]	@ (8002658 <HAL_UART_MspInit+0xc4>)
 8002606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002610:	230c      	movs	r3, #12
 8002612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002628:	2307      	movs	r3, #7
 800262a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002632:	4619      	mov	r1, r3
 8002634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002638:	f000 fc36 	bl	8002ea8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2101      	movs	r1, #1
 8002640:	2026      	movs	r0, #38	@ 0x26
 8002642:	f000 f984 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002646:	2026      	movs	r0, #38	@ 0x26
 8002648:	f000 f99d 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800264c:	bf00      	nop
 800264e:	37b0      	adds	r7, #176	@ 0xb0
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40004400 	.word	0x40004400
 8002658:	40021000 	.word	0x40021000

0800265c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800265c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002694 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002660:	f7ff feee 	bl	8002440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002664:	480c      	ldr	r0, [pc, #48]	@ (8002698 <LoopForever+0x6>)
  ldr r1, =_edata
 8002666:	490d      	ldr	r1, [pc, #52]	@ (800269c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002668:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <LoopForever+0xe>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800267c:	4c0a      	ldr	r4, [pc, #40]	@ (80026a8 <LoopForever+0x16>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800268a:	f005 ff1d 	bl	80084c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800268e:	f7ff fcdf 	bl	8002050 <main>

08002692 <LoopForever>:

LoopForever:
    b LoopForever
 8002692:	e7fe      	b.n	8002692 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002694:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800269c:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80026a0:	080122f0 	.word	0x080122f0
  ldr r2, =_sbss
 80026a4:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80026a8:	2000b098 	.word	0x2000b098

080026ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC1_2_IRQHandler>

080026ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b8:	2003      	movs	r0, #3
 80026ba:	f000 f93d 	bl	8002938 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026be:	200f      	movs	r0, #15
 80026c0:	f000 f80e 	bl	80026e0 <HAL_InitTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	e001      	b.n	80026d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026d0:	f7ff fe04 	bl	80022dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026d4:	79fb      	ldrb	r3, [r7, #7]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026ec:	4b17      	ldr	r3, [pc, #92]	@ (800274c <HAL_InitTick+0x6c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d023      	beq.n	800273c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026f4:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <HAL_InitTick+0x70>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b14      	ldr	r3, [pc, #80]	@ (800274c <HAL_InitTick+0x6c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002702:	fbb3 f3f1 	udiv	r3, r3, r1
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f949 	bl	80029a2 <HAL_SYSTICK_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d809      	bhi.n	8002730 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800271c:	2200      	movs	r2, #0
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f000 f913 	bl	800294e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002728:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <HAL_InitTick+0x74>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e007      	b.n	8002740 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e004      	b.n	8002740 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e001      	b.n	8002740 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000208 	.word	0x20000208
 8002750:	20000200 	.word	0x20000200
 8002754:	20000204 	.word	0x20000204

08002758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_IncTick+0x20>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_IncTick+0x24>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4413      	add	r3, r2
 8002768:	4a04      	ldr	r2, [pc, #16]	@ (800277c <HAL_IncTick+0x24>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000208 	.word	0x20000208
 800277c:	2000af4c 	.word	0x2000af4c

08002780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <HAL_GetTick+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	2000af4c 	.word	0x2000af4c

08002798 <__NVIC_SetPriorityGrouping>:
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4907      	ldr	r1, [pc, #28]	@ (8002834 <__NVIC_EnableIRQ+0x38>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db0a      	blt.n	8002862 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	490c      	ldr	r1, [pc, #48]	@ (8002884 <__NVIC_SetPriority+0x4c>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	0112      	lsls	r2, r2, #4
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	440b      	add	r3, r1
 800285c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002860:	e00a      	b.n	8002878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4908      	ldr	r1, [pc, #32]	@ (8002888 <__NVIC_SetPriority+0x50>)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3b04      	subs	r3, #4
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	440b      	add	r3, r1
 8002876:	761a      	strb	r2, [r3, #24]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <NVIC_EncodePriority>:
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	@ 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f1c3 0307 	rsb	r3, r3, #7
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	bf28      	it	cs
 80028aa:	2304      	movcs	r3, #4
 80028ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d902      	bls.n	80028bc <NVIC_EncodePriority+0x30>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3b03      	subs	r3, #3
 80028ba:	e000      	b.n	80028be <NVIC_EncodePriority+0x32>
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43d9      	mvns	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	4313      	orrs	r3, r2
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	@ 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <SysTick_Config>:
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002904:	d301      	bcc.n	800290a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002906:	2301      	movs	r3, #1
 8002908:	e00f      	b.n	800292a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290a:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <SysTick_Config+0x40>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002912:	210f      	movs	r1, #15
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f7ff ff8e 	bl	8002838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <SysTick_Config+0x40>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002922:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <SysTick_Config+0x40>)
 8002924:	2207      	movs	r2, #7
 8002926:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	e000e010 	.word	0xe000e010

08002938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff29 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002960:	f7ff ff3e 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 8002964:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f7ff ff8e 	bl	800288c <NVIC_EncodePriority>
 8002970:	4602      	mov	r2, r0
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff5d 	bl	8002838 <__NVIC_SetPriority>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff31 	bl	80027fc <__NVIC_EnableIRQ>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ffa2 	bl	80028f4 <SysTick_Config>
 80029b0:	4603      	mov	r3, r0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e098      	b.n	8002b00 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b0c <HAL_DMA_Init+0x150>)
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d80f      	bhi.n	80029fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002b10 <HAL_DMA_Init+0x154>)
 80029e2:	4413      	add	r3, r2
 80029e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002b14 <HAL_DMA_Init+0x158>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	009a      	lsls	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a48      	ldr	r2, [pc, #288]	@ (8002b18 <HAL_DMA_Init+0x15c>)
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80029f8:	e00e      	b.n	8002a18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <HAL_DMA_Init+0x160>)
 8002a02:	4413      	add	r3, r2
 8002a04:	4a43      	ldr	r2, [pc, #268]	@ (8002b14 <HAL_DMA_Init+0x158>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	009a      	lsls	r2, r3, #2
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a42      	ldr	r2, [pc, #264]	@ (8002b20 <HAL_DMA_Init+0x164>)
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a72:	d039      	beq.n	8002ae8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	4a27      	ldr	r2, [pc, #156]	@ (8002b18 <HAL_DMA_Init+0x15c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a7e:	4b29      	ldr	r3, [pc, #164]	@ (8002b24 <HAL_DMA_Init+0x168>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	f003 031c 	and.w	r3, r3, #28
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	4924      	ldr	r1, [pc, #144]	@ (8002b24 <HAL_DMA_Init+0x168>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a98:	4b22      	ldr	r3, [pc, #136]	@ (8002b24 <HAL_DMA_Init+0x168>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa4:	f003 031c 	and.w	r3, r3, #28
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	491d      	ldr	r1, [pc, #116]	@ (8002b24 <HAL_DMA_Init+0x168>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
 8002ab2:	e019      	b.n	8002ae8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b28 <HAL_DMA_Init+0x16c>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abc:	f003 031c 	and.w	r3, r3, #28
 8002ac0:	210f      	movs	r1, #15
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	4917      	ldr	r1, [pc, #92]	@ (8002b28 <HAL_DMA_Init+0x16c>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ace:	4b16      	ldr	r3, [pc, #88]	@ (8002b28 <HAL_DMA_Init+0x16c>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f003 031c 	and.w	r3, r3, #28
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	4911      	ldr	r1, [pc, #68]	@ (8002b28 <HAL_DMA_Init+0x16c>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40020407 	.word	0x40020407
 8002b10:	bffdfff8 	.word	0xbffdfff8
 8002b14:	cccccccd 	.word	0xcccccccd
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	bffdfbf8 	.word	0xbffdfbf8
 8002b20:	40020400 	.word	0x40020400
 8002b24:	400200a8 	.word	0x400200a8
 8002b28:	400204a8 	.word	0x400204a8

08002b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_DMA_Start_IT+0x20>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e04b      	b.n	8002be4 <HAL_DMA_Start_IT+0xb8>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d13a      	bne.n	8002bd6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f95f 	bl	8002e48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 020e 	orr.w	r2, r2, #14
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e00f      	b.n	8002bc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0204 	bic.w	r2, r2, #4
 8002bb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 020a 	orr.w	r2, r2, #10
 8002bc2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e005      	b.n	8002be2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
 8002be0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d008      	beq.n	8002c16 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2204      	movs	r2, #4
 8002c08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e022      	b.n	8002c5c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 020e 	bic.w	r2, r2, #14
 8002c24:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	f003 021c 	and.w	r2, r3, #28
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d005      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2204      	movs	r2, #4
 8002c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	e029      	b.n	8002ce0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 020e 	bic.w	r2, r2, #14
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb0:	f003 021c 	and.w	r2, r3, #28
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
    }
  }
  return status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	f003 031c 	and.w	r3, r3, #28
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d026      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x7a>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d021      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d107      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0204 	bic.w	r2, r2, #4
 8002d3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	f003 021c 	and.w	r2, r3, #28
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	2104      	movs	r1, #4
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d071      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d62:	e06c      	b.n	8002e3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d68:	f003 031c 	and.w	r3, r3, #28
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d02e      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0xec>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d029      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 020a 	bic.w	r2, r2, #10
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dac:	f003 021c 	and.w	r2, r3, #28
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	2102      	movs	r1, #2
 8002db6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d038      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002dd4:	e033      	b.n	8002e3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	f003 031c 	and.w	r3, r3, #28
 8002dde:	2208      	movs	r2, #8
 8002de0:	409a      	lsls	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d02a      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x156>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d025      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 020e 	bic.w	r2, r2, #14
 8002e02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e08:	f003 021c 	and.w	r2, r3, #28
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f202 	lsl.w	r2, r1, r2
 8002e16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
}
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	f003 021c 	and.w	r2, r3, #28
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	2101      	movs	r1, #1
 8002e64:	fa01 f202 	lsl.w	r2, r1, r2
 8002e68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b10      	cmp	r3, #16
 8002e78:	d108      	bne.n	8002e8c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e8a:	e007      	b.n	8002e9c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb6:	e17f      	b.n	80031b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8171 	beq.w	80031b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d005      	beq.n	8002ee8 <HAL_GPIO_Init+0x40>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d130      	bne.n	8002f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1e:	2201      	movs	r2, #1
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 0201 	and.w	r2, r3, #1
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d118      	bne.n	8002f88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	08db      	lsrs	r3, r3, #3
 8002f72:	f003 0201 	and.w	r2, r3, #1
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d017      	beq.n	8002fc4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d123      	bne.n	8003018 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	08da      	lsrs	r2, r3, #3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3208      	adds	r2, #8
 8002fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	08da      	lsrs	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3208      	adds	r2, #8
 8003012:	6939      	ldr	r1, [r7, #16]
 8003014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2203      	movs	r2, #3
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0203 	and.w	r2, r3, #3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80ac 	beq.w	80031b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305a:	4b5f      	ldr	r3, [pc, #380]	@ (80031d8 <HAL_GPIO_Init+0x330>)
 800305c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305e:	4a5e      	ldr	r2, [pc, #376]	@ (80031d8 <HAL_GPIO_Init+0x330>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6613      	str	r3, [r2, #96]	@ 0x60
 8003066:	4b5c      	ldr	r3, [pc, #368]	@ (80031d8 <HAL_GPIO_Init+0x330>)
 8003068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003072:	4a5a      	ldr	r2, [pc, #360]	@ (80031dc <HAL_GPIO_Init+0x334>)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800309c:	d025      	beq.n	80030ea <HAL_GPIO_Init+0x242>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4f      	ldr	r2, [pc, #316]	@ (80031e0 <HAL_GPIO_Init+0x338>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01f      	beq.n	80030e6 <HAL_GPIO_Init+0x23e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4e      	ldr	r2, [pc, #312]	@ (80031e4 <HAL_GPIO_Init+0x33c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d019      	beq.n	80030e2 <HAL_GPIO_Init+0x23a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4d      	ldr	r2, [pc, #308]	@ (80031e8 <HAL_GPIO_Init+0x340>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x236>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4c      	ldr	r2, [pc, #304]	@ (80031ec <HAL_GPIO_Init+0x344>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00d      	beq.n	80030da <HAL_GPIO_Init+0x232>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4b      	ldr	r2, [pc, #300]	@ (80031f0 <HAL_GPIO_Init+0x348>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <HAL_GPIO_Init+0x22e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4a      	ldr	r2, [pc, #296]	@ (80031f4 <HAL_GPIO_Init+0x34c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_GPIO_Init+0x22a>
 80030ce:	2306      	movs	r3, #6
 80030d0:	e00c      	b.n	80030ec <HAL_GPIO_Init+0x244>
 80030d2:	2307      	movs	r3, #7
 80030d4:	e00a      	b.n	80030ec <HAL_GPIO_Init+0x244>
 80030d6:	2305      	movs	r3, #5
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x244>
 80030da:	2304      	movs	r3, #4
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x244>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x244>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x244>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x244>
 80030ea:	2300      	movs	r3, #0
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030fc:	4937      	ldr	r1, [pc, #220]	@ (80031dc <HAL_GPIO_Init+0x334>)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800310a:	4b3b      	ldr	r3, [pc, #236]	@ (80031f8 <HAL_GPIO_Init+0x350>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800312e:	4a32      	ldr	r2, [pc, #200]	@ (80031f8 <HAL_GPIO_Init+0x350>)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003134:	4b30      	ldr	r3, [pc, #192]	@ (80031f8 <HAL_GPIO_Init+0x350>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003158:	4a27      	ldr	r2, [pc, #156]	@ (80031f8 <HAL_GPIO_Init+0x350>)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800315e:	4b26      	ldr	r3, [pc, #152]	@ (80031f8 <HAL_GPIO_Init+0x350>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003182:	4a1d      	ldr	r2, [pc, #116]	@ (80031f8 <HAL_GPIO_Init+0x350>)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003188:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <HAL_GPIO_Init+0x350>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	43db      	mvns	r3, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031ac:	4a12      	ldr	r2, [pc, #72]	@ (80031f8 <HAL_GPIO_Init+0x350>)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	3301      	adds	r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f47f ae78 	bne.w	8002eb8 <HAL_GPIO_Init+0x10>
  }
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40010000 	.word	0x40010000
 80031e0:	48000400 	.word	0x48000400
 80031e4:	48000800 	.word	0x48000800
 80031e8:	48000c00 	.word	0x48000c00
 80031ec:	48001000 	.word	0x48001000
 80031f0:	48001400 	.word	0x48001400
 80031f4:	48001800 	.word	0x48001800
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
 8003208:	4613      	mov	r3, r2
 800320a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003218:	e002      	b.n	8003220 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003230:	4b04      	ldr	r3, [pc, #16]	@ (8003244 <HAL_PWREx_GetVoltageRange+0x18>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40007000 	.word	0x40007000

08003248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003256:	d130      	bne.n	80032ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003258:	4b23      	ldr	r3, [pc, #140]	@ (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003264:	d038      	beq.n	80032d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003266:	4b20      	ldr	r3, [pc, #128]	@ (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800326e:	4a1e      	ldr	r2, [pc, #120]	@ (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003270:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003276:	4b1d      	ldr	r3, [pc, #116]	@ (80032ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2232      	movs	r2, #50	@ 0x32
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	4a1b      	ldr	r2, [pc, #108]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0c9b      	lsrs	r3, r3, #18
 8003288:	3301      	adds	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800328c:	e002      	b.n	8003294 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	3b01      	subs	r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003294:	4b14      	ldr	r3, [pc, #80]	@ (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a0:	d102      	bne.n	80032a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f2      	bne.n	800328e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032a8:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b4:	d110      	bne.n	80032d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e00f      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ba:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c6:	d007      	beq.n	80032d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032c8:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032d0:	4a05      	ldr	r2, [pc, #20]	@ (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40007000 	.word	0x40007000
 80032ec:	20000200 	.word	0x20000200
 80032f0:	431bde83 	.word	0x431bde83

080032f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e3ca      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003306:	4b97      	ldr	r3, [pc, #604]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003310:	4b94      	ldr	r3, [pc, #592]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80e4 	beq.w	80034f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_RCC_OscConfig+0x4a>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b0c      	cmp	r3, #12
 8003332:	f040 808b 	bne.w	800344c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b01      	cmp	r3, #1
 800333a:	f040 8087 	bne.w	800344c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800333e:	4b89      	ldr	r3, [pc, #548]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e3a2      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1a      	ldr	r2, [r3, #32]
 800335a:	4b82      	ldr	r3, [pc, #520]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d004      	beq.n	8003370 <HAL_RCC_OscConfig+0x7c>
 8003366:	4b7f      	ldr	r3, [pc, #508]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800336e:	e005      	b.n	800337c <HAL_RCC_OscConfig+0x88>
 8003370:	4b7c      	ldr	r3, [pc, #496]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003372:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800337c:	4293      	cmp	r3, r2
 800337e:	d223      	bcs.n	80033c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fd55 	bl	8003e34 <RCC_SetFlashLatencyFromMSIRange>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e383      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003394:	4b73      	ldr	r3, [pc, #460]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a72      	ldr	r2, [pc, #456]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 800339a:	f043 0308 	orr.w	r3, r3, #8
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b70      	ldr	r3, [pc, #448]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	496d      	ldr	r1, [pc, #436]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033b2:	4b6c      	ldr	r3, [pc, #432]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	4968      	ldr	r1, [pc, #416]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
 80033c6:	e025      	b.n	8003414 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c8:	4b66      	ldr	r3, [pc, #408]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a65      	ldr	r2, [pc, #404]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80033ce:	f043 0308 	orr.w	r3, r3, #8
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b63      	ldr	r3, [pc, #396]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4960      	ldr	r1, [pc, #384]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	495b      	ldr	r1, [pc, #364]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fd15 	bl	8003e34 <RCC_SetFlashLatencyFromMSIRange>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e343      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003414:	f000 fc4a 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b52      	ldr	r3, [pc, #328]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	4950      	ldr	r1, [pc, #320]	@ (8003568 <HAL_RCC_OscConfig+0x274>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
 8003430:	4a4e      	ldr	r2, [pc, #312]	@ (800356c <HAL_RCC_OscConfig+0x278>)
 8003432:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003434:	4b4e      	ldr	r3, [pc, #312]	@ (8003570 <HAL_RCC_OscConfig+0x27c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f951 	bl	80026e0 <HAL_InitTick>
 800343e:	4603      	mov	r3, r0
 8003440:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d052      	beq.n	80034ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	e327      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d032      	beq.n	80034ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003454:	4b43      	ldr	r3, [pc, #268]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a42      	ldr	r2, [pc, #264]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003460:	f7ff f98e 	bl	8002780 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003468:	f7ff f98a 	bl	8002780 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e310      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800347a:	4b3a      	ldr	r3, [pc, #232]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003486:	4b37      	ldr	r3, [pc, #220]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a36      	ldr	r2, [pc, #216]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 800348c:	f043 0308 	orr.w	r3, r3, #8
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b34      	ldr	r3, [pc, #208]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4931      	ldr	r1, [pc, #196]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	492c      	ldr	r1, [pc, #176]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
 80034b8:	e01a      	b.n	80034f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a29      	ldr	r2, [pc, #164]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034c6:	f7ff f95b 	bl	8002780 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ce:	f7ff f957 	bl	8002780 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e2dd      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034e0:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f0      	bne.n	80034ce <HAL_RCC_OscConfig+0x1da>
 80034ec:	e000      	b.n	80034f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d074      	beq.n	80035e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d005      	beq.n	800350e <HAL_RCC_OscConfig+0x21a>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2b0c      	cmp	r3, #12
 8003506:	d10e      	bne.n	8003526 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b03      	cmp	r3, #3
 800350c:	d10b      	bne.n	8003526 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350e:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d064      	beq.n	80035e4 <HAL_RCC_OscConfig+0x2f0>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d160      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e2ba      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352e:	d106      	bne.n	800353e <HAL_RCC_OscConfig+0x24a>
 8003530:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0b      	ldr	r2, [pc, #44]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	e026      	b.n	800358c <HAL_RCC_OscConfig+0x298>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003546:	d115      	bne.n	8003574 <HAL_RCC_OscConfig+0x280>
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a05      	ldr	r2, [pc, #20]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 800354e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a02      	ldr	r2, [pc, #8]	@ (8003564 <HAL_RCC_OscConfig+0x270>)
 800355a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	e014      	b.n	800358c <HAL_RCC_OscConfig+0x298>
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	08012264 	.word	0x08012264
 800356c:	20000200 	.word	0x20000200
 8003570:	20000204 	.word	0x20000204
 8003574:	4ba0      	ldr	r3, [pc, #640]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a9f      	ldr	r2, [pc, #636]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b9d      	ldr	r3, [pc, #628]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a9c      	ldr	r2, [pc, #624]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7ff f8f4 	bl	8002780 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7ff f8f0 	bl	8002780 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	@ 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e276      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ae:	4b92      	ldr	r3, [pc, #584]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x2a8>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7ff f8e0 	bl	8002780 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c4:	f7ff f8dc 	bl	8002780 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	@ 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e262      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035d6:	4b88      	ldr	r3, [pc, #544]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2d0>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d060      	beq.n	80036b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_OscConfig+0x310>
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d119      	bne.n	8003632 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d116      	bne.n	8003632 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003604:	4b7c      	ldr	r3, [pc, #496]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_OscConfig+0x328>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e23f      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b76      	ldr	r3, [pc, #472]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	4973      	ldr	r1, [pc, #460]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003630:	e040      	b.n	80036b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d023      	beq.n	8003682 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800363a:	4b6f      	ldr	r3, [pc, #444]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6e      	ldr	r2, [pc, #440]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7ff f89b 	bl	8002780 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364e:	f7ff f897 	bl	8002780 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e21d      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003660:	4b65      	ldr	r3, [pc, #404]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366c:	4b62      	ldr	r3, [pc, #392]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	495f      	ldr	r1, [pc, #380]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
 8003680:	e018      	b.n	80036b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003682:	4b5d      	ldr	r3, [pc, #372]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5c      	ldr	r2, [pc, #368]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800368c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7ff f877 	bl	8002780 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003696:	f7ff f873 	bl	8002780 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1f9      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a8:	4b53      	ldr	r3, [pc, #332]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d03c      	beq.n	800373a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01c      	beq.n	8003702 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c8:	4b4b      	ldr	r3, [pc, #300]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80036ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ce:	4a4a      	ldr	r2, [pc, #296]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7ff f852 	bl	8002780 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e0:	f7ff f84e 	bl	8002780 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1d4      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f2:	4b41      	ldr	r3, [pc, #260]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80036f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ef      	beq.n	80036e0 <HAL_RCC_OscConfig+0x3ec>
 8003700:	e01b      	b.n	800373a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003702:	4b3d      	ldr	r3, [pc, #244]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003708:	4a3b      	ldr	r2, [pc, #236]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003712:	f7ff f835 	bl	8002780 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371a:	f7ff f831 	bl	8002780 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e1b7      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800372c:	4b32      	ldr	r3, [pc, #200]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800372e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ef      	bne.n	800371a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80a6 	beq.w	8003894 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003748:	2300      	movs	r3, #0
 800374a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800374c:	4b2a      	ldr	r3, [pc, #168]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003758:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	4a26      	ldr	r2, [pc, #152]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003762:	6593      	str	r3, [r2, #88]	@ 0x58
 8003764:	4b24      	ldr	r3, [pc, #144]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003770:	2301      	movs	r3, #1
 8003772:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003774:	4b21      	ldr	r3, [pc, #132]	@ (80037fc <HAL_RCC_OscConfig+0x508>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d118      	bne.n	80037b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003780:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <HAL_RCC_OscConfig+0x508>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1d      	ldr	r2, [pc, #116]	@ (80037fc <HAL_RCC_OscConfig+0x508>)
 8003786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800378a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378c:	f7fe fff8 	bl	8002780 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003794:	f7fe fff4 	bl	8002780 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e17a      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a6:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <HAL_RCC_OscConfig+0x508>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d108      	bne.n	80037cc <HAL_RCC_OscConfig+0x4d8>
 80037ba:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c0:	4a0d      	ldr	r2, [pc, #52]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ca:	e029      	b.n	8003820 <HAL_RCC_OscConfig+0x52c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	d115      	bne.n	8003800 <HAL_RCC_OscConfig+0x50c>
 80037d4:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	4a07      	ldr	r2, [pc, #28]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037e4:	4b04      	ldr	r3, [pc, #16]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	4a03      	ldr	r2, [pc, #12]	@ (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037f4:	e014      	b.n	8003820 <HAL_RCC_OscConfig+0x52c>
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40007000 	.word	0x40007000
 8003800:	4b9c      	ldr	r3, [pc, #624]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003806:	4a9b      	ldr	r2, [pc, #620]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003810:	4b98      	ldr	r3, [pc, #608]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003816:	4a97      	ldr	r2, [pc, #604]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d016      	beq.n	8003856 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fe ffaa 	bl	8002780 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382e:	e00a      	b.n	8003846 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fe ffa6 	bl	8002780 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e12a      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003846:	4b8b      	ldr	r3, [pc, #556]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ed      	beq.n	8003830 <HAL_RCC_OscConfig+0x53c>
 8003854:	e015      	b.n	8003882 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003856:	f7fe ff93 	bl	8002780 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fe ff8f 	bl	8002780 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e113      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003874:	4b7f      	ldr	r3, [pc, #508]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1ed      	bne.n	800385e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003882:	7ffb      	ldrb	r3, [r7, #31]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003888:	4b7a      	ldr	r3, [pc, #488]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 800388a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388c:	4a79      	ldr	r2, [pc, #484]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 800388e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003892:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80fe 	beq.w	8003a9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	f040 80d0 	bne.w	8003a48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038a8:	4b72      	ldr	r3, [pc, #456]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0203 	and.w	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d130      	bne.n	800391e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	3b01      	subs	r3, #1
 80038c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d127      	bne.n	800391e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d11f      	bne.n	800391e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038e8:	2a07      	cmp	r2, #7
 80038ea:	bf14      	ite	ne
 80038ec:	2201      	movne	r2, #1
 80038ee:	2200      	moveq	r2, #0
 80038f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d113      	bne.n	800391e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	3b01      	subs	r3, #1
 8003904:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d109      	bne.n	800391e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d06e      	beq.n	80039fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	d069      	beq.n	80039f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003924:	4b53      	ldr	r3, [pc, #332]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003930:	4b50      	ldr	r3, [pc, #320]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0ad      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003940:	4b4c      	ldr	r3, [pc, #304]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a4b      	ldr	r2, [pc, #300]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800394a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800394c:	f7fe ff18 	bl	8002780 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7fe ff14 	bl	8002780 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e09a      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003966:	4b43      	ldr	r3, [pc, #268]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003972:	4b40      	ldr	r3, [pc, #256]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	4b40      	ldr	r3, [pc, #256]	@ (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003978:	4013      	ands	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003982:	3a01      	subs	r2, #1
 8003984:	0112      	lsls	r2, r2, #4
 8003986:	4311      	orrs	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800398c:	0212      	lsls	r2, r2, #8
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003994:	0852      	lsrs	r2, r2, #1
 8003996:	3a01      	subs	r2, #1
 8003998:	0552      	lsls	r2, r2, #21
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039a0:	0852      	lsrs	r2, r2, #1
 80039a2:	3a01      	subs	r2, #1
 80039a4:	0652      	lsls	r2, r2, #25
 80039a6:	4311      	orrs	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039ac:	0912      	lsrs	r2, r2, #4
 80039ae:	0452      	lsls	r2, r2, #17
 80039b0:	430a      	orrs	r2, r1
 80039b2:	4930      	ldr	r1, [pc, #192]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 80039ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039d0:	f7fe fed6 	bl	8002780 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fe fed2 	bl	8002780 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e058      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ea:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039f6:	e050      	b.n	8003a9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e04f      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d148      	bne.n	8003a9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a08:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a14:	4b17      	ldr	r3, [pc, #92]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a20:	f7fe feae 	bl	8002780 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fe feaa 	bl	8002780 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e030      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x734>
 8003a46:	e028      	b.n	8003a9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d023      	beq.n	8003a96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4e:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a08      	ldr	r2, [pc, #32]	@ (8003a74 <HAL_RCC_OscConfig+0x780>)
 8003a54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fe fe91 	bl	8002780 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a60:	e00c      	b.n	8003a7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fe fe8d 	bl	8002780 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d905      	bls.n	8003a7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e013      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
 8003a74:	40021000 	.word	0x40021000
 8003a78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7c:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <HAL_RCC_OscConfig+0x7b0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ec      	bne.n	8003a62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a88:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <HAL_RCC_OscConfig+0x7b0>)
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	4905      	ldr	r1, [pc, #20]	@ (8003aa4 <HAL_RCC_OscConfig+0x7b0>)
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <HAL_RCC_OscConfig+0x7b4>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	60cb      	str	r3, [r1, #12]
 8003a94:	e001      	b.n	8003a9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	feeefffc 	.word	0xfeeefffc

08003aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0e7      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b75      	ldr	r3, [pc, #468]	@ (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d910      	bls.n	8003af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b72      	ldr	r3, [pc, #456]	@ (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 0207 	bic.w	r2, r3, #7
 8003ad6:	4970      	ldr	r1, [pc, #448]	@ (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b6e      	ldr	r3, [pc, #440]	@ (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0cf      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d010      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	4b66      	ldr	r3, [pc, #408]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d908      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b63      	ldr	r3, [pc, #396]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4960      	ldr	r1, [pc, #384]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d04c      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b32:	4b5a      	ldr	r3, [pc, #360]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d121      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0a6      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4a:	4b54      	ldr	r3, [pc, #336]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d115      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e09a      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b62:	4b4e      	ldr	r3, [pc, #312]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e08e      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b72:	4b4a      	ldr	r3, [pc, #296]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e086      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b82:	4b46      	ldr	r3, [pc, #280]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 0203 	bic.w	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4943      	ldr	r1, [pc, #268]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b94:	f7fe fdf4 	bl	8002780 <HAL_GetTick>
 8003b98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9c:	f7fe fdf0 	bl	8002780 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e06e      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 020c 	and.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d1eb      	bne.n	8003b9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d010      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	4b31      	ldr	r3, [pc, #196]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d208      	bcs.n	8003bf2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	492b      	ldr	r1, [pc, #172]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf2:	4b29      	ldr	r3, [pc, #164]	@ (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d210      	bcs.n	8003c22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c00:	4b25      	ldr	r3, [pc, #148]	@ (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 0207 	bic.w	r2, r3, #7
 8003c08:	4923      	ldr	r1, [pc, #140]	@ (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c10:	4b21      	ldr	r3, [pc, #132]	@ (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e036      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4918      	ldr	r1, [pc, #96]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c4c:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4910      	ldr	r1, [pc, #64]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c60:	f000 f824 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c64:	4602      	mov	r2, r0
 8003c66:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	490b      	ldr	r1, [pc, #44]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c72:	5ccb      	ldrb	r3, [r1, r3]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7c:	4a09      	ldr	r2, [pc, #36]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c80:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1fc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fd2b 	bl	80026e0 <HAL_InitTick>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c8e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40022000 	.word	0x40022000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	08012264 	.word	0x08012264
 8003ca4:	20000200 	.word	0x20000200
 8003ca8:	20000204 	.word	0x20000204

08003cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	@ 0x24
 8003cb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cba:	4b3e      	ldr	r3, [pc, #248]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b0c      	cmp	r3, #12
 8003cd8:	d121      	bne.n	8003d1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d11e      	bne.n	8003d1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ce0:	4b34      	ldr	r3, [pc, #208]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d107      	bne.n	8003cfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cec:	4b31      	ldr	r3, [pc, #196]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	e005      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d08:	4a2b      	ldr	r2, [pc, #172]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10d      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d102      	bne.n	8003d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d24:	4b25      	ldr	r3, [pc, #148]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	e004      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d30:	4b23      	ldr	r3, [pc, #140]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	d134      	bne.n	8003da4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d003      	beq.n	8003d52 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d003      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0xac>
 8003d50:	e005      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d52:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d54:	617b      	str	r3, [r7, #20]
      break;
 8003d56:	e005      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d58:	4b19      	ldr	r3, [pc, #100]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d5a:	617b      	str	r3, [r7, #20]
      break;
 8003d5c:	e002      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	617b      	str	r3, [r7, #20]
      break;
 8003d62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d64:	4b13      	ldr	r3, [pc, #76]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	3301      	adds	r3, #1
 8003d70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d72:	4b10      	ldr	r3, [pc, #64]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	fb03 f202 	mul.w	r2, r3, r2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	0e5b      	lsrs	r3, r3, #25
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	3301      	adds	r3, #1
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003da4:	69bb      	ldr	r3, [r7, #24]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3724      	adds	r7, #36	@ 0x24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	0801227c 	.word	0x0801227c
 8003dbc:	00f42400 	.word	0x00f42400
 8003dc0:	007a1200 	.word	0x007a1200

08003dc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc8:	4b03      	ldr	r3, [pc, #12]	@ (8003dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dca:	681b      	ldr	r3, [r3, #0]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000200 	.word	0x20000200

08003ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003de0:	f7ff fff0 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4904      	ldr	r1, [pc, #16]	@ (8003e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	08012274 	.word	0x08012274

08003e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e0c:	f7ff ffda 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0adb      	lsrs	r3, r3, #11
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4904      	ldr	r1, [pc, #16]	@ (8003e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	08012274 	.word	0x08012274

08003e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e40:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e4c:	f7ff f9ee 	bl	800322c <HAL_PWREx_GetVoltageRange>
 8003e50:	6178      	str	r0, [r7, #20]
 8003e52:	e014      	b.n	8003e7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e54:	4b25      	ldr	r3, [pc, #148]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e58:	4a24      	ldr	r2, [pc, #144]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e60:	4b22      	ldr	r3, [pc, #136]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e6c:	f7ff f9de 	bl	800322c <HAL_PWREx_GetVoltageRange>
 8003e70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e72:	4b1e      	ldr	r3, [pc, #120]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e76:	4a1d      	ldr	r2, [pc, #116]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e84:	d10b      	bne.n	8003e9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b80      	cmp	r3, #128	@ 0x80
 8003e8a:	d919      	bls.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e90:	d902      	bls.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e92:	2302      	movs	r3, #2
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	e013      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e98:	2301      	movs	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	e010      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b80      	cmp	r3, #128	@ 0x80
 8003ea2:	d902      	bls.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	e00a      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b80      	cmp	r3, #128	@ 0x80
 8003eae:	d102      	bne.n	8003eb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e004      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b70      	cmp	r3, #112	@ 0x70
 8003eba:	d101      	bne.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 0207 	bic.w	r2, r3, #7
 8003ec8:	4909      	ldr	r1, [pc, #36]	@ (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ed0:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d001      	beq.n	8003ee2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40022000 	.word	0x40022000

08003ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003efc:	2300      	movs	r3, #0
 8003efe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f00:	2300      	movs	r3, #0
 8003f02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d041      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f14:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f18:	d02a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f1a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f1e:	d824      	bhi.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f24:	d008      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f2a:	d81e      	bhi.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f34:	d010      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f36:	e018      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f38:	4b86      	ldr	r3, [pc, #536]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4a85      	ldr	r2, [pc, #532]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f44:	e015      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fabb 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f56:	e00c      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3320      	adds	r3, #32
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fba6 	bl	80046b0 <RCCEx_PLLSAI2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f78:	4b76      	ldr	r3, [pc, #472]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f86:	4973      	ldr	r1, [pc, #460]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f8e:	e001      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d041      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fa4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fa8:	d02a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003faa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fae:	d824      	bhi.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fb4:	d008      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fba:	d81e      	bhi.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fc4:	d010      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fc6:	e018      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fc8:	4b62      	ldr	r3, [pc, #392]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a61      	ldr	r2, [pc, #388]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd4:	e015      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fa73 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fe6:	e00c      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3320      	adds	r3, #32
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fb5e 	bl	80046b0 <RCCEx_PLLSAI2_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ff8:	e003      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004002:	7cfb      	ldrb	r3, [r7, #19]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004008:	4b52      	ldr	r3, [pc, #328]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004016:	494f      	ldr	r1, [pc, #316]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800401e:	e001      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80a0 	beq.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004032:	2300      	movs	r3, #0
 8004034:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004036:	4b47      	ldr	r3, [pc, #284]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004046:	2300      	movs	r3, #0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00d      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404c:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004050:	4a40      	ldr	r2, [pc, #256]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004056:	6593      	str	r3, [r2, #88]	@ 0x58
 8004058:	4b3e      	ldr	r3, [pc, #248]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004064:	2301      	movs	r3, #1
 8004066:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004068:	4b3b      	ldr	r3, [pc, #236]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3a      	ldr	r2, [pc, #232]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800406e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004074:	f7fe fb84 	bl	8002780 <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800407a:	e009      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407c:	f7fe fb80 	bl	8002780 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d902      	bls.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	74fb      	strb	r3, [r7, #19]
        break;
 800408e:	e005      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004090:	4b31      	ldr	r3, [pc, #196]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ef      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d15c      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01f      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d019      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040c0:	4b24      	ldr	r3, [pc, #144]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040cc:	4b21      	ldr	r3, [pc, #132]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d2:	4a20      	ldr	r2, [pc, #128]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ec:	4a19      	ldr	r2, [pc, #100]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fe:	f7fe fb3f 	bl	8002780 <HAL_GetTick>
 8004102:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004104:	e00b      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004106:	f7fe fb3b 	bl	8002780 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004114:	4293      	cmp	r3, r2
 8004116:	d902      	bls.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	74fb      	strb	r3, [r7, #19]
            break;
 800411c:	e006      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ec      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004142:	4904      	ldr	r1, [pc, #16]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800414a:	e009      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	74bb      	strb	r3, [r7, #18]
 8004150:	e006      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004160:	7c7b      	ldrb	r3, [r7, #17]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d105      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004166:	4b9e      	ldr	r3, [pc, #632]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416a:	4a9d      	ldr	r2, [pc, #628]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004170:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800417e:	4b98      	ldr	r3, [pc, #608]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004184:	f023 0203 	bic.w	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	4994      	ldr	r1, [pc, #592]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a0:	4b8f      	ldr	r3, [pc, #572]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	f023 020c 	bic.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ae:	498c      	ldr	r1, [pc, #560]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c2:	4b87      	ldr	r3, [pc, #540]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	4983      	ldr	r1, [pc, #524]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041e4:	4b7e      	ldr	r3, [pc, #504]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	497b      	ldr	r1, [pc, #492]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004206:	4b76      	ldr	r3, [pc, #472]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004214:	4972      	ldr	r1, [pc, #456]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004228:	4b6d      	ldr	r3, [pc, #436]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004236:	496a      	ldr	r1, [pc, #424]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800424a:	4b65      	ldr	r3, [pc, #404]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004258:	4961      	ldr	r1, [pc, #388]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800426c:	4b5c      	ldr	r3, [pc, #368]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004272:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427a:	4959      	ldr	r1, [pc, #356]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800428e:	4b54      	ldr	r3, [pc, #336]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004294:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429c:	4950      	ldr	r1, [pc, #320]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042b0:	4b4b      	ldr	r3, [pc, #300]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042be:	4948      	ldr	r1, [pc, #288]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042d2:	4b43      	ldr	r3, [pc, #268]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e0:	493f      	ldr	r1, [pc, #252]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d028      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f4:	4b3a      	ldr	r3, [pc, #232]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004302:	4937      	ldr	r1, [pc, #220]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800430e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004312:	d106      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004314:	4b32      	ldr	r3, [pc, #200]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a31      	ldr	r2, [pc, #196]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800431e:	60d3      	str	r3, [r2, #12]
 8004320:	e011      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004326:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800432a:	d10c      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	2101      	movs	r1, #1
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f8c8 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d028      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004352:	4b23      	ldr	r3, [pc, #140]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004358:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004360:	491f      	ldr	r1, [pc, #124]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004370:	d106      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004372:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	4a1a      	ldr	r2, [pc, #104]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004378:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800437c:	60d3      	str	r3, [r2, #12]
 800437e:	e011      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004384:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004388:	d10c      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	2101      	movs	r1, #1
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f899 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439a:	7cfb      	ldrb	r3, [r7, #19]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043a0:	7cfb      	ldrb	r3, [r7, #19]
 80043a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d02b      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043be:	4908      	ldr	r1, [pc, #32]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043ce:	d109      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d0:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a02      	ldr	r2, [pc, #8]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043da:	60d3      	str	r3, [r2, #12]
 80043dc:	e014      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	2101      	movs	r1, #1
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 f867 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043fe:	7cfb      	ldrb	r3, [r7, #19]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d02f      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004414:	4b2b      	ldr	r3, [pc, #172]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004422:	4928      	ldr	r1, [pc, #160]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800442e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004432:	d10d      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	2102      	movs	r1, #2
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f844 	bl	80044c8 <RCCEx_PLLSAI1_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004444:	7cfb      	ldrb	r3, [r7, #19]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d014      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800444a:	7cfb      	ldrb	r3, [r7, #19]
 800444c:	74bb      	strb	r3, [r7, #18]
 800444e:	e011      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004454:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004458:	d10c      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3320      	adds	r3, #32
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f000 f925 	bl	80046b0 <RCCEx_PLLSAI2_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004480:	4b10      	ldr	r3, [pc, #64]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004486:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800448e:	490d      	ldr	r1, [pc, #52]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a2:	4b08      	ldr	r3, [pc, #32]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044b2:	4904      	ldr	r1, [pc, #16]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000

080044c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044d6:	4b75      	ldr	r3, [pc, #468]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d018      	beq.n	8004514 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044e2:	4b72      	ldr	r3, [pc, #456]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0203 	and.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d10d      	bne.n	800450e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
       ||
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044fa:	4b6c      	ldr	r3, [pc, #432]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
       ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d047      	beq.n	800459e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	73fb      	strb	r3, [r7, #15]
 8004512:	e044      	b.n	800459e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d018      	beq.n	800454e <RCCEx_PLLSAI1_Config+0x86>
 800451c:	2b03      	cmp	r3, #3
 800451e:	d825      	bhi.n	800456c <RCCEx_PLLSAI1_Config+0xa4>
 8004520:	2b01      	cmp	r3, #1
 8004522:	d002      	beq.n	800452a <RCCEx_PLLSAI1_Config+0x62>
 8004524:	2b02      	cmp	r3, #2
 8004526:	d009      	beq.n	800453c <RCCEx_PLLSAI1_Config+0x74>
 8004528:	e020      	b.n	800456c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800452a:	4b60      	ldr	r3, [pc, #384]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d11d      	bne.n	8004572 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800453a:	e01a      	b.n	8004572 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800453c:	4b5b      	ldr	r3, [pc, #364]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d116      	bne.n	8004576 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800454c:	e013      	b.n	8004576 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800454e:	4b57      	ldr	r3, [pc, #348]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10f      	bne.n	800457a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800455a:	4b54      	ldr	r3, [pc, #336]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800456a:	e006      	b.n	800457a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      break;
 8004570:	e004      	b.n	800457c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004572:	bf00      	nop
 8004574:	e002      	b.n	800457c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004576:	bf00      	nop
 8004578:	e000      	b.n	800457c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800457a:	bf00      	nop
    }

    if(status == HAL_OK)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10d      	bne.n	800459e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004582:	4b4a      	ldr	r3, [pc, #296]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6819      	ldr	r1, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	3b01      	subs	r3, #1
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	430b      	orrs	r3, r1
 8004598:	4944      	ldr	r1, [pc, #272]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800459a:	4313      	orrs	r3, r2
 800459c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d17d      	bne.n	80046a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045a4:	4b41      	ldr	r3, [pc, #260]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a40      	ldr	r2, [pc, #256]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80045aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b0:	f7fe f8e6 	bl	8002780 <HAL_GetTick>
 80045b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045b6:	e009      	b.n	80045cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045b8:	f7fe f8e2 	bl	8002780 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d902      	bls.n	80045cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	73fb      	strb	r3, [r7, #15]
        break;
 80045ca:	e005      	b.n	80045d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045cc:	4b37      	ldr	r3, [pc, #220]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ef      	bne.n	80045b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d160      	bne.n	80046a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d111      	bne.n	8004608 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045e4:	4b31      	ldr	r3, [pc, #196]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6892      	ldr	r2, [r2, #8]
 80045f4:	0211      	lsls	r1, r2, #8
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68d2      	ldr	r2, [r2, #12]
 80045fa:	0912      	lsrs	r2, r2, #4
 80045fc:	0452      	lsls	r2, r2, #17
 80045fe:	430a      	orrs	r2, r1
 8004600:	492a      	ldr	r1, [pc, #168]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004602:	4313      	orrs	r3, r2
 8004604:	610b      	str	r3, [r1, #16]
 8004606:	e027      	b.n	8004658 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d112      	bne.n	8004634 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800460e:	4b27      	ldr	r3, [pc, #156]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004616:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6892      	ldr	r2, [r2, #8]
 800461e:	0211      	lsls	r1, r2, #8
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6912      	ldr	r2, [r2, #16]
 8004624:	0852      	lsrs	r2, r2, #1
 8004626:	3a01      	subs	r2, #1
 8004628:	0552      	lsls	r2, r2, #21
 800462a:	430a      	orrs	r2, r1
 800462c:	491f      	ldr	r1, [pc, #124]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	610b      	str	r3, [r1, #16]
 8004632:	e011      	b.n	8004658 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004634:	4b1d      	ldr	r3, [pc, #116]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800463c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6892      	ldr	r2, [r2, #8]
 8004644:	0211      	lsls	r1, r2, #8
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6952      	ldr	r2, [r2, #20]
 800464a:	0852      	lsrs	r2, r2, #1
 800464c:	3a01      	subs	r2, #1
 800464e:	0652      	lsls	r2, r2, #25
 8004650:	430a      	orrs	r2, r1
 8004652:	4916      	ldr	r1, [pc, #88]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004658:	4b14      	ldr	r3, [pc, #80]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800465e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004662:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fe f88c 	bl	8002780 <HAL_GetTick>
 8004668:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800466a:	e009      	b.n	8004680 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800466c:	f7fe f888 	bl	8002780 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d902      	bls.n	8004680 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	73fb      	strb	r3, [r7, #15]
          break;
 800467e:	e005      	b.n	800468c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004680:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ef      	beq.n	800466c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004692:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	4904      	ldr	r1, [pc, #16]	@ (80046ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800469c:	4313      	orrs	r3, r2
 800469e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000

080046b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046be:	4b6a      	ldr	r3, [pc, #424]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d018      	beq.n	80046fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046ca:	4b67      	ldr	r3, [pc, #412]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0203 	and.w	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d10d      	bne.n	80046f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
       ||
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046e2:	4b61      	ldr	r3, [pc, #388]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
       ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d047      	beq.n	8004786 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
 80046fa:	e044      	b.n	8004786 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d018      	beq.n	8004736 <RCCEx_PLLSAI2_Config+0x86>
 8004704:	2b03      	cmp	r3, #3
 8004706:	d825      	bhi.n	8004754 <RCCEx_PLLSAI2_Config+0xa4>
 8004708:	2b01      	cmp	r3, #1
 800470a:	d002      	beq.n	8004712 <RCCEx_PLLSAI2_Config+0x62>
 800470c:	2b02      	cmp	r3, #2
 800470e:	d009      	beq.n	8004724 <RCCEx_PLLSAI2_Config+0x74>
 8004710:	e020      	b.n	8004754 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004712:	4b55      	ldr	r3, [pc, #340]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d11d      	bne.n	800475a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004722:	e01a      	b.n	800475a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004724:	4b50      	ldr	r3, [pc, #320]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472c:	2b00      	cmp	r3, #0
 800472e:	d116      	bne.n	800475e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004734:	e013      	b.n	800475e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004736:	4b4c      	ldr	r3, [pc, #304]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004742:	4b49      	ldr	r3, [pc, #292]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004752:	e006      	b.n	8004762 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      break;
 8004758:	e004      	b.n	8004764 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800475a:	bf00      	nop
 800475c:	e002      	b.n	8004764 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004762:	bf00      	nop
    }

    if(status == HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10d      	bne.n	8004786 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800476a:	4b3f      	ldr	r3, [pc, #252]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	430b      	orrs	r3, r1
 8004780:	4939      	ldr	r1, [pc, #228]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	4313      	orrs	r3, r2
 8004784:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d167      	bne.n	800485c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800478c:	4b36      	ldr	r3, [pc, #216]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a35      	ldr	r2, [pc, #212]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004798:	f7fd fff2 	bl	8002780 <HAL_GetTick>
 800479c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800479e:	e009      	b.n	80047b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047a0:	f7fd ffee 	bl	8002780 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d902      	bls.n	80047b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	73fb      	strb	r3, [r7, #15]
        break;
 80047b2:	e005      	b.n	80047c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1ef      	bne.n	80047a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d14a      	bne.n	800485c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d111      	bne.n	80047f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047cc:	4b26      	ldr	r3, [pc, #152]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6892      	ldr	r2, [r2, #8]
 80047dc:	0211      	lsls	r1, r2, #8
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68d2      	ldr	r2, [r2, #12]
 80047e2:	0912      	lsrs	r2, r2, #4
 80047e4:	0452      	lsls	r2, r2, #17
 80047e6:	430a      	orrs	r2, r1
 80047e8:	491f      	ldr	r1, [pc, #124]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	614b      	str	r3, [r1, #20]
 80047ee:	e011      	b.n	8004814 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6892      	ldr	r2, [r2, #8]
 8004800:	0211      	lsls	r1, r2, #8
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6912      	ldr	r2, [r2, #16]
 8004806:	0852      	lsrs	r2, r2, #1
 8004808:	3a01      	subs	r2, #1
 800480a:	0652      	lsls	r2, r2, #25
 800480c:	430a      	orrs	r2, r1
 800480e:	4916      	ldr	r1, [pc, #88]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004810:	4313      	orrs	r3, r2
 8004812:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004814:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a13      	ldr	r2, [pc, #76]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800481e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fd ffae 	bl	8002780 <HAL_GetTick>
 8004824:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004826:	e009      	b.n	800483c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004828:	f7fd ffaa 	bl	8002780 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d902      	bls.n	800483c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	73fb      	strb	r3, [r7, #15]
          break;
 800483a:	e005      	b.n	8004848 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800483c:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ef      	beq.n	8004828 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800484e:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	4904      	ldr	r1, [pc, #16]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004858:	4313      	orrs	r3, r2
 800485a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000

0800486c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e095      	b.n	80049aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d108      	bne.n	8004898 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800488e:	d009      	beq.n	80048a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	61da      	str	r2, [r3, #28]
 8004896:	e005      	b.n	80048a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fd fc74 	bl	80021ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048e4:	d902      	bls.n	80048ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e002      	b.n	80048f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80048fa:	d007      	beq.n	800490c <HAL_SPI_Init+0xa0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004904:	d002      	beq.n	800490c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494e:	ea42 0103 	orr.w	r1, r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004956:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	0c1b      	lsrs	r3, r3, #16
 8004968:	f003 0204 	and.w	r2, r3, #4
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004988:	ea42 0103 	orr.w	r1, r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b088      	sub	sp, #32
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	603b      	str	r3, [r7, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049c2:	f7fd fedd 	bl	8002780 <HAL_GetTick>
 80049c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d001      	beq.n	80049dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
 80049da:	e15c      	b.n	8004c96 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_SPI_Transmit+0x36>
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e154      	b.n	8004c96 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_SPI_Transmit+0x48>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e14d      	b.n	8004c96 <HAL_SPI_Transmit+0x2e4>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2203      	movs	r2, #3
 8004a06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	88fa      	ldrh	r2, [r7, #6]
 8004a1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a4c:	d10f      	bne.n	8004a6e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b40      	cmp	r3, #64	@ 0x40
 8004a7a:	d007      	beq.n	8004a8c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a94:	d952      	bls.n	8004b3c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <HAL_SPI_Transmit+0xf2>
 8004a9e:	8b7b      	ldrh	r3, [r7, #26]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d145      	bne.n	8004b30 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ac8:	e032      	b.n	8004b30 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d112      	bne.n	8004afe <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	881a      	ldrh	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	1c9a      	adds	r2, r3, #2
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004afc:	e018      	b.n	8004b30 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004afe:	f7fd fe3f 	bl	8002780 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d803      	bhi.n	8004b16 <HAL_SPI_Transmit+0x164>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d102      	bne.n	8004b1c <HAL_SPI_Transmit+0x16a>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0b2      	b.n	8004c96 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1c7      	bne.n	8004aca <HAL_SPI_Transmit+0x118>
 8004b3a:	e083      	b.n	8004c44 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_SPI_Transmit+0x198>
 8004b44:	8b7b      	ldrh	r3, [r7, #26]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d177      	bne.n	8004c3a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d912      	bls.n	8004b7a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b58:	881a      	ldrh	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	1c9a      	adds	r2, r3, #2
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b02      	subs	r3, #2
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b78:	e05f      	b.n	8004c3a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ba0:	e04b      	b.n	8004c3a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d12b      	bne.n	8004c08 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d912      	bls.n	8004be0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b02      	subs	r3, #2
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bde:	e02c      	b.n	8004c3a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c06:	e018      	b.n	8004c3a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c08:	f7fd fdba 	bl	8002780 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d803      	bhi.n	8004c20 <HAL_SPI_Transmit+0x26e>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1e:	d102      	bne.n	8004c26 <HAL_SPI_Transmit+0x274>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e02d      	b.n	8004c96 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1ae      	bne.n	8004ba2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fbd3 	bl	80053f4 <SPI_EndRxTxTransaction>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10a      	bne.n	8004c78 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004c94:	2300      	movs	r3, #0
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d001      	beq.n	8004cbe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e0d4      	b.n	8004e68 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_SPI_Transmit_DMA+0x2a>
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0cc      	b.n	8004e68 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_SPI_Transmit_DMA+0x3c>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e0c5      	b.n	8004e68 <HAL_SPI_Transmit_DMA+0x1c8>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	88fa      	ldrh	r2, [r7, #6]
 8004cfc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	88fa      	ldrh	r2, [r7, #6]
 8004d02:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d2e:	d10f      	bne.n	8004d50 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	4a46      	ldr	r2, [pc, #280]	@ (8004e70 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5c:	4a45      	ldr	r2, [pc, #276]	@ (8004e74 <HAL_SPI_Transmit_DMA+0x1d4>)
 8004d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d64:	4a44      	ldr	r2, [pc, #272]	@ (8004e78 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004d66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d7e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d88:	d82d      	bhi.n	8004de6 <HAL_SPI_Transmit_DMA+0x146>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d94:	d127      	bne.n	8004de6 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10f      	bne.n	8004dc4 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004db2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	085b      	lsrs	r3, r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dc2:	e010      	b.n	8004de6 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dd2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3301      	adds	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dee:	4619      	mov	r1, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dfc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004dfe:	f7fd fe95 	bl	8002b2c <HAL_DMA_Start_IT>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00b      	beq.n	8004e20 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0c:	f043 0210 	orr.w	r2, r3, #16
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e023      	b.n	8004e68 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2a:	2b40      	cmp	r3, #64	@ 0x40
 8004e2c:	d007      	beq.n	8004e3e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e3c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0220 	orr.w	r2, r2, #32
 8004e54:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0202 	orr.w	r2, r2, #2
 8004e64:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	08005133 	.word	0x08005133
 8004e74:	0800508d 	.word	0x0800508d
 8004e78:	0800514f 	.word	0x0800514f

08004e7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10e      	bne.n	8004ebc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d009      	beq.n	8004ebc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d004      	beq.n	8004ebc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
    return;
 8004eba:	e0ce      	b.n	800505a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_SPI_IRQHandler+0x5e>
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
    return;
 8004ed8:	e0bf      	b.n	800505a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <HAL_SPI_IRQHandler+0x7e>
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80b0 	beq.w	800505a <HAL_SPI_IRQHandler+0x1de>
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80aa 	beq.w	800505a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d023      	beq.n	8004f58 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d011      	beq.n	8004f40 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f20:	f043 0204 	orr.w	r2, r3, #4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	e00b      	b.n	8004f58 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	693b      	ldr	r3, [r7, #16]
        return;
 8004f56:	e080      	b.n	800505a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d014      	beq.n	8004f8c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f66:	f043 0201 	orr.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00c      	beq.n	8004fb0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9a:	f043 0208 	orr.w	r2, r3, #8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d04f      	beq.n	8005058 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fc6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d104      	bne.n	8004fe4 <HAL_SPI_IRQHandler+0x168>
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d034      	beq.n	800504e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0203 	bic.w	r2, r2, #3
 8004ff2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d011      	beq.n	8005020 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005000:	4a17      	ldr	r2, [pc, #92]	@ (8005060 <HAL_SPI_IRQHandler+0x1e4>)
 8005002:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005008:	4618      	mov	r0, r3
 800500a:	f7fd fe2d 	bl	8002c68 <HAL_DMA_Abort_IT>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005018:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005024:	2b00      	cmp	r3, #0
 8005026:	d016      	beq.n	8005056 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502c:	4a0c      	ldr	r2, [pc, #48]	@ (8005060 <HAL_SPI_IRQHandler+0x1e4>)
 800502e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005034:	4618      	mov	r0, r3
 8005036:	f7fd fe17 	bl	8002c68 <HAL_DMA_Abort_IT>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005044:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800504c:	e003      	b.n	8005056 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f812 	bl	8005078 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005054:	e000      	b.n	8005058 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005056:	bf00      	nop
    return;
 8005058:	bf00      	nop
  }
}
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	0800518f 	.word	0x0800518f

08005064 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800509a:	f7fd fb71 	bl	8002780 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d03b      	beq.n	8005126 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0220 	bic.w	r2, r2, #32
 80050bc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0202 	bic.w	r2, r2, #2
 80050cc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	2164      	movs	r1, #100	@ 0x64
 80050d2:	6978      	ldr	r0, [r7, #20]
 80050d4:	f000 f98e 	bl	80053f4 <SPI_EndRxTxTransaction>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e2:	f043 0220 	orr.w	r2, r3, #32
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2200      	movs	r2, #0
 800510c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800511e:	6978      	ldr	r0, [r7, #20]
 8005120:	f7ff ffaa 	bl	8005078 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005124:	e002      	b.n	800512c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	f7fc fefe 	bl	8001f28 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff ff8f 	bl	8005064 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0203 	bic.w	r2, r2, #3
 800516a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005170:	f043 0210 	orr.w	r2, r3, #16
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff ff79 	bl	8005078 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7ff ff64 	bl	8005078 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c8:	f7fd fada 	bl	8002780 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d8:	f7fd fad2 	bl	8002780 <HAL_GetTick>
 80051dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051de:	4b39      	ldr	r3, [pc, #228]	@ (80052c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	015b      	lsls	r3, r3, #5
 80051e4:	0d1b      	lsrs	r3, r3, #20
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ee:	e054      	b.n	800529a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d050      	beq.n	800529a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f8:	f7fd fac2 	bl	8002780 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	429a      	cmp	r2, r3
 8005206:	d902      	bls.n	800520e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d13d      	bne.n	800528a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800521c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005226:	d111      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005230:	d004      	beq.n	800523c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523a:	d107      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800524a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005254:	d10f      	bne.n	8005276 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e017      	b.n	80052ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3b01      	subs	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	bf0c      	ite	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	2300      	movne	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d19b      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000200 	.word	0x20000200

080052c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	@ 0x28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052da:	f7fd fa51 	bl	8002780 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	4413      	add	r3, r2
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80052ea:	f7fd fa49 	bl	8002780 <HAL_GetTick>
 80052ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052f8:	4b3d      	ldr	r3, [pc, #244]	@ (80053f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	00da      	lsls	r2, r3, #3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	0d1b      	lsrs	r3, r3, #20
 8005308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005310:	e060      	b.n	80053d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005318:	d107      	bne.n	800532a <SPI_WaitFifoStateUntilTimeout+0x62>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005328:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d050      	beq.n	80053d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005332:	f7fd fa25 	bl	8002780 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800533e:	429a      	cmp	r2, r3
 8005340:	d902      	bls.n	8005348 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	2b00      	cmp	r3, #0
 8005346:	d13d      	bne.n	80053c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005356:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005360:	d111      	bne.n	8005386 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800536a:	d004      	beq.n	8005376 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005374:	d107      	bne.n	8005386 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005384:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538e:	d10f      	bne.n	80053b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e010      	b.n	80053e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4013      	ands	r3, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d196      	bne.n	8005312 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3728      	adds	r7, #40	@ 0x28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000200 	.word	0x20000200

080053f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff ff5b 	bl	80052c8 <SPI_WaitFifoStateUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e027      	b.n	8005478 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2200      	movs	r2, #0
 8005430:	2180      	movs	r1, #128	@ 0x80
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fec0 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e014      	b.n	8005478 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff ff34 	bl	80052c8 <SPI_WaitFifoStateUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800546a:	f043 0220 	orr.w	r2, r3, #32
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e000      	b.n	8005478 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e040      	b.n	8005514 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fd f876 	bl	8002594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2224      	movs	r2, #36	@ 0x24
 80054ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fea6 	bl	8006218 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fbeb 	bl	8005ca8 <UART_SetConfig>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e01b      	b.n	8005514 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 ff25 	bl	800635c <UART_CheckIdleState>
 8005512:	4603      	mov	r3, r0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800551c:	b480      	push	{r7}
 800551e:	b08b      	sub	sp, #44	@ 0x2c
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800552e:	2b20      	cmp	r3, #32
 8005530:	d147      	bne.n	80055c2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <HAL_UART_Transmit_IT+0x22>
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e040      	b.n	80055c4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	88fa      	ldrh	r2, [r7, #6]
 800554c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2221      	movs	r2, #33	@ 0x21
 800556a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005574:	d107      	bne.n	8005586 <HAL_UART_Transmit_IT+0x6a>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d103      	bne.n	8005586 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a13      	ldr	r2, [pc, #76]	@ (80055d0 <HAL_UART_Transmit_IT+0xb4>)
 8005582:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005584:	e002      	b.n	800558c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4a12      	ldr	r2, [pc, #72]	@ (80055d4 <HAL_UART_Transmit_IT+0xb8>)
 800558a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	613b      	str	r3, [r7, #16]
   return(result);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	69f9      	ldr	r1, [r7, #28]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e6      	bne.n	800558c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
  }
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	372c      	adds	r7, #44	@ 0x2c
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	080068bf 	.word	0x080068bf
 80055d4:	08006809 	.word	0x08006809

080055d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	@ 0x28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d137      	bne.n	8005660 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_UART_Receive_IT+0x24>
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e030      	b.n	8005662 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a18      	ldr	r2, [pc, #96]	@ (800566c <HAL_UART_Receive_IT+0x94>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d01f      	beq.n	8005650 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d018      	beq.n	8005650 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	613b      	str	r3, [r7, #16]
   return(result);
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	623b      	str	r3, [r7, #32]
 800563e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	69f9      	ldr	r1, [r7, #28]
 8005642:	6a3a      	ldr	r2, [r7, #32]
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	61bb      	str	r3, [r7, #24]
   return(result);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e6      	bne.n	800561e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	461a      	mov	r2, r3
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 ff96 	bl	8006588 <UART_Start_Receive_IT>
 800565c:	4603      	mov	r3, r0
 800565e:	e000      	b.n	8005662 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3728      	adds	r7, #40	@ 0x28
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40008000 	.word	0x40008000

08005670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0ba      	sub	sp, #232	@ 0xe8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005696:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800569a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800569e:	4013      	ands	r3, r2
 80056a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80056a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d115      	bne.n	80056d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00f      	beq.n	80056d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056bc:	f003 0320 	and.w	r3, r3, #32
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d009      	beq.n	80056d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 82ca 	beq.w	8005c62 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
      }
      return;
 80056d6:	e2c4      	b.n	8005c62 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80056d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8117 	beq.w	8005910 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80056f2:	4b85      	ldr	r3, [pc, #532]	@ (8005908 <HAL_UART_IRQHandler+0x298>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 810a 	beq.w	8005910 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d011      	beq.n	800572c <HAL_UART_IRQHandler+0xbc>
 8005708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800570c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d011      	beq.n	800575c <HAL_UART_IRQHandler+0xec>
 8005738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2202      	movs	r2, #2
 800574a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005752:	f043 0204 	orr.w	r2, r3, #4
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d011      	beq.n	800578c <HAL_UART_IRQHandler+0x11c>
 8005768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2204      	movs	r2, #4
 800577a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005782:	f043 0202 	orr.w	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800578c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d017      	beq.n	80057c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2208      	movs	r2, #8
 80057b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057be:	f043 0208 	orr.w	r2, r3, #8
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d012      	beq.n	80057fa <HAL_UART_IRQHandler+0x18a>
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00c      	beq.n	80057fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8230 	beq.w	8005c66 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00d      	beq.n	800582e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005834:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005842:	2b40      	cmp	r3, #64	@ 0x40
 8005844:	d005      	beq.n	8005852 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800584a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800584e:	2b00      	cmp	r3, #0
 8005850:	d04f      	beq.n	80058f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 ff5e 	bl	8006714 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	2b40      	cmp	r3, #64	@ 0x40
 8005864:	d141      	bne.n	80058ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800587c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3308      	adds	r3, #8
 800588e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005892:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800589e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1d9      	bne.n	8005866 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d013      	beq.n	80058e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058be:	4a13      	ldr	r2, [pc, #76]	@ (800590c <HAL_UART_IRQHandler+0x29c>)
 80058c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fd f9ce 	bl	8002c68 <HAL_DMA_Abort_IT>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058dc:	4610      	mov	r0, r2
 80058de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	e00f      	b.n	8005902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f9ca 	bl	8005c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	e00b      	b.n	8005902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f9c6 	bl	8005c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	e007      	b.n	8005902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9c2 	bl	8005c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005900:	e1b1      	b.n	8005c66 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005902:	bf00      	nop
    return;
 8005904:	e1af      	b.n	8005c66 <HAL_UART_IRQHandler+0x5f6>
 8005906:	bf00      	nop
 8005908:	04000120 	.word	0x04000120
 800590c:	080067dd 	.word	0x080067dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 816a 	bne.w	8005bee <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8163 	beq.w	8005bee <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 815c 	beq.w	8005bee <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2210      	movs	r2, #16
 800593c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005948:	2b40      	cmp	r3, #64	@ 0x40
 800594a:	f040 80d4 	bne.w	8005af6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800595a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80ad 	beq.w	8005abe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800596a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800596e:	429a      	cmp	r2, r3
 8005970:	f080 80a5 	bcs.w	8005abe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800597a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	f040 8086 	bne.w	8005a9c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1da      	bne.n	8005990 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e1      	bne.n	80059da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3308      	adds	r3, #8
 8005a36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e3      	bne.n	8005a16 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a6c:	f023 0310 	bic.w	r3, r3, #16
 8005a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e4      	bne.n	8005a5c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fd f8a8 	bl	8002bec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8ea 	bl	8005c90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005abc:	e0d5      	b.n	8005c6a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ac4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	f040 80ce 	bne.w	8005c6a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	f040 80c5 	bne.w	8005c6a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f8ce 	bl	8005c90 <HAL_UARTEx_RxEventCallback>
      return;
 8005af4:	e0b9      	b.n	8005c6a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80ab 	beq.w	8005c6e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80a6 	beq.w	8005c6e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e4      	bne.n	8005b22 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	623b      	str	r3, [r7, #32]
   return(result);
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f023 0301 	bic.w	r3, r3, #1
 8005b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3308      	adds	r3, #8
 8005b78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e3      	bne.n	8005b58 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 0310 	bic.w	r3, r3, #16
 8005bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	69b9      	ldr	r1, [r7, #24]
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e4      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005be0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f852 	bl	8005c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bec:	e03f      	b.n	8005c6e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00e      	beq.n	8005c18 <HAL_UART_IRQHandler+0x5a8>
 8005bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d008      	beq.n	8005c18 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 f89b 	bl	8006d4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c16:	e02d      	b.n	8005c74 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00e      	beq.n	8005c42 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01c      	beq.n	8005c72 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	4798      	blx	r3
    }
    return;
 8005c40:	e017      	b.n	8005c72 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d012      	beq.n	8005c74 <HAL_UART_IRQHandler+0x604>
 8005c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00c      	beq.n	8005c74 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fe8f 	bl	800697e <UART_EndTransmit_IT>
    return;
 8005c60:	e008      	b.n	8005c74 <HAL_UART_IRQHandler+0x604>
      return;
 8005c62:	bf00      	nop
 8005c64:	e006      	b.n	8005c74 <HAL_UART_IRQHandler+0x604>
    return;
 8005c66:	bf00      	nop
 8005c68:	e004      	b.n	8005c74 <HAL_UART_IRQHandler+0x604>
      return;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <HAL_UART_IRQHandler+0x604>
      return;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <HAL_UART_IRQHandler+0x604>
    return;
 8005c72:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c74:	37e8      	adds	r7, #232	@ 0xe8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop

08005c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cac:	b08a      	sub	sp, #40	@ 0x28
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4ba4      	ldr	r3, [pc, #656]	@ (8005f68 <UART_SetConfig+0x2c0>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a99      	ldr	r2, [pc, #612]	@ (8005f6c <UART_SetConfig+0x2c4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d10:	4313      	orrs	r3, r2
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d24:	430a      	orrs	r2, r1
 8005d26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a90      	ldr	r2, [pc, #576]	@ (8005f70 <UART_SetConfig+0x2c8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d126      	bne.n	8005d80 <UART_SetConfig+0xd8>
 8005d32:	4b90      	ldr	r3, [pc, #576]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d81b      	bhi.n	8005d78 <UART_SetConfig+0xd0>
 8005d40:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <UART_SetConfig+0xa0>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d59 	.word	0x08005d59
 8005d4c:	08005d69 	.word	0x08005d69
 8005d50:	08005d61 	.word	0x08005d61
 8005d54:	08005d71 	.word	0x08005d71
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d5e:	e116      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005d60:	2302      	movs	r3, #2
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d66:	e112      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d6e:	e10e      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d76:	e10a      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d7e:	e106      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a7c      	ldr	r2, [pc, #496]	@ (8005f78 <UART_SetConfig+0x2d0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d138      	bne.n	8005dfc <UART_SetConfig+0x154>
 8005d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b0c      	cmp	r3, #12
 8005d96:	d82d      	bhi.n	8005df4 <UART_SetConfig+0x14c>
 8005d98:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <UART_SetConfig+0xf8>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005dd5 	.word	0x08005dd5
 8005da4:	08005df5 	.word	0x08005df5
 8005da8:	08005df5 	.word	0x08005df5
 8005dac:	08005df5 	.word	0x08005df5
 8005db0:	08005de5 	.word	0x08005de5
 8005db4:	08005df5 	.word	0x08005df5
 8005db8:	08005df5 	.word	0x08005df5
 8005dbc:	08005df5 	.word	0x08005df5
 8005dc0:	08005ddd 	.word	0x08005ddd
 8005dc4:	08005df5 	.word	0x08005df5
 8005dc8:	08005df5 	.word	0x08005df5
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005ded 	.word	0x08005ded
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dda:	e0d8      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de2:	e0d4      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005de4:	2304      	movs	r3, #4
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dea:	e0d0      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005dec:	2308      	movs	r3, #8
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df2:	e0cc      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005df4:	2310      	movs	r3, #16
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfa:	e0c8      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a5e      	ldr	r2, [pc, #376]	@ (8005f7c <UART_SetConfig+0x2d4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d125      	bne.n	8005e52 <UART_SetConfig+0x1aa>
 8005e06:	4b5b      	ldr	r3, [pc, #364]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e10:	2b30      	cmp	r3, #48	@ 0x30
 8005e12:	d016      	beq.n	8005e42 <UART_SetConfig+0x19a>
 8005e14:	2b30      	cmp	r3, #48	@ 0x30
 8005e16:	d818      	bhi.n	8005e4a <UART_SetConfig+0x1a2>
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d00a      	beq.n	8005e32 <UART_SetConfig+0x18a>
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d814      	bhi.n	8005e4a <UART_SetConfig+0x1a2>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <UART_SetConfig+0x182>
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d008      	beq.n	8005e3a <UART_SetConfig+0x192>
 8005e28:	e00f      	b.n	8005e4a <UART_SetConfig+0x1a2>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e30:	e0ad      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e32:	2302      	movs	r3, #2
 8005e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e38:	e0a9      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e3a:	2304      	movs	r3, #4
 8005e3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e40:	e0a5      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e42:	2308      	movs	r3, #8
 8005e44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e48:	e0a1      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e4a:	2310      	movs	r3, #16
 8005e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e50:	e09d      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a4a      	ldr	r2, [pc, #296]	@ (8005f80 <UART_SetConfig+0x2d8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d125      	bne.n	8005ea8 <UART_SetConfig+0x200>
 8005e5c:	4b45      	ldr	r3, [pc, #276]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e68:	d016      	beq.n	8005e98 <UART_SetConfig+0x1f0>
 8005e6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e6c:	d818      	bhi.n	8005ea0 <UART_SetConfig+0x1f8>
 8005e6e:	2b80      	cmp	r3, #128	@ 0x80
 8005e70:	d00a      	beq.n	8005e88 <UART_SetConfig+0x1e0>
 8005e72:	2b80      	cmp	r3, #128	@ 0x80
 8005e74:	d814      	bhi.n	8005ea0 <UART_SetConfig+0x1f8>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <UART_SetConfig+0x1d8>
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d008      	beq.n	8005e90 <UART_SetConfig+0x1e8>
 8005e7e:	e00f      	b.n	8005ea0 <UART_SetConfig+0x1f8>
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e082      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e07e      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e07a      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e076      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e072      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a35      	ldr	r2, [pc, #212]	@ (8005f84 <UART_SetConfig+0x2dc>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d12a      	bne.n	8005f08 <UART_SetConfig+0x260>
 8005eb2:	4b30      	ldr	r3, [pc, #192]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec0:	d01a      	beq.n	8005ef8 <UART_SetConfig+0x250>
 8005ec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec6:	d81b      	bhi.n	8005f00 <UART_SetConfig+0x258>
 8005ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ecc:	d00c      	beq.n	8005ee8 <UART_SetConfig+0x240>
 8005ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed2:	d815      	bhi.n	8005f00 <UART_SetConfig+0x258>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <UART_SetConfig+0x238>
 8005ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005edc:	d008      	beq.n	8005ef0 <UART_SetConfig+0x248>
 8005ede:	e00f      	b.n	8005f00 <UART_SetConfig+0x258>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee6:	e052      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eee:	e04e      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef6:	e04a      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efe:	e046      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f06:	e042      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a17      	ldr	r2, [pc, #92]	@ (8005f6c <UART_SetConfig+0x2c4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d13a      	bne.n	8005f88 <UART_SetConfig+0x2e0>
 8005f12:	4b18      	ldr	r3, [pc, #96]	@ (8005f74 <UART_SetConfig+0x2cc>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f20:	d01a      	beq.n	8005f58 <UART_SetConfig+0x2b0>
 8005f22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f26:	d81b      	bhi.n	8005f60 <UART_SetConfig+0x2b8>
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f2c:	d00c      	beq.n	8005f48 <UART_SetConfig+0x2a0>
 8005f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f32:	d815      	bhi.n	8005f60 <UART_SetConfig+0x2b8>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <UART_SetConfig+0x298>
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3c:	d008      	beq.n	8005f50 <UART_SetConfig+0x2a8>
 8005f3e:	e00f      	b.n	8005f60 <UART_SetConfig+0x2b8>
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f46:	e022      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4e:	e01e      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f50:	2304      	movs	r3, #4
 8005f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f56:	e01a      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5e:	e016      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f66:	e012      	b.n	8005f8e <UART_SetConfig+0x2e6>
 8005f68:	efff69f3 	.word	0xefff69f3
 8005f6c:	40008000 	.word	0x40008000
 8005f70:	40013800 	.word	0x40013800
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40004400 	.word	0x40004400
 8005f7c:	40004800 	.word	0x40004800
 8005f80:	40004c00 	.word	0x40004c00
 8005f84:	40005000 	.word	0x40005000
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a9f      	ldr	r2, [pc, #636]	@ (8006210 <UART_SetConfig+0x568>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d17a      	bne.n	800608e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d824      	bhi.n	8005fea <UART_SetConfig+0x342>
 8005fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x300>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005feb 	.word	0x08005feb
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005feb 	.word	0x08005feb
 8005fb8:	08005fdb 	.word	0x08005fdb
 8005fbc:	08005feb 	.word	0x08005feb
 8005fc0:	08005feb 	.word	0x08005feb
 8005fc4:	08005feb 	.word	0x08005feb
 8005fc8:	08005fe3 	.word	0x08005fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fd ff06 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61f8      	str	r0, [r7, #28]
        break;
 8005fd2:	e010      	b.n	8005ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd4:	4b8f      	ldr	r3, [pc, #572]	@ (8006214 <UART_SetConfig+0x56c>)
 8005fd6:	61fb      	str	r3, [r7, #28]
        break;
 8005fd8:	e00d      	b.n	8005ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fda:	f7fd fe67 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8005fde:	61f8      	str	r0, [r7, #28]
        break;
 8005fe0:	e009      	b.n	8005ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe6:	61fb      	str	r3, [r7, #28]
        break;
 8005fe8:	e005      	b.n	8005ff6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ff4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80fb 	beq.w	80061f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	4413      	add	r3, r2
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	429a      	cmp	r2, r3
 800600c:	d305      	bcc.n	800601a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	429a      	cmp	r2, r3
 8006018:	d903      	bls.n	8006022 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006020:	e0e8      	b.n	80061f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	2200      	movs	r2, #0
 8006026:	461c      	mov	r4, r3
 8006028:	4615      	mov	r5, r2
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	022b      	lsls	r3, r5, #8
 8006034:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006038:	0222      	lsls	r2, r4, #8
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	6849      	ldr	r1, [r1, #4]
 800603e:	0849      	lsrs	r1, r1, #1
 8006040:	2000      	movs	r0, #0
 8006042:	4688      	mov	r8, r1
 8006044:	4681      	mov	r9, r0
 8006046:	eb12 0a08 	adds.w	sl, r2, r8
 800604a:	eb43 0b09 	adc.w	fp, r3, r9
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	603b      	str	r3, [r7, #0]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800605c:	4650      	mov	r0, sl
 800605e:	4659      	mov	r1, fp
 8006060:	f7fa f90e 	bl	8000280 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4613      	mov	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006072:	d308      	bcc.n	8006086 <UART_SetConfig+0x3de>
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800607a:	d204      	bcs.n	8006086 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e0b6      	b.n	80061f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800608c:	e0b2      	b.n	80061f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006096:	d15e      	bne.n	8006156 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006098:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800609c:	2b08      	cmp	r3, #8
 800609e:	d828      	bhi.n	80060f2 <UART_SetConfig+0x44a>
 80060a0:	a201      	add	r2, pc, #4	@ (adr r2, 80060a8 <UART_SetConfig+0x400>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060d5 	.word	0x080060d5
 80060b0:	080060dd 	.word	0x080060dd
 80060b4:	080060f3 	.word	0x080060f3
 80060b8:	080060e3 	.word	0x080060e3
 80060bc:	080060f3 	.word	0x080060f3
 80060c0:	080060f3 	.word	0x080060f3
 80060c4:	080060f3 	.word	0x080060f3
 80060c8:	080060eb 	.word	0x080060eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060cc:	f7fd fe86 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80060d0:	61f8      	str	r0, [r7, #28]
        break;
 80060d2:	e014      	b.n	80060fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d4:	f7fd fe98 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 80060d8:	61f8      	str	r0, [r7, #28]
        break;
 80060da:	e010      	b.n	80060fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060dc:	4b4d      	ldr	r3, [pc, #308]	@ (8006214 <UART_SetConfig+0x56c>)
 80060de:	61fb      	str	r3, [r7, #28]
        break;
 80060e0:	e00d      	b.n	80060fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e2:	f7fd fde3 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 80060e6:	61f8      	str	r0, [r7, #28]
        break;
 80060e8:	e009      	b.n	80060fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ee:	61fb      	str	r3, [r7, #28]
        break;
 80060f0:	e005      	b.n	80060fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d077      	beq.n	80061f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	005a      	lsls	r2, r3, #1
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	441a      	add	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	fbb2 f3f3 	udiv	r3, r2, r3
 8006118:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b0f      	cmp	r3, #15
 800611e:	d916      	bls.n	800614e <UART_SetConfig+0x4a6>
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006126:	d212      	bcs.n	800614e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f023 030f 	bic.w	r3, r3, #15
 8006130:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	b29b      	uxth	r3, r3
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	b29a      	uxth	r2, r3
 800613e:	8afb      	ldrh	r3, [r7, #22]
 8006140:	4313      	orrs	r3, r2
 8006142:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	8afa      	ldrh	r2, [r7, #22]
 800614a:	60da      	str	r2, [r3, #12]
 800614c:	e052      	b.n	80061f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006154:	e04e      	b.n	80061f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006156:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800615a:	2b08      	cmp	r3, #8
 800615c:	d827      	bhi.n	80061ae <UART_SetConfig+0x506>
 800615e:	a201      	add	r2, pc, #4	@ (adr r2, 8006164 <UART_SetConfig+0x4bc>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006189 	.word	0x08006189
 8006168:	08006191 	.word	0x08006191
 800616c:	08006199 	.word	0x08006199
 8006170:	080061af 	.word	0x080061af
 8006174:	0800619f 	.word	0x0800619f
 8006178:	080061af 	.word	0x080061af
 800617c:	080061af 	.word	0x080061af
 8006180:	080061af 	.word	0x080061af
 8006184:	080061a7 	.word	0x080061a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006188:	f7fd fe28 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 800618c:	61f8      	str	r0, [r7, #28]
        break;
 800618e:	e014      	b.n	80061ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006190:	f7fd fe3a 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 8006194:	61f8      	str	r0, [r7, #28]
        break;
 8006196:	e010      	b.n	80061ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006198:	4b1e      	ldr	r3, [pc, #120]	@ (8006214 <UART_SetConfig+0x56c>)
 800619a:	61fb      	str	r3, [r7, #28]
        break;
 800619c:	e00d      	b.n	80061ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619e:	f7fd fd85 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 80061a2:	61f8      	str	r0, [r7, #28]
        break;
 80061a4:	e009      	b.n	80061ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061aa:	61fb      	str	r3, [r7, #28]
        break;
 80061ac:	e005      	b.n	80061ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061b8:	bf00      	nop
    }

    if (pclk != 0U)
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d019      	beq.n	80061f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	085a      	lsrs	r2, r3, #1
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	441a      	add	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	d909      	bls.n	80061ee <UART_SetConfig+0x546>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e0:	d205      	bcs.n	80061ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60da      	str	r2, [r3, #12]
 80061ec:	e002      	b.n	80061f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006200:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006204:	4618      	mov	r0, r3
 8006206:	3728      	adds	r7, #40	@ 0x28
 8006208:	46bd      	mov	sp, r7
 800620a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800620e:	bf00      	nop
 8006210:	40008000 	.word	0x40008000
 8006214:	00f42400 	.word	0x00f42400

08006218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01a      	beq.n	800632e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006316:	d10a      	bne.n	800632e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	605a      	str	r2, [r3, #4]
  }
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b098      	sub	sp, #96	@ 0x60
 8006360:	af02      	add	r7, sp, #8
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800636c:	f7fc fa08 	bl	8002780 <HAL_GetTick>
 8006370:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b08      	cmp	r3, #8
 800637e:	d12e      	bne.n	80063de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006380:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006388:	2200      	movs	r2, #0
 800638a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f88c 	bl	80064ac <UART_WaitOnFlagUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d021      	beq.n	80063de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e6      	bne.n	800639a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e062      	b.n	80064a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d149      	bne.n	8006480 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f4:	2200      	movs	r2, #0
 80063f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f856 	bl	80064ac <UART_WaitOnFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d03c      	beq.n	8006480 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	623b      	str	r3, [r7, #32]
   return(result);
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800641a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006424:	633b      	str	r3, [r7, #48]	@ 0x30
 8006426:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800642a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	60fb      	str	r3, [r7, #12]
   return(result);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006458:	61fa      	str	r2, [r7, #28]
 800645a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	69b9      	ldr	r1, [r7, #24]
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	617b      	str	r3, [r7, #20]
   return(result);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e5      	bne.n	8006438 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e011      	b.n	80064a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3758      	adds	r7, #88	@ 0x58
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064bc:	e04f      	b.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c4:	d04b      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c6:	f7fc f95b 	bl	8002780 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d302      	bcc.n	80064dc <UART_WaitOnFlagUntilTimeout+0x30>
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e04e      	b.n	800657e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d037      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b80      	cmp	r3, #128	@ 0x80
 80064f2:	d034      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b40      	cmp	r3, #64	@ 0x40
 80064f8:	d031      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b08      	cmp	r3, #8
 8006506:	d110      	bne.n	800652a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2208      	movs	r2, #8
 800650e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f8ff 	bl	8006714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2208      	movs	r2, #8
 800651a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e029      	b.n	800657e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006538:	d111      	bne.n	800655e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006542:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f8e5 	bl	8006714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e00f      	b.n	800657e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4013      	ands	r3, r2
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	429a      	cmp	r2, r3
 800656c:	bf0c      	ite	eq
 800656e:	2301      	moveq	r3, #1
 8006570:	2300      	movne	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	429a      	cmp	r2, r3
 800657a:	d0a0      	beq.n	80064be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006588:	b480      	push	{r7}
 800658a:	b097      	sub	sp, #92	@ 0x5c
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	4613      	mov	r3, r2
 8006594:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	88fa      	ldrh	r2, [r7, #6]
 80065a0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ba:	d10e      	bne.n	80065da <UART_Start_Receive_IT+0x52>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d105      	bne.n	80065d0 <UART_Start_Receive_IT+0x48>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80065ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065ce:	e02d      	b.n	800662c <UART_Start_Receive_IT+0xa4>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	22ff      	movs	r2, #255	@ 0xff
 80065d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065d8:	e028      	b.n	800662c <UART_Start_Receive_IT+0xa4>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10d      	bne.n	80065fe <UART_Start_Receive_IT+0x76>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <UART_Start_Receive_IT+0x6c>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	22ff      	movs	r2, #255	@ 0xff
 80065ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065f2:	e01b      	b.n	800662c <UART_Start_Receive_IT+0xa4>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	227f      	movs	r2, #127	@ 0x7f
 80065f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065fc:	e016      	b.n	800662c <UART_Start_Receive_IT+0xa4>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006606:	d10d      	bne.n	8006624 <UART_Start_Receive_IT+0x9c>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d104      	bne.n	800661a <UART_Start_Receive_IT+0x92>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	227f      	movs	r2, #127	@ 0x7f
 8006614:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006618:	e008      	b.n	800662c <UART_Start_Receive_IT+0xa4>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	223f      	movs	r2, #63	@ 0x3f
 800661e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006622:	e003      	b.n	800662c <UART_Start_Receive_IT+0xa4>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2222      	movs	r2, #34	@ 0x22
 8006638:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	f043 0301 	orr.w	r3, r3, #1
 8006652:	657b      	str	r3, [r7, #84]	@ 0x54
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800665c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800665e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800666a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e5      	bne.n	800663c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006678:	d107      	bne.n	800668a <UART_Start_Receive_IT+0x102>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d103      	bne.n	800668a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4a21      	ldr	r2, [pc, #132]	@ (800670c <UART_Start_Receive_IT+0x184>)
 8006686:	669a      	str	r2, [r3, #104]	@ 0x68
 8006688:	e002      	b.n	8006690 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4a20      	ldr	r2, [pc, #128]	@ (8006710 <UART_Start_Receive_IT+0x188>)
 800668e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d019      	beq.n	80066cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80066ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80066c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e6      	bne.n	8006698 <UART_Start_Receive_IT+0x110>
 80066ca:	e018      	b.n	80066fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	613b      	str	r3, [r7, #16]
   return(result);
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f043 0320 	orr.w	r3, r3, #32
 80066e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066ea:	623b      	str	r3, [r7, #32]
 80066ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	69f9      	ldr	r1, [r7, #28]
 80066f0:	6a3a      	ldr	r2, [r7, #32]
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e6      	bne.n	80066cc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	375c      	adds	r7, #92	@ 0x5c
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	08006b91 	.word	0x08006b91
 8006710:	080069d5 	.word	0x080069d5

08006714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006714:	b480      	push	{r7}
 8006716:	b095      	sub	sp, #84	@ 0x54
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800673a:	643b      	str	r3, [r7, #64]	@ 0x40
 800673c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006740:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e6      	bne.n	800671c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	61fb      	str	r3, [r7, #28]
   return(result);
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3308      	adds	r3, #8
 800676c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800676e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006770:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e5      	bne.n	800674e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006786:	2b01      	cmp	r3, #1
 8006788:	d118      	bne.n	80067bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	60bb      	str	r3, [r7, #8]
   return(result);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f023 0310 	bic.w	r3, r3, #16
 800679e:	647b      	str	r3, [r7, #68]	@ 0x44
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6979      	ldr	r1, [r7, #20]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	613b      	str	r3, [r7, #16]
   return(result);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e6      	bne.n	800678a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80067d0:	bf00      	nop
 80067d2:	3754      	adds	r7, #84	@ 0x54
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff fa3e 	bl	8005c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b08f      	sub	sp, #60	@ 0x3c
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006814:	2b21      	cmp	r3, #33	@ 0x21
 8006816:	d14c      	bne.n	80068b2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d132      	bne.n	800688a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	61fb      	str	r3, [r7, #28]
   return(result);
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006838:	637b      	str	r3, [r7, #52]	@ 0x34
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006844:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e6      	bne.n	8006824 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	60bb      	str	r3, [r7, #8]
   return(result);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800686a:	633b      	str	r3, [r7, #48]	@ 0x30
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6979      	ldr	r1, [r7, #20]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	613b      	str	r3, [r7, #16]
   return(result);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e6      	bne.n	8006856 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006888:	e013      	b.n	80068b2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80068b2:	bf00      	nop
 80068b4:	373c      	adds	r7, #60	@ 0x3c
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068be:	b480      	push	{r7}
 80068c0:	b091      	sub	sp, #68	@ 0x44
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068ca:	2b21      	cmp	r3, #33	@ 0x21
 80068cc:	d151      	bne.n	8006972 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d132      	bne.n	8006940 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	623b      	str	r3, [r7, #32]
   return(result);
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80068fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e6      	bne.n	80068da <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	60fb      	str	r3, [r7, #12]
   return(result);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006920:	637b      	str	r3, [r7, #52]	@ 0x34
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	69b9      	ldr	r1, [r7, #24]
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	617b      	str	r3, [r7, #20]
   return(result);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e6      	bne.n	800690c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800693e:	e018      	b.n	8006972 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006948:	881a      	ldrh	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006952:	b292      	uxth	r2, r2
 8006954:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006972:	bf00      	nop
 8006974:	3744      	adds	r7, #68	@ 0x44
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b088      	sub	sp, #32
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60bb      	str	r3, [r7, #8]
   return(result);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800699a:	61fb      	str	r3, [r7, #28]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6979      	ldr	r1, [r7, #20]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	613b      	str	r3, [r7, #16]
   return(result);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e6      	bne.n	8006986 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fb fd4d 	bl	8002464 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ca:	bf00      	nop
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b09c      	sub	sp, #112	@ 0x70
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ec:	2b22      	cmp	r3, #34	@ 0x22
 80069ee:	f040 80be 	bne.w	8006b6e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80069f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a00:	b2d9      	uxtb	r1, r3
 8006a02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0c:	400a      	ands	r2, r1
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 80a3 	bne.w	8006b82 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e6      	bne.n	8006a3c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e5      	bne.n	8006a6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a34      	ldr	r2, [pc, #208]	@ (8006b8c <UART_RxISR_8BIT+0x1b8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d01f      	beq.n	8006b00 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d018      	beq.n	8006b00 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	623b      	str	r3, [r7, #32]
   return(result);
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ae2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e6      	bne.n	8006ace <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d12e      	bne.n	8006b66 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0310 	bic.w	r3, r3, #16
 8006b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	69b9      	ldr	r1, [r7, #24]
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	617b      	str	r3, [r7, #20]
   return(result);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e6      	bne.n	8006b0e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f003 0310 	and.w	r3, r3, #16
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d103      	bne.n	8006b56 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2210      	movs	r2, #16
 8006b54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff f896 	bl	8005c90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b64:	e00d      	b.n	8006b82 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fb fca8 	bl	80024bc <HAL_UART_RxCpltCallback>
}
 8006b6c:	e009      	b.n	8006b82 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	8b1b      	ldrh	r3, [r3, #24]
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0208 	orr.w	r2, r2, #8
 8006b7e:	b292      	uxth	r2, r2
 8006b80:	831a      	strh	r2, [r3, #24]
}
 8006b82:	bf00      	nop
 8006b84:	3770      	adds	r7, #112	@ 0x70
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40008000 	.word	0x40008000

08006b90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b09c      	sub	sp, #112	@ 0x70
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ba8:	2b22      	cmp	r3, #34	@ 0x22
 8006baa:	f040 80be 	bne.w	8006d2a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006bb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bbe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006bc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bcc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd2:	1c9a      	adds	r2, r3, #2
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f040 80a3 	bne.w	8006d3e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c16:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c18:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e6      	bne.n	8006bf8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e5      	bne.n	8006c2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a34      	ldr	r2, [pc, #208]	@ (8006d48 <UART_RxISR_16BIT+0x1b8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d01f      	beq.n	8006cbc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d018      	beq.n	8006cbc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006caa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e6      	bne.n	8006c8a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d12e      	bne.n	8006d22 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f023 0310 	bic.w	r3, r3, #16
 8006cde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6979      	ldr	r1, [r7, #20]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e6      	bne.n	8006cca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b10      	cmp	r3, #16
 8006d08:	d103      	bne.n	8006d12 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2210      	movs	r2, #16
 8006d10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fe ffb8 	bl	8005c90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d20:	e00d      	b.n	8006d3e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fb fbca 	bl	80024bc <HAL_UART_RxCpltCallback>
}
 8006d28:	e009      	b.n	8006d3e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	8b1b      	ldrh	r3, [r3, #24]
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0208 	orr.w	r2, r2, #8
 8006d3a:	b292      	uxth	r2, r2
 8006d3c:	831a      	strh	r2, [r3, #24]
}
 8006d3e:	bf00      	nop
 8006d40:	3770      	adds	r7, #112	@ 0x70
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	40008000 	.word	0x40008000

08006d4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	7992      	ldrb	r2, [r2, #6]
 8006d72:	08d2      	lsrs	r2, r2, #3
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	fb13 f302 	smulbb	r3, r3, r2
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	889b      	ldrh	r3, [r3, #4]
 8006d84:	461a      	mov	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	885b      	ldrh	r3, [r3, #2]
 8006d8a:	fb02 f303 	mul.w	r3, r2, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	60da      	str	r2, [r3, #12]
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006da6:	b490      	push	{r4, r7}
 8006da8:	b086      	sub	sp, #24
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	4604      	mov	r4, r0
 8006dae:	4608      	mov	r0, r1
 8006db0:	1d39      	adds	r1, r7, #4
 8006db2:	e881 000c 	stmia.w	r1, {r2, r3}
 8006db6:	4623      	mov	r3, r4
 8006db8:	81fb      	strh	r3, [r7, #14]
 8006dba:	4603      	mov	r3, r0
 8006dbc:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006dc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dc6:	88ba      	ldrh	r2, [r7, #4]
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	da04      	bge.n	8006dd6 <code+0x30>
        code |= LEFT;
 8006dcc:	2201      	movs	r2, #1
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	75fb      	strb	r3, [r7, #23]
 8006dd4:	e008      	b.n	8006de8 <code+0x42>
    } else if (x0 > window.x1) {
 8006dd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dda:	893a      	ldrh	r2, [r7, #8]
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	dd03      	ble.n	8006de8 <code+0x42>
        code |= RIGHT;
 8006de0:	2202      	movs	r2, #2
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006de8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006dec:	88fa      	ldrh	r2, [r7, #6]
 8006dee:	4293      	cmp	r3, r2
 8006df0:	da04      	bge.n	8006dfc <code+0x56>
        code |= BOTTOM;
 8006df2:	2204      	movs	r2, #4
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	75fb      	strb	r3, [r7, #23]
 8006dfa:	e008      	b.n	8006e0e <code+0x68>
    } else if (y0 > window.y1) {
 8006dfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006e00:	897a      	ldrh	r2, [r7, #10]
 8006e02:	4293      	cmp	r3, r2
 8006e04:	dd03      	ble.n	8006e0e <code+0x68>
        code |= TOP;
 8006e06:	2208      	movs	r2, #8
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bc90      	pop	{r4, r7}
 8006e18:	4770      	bx	lr

08006e1a <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b088      	sub	sp, #32
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
 8006e26:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006e34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006e38:	cb0c      	ldmia	r3, {r2, r3}
 8006e3a:	f7ff ffb4 	bl	8006da6 <code>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006e4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006e52:	cb0c      	ldmia	r3, {r2, r3}
 8006e54:	f7ff ffa7 	bl	8006da6 <code>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006e60:	7ffa      	ldrb	r2, [r7, #31]
 8006e62:	7fbb      	ldrb	r3, [r7, #30]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	777b      	strb	r3, [r7, #29]
            break;
 8006e70:	e0e9      	b.n	8007046 <clip_line+0x22c>
        } else if (code0 & code1) {
 8006e72:	7ffa      	ldrb	r2, [r7, #31]
 8006e74:	7fbb      	ldrb	r3, [r7, #30]
 8006e76:	4013      	ands	r3, r2
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f040 80e2 	bne.w	8007044 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006e88:	7ffb      	ldrb	r3, [r7, #31]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <clip_line+0x78>
 8006e8e:	7ffb      	ldrb	r3, [r7, #31]
 8006e90:	e000      	b.n	8006e94 <clip_line+0x7a>
 8006e92:	7fbb      	ldrb	r3, [r7, #30]
 8006e94:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006e96:	2208      	movs	r2, #8
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d024      	beq.n	8006eec <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eb8:	1acb      	subs	r3, r1, r3
 8006eba:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	68b9      	ldr	r1, [r7, #8]
 8006ec0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006ec4:	1a41      	subs	r1, r0, r1
 8006ec6:	fb03 f101 	mul.w	r1, r3, r1
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed8:	1ac3      	subs	r3, r0, r3
 8006eda:	fb91 f3f3 	sdiv	r3, r1, r3
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006ee6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ee8:	833b      	strh	r3, [r7, #24]
 8006eea:	e07f      	b.n	8006fec <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006eec:	2204      	movs	r2, #4
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d024      	beq.n	8006f42 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f06:	4619      	mov	r1, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f0e:	1acb      	subs	r3, r1, r3
 8006f10:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006f12:	4608      	mov	r0, r1
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006f1a:	1a41      	subs	r1, r0, r1
 8006f1c:	fb03 f101 	mul.w	r1, r3, r1
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f26:	4618      	mov	r0, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f2e:	1ac3      	subs	r3, r0, r3
 8006f30:	fb91 f3f3 	sdiv	r3, r1, r3
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4413      	add	r3, r2
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006f3c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f3e:	833b      	strh	r3, [r7, #24]
 8006f40:	e054      	b.n	8006fec <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006f42:	2202      	movs	r2, #2
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	4013      	ands	r3, r2
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d024      	beq.n	8006f98 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f64:	1acb      	subs	r3, r1, r3
 8006f66:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006f68:	4608      	mov	r0, r1
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006f70:	1a41      	subs	r1, r0, r1
 8006f72:	fb03 f101 	mul.w	r1, r3, r1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f84:	1ac3      	subs	r3, r0, r3
 8006f86:	fb91 f3f3 	sdiv	r3, r1, r3
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006f92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006f94:	837b      	strh	r3, [r7, #26]
 8006f96:	e029      	b.n	8006fec <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006f98:	2201      	movs	r2, #1
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d023      	beq.n	8006fec <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fba:	1acb      	subs	r3, r1, r3
 8006fbc:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	68f9      	ldr	r1, [r7, #12]
 8006fc2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006fc6:	1a41      	subs	r1, r0, r1
 8006fc8:	fb03 f101 	mul.w	r1, r3, r1
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fda:	1ac3      	subs	r3, r0, r3
 8006fdc:	fb91 f3f3 	sdiv	r3, r1, r3
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	4413      	add	r3, r2
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006fe8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006fea:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006fec:	7dfa      	ldrb	r2, [r7, #23]
 8006fee:	7ffb      	ldrb	r3, [r7, #31]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d113      	bne.n	800701c <clip_line+0x202>
                *x0 = x;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8b7a      	ldrh	r2, [r7, #26]
 8006ff8:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	8b3a      	ldrh	r2, [r7, #24]
 8006ffe:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f9b3 1000 	ldrsh.w	r1, [r3]
 800700c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007010:	cb0c      	ldmia	r3, {r2, r3}
 8007012:	f7ff fec8 	bl	8006da6 <code>
 8007016:	4603      	mov	r3, r0
 8007018:	77fb      	strb	r3, [r7, #31]
 800701a:	e721      	b.n	8006e60 <clip_line+0x46>
            } else {
                *x1 = x;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8b7a      	ldrh	r2, [r7, #26]
 8007020:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	8b3a      	ldrh	r2, [r7, #24]
 8007026:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007034:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007038:	cb0c      	ldmia	r3, {r2, r3}
 800703a:	f7ff feb4 	bl	8006da6 <code>
 800703e:	4603      	mov	r3, r0
 8007040:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8007042:	e70d      	b.n	8006e60 <clip_line+0x46>
            break;
 8007044:	bf00      	nop
            }
        }
    }

    return accept;
 8007046:	7f7b      	ldrb	r3, [r7, #29]
 8007048:	4618      	mov	r0, r3
 800704a:	3720      	adds	r7, #32
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	3306      	adds	r3, #6
 8007060:	2208      	movs	r2, #8
 8007062:	4619      	mov	r1, r3
 8007064:	f001 fa56 	bl	8008514 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	330e      	adds	r3, #14
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	330f      	adds	r3, #15
 8007076:	781a      	ldrb	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	3310      	adds	r3, #16
 8007080:	781a      	ldrb	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	72da      	strb	r2, [r3, #11]

    return 0;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b08e      	sub	sp, #56	@ 0x38
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800709c:	f107 0314 	add.w	r3, r7, #20
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff ffd4 	bl	8007050 <fontx_meta>
 80070a8:	4603      	mov	r3, r0
 80070aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 80070ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <fontx_glyph+0x2c>
        return status;
 80070b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e077      	b.n	80071ac <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 80070bc:	7f7a      	ldrb	r2, [r7, #29]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80070c2:	7fba      	ldrb	r2, [r7, #30]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80070c8:	7f7b      	ldrb	r3, [r7, #29]
 80070ca:	3307      	adds	r3, #7
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	da00      	bge.n	80070d2 <fontx_glyph+0x42>
 80070d0:	3307      	adds	r3, #7
 80070d2:	10db      	asrs	r3, r3, #3
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	78da      	ldrb	r2, [r3, #3]
 80070de:	7fbb      	ldrb	r3, [r7, #30]
 80070e0:	fb12 f303 	smulbb	r3, r2, r3
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80070ea:	7ffb      	ldrb	r3, [r7, #31]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10f      	bne.n	8007110 <fontx_glyph+0x80>
        if (code < 0x100) {
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2bff      	cmp	r3, #255	@ 0xff
 80070f4:	d859      	bhi.n	80071aa <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	789b      	ldrb	r3, [r3, #2]
 80070fa:	461a      	mov	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	fb02 f303 	mul.w	r3, r2, r3
 8007102:	3311      	adds	r3, #17
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	441a      	add	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e04d      	b.n	80071ac <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3312      	adds	r3, #18
 8007114:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3311      	adds	r3, #17
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8007122:	e03d      	b.n	80071a0 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8007124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712c:	3301      	adds	r3, #1
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	4413      	add	r3, r2
 8007134:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8007136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007138:	3302      	adds	r3, #2
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007140:	3303      	adds	r3, #3
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	021b      	lsls	r3, r3, #8
 8007146:	4413      	add	r3, r2
 8007148:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	429a      	cmp	r2, r3
 8007150:	d31c      	bcc.n	800718c <fontx_glyph+0xfc>
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	429a      	cmp	r2, r3
 8007158:	d818      	bhi.n	800718c <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007162:	4413      	add	r3, r2
 8007164:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3311      	adds	r3, #17
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	461a      	mov	r2, r3
                    nc * glyph->size
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	789b      	ldrb	r3, [r3, #2]
 8007174:	4619      	mov	r1, r3
 8007176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007178:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800717c:	4413      	add	r3, r2
 800717e:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	441a      	add	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	e00f      	b.n	80071ac <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800718c:	6a3a      	ldr	r2, [r7, #32]
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	1ad2      	subs	r2, r2, r3
 8007192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007194:	4413      	add	r3, r2
 8007196:	3301      	adds	r3, #1
 8007198:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 800719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719c:	3304      	adds	r3, #4
 800719e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 80071a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a2:	1e5a      	subs	r2, r3, #1
 80071a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1bc      	bne.n	8007124 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 80071aa:	2301      	movs	r3, #1
 80071ac:	4618      	mov	r0, r3
 80071ae:	3738      	adds	r7, #56	@ 0x38
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	dd01      	ble.n	80071ca <min+0x16>
        return b;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	e000      	b.n	80071cc <min+0x18>
    };
    return a;
 80071ca:	687b      	ldr	r3, [r7, #4]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <max>:

static inline int max(int a, int b) {
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	dd01      	ble.n	80071ee <max+0x16>
        return a;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	e000      	b.n	80071f0 <max+0x18>
    }
    return b;
 80071ee:	683b      	ldr	r3, [r7, #0]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	80fb      	strh	r3, [r7, #6]
 8007206:	460b      	mov	r3, r1
 8007208:	80bb      	strh	r3, [r7, #4]
 800720a:	4613      	mov	r3, r2
 800720c:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800720e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007212:	4a12      	ldr	r2, [pc, #72]	@ (800725c <hagl_put_pixel+0x60>)
 8007214:	8812      	ldrh	r2, [r2, #0]
 8007216:	4293      	cmp	r3, r2
 8007218:	db1a      	blt.n	8007250 <hagl_put_pixel+0x54>
 800721a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800721e:	4a0f      	ldr	r2, [pc, #60]	@ (800725c <hagl_put_pixel+0x60>)
 8007220:	8852      	ldrh	r2, [r2, #2]
 8007222:	4293      	cmp	r3, r2
 8007224:	db14      	blt.n	8007250 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800722a:	4a0c      	ldr	r2, [pc, #48]	@ (800725c <hagl_put_pixel+0x60>)
 800722c:	8892      	ldrh	r2, [r2, #4]
 800722e:	4293      	cmp	r3, r2
 8007230:	dc10      	bgt.n	8007254 <hagl_put_pixel+0x58>
 8007232:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007236:	4a09      	ldr	r2, [pc, #36]	@ (800725c <hagl_put_pixel+0x60>)
 8007238:	88d2      	ldrh	r2, [r2, #6]
 800723a:	4293      	cmp	r3, r2
 800723c:	dc0a      	bgt.n	8007254 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800723e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007242:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007246:	887a      	ldrh	r2, [r7, #2]
 8007248:	4618      	mov	r0, r3
 800724a:	f7fa fe45 	bl	8001ed8 <lcdPutPixel>
 800724e:	e002      	b.n	8007256 <hagl_put_pixel+0x5a>
        return;
 8007250:	bf00      	nop
 8007252:	e000      	b.n	8007256 <hagl_put_pixel+0x5a>
        return;
 8007254:	bf00      	nop
}
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	2000020c 	.word	0x2000020c

08007260 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8007260:	b590      	push	{r4, r7, lr}
 8007262:	b085      	sub	sp, #20
 8007264:	af02      	add	r7, sp, #8
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	4611      	mov	r1, r2
 800726c:	461a      	mov	r2, r3
 800726e:	4623      	mov	r3, r4
 8007270:	80fb      	strh	r3, [r7, #6]
 8007272:	4603      	mov	r3, r0
 8007274:	80bb      	strh	r3, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	807b      	strh	r3, [r7, #2]
 800727a:	4613      	mov	r3, r2
 800727c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800727e:	88fa      	ldrh	r2, [r7, #6]
 8007280:	887b      	ldrh	r3, [r7, #2]
 8007282:	4413      	add	r3, r2
 8007284:	b29b      	uxth	r3, r3
 8007286:	b21a      	sxth	r2, r3
 8007288:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800728c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007290:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007294:	883b      	ldrh	r3, [r7, #0]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	4623      	mov	r3, r4
 800729a:	f000 f827 	bl	80072ec <hagl_draw_line>
#endif
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd90      	pop	{r4, r7, pc}

080072a6 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 80072a6:	b590      	push	{r4, r7, lr}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af02      	add	r7, sp, #8
 80072ac:	4604      	mov	r4, r0
 80072ae:	4608      	mov	r0, r1
 80072b0:	4611      	mov	r1, r2
 80072b2:	461a      	mov	r2, r3
 80072b4:	4623      	mov	r3, r4
 80072b6:	80fb      	strh	r3, [r7, #6]
 80072b8:	4603      	mov	r3, r0
 80072ba:	80bb      	strh	r3, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	807b      	strh	r3, [r7, #2]
 80072c0:	4613      	mov	r3, r2
 80072c2:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 80072c4:	88ba      	ldrh	r2, [r7, #4]
 80072c6:	887b      	ldrh	r3, [r7, #2]
 80072c8:	4413      	add	r3, r2
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	b21c      	sxth	r4, r3
 80072ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80072d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80072da:	883b      	ldrh	r3, [r7, #0]
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	4623      	mov	r3, r4
 80072e0:	f000 f804 	bl	80072ec <hagl_draw_line>
#endif
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd90      	pop	{r4, r7, pc}

080072ec <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80072ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ee:	b089      	sub	sp, #36	@ 0x24
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	4604      	mov	r4, r0
 80072f4:	4608      	mov	r0, r1
 80072f6:	4611      	mov	r1, r2
 80072f8:	461a      	mov	r2, r3
 80072fa:	4623      	mov	r3, r4
 80072fc:	80fb      	strh	r3, [r7, #6]
 80072fe:	4603      	mov	r3, r0
 8007300:	80bb      	strh	r3, [r7, #4]
 8007302:	460b      	mov	r3, r1
 8007304:	807b      	strh	r3, [r7, #2]
 8007306:	4613      	mov	r3, r2
 8007308:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 800730a:	463b      	mov	r3, r7
 800730c:	1cba      	adds	r2, r7, #2
 800730e:	1d3d      	adds	r5, r7, #4
 8007310:	1dbc      	adds	r4, r7, #6
 8007312:	494a      	ldr	r1, [pc, #296]	@ (800743c <hagl_draw_line+0x150>)
 8007314:	466e      	mov	r6, sp
 8007316:	c903      	ldmia	r1, {r0, r1}
 8007318:	e886 0003 	stmia.w	r6, {r0, r1}
 800731c:	4629      	mov	r1, r5
 800731e:	4620      	mov	r0, r4
 8007320:	f7ff fd7b 	bl	8006e1a <clip_line>
 8007324:	4603      	mov	r3, r0
 8007326:	f083 0301 	eor.w	r3, r3, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d17e      	bne.n	800742e <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8007330:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007334:	461a      	mov	r2, r3
 8007336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	bfb8      	it	lt
 8007340:	425b      	neglt	r3, r3
 8007342:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8007344:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007348:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800734c:	429a      	cmp	r2, r3
 800734e:	da01      	bge.n	8007354 <hagl_draw_line+0x68>
 8007350:	2301      	movs	r3, #1
 8007352:	e001      	b.n	8007358 <hagl_draw_line+0x6c>
 8007354:	f04f 33ff 	mov.w	r3, #4294967295
 8007358:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 800735a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800735e:	461a      	mov	r2, r3
 8007360:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	bfb8      	it	lt
 800736a:	425b      	neglt	r3, r3
 800736c:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800736e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007372:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007376:	429a      	cmp	r2, r3
 8007378:	da01      	bge.n	800737e <hagl_draw_line+0x92>
 800737a:	2301      	movs	r3, #1
 800737c:	e001      	b.n	8007382 <hagl_draw_line+0x96>
 800737e:	f04f 33ff 	mov.w	r3, #4294967295
 8007382:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8007384:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007388:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800738c:	429a      	cmp	r2, r3
 800738e:	dd06      	ble.n	800739e <hagl_draw_line+0xb2>
 8007390:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007394:	0fda      	lsrs	r2, r3, #31
 8007396:	4413      	add	r3, r2
 8007398:	105b      	asrs	r3, r3, #1
 800739a:	b21b      	sxth	r3, r3
 800739c:	e006      	b.n	80073ac <hagl_draw_line+0xc0>
 800739e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80073a2:	0fda      	lsrs	r2, r3, #31
 80073a4:	4413      	add	r3, r2
 80073a6:	105b      	asrs	r3, r3, #1
 80073a8:	425b      	negs	r3, r3
 80073aa:	b21b      	sxth	r3, r3
 80073ac:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 80073ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80073b6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff ff1f 	bl	80071fc <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80073be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80073c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d105      	bne.n	80073d6 <hagl_draw_line+0xea>
 80073ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80073ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d02d      	beq.n	8007432 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 80073d6:	8afb      	ldrh	r3, [r7, #22]
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	b29b      	uxth	r3, r3
 80073dc:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80073de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80073e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80073e6:	425b      	negs	r3, r3
 80073e8:	429a      	cmp	r2, r3
 80073ea:	dd0c      	ble.n	8007406 <hagl_draw_line+0x11a>
            err -= dy;
 80073ec:	8afa      	ldrh	r2, [r7, #22]
 80073ee:	8a3b      	ldrh	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80073f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	8a7b      	ldrh	r3, [r7, #18]
 80073fe:	4413      	add	r3, r2
 8007400:	b29b      	uxth	r3, r3
 8007402:	b21b      	sxth	r3, r3
 8007404:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8007406:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800740a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800740e:	429a      	cmp	r2, r3
 8007410:	dacd      	bge.n	80073ae <hagl_draw_line+0xc2>
            err += dx;
 8007412:	8afa      	ldrh	r2, [r7, #22]
 8007414:	8abb      	ldrh	r3, [r7, #20]
 8007416:	4413      	add	r3, r2
 8007418:	b29b      	uxth	r3, r3
 800741a:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 800741c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007420:	b29a      	uxth	r2, r3
 8007422:	89fb      	ldrh	r3, [r7, #14]
 8007424:	4413      	add	r3, r2
 8007426:	b29b      	uxth	r3, r3
 8007428:	b21b      	sxth	r3, r3
 800742a:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 800742c:	e7bf      	b.n	80073ae <hagl_draw_line+0xc2>
        return;
 800742e:	bf00      	nop
 8007430:	e000      	b.n	8007434 <hagl_draw_line+0x148>
            break;
 8007432:	bf00      	nop
        }
    }
}
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800743a:	bf00      	nop
 800743c:	2000020c 	.word	0x2000020c

08007440 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	4611      	mov	r1, r2
 800744c:	461a      	mov	r2, r3
 800744e:	4623      	mov	r3, r4
 8007450:	80fb      	strh	r3, [r7, #6]
 8007452:	4603      	mov	r3, r0
 8007454:	80bb      	strh	r3, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	807b      	strh	r3, [r7, #2]
 800745a:	4613      	mov	r3, r2
 800745c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800745e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007462:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007466:	429a      	cmp	r2, r3
 8007468:	dd0e      	ble.n	8007488 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800746a:	88fa      	ldrh	r2, [r7, #6]
 800746c:	887b      	ldrh	r3, [r7, #2]
 800746e:	4413      	add	r3, r2
 8007470:	b29b      	uxth	r3, r3
 8007472:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007474:	88fa      	ldrh	r2, [r7, #6]
 8007476:	887b      	ldrh	r3, [r7, #2]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	b29b      	uxth	r3, r3
 800747c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800747e:	88fa      	ldrh	r2, [r7, #6]
 8007480:	887b      	ldrh	r3, [r7, #2]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	b29b      	uxth	r3, r3
 8007486:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007488:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800748c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007490:	429a      	cmp	r2, r3
 8007492:	dd0e      	ble.n	80074b2 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8007494:	88ba      	ldrh	r2, [r7, #4]
 8007496:	883b      	ldrh	r3, [r7, #0]
 8007498:	4413      	add	r3, r2
 800749a:	b29b      	uxth	r3, r3
 800749c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800749e:	88ba      	ldrh	r2, [r7, #4]
 80074a0:	883b      	ldrh	r3, [r7, #0]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80074a8:	88ba      	ldrh	r2, [r7, #4]
 80074aa:	883b      	ldrh	r3, [r7, #0]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80074b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80074b6:	4a24      	ldr	r2, [pc, #144]	@ (8007548 <hagl_draw_rectangle+0x108>)
 80074b8:	8812      	ldrh	r2, [r2, #0]
 80074ba:	4293      	cmp	r3, r2
 80074bc:	db3e      	blt.n	800753c <hagl_draw_rectangle+0xfc>
 80074be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80074c2:	4a21      	ldr	r2, [pc, #132]	@ (8007548 <hagl_draw_rectangle+0x108>)
 80074c4:	8852      	ldrh	r2, [r2, #2]
 80074c6:	4293      	cmp	r3, r2
 80074c8:	db38      	blt.n	800753c <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80074ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007548 <hagl_draw_rectangle+0x108>)
 80074d0:	8892      	ldrh	r2, [r2, #4]
 80074d2:	4293      	cmp	r3, r2
 80074d4:	dc34      	bgt.n	8007540 <hagl_draw_rectangle+0x100>
 80074d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80074da:	4a1b      	ldr	r2, [pc, #108]	@ (8007548 <hagl_draw_rectangle+0x108>)
 80074dc:	88d2      	ldrh	r2, [r2, #6]
 80074de:	4293      	cmp	r3, r2
 80074e0:	dc2e      	bgt.n	8007540 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 80074e2:	887a      	ldrh	r2, [r7, #2]
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3301      	adds	r3, #1
 80074ec:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 80074ee:	883a      	ldrh	r2, [r7, #0]
 80074f0:	88bb      	ldrh	r3, [r7, #4]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3301      	adds	r3, #1
 80074f8:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 80074fa:	8c3b      	ldrh	r3, [r7, #32]
 80074fc:	89fa      	ldrh	r2, [r7, #14]
 80074fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007502:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007506:	f7ff feab 	bl	8007260 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 800750a:	8c3b      	ldrh	r3, [r7, #32]
 800750c:	89fa      	ldrh	r2, [r7, #14]
 800750e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8007512:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007516:	f7ff fea3 	bl	8007260 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 800751a:	8c3b      	ldrh	r3, [r7, #32]
 800751c:	89ba      	ldrh	r2, [r7, #12]
 800751e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007522:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007526:	f7ff febe 	bl	80072a6 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 800752a:	8c3b      	ldrh	r3, [r7, #32]
 800752c:	89ba      	ldrh	r2, [r7, #12]
 800752e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007532:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8007536:	f7ff feb6 	bl	80072a6 <hagl_draw_vline>
 800753a:	e002      	b.n	8007542 <hagl_draw_rectangle+0x102>
        return;
 800753c:	bf00      	nop
 800753e:	e000      	b.n	8007542 <hagl_draw_rectangle+0x102>
        return;
 8007540:	bf00      	nop
}
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	bd90      	pop	{r4, r7, pc}
 8007548:	2000020c 	.word	0x2000020c

0800754c <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800754c:	b590      	push	{r4, r7, lr}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	461a      	mov	r2, r3
 800755a:	4623      	mov	r3, r4
 800755c:	80fb      	strh	r3, [r7, #6]
 800755e:	4603      	mov	r3, r0
 8007560:	80bb      	strh	r3, [r7, #4]
 8007562:	460b      	mov	r3, r1
 8007564:	807b      	strh	r3, [r7, #2]
 8007566:	4613      	mov	r3, r2
 8007568:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800756a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800756e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007572:	429a      	cmp	r2, r3
 8007574:	dd0e      	ble.n	8007594 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8007576:	88fa      	ldrh	r2, [r7, #6]
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	4413      	add	r3, r2
 800757c:	b29b      	uxth	r3, r3
 800757e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007580:	88fa      	ldrh	r2, [r7, #6]
 8007582:	887b      	ldrh	r3, [r7, #2]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	b29b      	uxth	r3, r3
 8007588:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	887b      	ldrh	r3, [r7, #2]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	b29b      	uxth	r3, r3
 8007592:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007594:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007598:	f9b7 3000 	ldrsh.w	r3, [r7]
 800759c:	429a      	cmp	r2, r3
 800759e:	dd0e      	ble.n	80075be <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 80075a0:	88ba      	ldrh	r2, [r7, #4]
 80075a2:	883b      	ldrh	r3, [r7, #0]
 80075a4:	4413      	add	r3, r2
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80075aa:	88ba      	ldrh	r2, [r7, #4]
 80075ac:	883b      	ldrh	r3, [r7, #0]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80075b4:	88ba      	ldrh	r2, [r7, #4]
 80075b6:	883b      	ldrh	r3, [r7, #0]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80075be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075c2:	4a33      	ldr	r2, [pc, #204]	@ (8007690 <hagl_fill_rectangle+0x144>)
 80075c4:	8812      	ldrh	r2, [r2, #0]
 80075c6:	4293      	cmp	r3, r2
 80075c8:	db5b      	blt.n	8007682 <hagl_fill_rectangle+0x136>
 80075ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80075ce:	4a30      	ldr	r2, [pc, #192]	@ (8007690 <hagl_fill_rectangle+0x144>)
 80075d0:	8852      	ldrh	r2, [r2, #2]
 80075d2:	4293      	cmp	r3, r2
 80075d4:	db55      	blt.n	8007682 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80075d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075da:	4a2d      	ldr	r2, [pc, #180]	@ (8007690 <hagl_fill_rectangle+0x144>)
 80075dc:	8892      	ldrh	r2, [r2, #4]
 80075de:	4293      	cmp	r3, r2
 80075e0:	dc51      	bgt.n	8007686 <hagl_fill_rectangle+0x13a>
 80075e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007690 <hagl_fill_rectangle+0x144>)
 80075e8:	88d2      	ldrh	r2, [r2, #6]
 80075ea:	4293      	cmp	r3, r2
 80075ec:	dc4b      	bgt.n	8007686 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80075ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075f2:	4a27      	ldr	r2, [pc, #156]	@ (8007690 <hagl_fill_rectangle+0x144>)
 80075f4:	8812      	ldrh	r2, [r2, #0]
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff fded 	bl	80071d8 <max>
 80075fe:	4603      	mov	r3, r0
 8007600:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8007602:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007606:	4a22      	ldr	r2, [pc, #136]	@ (8007690 <hagl_fill_rectangle+0x144>)
 8007608:	8852      	ldrh	r2, [r2, #2]
 800760a:	4611      	mov	r1, r2
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff fde3 	bl	80071d8 <max>
 8007612:	4603      	mov	r3, r0
 8007614:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8007616:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800761a:	4a1d      	ldr	r2, [pc, #116]	@ (8007690 <hagl_fill_rectangle+0x144>)
 800761c:	8892      	ldrh	r2, [r2, #4]
 800761e:	4611      	mov	r1, r2
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff fdc7 	bl	80071b4 <min>
 8007626:	4603      	mov	r3, r0
 8007628:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800762a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800762e:	4a18      	ldr	r2, [pc, #96]	@ (8007690 <hagl_fill_rectangle+0x144>)
 8007630:	88d2      	ldrh	r2, [r2, #6]
 8007632:	4611      	mov	r1, r2
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff fdbd 	bl	80071b4 <min>
 800763a:	4603      	mov	r3, r0
 800763c:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800763e:	887a      	ldrh	r2, [r7, #2]
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	b29b      	uxth	r3, r3
 8007646:	3301      	adds	r3, #1
 8007648:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800764a:	883a      	ldrh	r2, [r7, #0]
 800764c:	88bb      	ldrh	r3, [r7, #4]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	b29b      	uxth	r3, r3
 8007652:	3301      	adds	r3, #1
 8007654:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8007656:	2300      	movs	r3, #0
 8007658:	81fb      	strh	r3, [r7, #14]
 800765a:	e00d      	b.n	8007678 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800765c:	88ba      	ldrh	r2, [r7, #4]
 800765e:	89fb      	ldrh	r3, [r7, #14]
 8007660:	4413      	add	r3, r2
 8007662:	b29b      	uxth	r3, r3
 8007664:	b219      	sxth	r1, r3
 8007666:	8c3b      	ldrh	r3, [r7, #32]
 8007668:	89ba      	ldrh	r2, [r7, #12]
 800766a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800766e:	f7ff fdf7 	bl	8007260 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8007672:	89fb      	ldrh	r3, [r7, #14]
 8007674:	3301      	adds	r3, #1
 8007676:	81fb      	strh	r3, [r7, #14]
 8007678:	89fa      	ldrh	r2, [r7, #14]
 800767a:	897b      	ldrh	r3, [r7, #10]
 800767c:	429a      	cmp	r2, r3
 800767e:	d3ed      	bcc.n	800765c <hagl_fill_rectangle+0x110>
 8007680:	e002      	b.n	8007688 <hagl_fill_rectangle+0x13c>
        return;
 8007682:	bf00      	nop
 8007684:	e000      	b.n	8007688 <hagl_fill_rectangle+0x13c>
        return;
 8007686:	bf00      	nop
#endif
    }
}
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	bd90      	pop	{r4, r7, pc}
 800768e:	bf00      	nop
 8007690:	2000020c 	.word	0x2000020c

08007694 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8007694:	b590      	push	{r4, r7, lr}
 8007696:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80076a2:	f844 0c24 	str.w	r0, [r4, #-36]
 80076a6:	460c      	mov	r4, r1
 80076a8:	4610      	mov	r0, r2
 80076aa:	4619      	mov	r1, r3
 80076ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076b0:	4622      	mov	r2, r4
 80076b2:	f823 2c26 	strh.w	r2, [r3, #-38]
 80076b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076ba:	4602      	mov	r2, r0
 80076bc:	f823 2c28 	strh.w	r2, [r3, #-40]
 80076c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076c4:	460a      	mov	r2, r1
 80076c6:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80076ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076ce:	4619      	mov	r1, r3
 80076d0:	f107 0310 	add.w	r3, r7, #16
 80076d4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	f851 1c24 	ldr.w	r1, [r1, #-36]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff fcd6 	bl	8007090 <fontx_glyph>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076ea:	f102 0209 	add.w	r2, r2, #9
 80076ee:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80076f0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076f4:	f103 0309 	add.w	r3, r3, #9
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <hagl_put_char+0x6e>
        return 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	e0c0      	b.n	8007884 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8007702:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007706:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800770a:	461a      	mov	r2, r3
 800770c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007710:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8007714:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007718:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 800771c:	461a      	mov	r2, r3
 800771e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007722:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8007726:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800772a:	2210      	movs	r2, #16
 800772c:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8007730:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007734:	3a08      	subs	r2, #8
 8007736:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800773a:	3b18      	subs	r3, #24
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fb0e 	bl	8006d60 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8007744:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007748:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800774c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007750:	f102 020c 	add.w	r2, r2, #12
 8007754:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8007756:	2300      	movs	r3, #0
 8007758:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800775c:	f102 020b 	add.w	r2, r2, #11
 8007760:	7013      	strb	r3, [r2, #0]
 8007762:	e071      	b.n	8007848 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007764:	2300      	movs	r3, #0
 8007766:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800776a:	f102 020a 	add.w	r2, r2, #10
 800776e:	7013      	strb	r3, [r2, #0]
 8007770:	e047      	b.n	8007802 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8007772:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007776:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	b25a      	sxtb	r2, r3
 800777e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007782:	f103 030a 	add.w	r3, r3, #10
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	2180      	movs	r1, #128	@ 0x80
 800778e:	fa41 f303 	asr.w	r3, r1, r3
 8007792:	b25b      	sxtb	r3, r3
 8007794:	4013      	ands	r3, r2
 8007796:	b25b      	sxtb	r3, r3
 8007798:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800779c:	f102 0208 	add.w	r2, r2, #8
 80077a0:	7013      	strb	r3, [r2, #0]
            if (set) {
 80077a2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077a6:	f103 0308 	add.w	r3, r3, #8
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d010      	beq.n	80077d2 <hagl_put_char+0x13e>
                *(ptr++) = color;
 80077b0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077b4:	f103 030c 	add.w	r3, r3, #12
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	1c9a      	adds	r2, r3, #2
 80077bc:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80077c0:	f101 010c 	add.w	r1, r1, #12
 80077c4:	600a      	str	r2, [r1, #0]
 80077c6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80077ca:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	e00c      	b.n	80077ec <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 80077d2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077d6:	f103 030c 	add.w	r3, r3, #12
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	1c9a      	adds	r2, r3, #2
 80077de:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80077e2:	f101 010c 	add.w	r1, r1, #12
 80077e6:	600a      	str	r2, [r1, #0]
 80077e8:	2200      	movs	r2, #0
 80077ea:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80077ec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077f0:	f103 030a 	add.w	r3, r3, #10
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80077fc:	f102 020a 	add.w	r2, r2, #10
 8007800:	7013      	strb	r3, [r2, #0]
 8007802:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007806:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800780a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800780e:	f102 020a 	add.w	r2, r2, #10
 8007812:	7812      	ldrb	r2, [r2, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d3ac      	bcc.n	8007772 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8007818:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800781c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007820:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007824:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8007828:	4413      	add	r3, r2
 800782a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800782e:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8007832:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007836:	f103 030b 	add.w	r3, r3, #11
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	3301      	adds	r3, #1
 800783e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007842:	f102 020b 	add.w	r2, r2, #11
 8007846:	7013      	strb	r3, [r2, #0]
 8007848:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800784c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007850:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007854:	f102 020b 	add.w	r2, r2, #11
 8007858:	7812      	ldrb	r2, [r2, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d382      	bcc.n	8007764 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 800785e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007862:	3b18      	subs	r3, #24
 8007864:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007868:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 800786c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007870:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8007874:	461a      	mov	r2, r3
 8007876:	f000 f85a 	bl	800792e <hagl_blit>

    return bitmap.width;
 800787a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800787e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007882:	b2db      	uxtb	r3, r3
}
 8007884:	4618      	mov	r0, r3
 8007886:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	bd90      	pop	{r4, r7, pc}

08007890 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08c      	sub	sp, #48	@ 0x30
 8007894:	af02      	add	r7, sp, #8
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	4608      	mov	r0, r1
 800789a:	4611      	mov	r1, r2
 800789c:	461a      	mov	r2, r3
 800789e:	4603      	mov	r3, r0
 80078a0:	817b      	strh	r3, [r7, #10]
 80078a2:	460b      	mov	r3, r1
 80078a4:	813b      	strh	r3, [r7, #8]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80078aa:	897b      	ldrh	r3, [r7, #10]
 80078ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80078ae:	f107 0314 	add.w	r3, r7, #20
 80078b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff fbcb 	bl	8007050 <fontx_meta>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 80078c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <hagl_put_text+0x3c>
        return 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	e02c      	b.n	8007926 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	1d1a      	adds	r2, r3, #4
 80078d0:	60fa      	str	r2, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	2b0d      	cmp	r3, #13
 80078da:	d002      	beq.n	80078e2 <hagl_put_text+0x52>
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	2b0a      	cmp	r3, #10
 80078e0:	d108      	bne.n	80078f4 <hagl_put_text+0x64>
            x0 = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80078e6:	7fbb      	ldrb	r3, [r7, #30]
 80078e8:	461a      	mov	r2, r3
 80078ea:	893b      	ldrh	r3, [r7, #8]
 80078ec:	4413      	add	r3, r2
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	813b      	strh	r3, [r7, #8]
 80078f2:	e010      	b.n	8007916 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80078f4:	88f8      	ldrh	r0, [r7, #6]
 80078f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80078fa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	4603      	mov	r3, r0
 8007904:	6a38      	ldr	r0, [r7, #32]
 8007906:	f7ff fec5 	bl	8007694 <hagl_put_char>
 800790a:	4603      	mov	r3, r0
 800790c:	461a      	mov	r2, r3
 800790e:	897b      	ldrh	r3, [r7, #10]
 8007910:	4413      	add	r3, r2
 8007912:	b29b      	uxth	r3, r3
 8007914:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1d6      	bne.n	80078cc <hagl_put_text+0x3c>

    return x0 - original;
 800791e:	897a      	ldrh	r2, [r7, #10]
 8007920:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	b29b      	uxth	r3, r3
}
 8007926:	4618      	mov	r0, r3
 8007928:	3728      	adds	r7, #40	@ 0x28
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	4603      	mov	r3, r0
 8007936:	603a      	str	r2, [r7, #0]
 8007938:	80fb      	strh	r3, [r7, #6]
 800793a:	460b      	mov	r3, r1
 800793c:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8007944:	2300      	movs	r3, #0
 8007946:	827b      	strh	r3, [r7, #18]
 8007948:	e020      	b.n	800798c <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800794a:	2300      	movs	r3, #0
 800794c:	823b      	strh	r3, [r7, #16]
 800794e:	e015      	b.n	800797c <hagl_blit+0x4e>
            color = *(ptr++);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	1c9a      	adds	r2, r3, #2
 8007954:	617a      	str	r2, [r7, #20]
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800795a:	88fa      	ldrh	r2, [r7, #6]
 800795c:	8a3b      	ldrh	r3, [r7, #16]
 800795e:	4413      	add	r3, r2
 8007960:	b29b      	uxth	r3, r3
 8007962:	b218      	sxth	r0, r3
 8007964:	88ba      	ldrh	r2, [r7, #4]
 8007966:	8a7b      	ldrh	r3, [r7, #18]
 8007968:	4413      	add	r3, r2
 800796a:	b29b      	uxth	r3, r3
 800796c:	b21b      	sxth	r3, r3
 800796e:	89fa      	ldrh	r2, [r7, #14]
 8007970:	4619      	mov	r1, r3
 8007972:	f7ff fc43 	bl	80071fc <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8007976:	8a3b      	ldrh	r3, [r7, #16]
 8007978:	3301      	adds	r3, #1
 800797a:	823b      	strh	r3, [r7, #16]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	8a3a      	ldrh	r2, [r7, #16]
 8007982:	429a      	cmp	r2, r3
 8007984:	d3e4      	bcc.n	8007950 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8007986:	8a7b      	ldrh	r3, [r7, #18]
 8007988:	3301      	adds	r3, #1
 800798a:	827b      	strh	r3, [r7, #18]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	885b      	ldrh	r3, [r3, #2]
 8007990:	8a7a      	ldrh	r2, [r7, #18]
 8007992:	429a      	cmp	r2, r3
 8007994:	d3d9      	bcc.n	800794a <hagl_blit+0x1c>
        }
    }
#endif
};
 8007996:	bf00      	nop
 8007998:	bf00      	nop
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <hagl_draw_circle>:
#endif
}



void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	4611      	mov	r1, r2
 80079ac:	461a      	mov	r2, r3
 80079ae:	4623      	mov	r3, r4
 80079b0:	80fb      	strh	r3, [r7, #6]
 80079b2:	4603      	mov	r3, r0
 80079b4:	80bb      	strh	r3, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	807b      	strh	r3, [r7, #2]
 80079ba:	4613      	mov	r3, r2
 80079bc:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80079c2:	887b      	ldrh	r3, [r7, #2]
 80079c4:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 80079c6:	887b      	ldrh	r3, [r7, #2]
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f1c3 0303 	rsb	r3, r3, #3
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	89fb      	ldrh	r3, [r7, #14]
 80079d8:	4413      	add	r3, r2
 80079da:	b29b      	uxth	r3, r3
 80079dc:	b218      	sxth	r0, r3
 80079de:	88ba      	ldrh	r2, [r7, #4]
 80079e0:	89bb      	ldrh	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	b21b      	sxth	r3, r3
 80079e8:	883a      	ldrh	r2, [r7, #0]
 80079ea:	4619      	mov	r1, r3
 80079ec:	f7ff fc06 	bl	80071fc <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	89fb      	ldrh	r3, [r7, #14]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	b218      	sxth	r0, r3
 80079fa:	88ba      	ldrh	r2, [r7, #4]
 80079fc:	89bb      	ldrh	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	b21b      	sxth	r3, r3
 8007a04:	883a      	ldrh	r2, [r7, #0]
 8007a06:	4619      	mov	r1, r3
 8007a08:	f7ff fbf8 	bl	80071fc <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8007a0c:	88fa      	ldrh	r2, [r7, #6]
 8007a0e:	89fb      	ldrh	r3, [r7, #14]
 8007a10:	4413      	add	r3, r2
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	b218      	sxth	r0, r3
 8007a16:	88ba      	ldrh	r2, [r7, #4]
 8007a18:	89bb      	ldrh	r3, [r7, #12]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	b21b      	sxth	r3, r3
 8007a20:	883a      	ldrh	r2, [r7, #0]
 8007a22:	4619      	mov	r1, r3
 8007a24:	f7ff fbea 	bl	80071fc <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8007a28:	88fa      	ldrh	r2, [r7, #6]
 8007a2a:	89fb      	ldrh	r3, [r7, #14]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	b218      	sxth	r0, r3
 8007a32:	88ba      	ldrh	r2, [r7, #4]
 8007a34:	89bb      	ldrh	r3, [r7, #12]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	b21b      	sxth	r3, r3
 8007a3c:	883a      	ldrh	r2, [r7, #0]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	f7ff fbdc 	bl	80071fc <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8007a44:	88fa      	ldrh	r2, [r7, #6]
 8007a46:	89bb      	ldrh	r3, [r7, #12]
 8007a48:	4413      	add	r3, r2
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	b218      	sxth	r0, r3
 8007a4e:	88ba      	ldrh	r2, [r7, #4]
 8007a50:	89fb      	ldrh	r3, [r7, #14]
 8007a52:	4413      	add	r3, r2
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	883a      	ldrh	r2, [r7, #0]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	f7ff fbce 	bl	80071fc <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8007a60:	88fa      	ldrh	r2, [r7, #6]
 8007a62:	89bb      	ldrh	r3, [r7, #12]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	b218      	sxth	r0, r3
 8007a6a:	88ba      	ldrh	r2, [r7, #4]
 8007a6c:	89fb      	ldrh	r3, [r7, #14]
 8007a6e:	4413      	add	r3, r2
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	b21b      	sxth	r3, r3
 8007a74:	883a      	ldrh	r2, [r7, #0]
 8007a76:	4619      	mov	r1, r3
 8007a78:	f7ff fbc0 	bl	80071fc <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8007a7c:	88fa      	ldrh	r2, [r7, #6]
 8007a7e:	89bb      	ldrh	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	b218      	sxth	r0, r3
 8007a86:	88ba      	ldrh	r2, [r7, #4]
 8007a88:	89fb      	ldrh	r3, [r7, #14]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	b21b      	sxth	r3, r3
 8007a90:	883a      	ldrh	r2, [r7, #0]
 8007a92:	4619      	mov	r1, r3
 8007a94:	f7ff fbb2 	bl	80071fc <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	89bb      	ldrh	r3, [r7, #12]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	b218      	sxth	r0, r3
 8007aa2:	88ba      	ldrh	r2, [r7, #4]
 8007aa4:	89fb      	ldrh	r3, [r7, #14]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	b21b      	sxth	r3, r3
 8007aac:	883a      	ldrh	r2, [r7, #0]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	f7ff fba4 	bl	80071fc <hagl_put_pixel>

    while (y >= x) {
 8007ab4:	e097      	b.n	8007be6 <hagl_draw_circle+0x246>
        x++;
 8007ab6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	3301      	adds	r3, #1
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007ac2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	dd14      	ble.n	8007af4 <hagl_draw_circle+0x154>
            y--;
 8007aca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007ad6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007ada:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	897b      	ldrh	r3, [r7, #10]
 8007ae8:	4413      	add	r3, r2
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	330a      	adds	r3, #10
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	817b      	strh	r3, [r7, #10]
 8007af2:	e008      	b.n	8007b06 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8007af4:	89fb      	ldrh	r3, [r7, #14]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	897b      	ldrh	r3, [r7, #10]
 8007afc:	4413      	add	r3, r2
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3306      	adds	r3, #6
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8007b06:	88fa      	ldrh	r2, [r7, #6]
 8007b08:	89fb      	ldrh	r3, [r7, #14]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	b218      	sxth	r0, r3
 8007b10:	88ba      	ldrh	r2, [r7, #4]
 8007b12:	89bb      	ldrh	r3, [r7, #12]
 8007b14:	4413      	add	r3, r2
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	b21b      	sxth	r3, r3
 8007b1a:	883a      	ldrh	r2, [r7, #0]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	f7ff fb6d 	bl	80071fc <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8007b22:	88fa      	ldrh	r2, [r7, #6]
 8007b24:	89fb      	ldrh	r3, [r7, #14]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	b218      	sxth	r0, r3
 8007b2c:	88ba      	ldrh	r2, [r7, #4]
 8007b2e:	89bb      	ldrh	r3, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	b21b      	sxth	r3, r3
 8007b36:	883a      	ldrh	r2, [r7, #0]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	f7ff fb5f 	bl	80071fc <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 8007b3e:	88fa      	ldrh	r2, [r7, #6]
 8007b40:	89fb      	ldrh	r3, [r7, #14]
 8007b42:	4413      	add	r3, r2
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	b218      	sxth	r0, r3
 8007b48:	88ba      	ldrh	r2, [r7, #4]
 8007b4a:	89bb      	ldrh	r3, [r7, #12]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	b21b      	sxth	r3, r3
 8007b52:	883a      	ldrh	r2, [r7, #0]
 8007b54:	4619      	mov	r1, r3
 8007b56:	f7ff fb51 	bl	80071fc <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	89fb      	ldrh	r3, [r7, #14]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	b218      	sxth	r0, r3
 8007b64:	88ba      	ldrh	r2, [r7, #4]
 8007b66:	89bb      	ldrh	r3, [r7, #12]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	b21b      	sxth	r3, r3
 8007b6e:	883a      	ldrh	r2, [r7, #0]
 8007b70:	4619      	mov	r1, r3
 8007b72:	f7ff fb43 	bl	80071fc <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8007b76:	88fa      	ldrh	r2, [r7, #6]
 8007b78:	89bb      	ldrh	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	b218      	sxth	r0, r3
 8007b80:	88ba      	ldrh	r2, [r7, #4]
 8007b82:	89fb      	ldrh	r3, [r7, #14]
 8007b84:	4413      	add	r3, r2
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	b21b      	sxth	r3, r3
 8007b8a:	883a      	ldrh	r2, [r7, #0]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	f7ff fb35 	bl	80071fc <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8007b92:	88fa      	ldrh	r2, [r7, #6]
 8007b94:	89bb      	ldrh	r3, [r7, #12]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	b218      	sxth	r0, r3
 8007b9c:	88ba      	ldrh	r2, [r7, #4]
 8007b9e:	89fb      	ldrh	r3, [r7, #14]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	b21b      	sxth	r3, r3
 8007ba6:	883a      	ldrh	r2, [r7, #0]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	f7ff fb27 	bl	80071fc <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8007bae:	88fa      	ldrh	r2, [r7, #6]
 8007bb0:	89bb      	ldrh	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	b218      	sxth	r0, r3
 8007bb8:	88ba      	ldrh	r2, [r7, #4]
 8007bba:	89fb      	ldrh	r3, [r7, #14]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	b21b      	sxth	r3, r3
 8007bc2:	883a      	ldrh	r2, [r7, #0]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	f7ff fb19 	bl	80071fc <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8007bca:	88fa      	ldrh	r2, [r7, #6]
 8007bcc:	89bb      	ldrh	r3, [r7, #12]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	b218      	sxth	r0, r3
 8007bd4:	88ba      	ldrh	r2, [r7, #4]
 8007bd6:	89fb      	ldrh	r3, [r7, #14]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	b21b      	sxth	r3, r3
 8007bde:	883a      	ldrh	r2, [r7, #0]
 8007be0:	4619      	mov	r1, r3
 8007be2:	f7ff fb0b 	bl	80071fc <hagl_put_pixel>
    while (y >= x) {
 8007be6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	f6bf af61 	bge.w	8007ab6 <hagl_draw_circle+0x116>
    }
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd90      	pop	{r4, r7, pc}

08007bfe <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8007bfe:	b590      	push	{r4, r7, lr}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	4604      	mov	r4, r0
 8007c06:	4608      	mov	r0, r1
 8007c08:	4611      	mov	r1, r2
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4623      	mov	r3, r4
 8007c0e:	80fb      	strh	r3, [r7, #6]
 8007c10:	4603      	mov	r3, r0
 8007c12:	80bb      	strh	r3, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	807b      	strh	r3, [r7, #2]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8007c20:	887b      	ldrh	r3, [r7, #2]
 8007c22:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007c24:	887b      	ldrh	r3, [r7, #2]
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f1c3 0303 	rsb	r3, r3, #3
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8007c32:	e067      	b.n	8007d04 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	89fb      	ldrh	r3, [r7, #14]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	b218      	sxth	r0, r3
 8007c3e:	88ba      	ldrh	r2, [r7, #4]
 8007c40:	89bb      	ldrh	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	b219      	sxth	r1, r3
 8007c48:	89fb      	ldrh	r3, [r7, #14]
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	883b      	ldrh	r3, [r7, #0]
 8007c50:	f7ff fb06 	bl	8007260 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	89fb      	ldrh	r3, [r7, #14]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	b218      	sxth	r0, r3
 8007c5e:	88ba      	ldrh	r2, [r7, #4]
 8007c60:	89bb      	ldrh	r3, [r7, #12]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	b219      	sxth	r1, r3
 8007c68:	89fb      	ldrh	r3, [r7, #14]
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	883b      	ldrh	r3, [r7, #0]
 8007c70:	f7ff faf6 	bl	8007260 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8007c74:	88fa      	ldrh	r2, [r7, #6]
 8007c76:	89bb      	ldrh	r3, [r7, #12]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	b218      	sxth	r0, r3
 8007c7e:	88ba      	ldrh	r2, [r7, #4]
 8007c80:	89fb      	ldrh	r3, [r7, #14]
 8007c82:	4413      	add	r3, r2
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	b219      	sxth	r1, r3
 8007c88:	89bb      	ldrh	r3, [r7, #12]
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	883b      	ldrh	r3, [r7, #0]
 8007c90:	f7ff fae6 	bl	8007260 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8007c94:	88fa      	ldrh	r2, [r7, #6]
 8007c96:	89bb      	ldrh	r3, [r7, #12]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	b218      	sxth	r0, r3
 8007c9e:	88ba      	ldrh	r2, [r7, #4]
 8007ca0:	89fb      	ldrh	r3, [r7, #14]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	b219      	sxth	r1, r3
 8007ca8:	89bb      	ldrh	r3, [r7, #12]
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	883b      	ldrh	r3, [r7, #0]
 8007cb0:	f7ff fad6 	bl	8007260 <hagl_draw_hline>
        x++;
 8007cb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3301      	adds	r3, #1
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007cc0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	dd14      	ble.n	8007cf2 <hagl_fill_circle+0xf4>
            y--;
 8007cc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007cd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007cd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	897b      	ldrh	r3, [r7, #10]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	330a      	adds	r3, #10
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	817b      	strh	r3, [r7, #10]
 8007cf0:	e008      	b.n	8007d04 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8007cf2:	89fb      	ldrh	r3, [r7, #14]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	897b      	ldrh	r3, [r7, #10]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3306      	adds	r3, #6
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8007d04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007d08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	da91      	bge.n	8007c34 <hagl_fill_circle+0x36>
        }
    }
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd90      	pop	{r4, r7, pc}

08007d1a <hagl_draw_polygon>:



void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007d1a:	b590      	push	{r4, r7, lr}
 8007d1c:	b087      	sub	sp, #28
 8007d1e:	af02      	add	r7, sp, #8
 8007d20:	4603      	mov	r3, r0
 8007d22:	6039      	str	r1, [r7, #0]
 8007d24:	80fb      	strh	r3, [r7, #6]
 8007d26:	4613      	mov	r3, r2
 8007d28:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	81fb      	strh	r3, [r7, #14]
 8007d2e:	e02a      	b.n	8007d86 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8007d30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4413      	add	r3, r2
        hagl_draw_line(
 8007d3a:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8007d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	3302      	adds	r3, #2
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	4413      	add	r3, r2
        hagl_draw_line(
 8007d4a:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8007d4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d52:	3301      	adds	r3, #1
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	4413      	add	r3, r2
        hagl_draw_line(
 8007d5a:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8007d5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	3306      	adds	r3, #6
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	4413      	add	r3, r2
        hagl_draw_line(
 8007d6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007d6e:	88bb      	ldrh	r3, [r7, #4]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	4613      	mov	r3, r2
 8007d74:	4622      	mov	r2, r4
 8007d76:	f7ff fab9 	bl	80072ec <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007d7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3301      	adds	r3, #1
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	81fb      	strh	r3, [r7, #14]
 8007d86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	429a      	cmp	r2, r3
 8007d92:	dbcd      	blt.n	8007d30 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	3302      	adds	r3, #2
    hagl_draw_line(
 8007d9e:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8007da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007da6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007daa:	3b01      	subs	r3, #1
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	4413      	add	r3, r2
    hagl_draw_line(
 8007db2:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	3b02      	subs	r3, #2
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	4413      	add	r3, r2
    hagl_draw_line(
 8007dc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007dc6:	88bb      	ldrh	r3, [r7, #4]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	4622      	mov	r2, r4
 8007dce:	f7ff fa8d 	bl	80072ec <hagl_draw_line>
        color
    );
}
 8007dd2:	bf00      	nop
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd90      	pop	{r4, r7, pc}

08007dda <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b0ac      	sub	sp, #176	@ 0xb0
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	4603      	mov	r3, r0
 8007de2:	6039      	str	r1, [r7, #0]
 8007de4:	80fb      	strh	r3, [r7, #6]
 8007de6:	4613      	mov	r3, r2
 8007de8:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8007dea:	2380      	movs	r3, #128	@ 0x80
 8007dec:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007df6:	2300      	movs	r3, #0
 8007df8:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007dfc:	e02e      	b.n	8007e5c <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8007dfe:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	3302      	adds	r3, #2
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e0e:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8007e12:	429a      	cmp	r2, r3
 8007e14:	dd08      	ble.n	8007e28 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8007e16:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	3302      	adds	r3, #2
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	4413      	add	r3, r2
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8007e28:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	3302      	adds	r3, #2
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	4413      	add	r3, r2
 8007e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e38:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	da08      	bge.n	8007e52 <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8007e40:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	3302      	adds	r3, #2
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8007e52:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007e56:	3301      	adds	r3, #1
 8007e58:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007e5c:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8007e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	dbca      	blt.n	8007dfe <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007e68:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007e6c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007e70:	e144      	b.n	80080fc <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007e78:	88fb      	ldrh	r3, [r7, #6]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007e82:	2300      	movs	r3, #0
 8007e84:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007e88:	e0a6      	b.n	8007fd8 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007e8a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	4413      	add	r3, r2
 8007e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e98:	ee07 3a90 	vmov	s15, r3
 8007e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ea0:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007ea4:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	3302      	adds	r3, #2
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eb4:	ee07 3a90 	vmov	s15, r3
 8007eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ebc:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007ec0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ed6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007eda:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ef2:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007ef6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007f02:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0e:	d50c      	bpl.n	8007f2a <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007f10:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f14:	ee07 3a90 	vmov	s15, r3
 8007f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f1c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f28:	da19      	bge.n	8007f5e <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007f2a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007f36:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007f3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f42:	d53e      	bpl.n	8007fc2 <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007f44:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f48:	ee07 3a90 	vmov	s15, r3
 8007f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f50:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f5c:	db31      	blt.n	8007fc2 <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007f5e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f6a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007f6e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007f72:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007f76:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f82:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007f86:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007f8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f92:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f9e:	ee17 3a90 	vmov	r3, s15
 8007fa2:	b21a      	sxth	r2, r3
 8007fa4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007fa8:	b292      	uxth	r2, r2
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	33b0      	adds	r3, #176	@ 0xb0
 8007fae:	443b      	add	r3, r7
 8007fb0:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007fb4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3301      	adds	r3, #1
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007fc2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007fc6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007fca:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007fd8:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	f6ff af52 	blt.w	8007e8a <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007fec:	e046      	b.n	800807c <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007fee:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	33b0      	adds	r3, #176	@ 0xb0
 8007ff6:	443b      	add	r3, r7
 8007ff8:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007ffc:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8008000:	3301      	adds	r3, #1
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	33b0      	adds	r3, #176	@ 0xb0
 8008006:	443b      	add	r3, r7
 8008008:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800800c:	429a      	cmp	r2, r3
 800800e:	d92e      	bls.n	800806e <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8008010:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	33b0      	adds	r3, #176	@ 0xb0
 8008018:	443b      	add	r3, r7
 800801a:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800801e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8008022:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8008026:	3301      	adds	r3, #1
 8008028:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	33b0      	adds	r3, #176	@ 0xb0
 8008030:	443b      	add	r3, r7
 8008032:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8008036:	0053      	lsls	r3, r2, #1
 8008038:	33b0      	adds	r3, #176	@ 0xb0
 800803a:	443b      	add	r3, r7
 800803c:	460a      	mov	r2, r1
 800803e:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8008042:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8008046:	3301      	adds	r3, #1
 8008048:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	33b0      	adds	r3, #176	@ 0xb0
 8008050:	443b      	add	r3, r7
 8008052:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8008056:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00e      	beq.n	800807c <hagl_fill_polygon+0x2a2>
                    i--;
 800805e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29b      	uxth	r3, r3
 8008068:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 800806c:	e006      	b.n	800807c <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 800806e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8008072:	b29b      	uxth	r3, r3
 8008074:	3301      	adds	r3, #1
 8008076:	b29b      	uxth	r3, r3
 8008078:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 800807c:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8008080:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8008084:	3b01      	subs	r3, #1
 8008086:	429a      	cmp	r2, r3
 8008088:	dbb1      	blt.n	8007fee <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 800808a:	2300      	movs	r3, #0
 800808c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8008090:	e027      	b.n	80080e2 <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8008092:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8008096:	3301      	adds	r3, #1
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	33b0      	adds	r3, #176	@ 0xb0
 800809c:	443b      	add	r3, r7
 800809e:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 80080a2:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	33b0      	adds	r3, #176	@ 0xb0
 80080aa:	443b      	add	r3, r7
 80080ac:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 80080b8:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	33b0      	adds	r3, #176	@ 0xb0
 80080c0:	443b      	add	r3, r7
 80080c2:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80080c6:	b218      	sxth	r0, r3
 80080c8:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 80080cc:	88bb      	ldrh	r3, [r7, #4]
 80080ce:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 80080d2:	f7ff f8c5 	bl	8007260 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 80080d6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80080da:	3302      	adds	r3, #2
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 80080e2:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 80080e6:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 80080ea:	429a      	cmp	r2, r3
 80080ec:	dbd1      	blt.n	8008092 <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 80080ee:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	3301      	adds	r3, #1
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80080fc:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8008100:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8008104:	429a      	cmp	r2, r3
 8008106:	f6ff aeb4 	blt.w	8007e72 <hagl_fill_polygon+0x98>
        }
    }
}
 800810a:	bf00      	nop
 800810c:	bf00      	nop
 800810e:	37b0      	adds	r7, #176	@ 0xb0
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8008114:	b590      	push	{r4, r7, lr}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	4611      	mov	r1, r2
 8008120:	461a      	mov	r2, r3
 8008122:	4623      	mov	r3, r4
 8008124:	80fb      	strh	r3, [r7, #6]
 8008126:	4603      	mov	r3, r0
 8008128:	80bb      	strh	r3, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	807b      	strh	r3, [r7, #2]
 800812e:	4613      	mov	r3, r2
 8008130:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8008132:	88fb      	ldrh	r3, [r7, #6]
 8008134:	81bb      	strh	r3, [r7, #12]
 8008136:	88bb      	ldrh	r3, [r7, #4]
 8008138:	81fb      	strh	r3, [r7, #14]
 800813a:	887b      	ldrh	r3, [r7, #2]
 800813c:	823b      	strh	r3, [r7, #16]
 800813e:	883b      	ldrh	r3, [r7, #0]
 8008140:	827b      	strh	r3, [r7, #18]
 8008142:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008144:	82bb      	strh	r3, [r7, #20]
 8008146:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008148:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 800814a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800814c:	f107 030c 	add.w	r3, r7, #12
 8008150:	4619      	mov	r1, r3
 8008152:	2003      	movs	r0, #3
 8008154:	f7ff fde1 	bl	8007d1a <hagl_draw_polygon>
};
 8008158:	bf00      	nop
 800815a:	371c      	adds	r7, #28
 800815c:	46bd      	mov	sp, r7
 800815e:	bd90      	pop	{r4, r7, pc}

08008160 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8008160:	b590      	push	{r4, r7, lr}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	4604      	mov	r4, r0
 8008168:	4608      	mov	r0, r1
 800816a:	4611      	mov	r1, r2
 800816c:	461a      	mov	r2, r3
 800816e:	4623      	mov	r3, r4
 8008170:	80fb      	strh	r3, [r7, #6]
 8008172:	4603      	mov	r3, r0
 8008174:	80bb      	strh	r3, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	807b      	strh	r3, [r7, #2]
 800817a:	4613      	mov	r3, r2
 800817c:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 800817e:	88fb      	ldrh	r3, [r7, #6]
 8008180:	81bb      	strh	r3, [r7, #12]
 8008182:	88bb      	ldrh	r3, [r7, #4]
 8008184:	81fb      	strh	r3, [r7, #14]
 8008186:	887b      	ldrh	r3, [r7, #2]
 8008188:	823b      	strh	r3, [r7, #16]
 800818a:	883b      	ldrh	r3, [r7, #0]
 800818c:	827b      	strh	r3, [r7, #18]
 800818e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008190:	82bb      	strh	r3, [r7, #20]
 8008192:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008194:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8008196:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8008198:	f107 030c 	add.w	r3, r7, #12
 800819c:	4619      	mov	r1, r3
 800819e:	2003      	movs	r0, #3
 80081a0:	f7ff fe1b 	bl	8007dda <hagl_fill_polygon>
}
 80081a4:	bf00      	nop
 80081a6:	371c      	adds	r7, #28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd90      	pop	{r4, r7, pc}

080081ac <malloc>:
 80081ac:	4b02      	ldr	r3, [pc, #8]	@ (80081b8 <malloc+0xc>)
 80081ae:	4601      	mov	r1, r0
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	f000 b82d 	b.w	8008210 <_malloc_r>
 80081b6:	bf00      	nop
 80081b8:	20000214 	.word	0x20000214

080081bc <free>:
 80081bc:	4b02      	ldr	r3, [pc, #8]	@ (80081c8 <free+0xc>)
 80081be:	4601      	mov	r1, r0
 80081c0:	6818      	ldr	r0, [r3, #0]
 80081c2:	f000 b9b5 	b.w	8008530 <_free_r>
 80081c6:	bf00      	nop
 80081c8:	20000214 	.word	0x20000214

080081cc <sbrk_aligned>:
 80081cc:	b570      	push	{r4, r5, r6, lr}
 80081ce:	4e0f      	ldr	r6, [pc, #60]	@ (800820c <sbrk_aligned+0x40>)
 80081d0:	460c      	mov	r4, r1
 80081d2:	6831      	ldr	r1, [r6, #0]
 80081d4:	4605      	mov	r5, r0
 80081d6:	b911      	cbnz	r1, 80081de <sbrk_aligned+0x12>
 80081d8:	f000 f960 	bl	800849c <_sbrk_r>
 80081dc:	6030      	str	r0, [r6, #0]
 80081de:	4621      	mov	r1, r4
 80081e0:	4628      	mov	r0, r5
 80081e2:	f000 f95b 	bl	800849c <_sbrk_r>
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	d103      	bne.n	80081f2 <sbrk_aligned+0x26>
 80081ea:	f04f 34ff 	mov.w	r4, #4294967295
 80081ee:	4620      	mov	r0, r4
 80081f0:	bd70      	pop	{r4, r5, r6, pc}
 80081f2:	1cc4      	adds	r4, r0, #3
 80081f4:	f024 0403 	bic.w	r4, r4, #3
 80081f8:	42a0      	cmp	r0, r4
 80081fa:	d0f8      	beq.n	80081ee <sbrk_aligned+0x22>
 80081fc:	1a21      	subs	r1, r4, r0
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 f94c 	bl	800849c <_sbrk_r>
 8008204:	3001      	adds	r0, #1
 8008206:	d1f2      	bne.n	80081ee <sbrk_aligned+0x22>
 8008208:	e7ef      	b.n	80081ea <sbrk_aligned+0x1e>
 800820a:	bf00      	nop
 800820c:	2000af50 	.word	0x2000af50

08008210 <_malloc_r>:
 8008210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008214:	1ccd      	adds	r5, r1, #3
 8008216:	f025 0503 	bic.w	r5, r5, #3
 800821a:	3508      	adds	r5, #8
 800821c:	2d0c      	cmp	r5, #12
 800821e:	bf38      	it	cc
 8008220:	250c      	movcc	r5, #12
 8008222:	2d00      	cmp	r5, #0
 8008224:	4606      	mov	r6, r0
 8008226:	db01      	blt.n	800822c <_malloc_r+0x1c>
 8008228:	42a9      	cmp	r1, r5
 800822a:	d904      	bls.n	8008236 <_malloc_r+0x26>
 800822c:	230c      	movs	r3, #12
 800822e:	6033      	str	r3, [r6, #0]
 8008230:	2000      	movs	r0, #0
 8008232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800830c <_malloc_r+0xfc>
 800823a:	f000 f869 	bl	8008310 <__malloc_lock>
 800823e:	f8d8 3000 	ldr.w	r3, [r8]
 8008242:	461c      	mov	r4, r3
 8008244:	bb44      	cbnz	r4, 8008298 <_malloc_r+0x88>
 8008246:	4629      	mov	r1, r5
 8008248:	4630      	mov	r0, r6
 800824a:	f7ff ffbf 	bl	80081cc <sbrk_aligned>
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	4604      	mov	r4, r0
 8008252:	d158      	bne.n	8008306 <_malloc_r+0xf6>
 8008254:	f8d8 4000 	ldr.w	r4, [r8]
 8008258:	4627      	mov	r7, r4
 800825a:	2f00      	cmp	r7, #0
 800825c:	d143      	bne.n	80082e6 <_malloc_r+0xd6>
 800825e:	2c00      	cmp	r4, #0
 8008260:	d04b      	beq.n	80082fa <_malloc_r+0xea>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	4639      	mov	r1, r7
 8008266:	4630      	mov	r0, r6
 8008268:	eb04 0903 	add.w	r9, r4, r3
 800826c:	f000 f916 	bl	800849c <_sbrk_r>
 8008270:	4581      	cmp	r9, r0
 8008272:	d142      	bne.n	80082fa <_malloc_r+0xea>
 8008274:	6821      	ldr	r1, [r4, #0]
 8008276:	1a6d      	subs	r5, r5, r1
 8008278:	4629      	mov	r1, r5
 800827a:	4630      	mov	r0, r6
 800827c:	f7ff ffa6 	bl	80081cc <sbrk_aligned>
 8008280:	3001      	adds	r0, #1
 8008282:	d03a      	beq.n	80082fa <_malloc_r+0xea>
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	442b      	add	r3, r5
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	f8d8 3000 	ldr.w	r3, [r8]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	bb62      	cbnz	r2, 80082ec <_malloc_r+0xdc>
 8008292:	f8c8 7000 	str.w	r7, [r8]
 8008296:	e00f      	b.n	80082b8 <_malloc_r+0xa8>
 8008298:	6822      	ldr	r2, [r4, #0]
 800829a:	1b52      	subs	r2, r2, r5
 800829c:	d420      	bmi.n	80082e0 <_malloc_r+0xd0>
 800829e:	2a0b      	cmp	r2, #11
 80082a0:	d917      	bls.n	80082d2 <_malloc_r+0xc2>
 80082a2:	1961      	adds	r1, r4, r5
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	6025      	str	r5, [r4, #0]
 80082a8:	bf18      	it	ne
 80082aa:	6059      	strne	r1, [r3, #4]
 80082ac:	6863      	ldr	r3, [r4, #4]
 80082ae:	bf08      	it	eq
 80082b0:	f8c8 1000 	streq.w	r1, [r8]
 80082b4:	5162      	str	r2, [r4, r5]
 80082b6:	604b      	str	r3, [r1, #4]
 80082b8:	4630      	mov	r0, r6
 80082ba:	f000 f82f 	bl	800831c <__malloc_unlock>
 80082be:	f104 000b 	add.w	r0, r4, #11
 80082c2:	1d23      	adds	r3, r4, #4
 80082c4:	f020 0007 	bic.w	r0, r0, #7
 80082c8:	1ac2      	subs	r2, r0, r3
 80082ca:	bf1c      	itt	ne
 80082cc:	1a1b      	subne	r3, r3, r0
 80082ce:	50a3      	strne	r3, [r4, r2]
 80082d0:	e7af      	b.n	8008232 <_malloc_r+0x22>
 80082d2:	6862      	ldr	r2, [r4, #4]
 80082d4:	42a3      	cmp	r3, r4
 80082d6:	bf0c      	ite	eq
 80082d8:	f8c8 2000 	streq.w	r2, [r8]
 80082dc:	605a      	strne	r2, [r3, #4]
 80082de:	e7eb      	b.n	80082b8 <_malloc_r+0xa8>
 80082e0:	4623      	mov	r3, r4
 80082e2:	6864      	ldr	r4, [r4, #4]
 80082e4:	e7ae      	b.n	8008244 <_malloc_r+0x34>
 80082e6:	463c      	mov	r4, r7
 80082e8:	687f      	ldr	r7, [r7, #4]
 80082ea:	e7b6      	b.n	800825a <_malloc_r+0x4a>
 80082ec:	461a      	mov	r2, r3
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	42a3      	cmp	r3, r4
 80082f2:	d1fb      	bne.n	80082ec <_malloc_r+0xdc>
 80082f4:	2300      	movs	r3, #0
 80082f6:	6053      	str	r3, [r2, #4]
 80082f8:	e7de      	b.n	80082b8 <_malloc_r+0xa8>
 80082fa:	230c      	movs	r3, #12
 80082fc:	6033      	str	r3, [r6, #0]
 80082fe:	4630      	mov	r0, r6
 8008300:	f000 f80c 	bl	800831c <__malloc_unlock>
 8008304:	e794      	b.n	8008230 <_malloc_r+0x20>
 8008306:	6005      	str	r5, [r0, #0]
 8008308:	e7d6      	b.n	80082b8 <_malloc_r+0xa8>
 800830a:	bf00      	nop
 800830c:	2000af54 	.word	0x2000af54

08008310 <__malloc_lock>:
 8008310:	4801      	ldr	r0, [pc, #4]	@ (8008318 <__malloc_lock+0x8>)
 8008312:	f000 b8fd 	b.w	8008510 <__retarget_lock_acquire_recursive>
 8008316:	bf00      	nop
 8008318:	2000b094 	.word	0x2000b094

0800831c <__malloc_unlock>:
 800831c:	4801      	ldr	r0, [pc, #4]	@ (8008324 <__malloc_unlock+0x8>)
 800831e:	f000 b8f8 	b.w	8008512 <__retarget_lock_release_recursive>
 8008322:	bf00      	nop
 8008324:	2000b094 	.word	0x2000b094

08008328 <sniprintf>:
 8008328:	b40c      	push	{r2, r3}
 800832a:	b530      	push	{r4, r5, lr}
 800832c:	4b17      	ldr	r3, [pc, #92]	@ (800838c <sniprintf+0x64>)
 800832e:	1e0c      	subs	r4, r1, #0
 8008330:	681d      	ldr	r5, [r3, #0]
 8008332:	b09d      	sub	sp, #116	@ 0x74
 8008334:	da08      	bge.n	8008348 <sniprintf+0x20>
 8008336:	238b      	movs	r3, #139	@ 0x8b
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	f04f 30ff 	mov.w	r0, #4294967295
 800833e:	b01d      	add	sp, #116	@ 0x74
 8008340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008344:	b002      	add	sp, #8
 8008346:	4770      	bx	lr
 8008348:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800834c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008350:	bf14      	ite	ne
 8008352:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008356:	4623      	moveq	r3, r4
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008360:	9002      	str	r0, [sp, #8]
 8008362:	9006      	str	r0, [sp, #24]
 8008364:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008368:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800836a:	ab21      	add	r3, sp, #132	@ 0x84
 800836c:	a902      	add	r1, sp, #8
 800836e:	4628      	mov	r0, r5
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	f000 f983 	bl	800867c <_svfiprintf_r>
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	bfbc      	itt	lt
 800837a:	238b      	movlt	r3, #139	@ 0x8b
 800837c:	602b      	strlt	r3, [r5, #0]
 800837e:	2c00      	cmp	r4, #0
 8008380:	d0dd      	beq.n	800833e <sniprintf+0x16>
 8008382:	9b02      	ldr	r3, [sp, #8]
 8008384:	2200      	movs	r2, #0
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e7d9      	b.n	800833e <sniprintf+0x16>
 800838a:	bf00      	nop
 800838c:	20000214 	.word	0x20000214

08008390 <siprintf>:
 8008390:	b40e      	push	{r1, r2, r3}
 8008392:	b500      	push	{lr}
 8008394:	b09c      	sub	sp, #112	@ 0x70
 8008396:	ab1d      	add	r3, sp, #116	@ 0x74
 8008398:	9002      	str	r0, [sp, #8]
 800839a:	9006      	str	r0, [sp, #24]
 800839c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083a0:	4809      	ldr	r0, [pc, #36]	@ (80083c8 <siprintf+0x38>)
 80083a2:	9107      	str	r1, [sp, #28]
 80083a4:	9104      	str	r1, [sp, #16]
 80083a6:	4909      	ldr	r1, [pc, #36]	@ (80083cc <siprintf+0x3c>)
 80083a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ac:	9105      	str	r1, [sp, #20]
 80083ae:	6800      	ldr	r0, [r0, #0]
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	a902      	add	r1, sp, #8
 80083b4:	f000 f962 	bl	800867c <_svfiprintf_r>
 80083b8:	9b02      	ldr	r3, [sp, #8]
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	b01c      	add	sp, #112	@ 0x70
 80083c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083c4:	b003      	add	sp, #12
 80083c6:	4770      	bx	lr
 80083c8:	20000214 	.word	0x20000214
 80083cc:	ffff0208 	.word	0xffff0208

080083d0 <_vsniprintf_r>:
 80083d0:	b530      	push	{r4, r5, lr}
 80083d2:	4614      	mov	r4, r2
 80083d4:	2c00      	cmp	r4, #0
 80083d6:	b09b      	sub	sp, #108	@ 0x6c
 80083d8:	4605      	mov	r5, r0
 80083da:	461a      	mov	r2, r3
 80083dc:	da05      	bge.n	80083ea <_vsniprintf_r+0x1a>
 80083de:	238b      	movs	r3, #139	@ 0x8b
 80083e0:	6003      	str	r3, [r0, #0]
 80083e2:	f04f 30ff 	mov.w	r0, #4294967295
 80083e6:	b01b      	add	sp, #108	@ 0x6c
 80083e8:	bd30      	pop	{r4, r5, pc}
 80083ea:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80083ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80083f2:	bf14      	ite	ne
 80083f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083f8:	4623      	moveq	r3, r4
 80083fa:	9302      	str	r3, [sp, #8]
 80083fc:	9305      	str	r3, [sp, #20]
 80083fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008402:	9100      	str	r1, [sp, #0]
 8008404:	9104      	str	r1, [sp, #16]
 8008406:	f8ad 300e 	strh.w	r3, [sp, #14]
 800840a:	4669      	mov	r1, sp
 800840c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800840e:	f000 f935 	bl	800867c <_svfiprintf_r>
 8008412:	1c43      	adds	r3, r0, #1
 8008414:	bfbc      	itt	lt
 8008416:	238b      	movlt	r3, #139	@ 0x8b
 8008418:	602b      	strlt	r3, [r5, #0]
 800841a:	2c00      	cmp	r4, #0
 800841c:	d0e3      	beq.n	80083e6 <_vsniprintf_r+0x16>
 800841e:	9b00      	ldr	r3, [sp, #0]
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
 8008424:	e7df      	b.n	80083e6 <_vsniprintf_r+0x16>
	...

08008428 <vsniprintf>:
 8008428:	b507      	push	{r0, r1, r2, lr}
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	4613      	mov	r3, r2
 800842e:	460a      	mov	r2, r1
 8008430:	4601      	mov	r1, r0
 8008432:	4803      	ldr	r0, [pc, #12]	@ (8008440 <vsniprintf+0x18>)
 8008434:	6800      	ldr	r0, [r0, #0]
 8008436:	f7ff ffcb 	bl	80083d0 <_vsniprintf_r>
 800843a:	b003      	add	sp, #12
 800843c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008440:	20000214 	.word	0x20000214

08008444 <memcmp>:
 8008444:	b510      	push	{r4, lr}
 8008446:	3901      	subs	r1, #1
 8008448:	4402      	add	r2, r0
 800844a:	4290      	cmp	r0, r2
 800844c:	d101      	bne.n	8008452 <memcmp+0xe>
 800844e:	2000      	movs	r0, #0
 8008450:	e005      	b.n	800845e <memcmp+0x1a>
 8008452:	7803      	ldrb	r3, [r0, #0]
 8008454:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008458:	42a3      	cmp	r3, r4
 800845a:	d001      	beq.n	8008460 <memcmp+0x1c>
 800845c:	1b18      	subs	r0, r3, r4
 800845e:	bd10      	pop	{r4, pc}
 8008460:	3001      	adds	r0, #1
 8008462:	e7f2      	b.n	800844a <memcmp+0x6>

08008464 <memset>:
 8008464:	4402      	add	r2, r0
 8008466:	4603      	mov	r3, r0
 8008468:	4293      	cmp	r3, r2
 800846a:	d100      	bne.n	800846e <memset+0xa>
 800846c:	4770      	bx	lr
 800846e:	f803 1b01 	strb.w	r1, [r3], #1
 8008472:	e7f9      	b.n	8008468 <memset+0x4>

08008474 <strncpy>:
 8008474:	b510      	push	{r4, lr}
 8008476:	3901      	subs	r1, #1
 8008478:	4603      	mov	r3, r0
 800847a:	b132      	cbz	r2, 800848a <strncpy+0x16>
 800847c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008480:	f803 4b01 	strb.w	r4, [r3], #1
 8008484:	3a01      	subs	r2, #1
 8008486:	2c00      	cmp	r4, #0
 8008488:	d1f7      	bne.n	800847a <strncpy+0x6>
 800848a:	441a      	add	r2, r3
 800848c:	2100      	movs	r1, #0
 800848e:	4293      	cmp	r3, r2
 8008490:	d100      	bne.n	8008494 <strncpy+0x20>
 8008492:	bd10      	pop	{r4, pc}
 8008494:	f803 1b01 	strb.w	r1, [r3], #1
 8008498:	e7f9      	b.n	800848e <strncpy+0x1a>
	...

0800849c <_sbrk_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d06      	ldr	r5, [pc, #24]	@ (80084b8 <_sbrk_r+0x1c>)
 80084a0:	2300      	movs	r3, #0
 80084a2:	4604      	mov	r4, r0
 80084a4:	4608      	mov	r0, r1
 80084a6:	602b      	str	r3, [r5, #0]
 80084a8:	f7f9 ff94 	bl	80023d4 <_sbrk>
 80084ac:	1c43      	adds	r3, r0, #1
 80084ae:	d102      	bne.n	80084b6 <_sbrk_r+0x1a>
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	b103      	cbz	r3, 80084b6 <_sbrk_r+0x1a>
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	bd38      	pop	{r3, r4, r5, pc}
 80084b8:	2000b090 	.word	0x2000b090

080084bc <__errno>:
 80084bc:	4b01      	ldr	r3, [pc, #4]	@ (80084c4 <__errno+0x8>)
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20000214 	.word	0x20000214

080084c8 <__libc_init_array>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4d0d      	ldr	r5, [pc, #52]	@ (8008500 <__libc_init_array+0x38>)
 80084cc:	4c0d      	ldr	r4, [pc, #52]	@ (8008504 <__libc_init_array+0x3c>)
 80084ce:	1b64      	subs	r4, r4, r5
 80084d0:	10a4      	asrs	r4, r4, #2
 80084d2:	2600      	movs	r6, #0
 80084d4:	42a6      	cmp	r6, r4
 80084d6:	d109      	bne.n	80084ec <__libc_init_array+0x24>
 80084d8:	4d0b      	ldr	r5, [pc, #44]	@ (8008508 <__libc_init_array+0x40>)
 80084da:	4c0c      	ldr	r4, [pc, #48]	@ (800850c <__libc_init_array+0x44>)
 80084dc:	f000 fba8 	bl	8008c30 <_init>
 80084e0:	1b64      	subs	r4, r4, r5
 80084e2:	10a4      	asrs	r4, r4, #2
 80084e4:	2600      	movs	r6, #0
 80084e6:	42a6      	cmp	r6, r4
 80084e8:	d105      	bne.n	80084f6 <__libc_init_array+0x2e>
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f0:	4798      	blx	r3
 80084f2:	3601      	adds	r6, #1
 80084f4:	e7ee      	b.n	80084d4 <__libc_init_array+0xc>
 80084f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fa:	4798      	blx	r3
 80084fc:	3601      	adds	r6, #1
 80084fe:	e7f2      	b.n	80084e6 <__libc_init_array+0x1e>
 8008500:	080122e8 	.word	0x080122e8
 8008504:	080122e8 	.word	0x080122e8
 8008508:	080122e8 	.word	0x080122e8
 800850c:	080122ec 	.word	0x080122ec

08008510 <__retarget_lock_acquire_recursive>:
 8008510:	4770      	bx	lr

08008512 <__retarget_lock_release_recursive>:
 8008512:	4770      	bx	lr

08008514 <memcpy>:
 8008514:	440a      	add	r2, r1
 8008516:	4291      	cmp	r1, r2
 8008518:	f100 33ff 	add.w	r3, r0, #4294967295
 800851c:	d100      	bne.n	8008520 <memcpy+0xc>
 800851e:	4770      	bx	lr
 8008520:	b510      	push	{r4, lr}
 8008522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800852a:	4291      	cmp	r1, r2
 800852c:	d1f9      	bne.n	8008522 <memcpy+0xe>
 800852e:	bd10      	pop	{r4, pc}

08008530 <_free_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4605      	mov	r5, r0
 8008534:	2900      	cmp	r1, #0
 8008536:	d041      	beq.n	80085bc <_free_r+0x8c>
 8008538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800853c:	1f0c      	subs	r4, r1, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfb8      	it	lt
 8008542:	18e4      	addlt	r4, r4, r3
 8008544:	f7ff fee4 	bl	8008310 <__malloc_lock>
 8008548:	4a1d      	ldr	r2, [pc, #116]	@ (80085c0 <_free_r+0x90>)
 800854a:	6813      	ldr	r3, [r2, #0]
 800854c:	b933      	cbnz	r3, 800855c <_free_r+0x2c>
 800854e:	6063      	str	r3, [r4, #4]
 8008550:	6014      	str	r4, [r2, #0]
 8008552:	4628      	mov	r0, r5
 8008554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008558:	f7ff bee0 	b.w	800831c <__malloc_unlock>
 800855c:	42a3      	cmp	r3, r4
 800855e:	d908      	bls.n	8008572 <_free_r+0x42>
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	1821      	adds	r1, r4, r0
 8008564:	428b      	cmp	r3, r1
 8008566:	bf01      	itttt	eq
 8008568:	6819      	ldreq	r1, [r3, #0]
 800856a:	685b      	ldreq	r3, [r3, #4]
 800856c:	1809      	addeq	r1, r1, r0
 800856e:	6021      	streq	r1, [r4, #0]
 8008570:	e7ed      	b.n	800854e <_free_r+0x1e>
 8008572:	461a      	mov	r2, r3
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	b10b      	cbz	r3, 800857c <_free_r+0x4c>
 8008578:	42a3      	cmp	r3, r4
 800857a:	d9fa      	bls.n	8008572 <_free_r+0x42>
 800857c:	6811      	ldr	r1, [r2, #0]
 800857e:	1850      	adds	r0, r2, r1
 8008580:	42a0      	cmp	r0, r4
 8008582:	d10b      	bne.n	800859c <_free_r+0x6c>
 8008584:	6820      	ldr	r0, [r4, #0]
 8008586:	4401      	add	r1, r0
 8008588:	1850      	adds	r0, r2, r1
 800858a:	4283      	cmp	r3, r0
 800858c:	6011      	str	r1, [r2, #0]
 800858e:	d1e0      	bne.n	8008552 <_free_r+0x22>
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	6053      	str	r3, [r2, #4]
 8008596:	4408      	add	r0, r1
 8008598:	6010      	str	r0, [r2, #0]
 800859a:	e7da      	b.n	8008552 <_free_r+0x22>
 800859c:	d902      	bls.n	80085a4 <_free_r+0x74>
 800859e:	230c      	movs	r3, #12
 80085a0:	602b      	str	r3, [r5, #0]
 80085a2:	e7d6      	b.n	8008552 <_free_r+0x22>
 80085a4:	6820      	ldr	r0, [r4, #0]
 80085a6:	1821      	adds	r1, r4, r0
 80085a8:	428b      	cmp	r3, r1
 80085aa:	bf04      	itt	eq
 80085ac:	6819      	ldreq	r1, [r3, #0]
 80085ae:	685b      	ldreq	r3, [r3, #4]
 80085b0:	6063      	str	r3, [r4, #4]
 80085b2:	bf04      	itt	eq
 80085b4:	1809      	addeq	r1, r1, r0
 80085b6:	6021      	streq	r1, [r4, #0]
 80085b8:	6054      	str	r4, [r2, #4]
 80085ba:	e7ca      	b.n	8008552 <_free_r+0x22>
 80085bc:	bd38      	pop	{r3, r4, r5, pc}
 80085be:	bf00      	nop
 80085c0:	2000af54 	.word	0x2000af54

080085c4 <__ssputs_r>:
 80085c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	688e      	ldr	r6, [r1, #8]
 80085ca:	461f      	mov	r7, r3
 80085cc:	42be      	cmp	r6, r7
 80085ce:	680b      	ldr	r3, [r1, #0]
 80085d0:	4682      	mov	sl, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	4690      	mov	r8, r2
 80085d6:	d82d      	bhi.n	8008634 <__ssputs_r+0x70>
 80085d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085e0:	d026      	beq.n	8008630 <__ssputs_r+0x6c>
 80085e2:	6965      	ldr	r5, [r4, #20]
 80085e4:	6909      	ldr	r1, [r1, #16]
 80085e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085ea:	eba3 0901 	sub.w	r9, r3, r1
 80085ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085f2:	1c7b      	adds	r3, r7, #1
 80085f4:	444b      	add	r3, r9
 80085f6:	106d      	asrs	r5, r5, #1
 80085f8:	429d      	cmp	r5, r3
 80085fa:	bf38      	it	cc
 80085fc:	461d      	movcc	r5, r3
 80085fe:	0553      	lsls	r3, r2, #21
 8008600:	d527      	bpl.n	8008652 <__ssputs_r+0x8e>
 8008602:	4629      	mov	r1, r5
 8008604:	f7ff fe04 	bl	8008210 <_malloc_r>
 8008608:	4606      	mov	r6, r0
 800860a:	b360      	cbz	r0, 8008666 <__ssputs_r+0xa2>
 800860c:	6921      	ldr	r1, [r4, #16]
 800860e:	464a      	mov	r2, r9
 8008610:	f7ff ff80 	bl	8008514 <memcpy>
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800861a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	6126      	str	r6, [r4, #16]
 8008622:	6165      	str	r5, [r4, #20]
 8008624:	444e      	add	r6, r9
 8008626:	eba5 0509 	sub.w	r5, r5, r9
 800862a:	6026      	str	r6, [r4, #0]
 800862c:	60a5      	str	r5, [r4, #8]
 800862e:	463e      	mov	r6, r7
 8008630:	42be      	cmp	r6, r7
 8008632:	d900      	bls.n	8008636 <__ssputs_r+0x72>
 8008634:	463e      	mov	r6, r7
 8008636:	6820      	ldr	r0, [r4, #0]
 8008638:	4632      	mov	r2, r6
 800863a:	4641      	mov	r1, r8
 800863c:	f000 faa8 	bl	8008b90 <memmove>
 8008640:	68a3      	ldr	r3, [r4, #8]
 8008642:	1b9b      	subs	r3, r3, r6
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	4433      	add	r3, r6
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	2000      	movs	r0, #0
 800864e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008652:	462a      	mov	r2, r5
 8008654:	f000 fab6 	bl	8008bc4 <_realloc_r>
 8008658:	4606      	mov	r6, r0
 800865a:	2800      	cmp	r0, #0
 800865c:	d1e0      	bne.n	8008620 <__ssputs_r+0x5c>
 800865e:	6921      	ldr	r1, [r4, #16]
 8008660:	4650      	mov	r0, sl
 8008662:	f7ff ff65 	bl	8008530 <_free_r>
 8008666:	230c      	movs	r3, #12
 8008668:	f8ca 3000 	str.w	r3, [sl]
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	e7e9      	b.n	800864e <__ssputs_r+0x8a>
	...

0800867c <_svfiprintf_r>:
 800867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	4698      	mov	r8, r3
 8008682:	898b      	ldrh	r3, [r1, #12]
 8008684:	061b      	lsls	r3, r3, #24
 8008686:	b09d      	sub	sp, #116	@ 0x74
 8008688:	4607      	mov	r7, r0
 800868a:	460d      	mov	r5, r1
 800868c:	4614      	mov	r4, r2
 800868e:	d510      	bpl.n	80086b2 <_svfiprintf_r+0x36>
 8008690:	690b      	ldr	r3, [r1, #16]
 8008692:	b973      	cbnz	r3, 80086b2 <_svfiprintf_r+0x36>
 8008694:	2140      	movs	r1, #64	@ 0x40
 8008696:	f7ff fdbb 	bl	8008210 <_malloc_r>
 800869a:	6028      	str	r0, [r5, #0]
 800869c:	6128      	str	r0, [r5, #16]
 800869e:	b930      	cbnz	r0, 80086ae <_svfiprintf_r+0x32>
 80086a0:	230c      	movs	r3, #12
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	f04f 30ff 	mov.w	r0, #4294967295
 80086a8:	b01d      	add	sp, #116	@ 0x74
 80086aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ae:	2340      	movs	r3, #64	@ 0x40
 80086b0:	616b      	str	r3, [r5, #20]
 80086b2:	2300      	movs	r3, #0
 80086b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086b6:	2320      	movs	r3, #32
 80086b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80086c0:	2330      	movs	r3, #48	@ 0x30
 80086c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008860 <_svfiprintf_r+0x1e4>
 80086c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086ca:	f04f 0901 	mov.w	r9, #1
 80086ce:	4623      	mov	r3, r4
 80086d0:	469a      	mov	sl, r3
 80086d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086d6:	b10a      	cbz	r2, 80086dc <_svfiprintf_r+0x60>
 80086d8:	2a25      	cmp	r2, #37	@ 0x25
 80086da:	d1f9      	bne.n	80086d0 <_svfiprintf_r+0x54>
 80086dc:	ebba 0b04 	subs.w	fp, sl, r4
 80086e0:	d00b      	beq.n	80086fa <_svfiprintf_r+0x7e>
 80086e2:	465b      	mov	r3, fp
 80086e4:	4622      	mov	r2, r4
 80086e6:	4629      	mov	r1, r5
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff ff6b 	bl	80085c4 <__ssputs_r>
 80086ee:	3001      	adds	r0, #1
 80086f0:	f000 80a7 	beq.w	8008842 <_svfiprintf_r+0x1c6>
 80086f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086f6:	445a      	add	r2, fp
 80086f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80086fa:	f89a 3000 	ldrb.w	r3, [sl]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 809f 	beq.w	8008842 <_svfiprintf_r+0x1c6>
 8008704:	2300      	movs	r3, #0
 8008706:	f04f 32ff 	mov.w	r2, #4294967295
 800870a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800870e:	f10a 0a01 	add.w	sl, sl, #1
 8008712:	9304      	str	r3, [sp, #16]
 8008714:	9307      	str	r3, [sp, #28]
 8008716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800871a:	931a      	str	r3, [sp, #104]	@ 0x68
 800871c:	4654      	mov	r4, sl
 800871e:	2205      	movs	r2, #5
 8008720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008724:	484e      	ldr	r0, [pc, #312]	@ (8008860 <_svfiprintf_r+0x1e4>)
 8008726:	f7f7 fd5b 	bl	80001e0 <memchr>
 800872a:	9a04      	ldr	r2, [sp, #16]
 800872c:	b9d8      	cbnz	r0, 8008766 <_svfiprintf_r+0xea>
 800872e:	06d0      	lsls	r0, r2, #27
 8008730:	bf44      	itt	mi
 8008732:	2320      	movmi	r3, #32
 8008734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008738:	0711      	lsls	r1, r2, #28
 800873a:	bf44      	itt	mi
 800873c:	232b      	movmi	r3, #43	@ 0x2b
 800873e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008742:	f89a 3000 	ldrb.w	r3, [sl]
 8008746:	2b2a      	cmp	r3, #42	@ 0x2a
 8008748:	d015      	beq.n	8008776 <_svfiprintf_r+0xfa>
 800874a:	9a07      	ldr	r2, [sp, #28]
 800874c:	4654      	mov	r4, sl
 800874e:	2000      	movs	r0, #0
 8008750:	f04f 0c0a 	mov.w	ip, #10
 8008754:	4621      	mov	r1, r4
 8008756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800875a:	3b30      	subs	r3, #48	@ 0x30
 800875c:	2b09      	cmp	r3, #9
 800875e:	d94b      	bls.n	80087f8 <_svfiprintf_r+0x17c>
 8008760:	b1b0      	cbz	r0, 8008790 <_svfiprintf_r+0x114>
 8008762:	9207      	str	r2, [sp, #28]
 8008764:	e014      	b.n	8008790 <_svfiprintf_r+0x114>
 8008766:	eba0 0308 	sub.w	r3, r0, r8
 800876a:	fa09 f303 	lsl.w	r3, r9, r3
 800876e:	4313      	orrs	r3, r2
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	46a2      	mov	sl, r4
 8008774:	e7d2      	b.n	800871c <_svfiprintf_r+0xa0>
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	1d19      	adds	r1, r3, #4
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	9103      	str	r1, [sp, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	bfbb      	ittet	lt
 8008782:	425b      	neglt	r3, r3
 8008784:	f042 0202 	orrlt.w	r2, r2, #2
 8008788:	9307      	strge	r3, [sp, #28]
 800878a:	9307      	strlt	r3, [sp, #28]
 800878c:	bfb8      	it	lt
 800878e:	9204      	strlt	r2, [sp, #16]
 8008790:	7823      	ldrb	r3, [r4, #0]
 8008792:	2b2e      	cmp	r3, #46	@ 0x2e
 8008794:	d10a      	bne.n	80087ac <_svfiprintf_r+0x130>
 8008796:	7863      	ldrb	r3, [r4, #1]
 8008798:	2b2a      	cmp	r3, #42	@ 0x2a
 800879a:	d132      	bne.n	8008802 <_svfiprintf_r+0x186>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	1d1a      	adds	r2, r3, #4
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	9203      	str	r2, [sp, #12]
 80087a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087a8:	3402      	adds	r4, #2
 80087aa:	9305      	str	r3, [sp, #20]
 80087ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008870 <_svfiprintf_r+0x1f4>
 80087b0:	7821      	ldrb	r1, [r4, #0]
 80087b2:	2203      	movs	r2, #3
 80087b4:	4650      	mov	r0, sl
 80087b6:	f7f7 fd13 	bl	80001e0 <memchr>
 80087ba:	b138      	cbz	r0, 80087cc <_svfiprintf_r+0x150>
 80087bc:	9b04      	ldr	r3, [sp, #16]
 80087be:	eba0 000a 	sub.w	r0, r0, sl
 80087c2:	2240      	movs	r2, #64	@ 0x40
 80087c4:	4082      	lsls	r2, r0
 80087c6:	4313      	orrs	r3, r2
 80087c8:	3401      	adds	r4, #1
 80087ca:	9304      	str	r3, [sp, #16]
 80087cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d0:	4824      	ldr	r0, [pc, #144]	@ (8008864 <_svfiprintf_r+0x1e8>)
 80087d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087d6:	2206      	movs	r2, #6
 80087d8:	f7f7 fd02 	bl	80001e0 <memchr>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d036      	beq.n	800884e <_svfiprintf_r+0x1d2>
 80087e0:	4b21      	ldr	r3, [pc, #132]	@ (8008868 <_svfiprintf_r+0x1ec>)
 80087e2:	bb1b      	cbnz	r3, 800882c <_svfiprintf_r+0x1b0>
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	3307      	adds	r3, #7
 80087e8:	f023 0307 	bic.w	r3, r3, #7
 80087ec:	3308      	adds	r3, #8
 80087ee:	9303      	str	r3, [sp, #12]
 80087f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f2:	4433      	add	r3, r6
 80087f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087f6:	e76a      	b.n	80086ce <_svfiprintf_r+0x52>
 80087f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087fc:	460c      	mov	r4, r1
 80087fe:	2001      	movs	r0, #1
 8008800:	e7a8      	b.n	8008754 <_svfiprintf_r+0xd8>
 8008802:	2300      	movs	r3, #0
 8008804:	3401      	adds	r4, #1
 8008806:	9305      	str	r3, [sp, #20]
 8008808:	4619      	mov	r1, r3
 800880a:	f04f 0c0a 	mov.w	ip, #10
 800880e:	4620      	mov	r0, r4
 8008810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008814:	3a30      	subs	r2, #48	@ 0x30
 8008816:	2a09      	cmp	r2, #9
 8008818:	d903      	bls.n	8008822 <_svfiprintf_r+0x1a6>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0c6      	beq.n	80087ac <_svfiprintf_r+0x130>
 800881e:	9105      	str	r1, [sp, #20]
 8008820:	e7c4      	b.n	80087ac <_svfiprintf_r+0x130>
 8008822:	fb0c 2101 	mla	r1, ip, r1, r2
 8008826:	4604      	mov	r4, r0
 8008828:	2301      	movs	r3, #1
 800882a:	e7f0      	b.n	800880e <_svfiprintf_r+0x192>
 800882c:	ab03      	add	r3, sp, #12
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	462a      	mov	r2, r5
 8008832:	4b0e      	ldr	r3, [pc, #56]	@ (800886c <_svfiprintf_r+0x1f0>)
 8008834:	a904      	add	r1, sp, #16
 8008836:	4638      	mov	r0, r7
 8008838:	f3af 8000 	nop.w
 800883c:	1c42      	adds	r2, r0, #1
 800883e:	4606      	mov	r6, r0
 8008840:	d1d6      	bne.n	80087f0 <_svfiprintf_r+0x174>
 8008842:	89ab      	ldrh	r3, [r5, #12]
 8008844:	065b      	lsls	r3, r3, #25
 8008846:	f53f af2d 	bmi.w	80086a4 <_svfiprintf_r+0x28>
 800884a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800884c:	e72c      	b.n	80086a8 <_svfiprintf_r+0x2c>
 800884e:	ab03      	add	r3, sp, #12
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	462a      	mov	r2, r5
 8008854:	4b05      	ldr	r3, [pc, #20]	@ (800886c <_svfiprintf_r+0x1f0>)
 8008856:	a904      	add	r1, sp, #16
 8008858:	4638      	mov	r0, r7
 800885a:	f000 f879 	bl	8008950 <_printf_i>
 800885e:	e7ed      	b.n	800883c <_svfiprintf_r+0x1c0>
 8008860:	080122ac 	.word	0x080122ac
 8008864:	080122b6 	.word	0x080122b6
 8008868:	00000000 	.word	0x00000000
 800886c:	080085c5 	.word	0x080085c5
 8008870:	080122b2 	.word	0x080122b2

08008874 <_printf_common>:
 8008874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	4616      	mov	r6, r2
 800887a:	4698      	mov	r8, r3
 800887c:	688a      	ldr	r2, [r1, #8]
 800887e:	690b      	ldr	r3, [r1, #16]
 8008880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008884:	4293      	cmp	r3, r2
 8008886:	bfb8      	it	lt
 8008888:	4613      	movlt	r3, r2
 800888a:	6033      	str	r3, [r6, #0]
 800888c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008890:	4607      	mov	r7, r0
 8008892:	460c      	mov	r4, r1
 8008894:	b10a      	cbz	r2, 800889a <_printf_common+0x26>
 8008896:	3301      	adds	r3, #1
 8008898:	6033      	str	r3, [r6, #0]
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	0699      	lsls	r1, r3, #26
 800889e:	bf42      	ittt	mi
 80088a0:	6833      	ldrmi	r3, [r6, #0]
 80088a2:	3302      	addmi	r3, #2
 80088a4:	6033      	strmi	r3, [r6, #0]
 80088a6:	6825      	ldr	r5, [r4, #0]
 80088a8:	f015 0506 	ands.w	r5, r5, #6
 80088ac:	d106      	bne.n	80088bc <_printf_common+0x48>
 80088ae:	f104 0a19 	add.w	sl, r4, #25
 80088b2:	68e3      	ldr	r3, [r4, #12]
 80088b4:	6832      	ldr	r2, [r6, #0]
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	42ab      	cmp	r3, r5
 80088ba:	dc26      	bgt.n	800890a <_printf_common+0x96>
 80088bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088c0:	6822      	ldr	r2, [r4, #0]
 80088c2:	3b00      	subs	r3, #0
 80088c4:	bf18      	it	ne
 80088c6:	2301      	movne	r3, #1
 80088c8:	0692      	lsls	r2, r2, #26
 80088ca:	d42b      	bmi.n	8008924 <_printf_common+0xb0>
 80088cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088d0:	4641      	mov	r1, r8
 80088d2:	4638      	mov	r0, r7
 80088d4:	47c8      	blx	r9
 80088d6:	3001      	adds	r0, #1
 80088d8:	d01e      	beq.n	8008918 <_printf_common+0xa4>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	6922      	ldr	r2, [r4, #16]
 80088de:	f003 0306 	and.w	r3, r3, #6
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	bf02      	ittt	eq
 80088e6:	68e5      	ldreq	r5, [r4, #12]
 80088e8:	6833      	ldreq	r3, [r6, #0]
 80088ea:	1aed      	subeq	r5, r5, r3
 80088ec:	68a3      	ldr	r3, [r4, #8]
 80088ee:	bf0c      	ite	eq
 80088f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088f4:	2500      	movne	r5, #0
 80088f6:	4293      	cmp	r3, r2
 80088f8:	bfc4      	itt	gt
 80088fa:	1a9b      	subgt	r3, r3, r2
 80088fc:	18ed      	addgt	r5, r5, r3
 80088fe:	2600      	movs	r6, #0
 8008900:	341a      	adds	r4, #26
 8008902:	42b5      	cmp	r5, r6
 8008904:	d11a      	bne.n	800893c <_printf_common+0xc8>
 8008906:	2000      	movs	r0, #0
 8008908:	e008      	b.n	800891c <_printf_common+0xa8>
 800890a:	2301      	movs	r3, #1
 800890c:	4652      	mov	r2, sl
 800890e:	4641      	mov	r1, r8
 8008910:	4638      	mov	r0, r7
 8008912:	47c8      	blx	r9
 8008914:	3001      	adds	r0, #1
 8008916:	d103      	bne.n	8008920 <_printf_common+0xac>
 8008918:	f04f 30ff 	mov.w	r0, #4294967295
 800891c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008920:	3501      	adds	r5, #1
 8008922:	e7c6      	b.n	80088b2 <_printf_common+0x3e>
 8008924:	18e1      	adds	r1, r4, r3
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	2030      	movs	r0, #48	@ 0x30
 800892a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800892e:	4422      	add	r2, r4
 8008930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008938:	3302      	adds	r3, #2
 800893a:	e7c7      	b.n	80088cc <_printf_common+0x58>
 800893c:	2301      	movs	r3, #1
 800893e:	4622      	mov	r2, r4
 8008940:	4641      	mov	r1, r8
 8008942:	4638      	mov	r0, r7
 8008944:	47c8      	blx	r9
 8008946:	3001      	adds	r0, #1
 8008948:	d0e6      	beq.n	8008918 <_printf_common+0xa4>
 800894a:	3601      	adds	r6, #1
 800894c:	e7d9      	b.n	8008902 <_printf_common+0x8e>
	...

08008950 <_printf_i>:
 8008950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	7e0f      	ldrb	r7, [r1, #24]
 8008956:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008958:	2f78      	cmp	r7, #120	@ 0x78
 800895a:	4691      	mov	r9, r2
 800895c:	4680      	mov	r8, r0
 800895e:	460c      	mov	r4, r1
 8008960:	469a      	mov	sl, r3
 8008962:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008966:	d807      	bhi.n	8008978 <_printf_i+0x28>
 8008968:	2f62      	cmp	r7, #98	@ 0x62
 800896a:	d80a      	bhi.n	8008982 <_printf_i+0x32>
 800896c:	2f00      	cmp	r7, #0
 800896e:	f000 80d2 	beq.w	8008b16 <_printf_i+0x1c6>
 8008972:	2f58      	cmp	r7, #88	@ 0x58
 8008974:	f000 80b9 	beq.w	8008aea <_printf_i+0x19a>
 8008978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800897c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008980:	e03a      	b.n	80089f8 <_printf_i+0xa8>
 8008982:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008986:	2b15      	cmp	r3, #21
 8008988:	d8f6      	bhi.n	8008978 <_printf_i+0x28>
 800898a:	a101      	add	r1, pc, #4	@ (adr r1, 8008990 <_printf_i+0x40>)
 800898c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008990:	080089e9 	.word	0x080089e9
 8008994:	080089fd 	.word	0x080089fd
 8008998:	08008979 	.word	0x08008979
 800899c:	08008979 	.word	0x08008979
 80089a0:	08008979 	.word	0x08008979
 80089a4:	08008979 	.word	0x08008979
 80089a8:	080089fd 	.word	0x080089fd
 80089ac:	08008979 	.word	0x08008979
 80089b0:	08008979 	.word	0x08008979
 80089b4:	08008979 	.word	0x08008979
 80089b8:	08008979 	.word	0x08008979
 80089bc:	08008afd 	.word	0x08008afd
 80089c0:	08008a27 	.word	0x08008a27
 80089c4:	08008ab7 	.word	0x08008ab7
 80089c8:	08008979 	.word	0x08008979
 80089cc:	08008979 	.word	0x08008979
 80089d0:	08008b1f 	.word	0x08008b1f
 80089d4:	08008979 	.word	0x08008979
 80089d8:	08008a27 	.word	0x08008a27
 80089dc:	08008979 	.word	0x08008979
 80089e0:	08008979 	.word	0x08008979
 80089e4:	08008abf 	.word	0x08008abf
 80089e8:	6833      	ldr	r3, [r6, #0]
 80089ea:	1d1a      	adds	r2, r3, #4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6032      	str	r2, [r6, #0]
 80089f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80089f8:	2301      	movs	r3, #1
 80089fa:	e09d      	b.n	8008b38 <_printf_i+0x1e8>
 80089fc:	6833      	ldr	r3, [r6, #0]
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	1d19      	adds	r1, r3, #4
 8008a02:	6031      	str	r1, [r6, #0]
 8008a04:	0606      	lsls	r6, r0, #24
 8008a06:	d501      	bpl.n	8008a0c <_printf_i+0xbc>
 8008a08:	681d      	ldr	r5, [r3, #0]
 8008a0a:	e003      	b.n	8008a14 <_printf_i+0xc4>
 8008a0c:	0645      	lsls	r5, r0, #25
 8008a0e:	d5fb      	bpl.n	8008a08 <_printf_i+0xb8>
 8008a10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a14:	2d00      	cmp	r5, #0
 8008a16:	da03      	bge.n	8008a20 <_printf_i+0xd0>
 8008a18:	232d      	movs	r3, #45	@ 0x2d
 8008a1a:	426d      	negs	r5, r5
 8008a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a20:	4859      	ldr	r0, [pc, #356]	@ (8008b88 <_printf_i+0x238>)
 8008a22:	230a      	movs	r3, #10
 8008a24:	e011      	b.n	8008a4a <_printf_i+0xfa>
 8008a26:	6821      	ldr	r1, [r4, #0]
 8008a28:	6833      	ldr	r3, [r6, #0]
 8008a2a:	0608      	lsls	r0, r1, #24
 8008a2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a30:	d402      	bmi.n	8008a38 <_printf_i+0xe8>
 8008a32:	0649      	lsls	r1, r1, #25
 8008a34:	bf48      	it	mi
 8008a36:	b2ad      	uxthmi	r5, r5
 8008a38:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a3a:	4853      	ldr	r0, [pc, #332]	@ (8008b88 <_printf_i+0x238>)
 8008a3c:	6033      	str	r3, [r6, #0]
 8008a3e:	bf14      	ite	ne
 8008a40:	230a      	movne	r3, #10
 8008a42:	2308      	moveq	r3, #8
 8008a44:	2100      	movs	r1, #0
 8008a46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a4a:	6866      	ldr	r6, [r4, #4]
 8008a4c:	60a6      	str	r6, [r4, #8]
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	bfa2      	ittt	ge
 8008a52:	6821      	ldrge	r1, [r4, #0]
 8008a54:	f021 0104 	bicge.w	r1, r1, #4
 8008a58:	6021      	strge	r1, [r4, #0]
 8008a5a:	b90d      	cbnz	r5, 8008a60 <_printf_i+0x110>
 8008a5c:	2e00      	cmp	r6, #0
 8008a5e:	d04b      	beq.n	8008af8 <_printf_i+0x1a8>
 8008a60:	4616      	mov	r6, r2
 8008a62:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a66:	fb03 5711 	mls	r7, r3, r1, r5
 8008a6a:	5dc7      	ldrb	r7, [r0, r7]
 8008a6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a70:	462f      	mov	r7, r5
 8008a72:	42bb      	cmp	r3, r7
 8008a74:	460d      	mov	r5, r1
 8008a76:	d9f4      	bls.n	8008a62 <_printf_i+0x112>
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	d10b      	bne.n	8008a94 <_printf_i+0x144>
 8008a7c:	6823      	ldr	r3, [r4, #0]
 8008a7e:	07df      	lsls	r7, r3, #31
 8008a80:	d508      	bpl.n	8008a94 <_printf_i+0x144>
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	6861      	ldr	r1, [r4, #4]
 8008a86:	4299      	cmp	r1, r3
 8008a88:	bfde      	ittt	le
 8008a8a:	2330      	movle	r3, #48	@ 0x30
 8008a8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a94:	1b92      	subs	r2, r2, r6
 8008a96:	6122      	str	r2, [r4, #16]
 8008a98:	f8cd a000 	str.w	sl, [sp]
 8008a9c:	464b      	mov	r3, r9
 8008a9e:	aa03      	add	r2, sp, #12
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	f7ff fee6 	bl	8008874 <_printf_common>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d14a      	bne.n	8008b42 <_printf_i+0x1f2>
 8008aac:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab0:	b004      	add	sp, #16
 8008ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	f043 0320 	orr.w	r3, r3, #32
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	4833      	ldr	r0, [pc, #204]	@ (8008b8c <_printf_i+0x23c>)
 8008ac0:	2778      	movs	r7, #120	@ 0x78
 8008ac2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	6831      	ldr	r1, [r6, #0]
 8008aca:	061f      	lsls	r7, r3, #24
 8008acc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ad0:	d402      	bmi.n	8008ad8 <_printf_i+0x188>
 8008ad2:	065f      	lsls	r7, r3, #25
 8008ad4:	bf48      	it	mi
 8008ad6:	b2ad      	uxthmi	r5, r5
 8008ad8:	6031      	str	r1, [r6, #0]
 8008ada:	07d9      	lsls	r1, r3, #31
 8008adc:	bf44      	itt	mi
 8008ade:	f043 0320 	orrmi.w	r3, r3, #32
 8008ae2:	6023      	strmi	r3, [r4, #0]
 8008ae4:	b11d      	cbz	r5, 8008aee <_printf_i+0x19e>
 8008ae6:	2310      	movs	r3, #16
 8008ae8:	e7ac      	b.n	8008a44 <_printf_i+0xf4>
 8008aea:	4827      	ldr	r0, [pc, #156]	@ (8008b88 <_printf_i+0x238>)
 8008aec:	e7e9      	b.n	8008ac2 <_printf_i+0x172>
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	f023 0320 	bic.w	r3, r3, #32
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	e7f6      	b.n	8008ae6 <_printf_i+0x196>
 8008af8:	4616      	mov	r6, r2
 8008afa:	e7bd      	b.n	8008a78 <_printf_i+0x128>
 8008afc:	6833      	ldr	r3, [r6, #0]
 8008afe:	6825      	ldr	r5, [r4, #0]
 8008b00:	6961      	ldr	r1, [r4, #20]
 8008b02:	1d18      	adds	r0, r3, #4
 8008b04:	6030      	str	r0, [r6, #0]
 8008b06:	062e      	lsls	r6, r5, #24
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	d501      	bpl.n	8008b10 <_printf_i+0x1c0>
 8008b0c:	6019      	str	r1, [r3, #0]
 8008b0e:	e002      	b.n	8008b16 <_printf_i+0x1c6>
 8008b10:	0668      	lsls	r0, r5, #25
 8008b12:	d5fb      	bpl.n	8008b0c <_printf_i+0x1bc>
 8008b14:	8019      	strh	r1, [r3, #0]
 8008b16:	2300      	movs	r3, #0
 8008b18:	6123      	str	r3, [r4, #16]
 8008b1a:	4616      	mov	r6, r2
 8008b1c:	e7bc      	b.n	8008a98 <_printf_i+0x148>
 8008b1e:	6833      	ldr	r3, [r6, #0]
 8008b20:	1d1a      	adds	r2, r3, #4
 8008b22:	6032      	str	r2, [r6, #0]
 8008b24:	681e      	ldr	r6, [r3, #0]
 8008b26:	6862      	ldr	r2, [r4, #4]
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7f7 fb58 	bl	80001e0 <memchr>
 8008b30:	b108      	cbz	r0, 8008b36 <_printf_i+0x1e6>
 8008b32:	1b80      	subs	r0, r0, r6
 8008b34:	6060      	str	r0, [r4, #4]
 8008b36:	6863      	ldr	r3, [r4, #4]
 8008b38:	6123      	str	r3, [r4, #16]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b40:	e7aa      	b.n	8008a98 <_printf_i+0x148>
 8008b42:	6923      	ldr	r3, [r4, #16]
 8008b44:	4632      	mov	r2, r6
 8008b46:	4649      	mov	r1, r9
 8008b48:	4640      	mov	r0, r8
 8008b4a:	47d0      	blx	sl
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d0ad      	beq.n	8008aac <_printf_i+0x15c>
 8008b50:	6823      	ldr	r3, [r4, #0]
 8008b52:	079b      	lsls	r3, r3, #30
 8008b54:	d413      	bmi.n	8008b7e <_printf_i+0x22e>
 8008b56:	68e0      	ldr	r0, [r4, #12]
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	4298      	cmp	r0, r3
 8008b5c:	bfb8      	it	lt
 8008b5e:	4618      	movlt	r0, r3
 8008b60:	e7a6      	b.n	8008ab0 <_printf_i+0x160>
 8008b62:	2301      	movs	r3, #1
 8008b64:	4632      	mov	r2, r6
 8008b66:	4649      	mov	r1, r9
 8008b68:	4640      	mov	r0, r8
 8008b6a:	47d0      	blx	sl
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d09d      	beq.n	8008aac <_printf_i+0x15c>
 8008b70:	3501      	adds	r5, #1
 8008b72:	68e3      	ldr	r3, [r4, #12]
 8008b74:	9903      	ldr	r1, [sp, #12]
 8008b76:	1a5b      	subs	r3, r3, r1
 8008b78:	42ab      	cmp	r3, r5
 8008b7a:	dcf2      	bgt.n	8008b62 <_printf_i+0x212>
 8008b7c:	e7eb      	b.n	8008b56 <_printf_i+0x206>
 8008b7e:	2500      	movs	r5, #0
 8008b80:	f104 0619 	add.w	r6, r4, #25
 8008b84:	e7f5      	b.n	8008b72 <_printf_i+0x222>
 8008b86:	bf00      	nop
 8008b88:	080122bd 	.word	0x080122bd
 8008b8c:	080122ce 	.word	0x080122ce

08008b90 <memmove>:
 8008b90:	4288      	cmp	r0, r1
 8008b92:	b510      	push	{r4, lr}
 8008b94:	eb01 0402 	add.w	r4, r1, r2
 8008b98:	d902      	bls.n	8008ba0 <memmove+0x10>
 8008b9a:	4284      	cmp	r4, r0
 8008b9c:	4623      	mov	r3, r4
 8008b9e:	d807      	bhi.n	8008bb0 <memmove+0x20>
 8008ba0:	1e43      	subs	r3, r0, #1
 8008ba2:	42a1      	cmp	r1, r4
 8008ba4:	d008      	beq.n	8008bb8 <memmove+0x28>
 8008ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008baa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bae:	e7f8      	b.n	8008ba2 <memmove+0x12>
 8008bb0:	4402      	add	r2, r0
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	428a      	cmp	r2, r1
 8008bb6:	d100      	bne.n	8008bba <memmove+0x2a>
 8008bb8:	bd10      	pop	{r4, pc}
 8008bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bc2:	e7f7      	b.n	8008bb4 <memmove+0x24>

08008bc4 <_realloc_r>:
 8008bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc8:	4680      	mov	r8, r0
 8008bca:	4615      	mov	r5, r2
 8008bcc:	460c      	mov	r4, r1
 8008bce:	b921      	cbnz	r1, 8008bda <_realloc_r+0x16>
 8008bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	f7ff bb1b 	b.w	8008210 <_malloc_r>
 8008bda:	b92a      	cbnz	r2, 8008be8 <_realloc_r+0x24>
 8008bdc:	f7ff fca8 	bl	8008530 <_free_r>
 8008be0:	2400      	movs	r4, #0
 8008be2:	4620      	mov	r0, r4
 8008be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be8:	f000 f81a 	bl	8008c20 <_malloc_usable_size_r>
 8008bec:	4285      	cmp	r5, r0
 8008bee:	4606      	mov	r6, r0
 8008bf0:	d802      	bhi.n	8008bf8 <_realloc_r+0x34>
 8008bf2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bf6:	d8f4      	bhi.n	8008be2 <_realloc_r+0x1e>
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	f7ff fb08 	bl	8008210 <_malloc_r>
 8008c00:	4607      	mov	r7, r0
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d0ec      	beq.n	8008be0 <_realloc_r+0x1c>
 8008c06:	42b5      	cmp	r5, r6
 8008c08:	462a      	mov	r2, r5
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	bf28      	it	cs
 8008c0e:	4632      	movcs	r2, r6
 8008c10:	f7ff fc80 	bl	8008514 <memcpy>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4640      	mov	r0, r8
 8008c18:	f7ff fc8a 	bl	8008530 <_free_r>
 8008c1c:	463c      	mov	r4, r7
 8008c1e:	e7e0      	b.n	8008be2 <_realloc_r+0x1e>

08008c20 <_malloc_usable_size_r>:
 8008c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c24:	1f18      	subs	r0, r3, #4
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bfbc      	itt	lt
 8008c2a:	580b      	ldrlt	r3, [r1, r0]
 8008c2c:	18c0      	addlt	r0, r0, r3
 8008c2e:	4770      	bx	lr

08008c30 <_init>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	bf00      	nop
 8008c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c36:	bc08      	pop	{r3}
 8008c38:	469e      	mov	lr, r3
 8008c3a:	4770      	bx	lr

08008c3c <_fini>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	bf00      	nop
 8008c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c42:	bc08      	pop	{r3}
 8008c44:	469e      	mov	lr, r3
 8008c46:	4770      	bx	lr
