
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008774  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000099b0  08008904  08008904  00009904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122b4  080122b4  00014270  2**0
                  CONTENTS
  4 .ARM          00000008  080122b4  080122b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122bc  080122bc  00014270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122bc  080122bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080122c0  080122c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  080122c4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ac94  20000270  08012534  00014270  2**2
                  ALLOC
 10 ._user_heap_stack 00002204  2000af04  08012534  00014f04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013630  00000000  00000000  000142a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000369b  00000000  00000000  000278d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0002af70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c08  00000000  00000000  0002bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f0a  00000000  00000000  0002cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016311  00000000  00000000  00055a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee020  00000000  00000000  0006bd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159d93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be8  00000000  00000000  00159dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088ec 	.word	0x080088ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	080088ec 	.word	0x080088ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ring_buffer_setup>:
ring_buffer txRingBuffer;
uint8_t USART_TxBuf[TX_BUFFER_SIZE];
uint8_t USART_RxBuf[RX_BUFFER_SIZE];

void ring_buffer_setup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1; // zakładając, że zmienna size jest potęgą 2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	60da      	str	r2, [r3, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <USART_kbhit>:

uint8_t USART_kbhit(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <USART_kbhit+0x20>)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <USART_kbhit+0x20>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d101      	bne.n	80005b8 <USART_kbhit+0x14>
		return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e000      	b.n	80005ba <USART_kbhit+0x16>
	}else{
		return 1;
 80005b8:	2301      	movs	r3, #1
	}
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	2000028c 	.word	0x2000028c

080005c8 <USART_getchar>:

int16_t USART_getchar() {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <USART_getchar+0x4c>)
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <USART_getchar+0x4c>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d013      	beq.n	8000602 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <USART_getchar+0x4c>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <USART_getchar+0x50>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <USART_getchar+0x4c>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <USART_getchar+0x4c>)
 80005ec:	68d2      	ldr	r2, [r2, #12]
 80005ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80005f2:	fb01 f202 	mul.w	r2, r1, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	4a06      	ldr	r2, [pc, #24]	@ (8000614 <USART_getchar+0x4c>)
 80005fa:	6053      	str	r3, [r2, #4]
        return tmp;
 80005fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000600:	e001      	b.n	8000606 <USART_getchar+0x3e>
    }
    return -1; // Buffer empty
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	2000028c 	.word	0x2000028c
 8000618:	20000aac 	.word	0x20000aac

0800061c <USART_fsend>:
        	txRingBuffer.readIndex = idx;
        }

        __enable_irq(); //ponownie aktywujemy przerwania
}
void USART_fsend(char* format,...){
 800061c:	b40f      	push	{r0, r1, r2, r3}
 800061e:	b580      	push	{r7, lr}
 8000620:	b0a4      	sub	sp, #144	@ 0x90
 8000622:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	volatile int idx;
	va_list arglist;
	  va_start(arglist,format);
 8000624:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000628:	607b      	str	r3, [r7, #4]
	  vsprintf(tmp_rs,format,arglist);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000634:	4618      	mov	r0, r3
 8000636:	f007 f91d 	bl	8007874 <vsiprintf>
	  va_end(arglist);
	  idx=txRingBuffer.writeIndex;
 800063a:	4b30      	ldr	r3, [pc, #192]	@ (80006fc <USART_fsend+0xe0>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000646:	e016      	b.n	8000676 <USART_fsend+0x5a>
		  USART_TxBuf[idx]=tmp_rs[i];
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	f107 010c 	add.w	r1, r7, #12
 800064e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000652:	440a      	add	r2, r1
 8000654:	7811      	ldrb	r1, [r2, #0]
 8000656:	4a2a      	ldr	r2, [pc, #168]	@ (8000700 <USART_fsend+0xe4>)
 8000658:	54d1      	strb	r1, [r2, r3]
		  idx++;
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	3301      	adds	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
		  if(idx >= TX_BUFFER_SIZE)idx=0;
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000666:	db01      	blt.n	800066c <USART_fsend+0x50>
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 800066c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000670:	3301      	adds	r3, #1
 8000672:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fda8 	bl	80001d0 <strlen>
 8000680:	4602      	mov	r2, r0
 8000682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000686:	429a      	cmp	r2, r3
 8000688:	d8de      	bhi.n	8000648 <USART_fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068a:	b672      	cpsid	i
}
 800068c:	bf00      	nop
	  }
	  __disable_irq();//wyłączamy przerwania
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <USART_fsend+0xe0>)
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <USART_fsend+0xe0>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	d123      	bne.n	80006e2 <USART_fsend+0xc6>
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <USART_fsend+0xe8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a4:	2b80      	cmp	r3, #128	@ 0x80
 80006a6:	d11c      	bne.n	80006e2 <USART_fsend+0xc6>
		  txRingBuffer.writeIndex=idx;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <USART_fsend+0xe0>)
 80006ae:	609a      	str	r2, [r3, #8]
		  uint8_t tmp=USART_TxBuf[txRingBuffer.readIndex];
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <USART_fsend+0xe0>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a12      	ldr	r2, [pc, #72]	@ (8000700 <USART_fsend+0xe4>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	70fb      	strb	r3, [r7, #3]
		  txRingBuffer.readIndex++;
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <USART_fsend+0xe0>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	3301      	adds	r3, #1
 80006c0:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <USART_fsend+0xe0>)
 80006c2:	6053      	str	r3, [r2, #4]
		  if(txRingBuffer.readIndex >= TX_BUFFER_SIZE)txRingBuffer.readIndex=0;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <USART_fsend+0xe0>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006cc:	d302      	bcc.n	80006d4 <USART_fsend+0xb8>
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <USART_fsend+0xe0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
		  HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006d4:	1cfb      	adds	r3, r7, #3
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	480a      	ldr	r0, [pc, #40]	@ (8000704 <USART_fsend+0xe8>)
 80006dc:	f003 ff74 	bl	80045c8 <HAL_UART_Transmit_IT>
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 80006e0:	e003      	b.n	80006ea <USART_fsend+0xce>
	  }else{
		  txRingBuffer.writeIndex=idx;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <USART_fsend+0xe0>)
 80006e8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006ea:	b662      	cpsie	i
}
 80006ec:	bf00      	nop
	  }
	  __enable_irq();
}
 80006ee:	bf00      	nop
 80006f0:	3790      	adds	r7, #144	@ 0x90
 80006f2:	46bd      	mov	sp, r7
 80006f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006f8:	b004      	add	sp, #16
 80006fa:	4770      	bx	lr
 80006fc:	2000029c 	.word	0x2000029c
 8000700:	200002ac 	.word	0x200002ac
 8000704:	2000ad2c 	.word	0x2000ad2c

08000708 <calculate_crc16>:
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

void calculate_crc16(uint8_t *data, size_t length, char crc_out[2]) {
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	@ 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 8000714:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000718:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	e019      	b.n	8000754 <calculate_crc16+0x4c>
        uint8_t byte = data[i];
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 800072a:	8bfb      	ldrh	r3, [r7, #30]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	b29b      	uxth	r3, r3
 8000730:	b2da      	uxtb	r2, r3
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	4053      	eors	r3, r2
 8000736:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 8000738:	8bfb      	ldrh	r3, [r7, #30]
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	b21a      	sxth	r2, r3
 800073e:	7dbb      	ldrb	r3, [r7, #22]
 8000740:	490f      	ldr	r1, [pc, #60]	@ (8000780 <calculate_crc16+0x78>)
 8000742:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000746:	b21b      	sxth	r3, r3
 8000748:	4053      	eors	r3, r2
 800074a:	b21b      	sxth	r3, r3
 800074c:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	3301      	adds	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	429a      	cmp	r2, r3
 800075a:	d3e1      	bcc.n	8000720 <calculate_crc16+0x18>
    }
    crc_out[0] = (char)((crc >> 8) & 0xFF); // bajt po lewej
 800075c:	8bfb      	ldrh	r3, [r7, #30]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2da      	uxtb	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (char)(crc & 0xFF);        // bajt po prawej
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	8bfa      	ldrh	r2, [r7, #30]
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3724      	adds	r7, #36	@ 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <parse_color>:
#include "crc.h"  // Zakładamy, że crc16_ccitt jest zaimplementowane


//=========================FUNKCJE POMOCNICZE=============================
//TODO do sprawdzenia
static Color_t parse_color(const char *color_name) {
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < sizeof(color_map) / sizeof(ColorMap); ++i) {
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	e01c      	b.n	80007cc <parse_color+0x48>
        if (strncmp(color_name, color_map[i].name, strlen(color_map[i].name)) == 0) {
 8000792:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <parse_color+0x5c>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800079a:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <parse_color+0x5c>)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fd14 	bl	80001d0 <strlen>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4621      	mov	r1, r4
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f007 f87f 	bl	80078b2 <strncmp>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d105      	bne.n	80007c6 <parse_color+0x42>
            return color_map[i].value;
 80007ba:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <parse_color+0x5c>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4413      	add	r3, r2
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	e007      	b.n	80007d6 <parse_color+0x52>
    for (size_t i = 0; i < sizeof(color_map) / sizeof(ColorMap); ++i) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	d9df      	bls.n	8000792 <parse_color+0xe>
        }
    }
    return 0xFFFF; // Nieznany kolor
 80007d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	bf00      	nop
 80007e0:	08008c4c 	.word	0x08008c4c

080007e4 <parse_parameters>:

static bool parse_parameters(const char *data, const char *pattern, ...) {
 80007e4:	b40e      	push	{r1, r2, r3}
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b08f      	sub	sp, #60	@ 0x3c
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, pattern);
 80007ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007f2:	623b      	str	r3, [r7, #32]

    const char *current = data;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	61fb      	str	r3, [r7, #28]
    while (*pattern && *current) {
 80007f8:	e094      	b.n	8000924 <parse_parameters+0x140>
        switch (*pattern++) {
 80007fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	3b68      	subs	r3, #104	@ 0x68
 8000804:	2b0d      	cmp	r3, #13
 8000806:	f200 8086 	bhi.w	8000916 <parse_parameters+0x132>
 800080a:	a201      	add	r2, pc, #4	@ (adr r2, 8000810 <parse_parameters+0x2c>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	0800088b 	.word	0x0800088b
 8000814:	0800086b 	.word	0x0800086b
 8000818:	08000917 	.word	0x08000917
 800081c:	08000917 	.word	0x08000917
 8000820:	08000917 	.word	0x08000917
 8000824:	08000917 	.word	0x08000917
 8000828:	08000917 	.word	0x08000917
 800082c:	08000917 	.word	0x08000917
 8000830:	08000917 	.word	0x08000917
 8000834:	08000917 	.word	0x08000917
 8000838:	08000917 	.word	0x08000917
 800083c:	080008ad 	.word	0x080008ad
 8000840:	08000917 	.word	0x08000917
 8000844:	08000849 	.word	0x08000849
            case 'u': { // uint8_t
                uint8_t *val = va_arg(args, uint8_t *);
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	1d1a      	adds	r2, r3, #4
 800084c:	623a      	str	r2, [r7, #32]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
                *val = (uint8_t)strtoul(current, (char **)&current, 10);
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	f107 011c 	add.w	r1, r7, #28
 8000858:	220a      	movs	r2, #10
 800085a:	4618      	mov	r0, r3
 800085c:	f006 fe00 	bl	8007460 <strtoul>
 8000860:	4603      	mov	r3, r0
 8000862:	b2da      	uxtb	r2, r3
 8000864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000866:	701a      	strb	r2, [r3, #0]
                break;
 8000868:	e055      	b.n	8000916 <parse_parameters+0x132>
            }
            case 'i': { // int
                int *val = va_arg(args, int *);
 800086a:	6a3b      	ldr	r3, [r7, #32]
 800086c:	1d1a      	adds	r2, r3, #4
 800086e:	623a      	str	r2, [r7, #32]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
                *val = (int)strtol(current, (char **)&current, 10);
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f107 011c 	add.w	r1, r7, #28
 800087a:	220a      	movs	r2, #10
 800087c:	4618      	mov	r0, r3
 800087e:	f006 fd77 	bl	8007370 <strtol>
 8000882:	4602      	mov	r2, r0
 8000884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000886:	601a      	str	r2, [r3, #0]
                break;
 8000888:	e045      	b.n	8000916 <parse_parameters+0x132>
            }
            case 'h': { // uint16_t
                uint16_t *val = va_arg(args, uint16_t *);
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	1d1a      	adds	r2, r3, #4
 800088e:	623a      	str	r2, [r7, #32]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
                *val = (uint16_t)strtoul(current, (char **)&current, 10);
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	f107 011c 	add.w	r1, r7, #28
 800089a:	220a      	movs	r2, #10
 800089c:	4618      	mov	r0, r3
 800089e:	f006 fddf 	bl	8007460 <strtoul>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a8:	801a      	strh	r2, [r3, #0]
                break;
 80008aa:	e034      	b.n	8000916 <parse_parameters+0x132>
            }
            case 's': { // Kolor (string -> uint16_t)
                uint16_t *val = va_arg(args, uint16_t *);
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	1d1a      	adds	r2, r3, #4
 80008b0:	623a      	str	r2, [r7, #32]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                char color[16]; // Bufor na kolor
                size_t i = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	637b      	str	r3, [r7, #52]	@ 0x34

                while (*current != ',' && *current != '\0' && i < sizeof(color) - 1) {
 80008ba:	e00a      	b.n	80008d2 <parse_parameters+0xee>
                    color[i++] = *current++;
 80008bc:	69fa      	ldr	r2, [r7, #28]
 80008be:	1c53      	adds	r3, r2, #1
 80008c0:	61fb      	str	r3, [r7, #28]
 80008c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008c4:	1c59      	adds	r1, r3, #1
 80008c6:	6379      	str	r1, [r7, #52]	@ 0x34
 80008c8:	7812      	ldrb	r2, [r2, #0]
 80008ca:	3338      	adds	r3, #56	@ 0x38
 80008cc:	443b      	add	r3, r7
 80008ce:	f803 2c2c 	strb.w	r2, [r3, #-44]
                while (*current != ',' && *current != '\0' && i < sizeof(color) - 1) {
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b2c      	cmp	r3, #44	@ 0x2c
 80008d8:	d006      	beq.n	80008e8 <parse_parameters+0x104>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <parse_parameters+0x104>
 80008e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008e4:	2b0e      	cmp	r3, #14
 80008e6:	d9e9      	bls.n	80008bc <parse_parameters+0xd8>
                }
                color[i] = '\0';
 80008e8:	f107 020c 	add.w	r2, r7, #12
 80008ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008ee:	4413      	add	r3, r2
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
                *val = parse_color(color);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff43 	bl	8000784 <parse_color>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000904:	801a      	strh	r2, [r3, #0]
                if (*val == 0xFFFF) { // Nieznany kolor
 8000906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <parse_parameters+0x132>
                    va_end(args);
                    return false;
 8000912:	2300      	movs	r3, #0
 8000914:	e016      	b.n	8000944 <parse_parameters+0x160>
                break;
            }
        }

        // Przejdź do następnego pola, jeśli jest przecinek
        if (*current == ',') {
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b2c      	cmp	r3, #44	@ 0x2c
 800091c:	d102      	bne.n	8000924 <parse_parameters+0x140>
            current++;
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3301      	adds	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
    while (*pattern && *current) {
 8000924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d004      	beq.n	8000936 <parse_parameters+0x152>
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	f47f af62 	bne.w	80007fa <parse_parameters+0x16>
        }
    }

    va_end(args);
    return (*pattern == '\0'); // Upewnij się, że przetworzono cały wzorzec
 8000936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf0c      	ite	eq
 800093e:	2301      	moveq	r3, #1
 8000940:	2300      	movne	r3, #0
 8000942:	b2db      	uxtb	r3, r3
}
 8000944:	4618      	mov	r0, r3
 8000946:	373c      	adds	r7, #60	@ 0x3c
 8000948:	46bd      	mov	sp, r7
 800094a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800094e:	b003      	add	sp, #12
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <executeONK>:


//==========================OBSŁUGA KOMEND================================

static void executeONK(Receive_Frame *frame)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af04      	add	r7, sp, #16
 800095a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	73fb      	strb	r3, [r7, #15]
 8000960:	2300      	movs	r3, #0
 8000962:	73bb      	strb	r3, [r7, #14]
 8000964:	2300      	movs	r3, #0
 8000966:	737b      	strb	r3, [r7, #13]
 8000968:	2300      	movs	r3, #0
 800096a:	733b      	strb	r3, [r7, #12]
	uint16_t color = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	817b      	strh	r3, [r7, #10]
    if (!parse_parameters(frame->data, "uuuuh", &x, &y, &r, &filling, &color))
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	1d58      	adds	r0, r3, #5
 8000974:	f107 010e 	add.w	r1, r7, #14
 8000978:	f107 020f 	add.w	r2, r7, #15
 800097c:	f107 030a 	add.w	r3, r7, #10
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	f107 030d 	add.w	r3, r7, #13
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	460b      	mov	r3, r1
 8000990:	491e      	ldr	r1, [pc, #120]	@ (8000a0c <executeONK+0xb8>)
 8000992:	f7ff ff27 	bl	80007e4 <parse_parameters>
 8000996:	4603      	mov	r3, r0
 8000998:	f083 0301 	eor.w	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d009      	beq.n	80009b6 <executeONK+0x62>
    {
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Blad parsowania danych: %s\n", frame->data);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3305      	adds	r3, #5
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <executeONK+0xbc>)
 80009aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000a14 <executeONK+0xc0>)
 80009ac:	2167      	movs	r1, #103	@ 0x67
 80009ae:	2068      	movs	r0, #104	@ 0x68
 80009b0:	f000 fb0c 	bl	8000fcc <prepareFrame>
 80009b4:	e026      	b.n	8000a04 <executeONK+0xb0>
        return;
    }
	prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Wykonanie ONK z danymi: %s\n ", frame->data);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3305      	adds	r3, #5
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <executeONK+0xc4>)
 80009be:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <executeONK+0xc0>)
 80009c0:	2167      	movs	r1, #103	@ 0x67
 80009c2:	2068      	movs	r0, #104	@ 0x68
 80009c4:	f000 fb02 	bl	8000fcc <prepareFrame>
	lcd_init();
 80009c8:	f000 fe44 	bl	8001654 <lcd_init>
	switch(filling)
 80009cc:	7b3b      	ldrb	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <executeONK+0x84>
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d00a      	beq.n	80009ec <executeONK+0x98>
 80009d6:	e013      	b.n	8000a00 <executeONK+0xac>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	b218      	sxth	r0, r3
 80009dc:	7bbb      	ldrb	r3, [r7, #14]
 80009de:	b219      	sxth	r1, r3
 80009e0:	7b7b      	ldrb	r3, [r7, #13]
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	897b      	ldrh	r3, [r7, #10]
 80009e6:	f006 f831 	bl	8006a4c <hagl_draw_circle>
		break;
 80009ea:	e009      	b.n	8000a00 <executeONK+0xac>
	case 1:
		hagl_fill_circle(x, y, r, color);
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	b218      	sxth	r0, r3
 80009f0:	7bbb      	ldrb	r3, [r7, #14]
 80009f2:	b219      	sxth	r1, r3
 80009f4:	7b7b      	ldrb	r3, [r7, #13]
 80009f6:	b21a      	sxth	r2, r3
 80009f8:	897b      	ldrh	r3, [r7, #10]
 80009fa:	f006 f956 	bl	8006caa <hagl_fill_circle>
		break;
 80009fe:	bf00      	nop
	}
	lcd_copy();
 8000a00:	f000 fdfa 	bl	80015f8 <lcd_copy>
}
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	08008940 	.word	0x08008940
 8000a10:	08008948 	.word	0x08008948
 8000a14:	08008968 	.word	0x08008968
 8000a18:	0800896c 	.word	0x0800896c

08000a1c <executeONP>:
static void executeONP(Receive_Frame *frame)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b089      	sub	sp, #36	@ 0x24
 8000a20:	af04      	add	r7, sp, #16
 8000a22:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73bb      	strb	r3, [r7, #14]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	737b      	strb	r3, [r7, #13]
 8000a30:	2300      	movs	r3, #0
 8000a32:	733b      	strb	r3, [r7, #12]
 8000a34:	2300      	movs	r3, #0
 8000a36:	72fb      	strb	r3, [r7, #11]
	uint16_t color = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	813b      	strh	r3, [r7, #8]
	if (!parse_parameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	1d58      	adds	r0, r3, #5
 8000a40:	f107 010e 	add.w	r1, r7, #14
 8000a44:	f107 020f 	add.w	r2, r7, #15
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	9303      	str	r3, [sp, #12]
 8000a4e:	f107 030b 	add.w	r3, r7, #11
 8000a52:	9302      	str	r3, [sp, #8]
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	f107 030d 	add.w	r3, r7, #13
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	460b      	mov	r3, r1
 8000a62:	4922      	ldr	r1, [pc, #136]	@ (8000aec <executeONP+0xd0>)
 8000a64:	f7ff febe 	bl	80007e4 <parse_parameters>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	f083 0301 	eor.w	r3, r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d009      	beq.n	8000a88 <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "Blad parsowania danych: %s", frame->data);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3305      	adds	r3, #5
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <executeONP+0xd4>)
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000af4 <executeONP+0xd8>)
 8000a7e:	2167      	movs	r1, #103	@ 0x67
 8000a80:	2068      	movs	r0, #104	@ 0x68
 8000a82:	f000 faa3 	bl	8000fcc <prepareFrame>
 8000a86:	e02e      	b.n	8000ae6 <executeONP+0xca>
		return;
	}

	prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "Wykonanie ONP z danymi: %s", frame->data);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3305      	adds	r3, #5
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <executeONP+0xdc>)
 8000a90:	4a18      	ldr	r2, [pc, #96]	@ (8000af4 <executeONP+0xd8>)
 8000a92:	2167      	movs	r1, #103	@ 0x67
 8000a94:	2068      	movs	r0, #104	@ 0x68
 8000a96:	f000 fa99 	bl	8000fcc <prepareFrame>
	lcd_init();
 8000a9a:	f000 fddb 	bl	8001654 <lcd_init>
	switch(filling)
 8000a9e:	7afb      	ldrb	r3, [r7, #11]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <executeONP+0x8e>
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d00e      	beq.n	8000ac6 <executeONP+0xaa>
 8000aa8:	e01b      	b.n	8000ae2 <executeONP+0xc6>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	b218      	sxth	r0, r3
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	b219      	sxth	r1, r3
 8000ab2:	7b7b      	ldrb	r3, [r7, #13]
 8000ab4:	b21a      	sxth	r2, r3
 8000ab6:	7b3b      	ldrb	r3, [r7, #12]
 8000ab8:	b21c      	sxth	r4, r3
 8000aba:	893b      	ldrh	r3, [r7, #8]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	4623      	mov	r3, r4
 8000ac0:	f005 fd14 	bl	80064ec <hagl_draw_rectangle>
		break;
 8000ac4:	e00d      	b.n	8000ae2 <executeONP+0xc6>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	b218      	sxth	r0, r3
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	b219      	sxth	r1, r3
 8000ace:	7b7b      	ldrb	r3, [r7, #13]
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	7b3b      	ldrb	r3, [r7, #12]
 8000ad4:	b21c      	sxth	r4, r3
 8000ad6:	893b      	ldrh	r3, [r7, #8]
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	4623      	mov	r3, r4
 8000adc:	f005 fd8c 	bl	80065f8 <hagl_fill_rectangle>
		break;
 8000ae0:	bf00      	nop
	}
	lcd_copy();
 8000ae2:	f000 fd89 	bl	80015f8 <lcd_copy>


}
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	0800898c 	.word	0x0800898c
 8000af0:	08008994 	.word	0x08008994
 8000af4:	08008968 	.word	0x08008968
 8000af8:	080089b0 	.word	0x080089b0

08000afc <executeONT>:


//TODO nie dziala
static void executeONT(Receive_Frame *frame)
{
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	b08d      	sub	sp, #52	@ 0x34
 8000b00:	af06      	add	r7, sp, #24
 8000b02:	6078      	str	r0, [r7, #4]
	uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	75fb      	strb	r3, [r7, #23]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	75bb      	strb	r3, [r7, #22]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	757b      	strb	r3, [r7, #21]
 8000b10:	2300      	movs	r3, #0
 8000b12:	753b      	strb	r3, [r7, #20]
 8000b14:	2300      	movs	r3, #0
 8000b16:	74fb      	strb	r3, [r7, #19]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	74bb      	strb	r3, [r7, #18]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	747b      	strb	r3, [r7, #17]
	uint16_t color = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	81fb      	strh	r3, [r7, #14]
	if (!parse_parameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	1d58      	adds	r0, r3, #5
 8000b28:	f107 0116 	add.w	r1, r7, #22
 8000b2c:	f107 0217 	add.w	r2, r7, #23
 8000b30:	f107 030e 	add.w	r3, r7, #14
 8000b34:	9305      	str	r3, [sp, #20]
 8000b36:	f107 0311 	add.w	r3, r7, #17
 8000b3a:	9304      	str	r3, [sp, #16]
 8000b3c:	f107 0312 	add.w	r3, r7, #18
 8000b40:	9303      	str	r3, [sp, #12]
 8000b42:	f107 0313 	add.w	r3, r7, #19
 8000b46:	9302      	str	r3, [sp, #8]
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	f107 0315 	add.w	r3, r7, #21
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	460b      	mov	r3, r1
 8000b56:	492a      	ldr	r1, [pc, #168]	@ (8000c00 <executeONT+0x104>)
 8000b58:	f7ff fe44 	bl	80007e4 <parse_parameters>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	f083 0301 	eor.w	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d009      	beq.n	8000b7c <executeONT+0x80>
	{
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Blad parsowania danych: %s\n", frame->data);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3305      	adds	r3, #5
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <executeONT+0x108>)
 8000b70:	4a25      	ldr	r2, [pc, #148]	@ (8000c08 <executeONT+0x10c>)
 8000b72:	2167      	movs	r1, #103	@ 0x67
 8000b74:	2068      	movs	r0, #104	@ 0x68
 8000b76:	f000 fa29 	bl	8000fcc <prepareFrame>
 8000b7a:	e03e      	b.n	8000bfa <executeONT+0xfe>
		return;
	}
	prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Wykonanie ONT z danymi: %s\n ", frame->data);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3305      	adds	r3, #5
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <executeONT+0x110>)
 8000b84:	4a20      	ldr	r2, [pc, #128]	@ (8000c08 <executeONT+0x10c>)
 8000b86:	2167      	movs	r1, #103	@ 0x67
 8000b88:	2068      	movs	r0, #104	@ 0x68
 8000b8a:	f000 fa1f 	bl	8000fcc <prepareFrame>
	lcd_init();
 8000b8e:	f000 fd61 	bl	8001654 <lcd_init>
	switch(filling)
 8000b92:	7c7b      	ldrb	r3, [r7, #17]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d002      	beq.n	8000b9e <executeONT+0xa2>
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d016      	beq.n	8000bca <executeONT+0xce>
 8000b9c:	e02b      	b.n	8000bf6 <executeONT+0xfa>
	{
	case 0:
		hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	b218      	sxth	r0, r3
 8000ba2:	7dbb      	ldrb	r3, [r7, #22]
 8000ba4:	b21c      	sxth	r4, r3
 8000ba6:	7d7b      	ldrb	r3, [r7, #21]
 8000ba8:	b21d      	sxth	r5, r3
 8000baa:	7d3b      	ldrb	r3, [r7, #20]
 8000bac:	b21e      	sxth	r6, r3
 8000bae:	7cfb      	ldrb	r3, [r7, #19]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	7cba      	ldrb	r2, [r7, #18]
 8000bb4:	b212      	sxth	r2, r2
 8000bb6:	89f9      	ldrh	r1, [r7, #14]
 8000bb8:	9102      	str	r1, [sp, #8]
 8000bba:	9201      	str	r2, [sp, #4]
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	4633      	mov	r3, r6
 8000bc0:	462a      	mov	r2, r5
 8000bc2:	4621      	mov	r1, r4
 8000bc4:	f006 fafc 	bl	80071c0 <hagl_draw_triangle>
		break;
 8000bc8:	e015      	b.n	8000bf6 <executeONT+0xfa>
	case 1:
		hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000bca:	7dfb      	ldrb	r3, [r7, #23]
 8000bcc:	b218      	sxth	r0, r3
 8000bce:	7dbb      	ldrb	r3, [r7, #22]
 8000bd0:	b21c      	sxth	r4, r3
 8000bd2:	7d7b      	ldrb	r3, [r7, #21]
 8000bd4:	b21d      	sxth	r5, r3
 8000bd6:	7d3b      	ldrb	r3, [r7, #20]
 8000bd8:	b21e      	sxth	r6, r3
 8000bda:	7cfb      	ldrb	r3, [r7, #19]
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	7cba      	ldrb	r2, [r7, #18]
 8000be0:	b212      	sxth	r2, r2
 8000be2:	89f9      	ldrh	r1, [r7, #14]
 8000be4:	9102      	str	r1, [sp, #8]
 8000be6:	9201      	str	r2, [sp, #4]
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	4633      	mov	r3, r6
 8000bec:	462a      	mov	r2, r5
 8000bee:	4621      	mov	r1, r4
 8000bf0:	f006 fb0c 	bl	800720c <hagl_fill_triangle>
		break;
 8000bf4:	bf00      	nop
	}
	lcd_copy();
 8000bf6:	f000 fcff 	bl	80015f8 <lcd_copy>

}
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c00:	080089cc 	.word	0x080089cc
 8000c04:	08008948 	.word	0x08008948
 8000c08:	08008968 	.word	0x08008968
 8000c0c:	080089d8 	.word	0x080089d8

08000c10 <executeONN>:

//TODO nie dziala, dodac obsluge przewijania tekstu
static void executeONN(Receive_Frame *frame)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	f6ad 0d24 	subw	sp, sp, #2084	@ 0x824
 8000c16:	af02      	add	r7, sp, #8
 8000c18:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c1c:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000c20:	6018      	str	r0, [r3, #0]
	wchar_t text[512];
	uint8_t x = 0, y = 0, fontSize = 0, speed = 0; // TODO dodac obsluge animacji tekstu
 8000c22:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c26:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c32:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c3e:	f6a3 030b 	subw	r3, r3, #2059	@ 0x80b
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 3817 	strb.w	r3, [r7, #2071]	@ 0x817
	uint16_t color = 0;
 8000c4c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c50:	f6a3 030e 	subw	r3, r3, #2062	@ 0x80e
 8000c54:	2200      	movs	r2, #0
 8000c56:	801a      	strh	r2, [r3, #0]
	if (!parse_parameters(frame->data, "uuus", &x, &y, &fontSize,  &color)) {
 8000c58:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c5c:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	1d58      	adds	r0, r3, #5
 8000c64:	f107 010e 	add.w	r1, r7, #14
 8000c68:	f107 020f 	add.w	r2, r7, #15
 8000c6c:	f107 030a 	add.w	r3, r7, #10
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	f107 030d 	add.w	r3, r7, #13
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4952      	ldr	r1, [pc, #328]	@ (8000dc4 <executeONN+0x1b4>)
 8000c7c:	f7ff fdb2 	bl	80007e4 <parse_parameters>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f083 0301 	eor.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00d      	beq.n	8000ca8 <executeONN+0x98>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Blad parsowania danych: %s\n", frame->data);
 8000c8c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c90:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3305      	adds	r3, #5
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc8 <executeONN+0x1b8>)
 8000c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8000dcc <executeONN+0x1bc>)
 8000c9e:	2167      	movs	r1, #103	@ 0x67
 8000ca0:	2068      	movs	r0, #104	@ 0x68
 8000ca2:	f000 f993 	bl	8000fcc <prepareFrame>
 8000ca6:	e089      	b.n	8000dbc <executeONN+0x1ac>
		return;
	}
	const char *text_start = strchr(frame->data, ',');
 8000ca8:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000cac:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3305      	adds	r3, #5
 8000cb4:	212c      	movs	r1, #44	@ 0x2c
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f006 fdee 	bl	8007898 <strchr>
 8000cbc:	f8c7 0810 	str.w	r0, [r7, #2064]	@ 0x810
	if (text_start) {
 8000cc0:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d012      	beq.n	8000cee <executeONN+0xde>
		text_start = strchr(text_start + 1, ','); // Znajdź początek tekstu
 8000cc8:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8000ccc:	3301      	adds	r3, #1
 8000cce:	212c      	movs	r1, #44	@ 0x2c
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f006 fde1 	bl	8007898 <strchr>
 8000cd6:	f8c7 0810 	str.w	r0, [r7, #2064]	@ 0x810
		mbstowcs(text, text_start + 1, 512); // Konwersja tekstu na `wchar_t`
 8000cda:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8000cde:	1c59      	adds	r1, r3, #1
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f006 fab9 	bl	8007260 <mbstowcs>
		}
	prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Wykonanie ONN z danymi: %s\n ", frame->data);
 8000cee:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000cf2:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3305      	adds	r3, #5
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	4b34      	ldr	r3, [pc, #208]	@ (8000dd0 <executeONN+0x1c0>)
 8000cfe:	4a33      	ldr	r2, [pc, #204]	@ (8000dcc <executeONN+0x1bc>)
 8000d00:	2167      	movs	r1, #103	@ 0x67
 8000d02:	2068      	movs	r0, #104	@ 0x68
 8000d04:	f000 f962 	bl	8000fcc <prepareFrame>
	lcd_init();
 8000d08:	f000 fca4 	bl	8001654 <lcd_init>
	switch(fontSize)
 8000d0c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d10:	f6a3 030b 	subw	r3, r3, #2059	@ 0x80b
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d036      	beq.n	8000d88 <executeONN+0x178>
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	dc4c      	bgt.n	8000db8 <executeONN+0x1a8>
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d002      	beq.n	8000d28 <executeONN+0x118>
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d018      	beq.n	8000d58 <executeONN+0x148>
 8000d26:	e047      	b.n	8000db8 <executeONN+0x1a8>
	{
	case 1:
		hagl_put_text(text, x, y, color, font5x7); //fontSize zmien
 8000d28:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d2c:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b219      	sxth	r1, r3
 8000d34:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d38:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d44:	f6a3 030e 	subw	r3, r3, #2062	@ 0x80e
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	f107 0010 	add.w	r0, r7, #16
 8000d4e:	4c21      	ldr	r4, [pc, #132]	@ (8000dd4 <executeONN+0x1c4>)
 8000d50:	9400      	str	r4, [sp, #0]
 8000d52:	f005 fdf3 	bl	800693c <hagl_put_text>
		break;
 8000d56:	e02f      	b.n	8000db8 <executeONN+0x1a8>
	case 2:
		hagl_put_text(text, x, y, color, font5x8); //fontSize zmien
 8000d58:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d5c:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b219      	sxth	r1, r3
 8000d64:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d68:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d74:	f6a3 030e 	subw	r3, r3, #2062	@ 0x80e
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	f107 0010 	add.w	r0, r7, #16
 8000d7e:	4c16      	ldr	r4, [pc, #88]	@ (8000dd8 <executeONN+0x1c8>)
 8000d80:	9400      	str	r4, [sp, #0]
 8000d82:	f005 fddb 	bl	800693c <hagl_put_text>
		break;
 8000d86:	e017      	b.n	8000db8 <executeONN+0x1a8>
	case 3:
		hagl_put_text(text, x, x, color, font6x9); //fontSize zmien
 8000d88:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d8c:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b219      	sxth	r1, r3
 8000d94:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d98:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000da4:	f6a3 030e 	subw	r3, r3, #2062	@ 0x80e
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	f107 0010 	add.w	r0, r7, #16
 8000dae:	4c0b      	ldr	r4, [pc, #44]	@ (8000ddc <executeONN+0x1cc>)
 8000db0:	9400      	str	r4, [sp, #0]
 8000db2:	f005 fdc3 	bl	800693c <hagl_put_text>
		break;
 8000db6:	bf00      	nop
	}
	lcd_copy();
 8000db8:	f000 fc1e 	bl	80015f8 <lcd_copy>



}
 8000dbc:	f607 071c 	addw	r7, r7, #2076	@ 0x81c
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	080089f8 	.word	0x080089f8
 8000dc8:	08008948 	.word	0x08008948
 8000dcc:	08008968 	.word	0x08008968
 8000dd0:	08008a00 	.word	0x08008a00
 8000dd4:	08008c8c 	.word	0x08008c8c
 8000dd8:	0800c194 	.word	0x0800c194
 8000ddc:	0800f038 	.word	0x0800f038

08000de0 <executeOFF>:
static void executeOFF(Receive_Frame *frame)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	6078      	str	r0, [r7, #4]
	uint8_t state = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
	if (!parse_parameters(frame->data, "u", &state)) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3305      	adds	r3, #5
 8000df0:	f107 020f 	add.w	r2, r7, #15
 8000df4:	4913      	ldr	r1, [pc, #76]	@ (8000e44 <executeOFF+0x64>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fcf4 	bl	80007e4 <parse_parameters>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f083 0301 	eor.w	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d009      	beq.n	8000e1c <executeOFF+0x3c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Blad parsowania danych: %s\n", frame->data);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3305      	adds	r3, #5
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <executeOFF+0x68>)
 8000e10:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <executeOFF+0x6c>)
 8000e12:	2167      	movs	r1, #103	@ 0x67
 8000e14:	2068      	movs	r0, #104	@ 0x68
 8000e16:	f000 f8d9 	bl	8000fcc <prepareFrame>
 8000e1a:	e010      	b.n	8000e3e <executeOFF+0x5e>
		return;
	}
	prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Wykonanie OFF z danymi: %s\n ", frame->data);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3305      	adds	r3, #5
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <executeOFF+0x70>)
 8000e24:	4a09      	ldr	r2, [pc, #36]	@ (8000e4c <executeOFF+0x6c>)
 8000e26:	2167      	movs	r1, #103	@ 0x67
 8000e28:	2068      	movs	r0, #104	@ 0x68
 8000e2a:	f000 f8cf 	bl	8000fcc <prepareFrame>
	switch(state)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <executeOFF+0x58>
 8000e34:	2b01      	cmp	r3, #1
	case 0:
		//off
		break;
	case 1:
		//reset
		break;
 8000e36:	e000      	b.n	8000e3a <executeOFF+0x5a>
		break;
 8000e38:	bf00      	nop
	}
	lcd_copy();
 8000e3a:	f000 fbdd 	bl	80015f8 <lcd_copy>

}
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	08008a20 	.word	0x08008a20
 8000e48:	08008948 	.word	0x08008948
 8000e4c:	08008968 	.word	0x08008968
 8000e50:	08008a24 	.word	0x08008a24

08000e54 <is_within_bounds>:

bool is_within_bounds(int x, int y)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <is_within_bounds+0x26>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e68:	dc07      	bgt.n	8000e7a <is_within_bounds+0x26>
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db04      	blt.n	8000e7a <is_within_bounds+0x26>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e74:	dc01      	bgt.n	8000e7a <is_within_bounds+0x26>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <is_within_bounds+0x28>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <parse_coordinates>:
bool parse_coordinates(const char *data, int *x, int *y)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0a6      	sub	sp, #152	@ 0x98
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
	char *token;
	    char data_copy[MAX_DATA_SIZE];
	    strncpy(data_copy, data, MAX_DATA_SIZE); // Kopiujemy dane wejściowe, bo strtok modyfikuje ciąg
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2280      	movs	r2, #128	@ 0x80
 8000ea2:	68f9      	ldr	r1, [r7, #12]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f006 fd16 	bl	80078d6 <strncpy>

	    token = strtok(data_copy, ","); // Pierwsza współrzędna (jest to funkcja służąca do oddzielania stringów z separatorem)
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4915      	ldr	r1, [pc, #84]	@ (8000f04 <parse_coordinates+0x74>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f006 fd23 	bl	80078fc <strtok>
 8000eb6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000eba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <parse_coordinates+0x36>
	        return false;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e01a      	b.n	8000efc <parse_coordinates+0x6c>
	    }
	    *x = atoi(token);
 8000ec6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000eca:	f006 f9c5 	bl	8007258 <atoi>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	601a      	str	r2, [r3, #0]

	    token = strtok(NULL, ","); // Druga współrzędna
 8000ed4:	490b      	ldr	r1, [pc, #44]	@ (8000f04 <parse_coordinates+0x74>)
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f006 fd10 	bl	80078fc <strtok>
 8000edc:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000ee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <parse_coordinates+0x5c>
	        return false;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e007      	b.n	8000efc <parse_coordinates+0x6c>
	    }
	    *y = atoi(token);
 8000eec:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000ef0:	f006 f9b2 	bl	8007258 <atoi>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	601a      	str	r2, [r3, #0]

	    return true;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3798      	adds	r7, #152	@ 0x98
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	08008a44 	.word	0x08008a44

08000f08 <byteStuffing>:
//=======================OBSŁUGA RAMKI=========================
//TODO zmienic byteStuffing na wersje z ramki
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	e04b      	b.n	8000fb6 <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f28:	d10e      	bne.n	8000f48 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	617a      	str	r2, [r7, #20]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	227d      	movs	r2, #125	@ 0x7d
 8000f36:	701a      	strb	r2, [r3, #0]
            output[j++] = ']';
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	617a      	str	r2, [r7, #20]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	225d      	movs	r2, #93	@ 0x5d
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e033      	b.n	8000fb0 <byteStuffing+0xa8>
        } else if (input[i] == '~') {
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f52:	d10e      	bne.n	8000f72 <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	617a      	str	r2, [r7, #20]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	227d      	movs	r2, #125	@ 0x7d
 8000f60:	701a      	strb	r2, [r3, #0]
            output[j++] = '^';
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	617a      	str	r2, [r7, #20]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	225e      	movs	r2, #94	@ 0x5e
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e01e      	b.n	8000fb0 <byteStuffing+0xa8>
        } else if (input[i] == '`') {
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4413      	add	r3, r2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b60      	cmp	r3, #96	@ 0x60
 8000f7c:	d10e      	bne.n	8000f9c <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	617a      	str	r2, [r7, #20]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4413      	add	r3, r2
 8000f88:	227d      	movs	r2, #125	@ 0x7d
 8000f8a:	701a      	strb	r2, [r3, #0]
            output[j++] = '&';
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	617a      	str	r2, [r7, #20]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	2226      	movs	r2, #38	@ 0x26
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	e009      	b.n	8000fb0 <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	441a      	add	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	1c59      	adds	r1, r3, #1
 8000fa6:	6179      	str	r1, [r7, #20]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	440b      	add	r3, r1
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3af      	bcc.n	8000f1e <byteStuffing+0x16>
        }
    }
    return j;
 8000fbe:	697b      	ldr	r3, [r7, #20]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <prepareFrame>:

void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 8000fcc:	b408      	push	{r3}
 8000fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fd2:	f5ad 7d32 	sub.w	sp, sp, #712	@ 0x2c8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8000fdc:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8000fe6:	f2a3 23b9 	subw	r3, r3, #697	@ 0x2b9
 8000fea:	4602      	mov	r2, r0
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8000ff2:	f2a3 23ba 	subw	r3, r3, #698	@ 0x2ba
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	466b      	mov	r3, sp
 8000ffc:	461e      	mov	r6, r3
	Frame frame = {0};
 8000ffe:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001002:	228a      	movs	r2, #138	@ 0x8a
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f006 fc3e 	bl	8007888 <memset>
	    frame.frame_start = FRAME_START;
 800100c:	237e      	movs	r3, #126	@ 0x7e
 800100e:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
	    frame.sender = sender;
 8001012:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8001016:	f2a3 23b9 	subw	r3, r3, #697	@ 0x2b9
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    frame.receiver = receiver;
 8001020:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8001024:	f2a3 23ba 	subw	r3, r3, #698	@ 0x2ba
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 800102e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8001032:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8001036:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 800103a:	1cd0      	adds	r0, r2, #3
 800103c:	2203      	movs	r2, #3
 800103e:	6819      	ldr	r1, [r3, #0]
 8001040:	f006 fc49 	bl	80078d6 <strncpy>

	    // Formatowanie danych
	    va_list args;
	    va_start(args, format);
 8001044:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001048:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	    vsnprintf((char *)frame.data, MAX_DATA_SIZE, format, args);
 800104c:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001050:	1d98      	adds	r0, r3, #6
 8001052:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8001056:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 800105a:	2180      	movs	r1, #128	@ 0x80
 800105c:	f006 fbe6 	bl	800782c <vsniprintf>
	    va_end(args);

	    // Oblicz długość danych
	    size_t data_len = strlen((const char *)frame.data);
 8001060:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001064:	3306      	adds	r3, #6
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f8b2 	bl	80001d0 <strlen>
 800106c:	f8c7 02c0 	str.w	r0, [r7, #704]	@ 0x2c0

	    // Przygotowanie danych do obliczenia CRC
	    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 8001070:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8001074:	3305      	adds	r3, #5
 8001076:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
	    uint8_t crc_input[crc_input_len];
 800107a:	f8d7 12bc 	ldr.w	r1, [r7, #700]	@ 0x2bc
 800107e:	460b      	mov	r3, r1
 8001080:	3b01      	subs	r3, #1
 8001082:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001086:	2300      	movs	r3, #0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	00c3      	lsls	r3, r0, #3
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800109e:	6838      	ldr	r0, [r7, #0]
 80010a0:	00c2      	lsls	r2, r0, #3
 80010a2:	2300      	movs	r3, #0
 80010a4:	468a      	mov	sl, r1
 80010a6:	469b      	mov	fp, r3
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80010b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80010b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010bc:	1dcb      	adds	r3, r1, #7
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	ebad 0d03 	sub.w	sp, sp, r3
 80010c6:	466b      	mov	r3, sp
 80010c8:	3300      	adds	r3, #0
 80010ca:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
	    crc_input[0] = frame.sender;
 80010ce:	f897 221d 	ldrb.w	r2, [r7, #541]	@ 0x21d
 80010d2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80010d6:	701a      	strb	r2, [r3, #0]
	    crc_input[1] = frame.receiver;
 80010d8:	f897 221e 	ldrb.w	r2, [r7, #542]	@ 0x21e
 80010dc:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80010e0:	705a      	strb	r2, [r3, #1]
	    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 80010e2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80010e6:	3302      	adds	r3, #2
 80010e8:	461a      	mov	r2, r3
 80010ea:	f207 231f 	addw	r3, r7, #543	@ 0x21f
 80010ee:	8819      	ldrh	r1, [r3, #0]
 80010f0:	789b      	ldrb	r3, [r3, #2]
 80010f2:	8011      	strh	r1, [r2, #0]
 80010f4:	7093      	strb	r3, [r2, #2]
	    memcpy(crc_input + 2 + COMMAND_LENGTH, frame.data, data_len);
 80010f6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80010fa:	1d58      	adds	r0, r3, #5
 80010fc:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001100:	3306      	adds	r3, #6
 8001102:	f8d7 22c0 	ldr.w	r2, [r7, #704]	@ 0x2c0
 8001106:	4619      	mov	r1, r3
 8001108:	f006 fcc7 	bl	8007a9a <memcpy>

	    // Obliczanie CRC
	    char crc_output[2]; // Tablica na wynik CRC
	    calculate_crc16(crc_input, crc_input_len, crc_output);
 800110c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001110:	461a      	mov	r2, r3
 8001112:	f8d7 12bc 	ldr.w	r1, [r7, #700]	@ 0x2bc
 8001116:	f8d7 02b4 	ldr.w	r0, [r7, #692]	@ 0x2b4
 800111a:	f7ff faf5 	bl	8000708 <calculate_crc16>

	    // Przygotowanie do byte-stuffingu
	    uint8_t raw_payload[2 + COMMAND_LENGTH + data_len + 2];
 800111e:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8001122:	1dd9      	adds	r1, r3, #7
 8001124:	460b      	mov	r3, r1
 8001126:	3b01      	subs	r3, #1
 8001128:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800112c:	2300      	movs	r3, #0
 800112e:	4688      	mov	r8, r1
 8001130:	4699      	mov	r9, r3
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800113e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001146:	2300      	movs	r3, #0
 8001148:	460c      	mov	r4, r1
 800114a:	461d      	mov	r5, r3
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	00eb      	lsls	r3, r5, #3
 8001156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800115a:	00e2      	lsls	r2, r4, #3
 800115c:	1dcb      	adds	r3, r1, #7
 800115e:	08db      	lsrs	r3, r3, #3
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	ebad 0d03 	sub.w	sp, sp, r3
 8001166:	466b      	mov	r3, sp
 8001168:	3300      	adds	r3, #0
 800116a:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
	    raw_payload[0] = frame.sender;
 800116e:	f897 221d 	ldrb.w	r2, [r7, #541]	@ 0x21d
 8001172:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001176:	701a      	strb	r2, [r3, #0]
	    raw_payload[1] = frame.receiver;
 8001178:	f897 221e 	ldrb.w	r2, [r7, #542]	@ 0x21e
 800117c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001180:	705a      	strb	r2, [r3, #1]
	    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 8001182:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001186:	3302      	adds	r3, #2
 8001188:	461a      	mov	r2, r3
 800118a:	f207 231f 	addw	r3, r7, #543	@ 0x21f
 800118e:	8819      	ldrh	r1, [r3, #0]
 8001190:	789b      	ldrb	r3, [r3, #2]
 8001192:	8011      	strh	r1, [r2, #0]
 8001194:	7093      	strb	r3, [r2, #2]
	    memcpy(raw_payload + 2 + COMMAND_LENGTH, frame.data, data_len);
 8001196:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800119a:	1d58      	adds	r0, r3, #5
 800119c:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 80011a0:	3306      	adds	r3, #6
 80011a2:	f8d7 22c0 	ldr.w	r2, [r7, #704]	@ 0x2c0
 80011a6:	4619      	mov	r1, r3
 80011a8:	f006 fc77 	bl	8007a9a <memcpy>
	    raw_payload[2 + COMMAND_LENGTH + data_len] = (uint8_t)crc_output[0]; // Pierwszy bajt CRC
 80011ac:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 80011b0:	3305      	adds	r3, #5
 80011b2:	f897 1214 	ldrb.w	r1, [r7, #532]	@ 0x214
 80011b6:	f8d7 22ac 	ldr.w	r2, [r7, #684]	@ 0x2ac
 80011ba:	54d1      	strb	r1, [r2, r3]
	    raw_payload[2 + COMMAND_LENGTH + data_len + 1] = (uint8_t)crc_output[1]; // Drugi bajt CRC
 80011bc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 80011c0:	3306      	adds	r3, #6
 80011c2:	f897 1215 	ldrb.w	r1, [r7, #533]	@ 0x215
 80011c6:	f8d7 22ac 	ldr.w	r2, [r7, #684]	@ 0x2ac
 80011ca:	54d1      	strb	r1, [r2, r3]

	    uint8_t stuffed_payload[512];
	    size_t stuffed_len = byteStuffing(raw_payload, 2 + COMMAND_LENGTH + data_len + 2, stuffed_payload);
 80011cc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 80011d0:	3307      	adds	r3, #7
 80011d2:	f107 0214 	add.w	r2, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	f8d7 02ac 	ldr.w	r0, [r7, #684]	@ 0x2ac
 80011dc:	f7ff fe94 	bl	8000f08 <byteStuffing>
 80011e0:	f8c7 02a8 	str.w	r0, [r7, #680]	@ 0x2a8

	    // Wysyłanie ramki
	    USART_fsend("%c", FRAME_START); // Wyślij początek ramki
 80011e4:	217e      	movs	r1, #126	@ 0x7e
 80011e6:	4815      	ldr	r0, [pc, #84]	@ (800123c <prepareFrame+0x270>)
 80011e8:	f7ff fa18 	bl	800061c <USART_fsend>
	    for (size_t i = 0; i < stuffed_len; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 80011f2:	e010      	b.n	8001216 <prepareFrame+0x24a>
	        USART_fsend("%c", stuffed_payload[i]); // Wyślij dane po byte-stuffingu
 80011f4:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80011f8:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 80011fc:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001200:	4413      	add	r3, r2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	@ (800123c <prepareFrame+0x270>)
 8001208:	f7ff fa08 	bl	800061c <USART_fsend>
	    for (size_t i = 0; i < stuffed_len; i++) {
 800120c:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001210:	3301      	adds	r3, #1
 8001212:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8001216:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 800121a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 800121e:	429a      	cmp	r2, r3
 8001220:	d3e8      	bcc.n	80011f4 <prepareFrame+0x228>
	    }
	    USART_fsend("%c", FRAME_END); // Wyślij koniec ramki
 8001222:	2160      	movs	r1, #96	@ 0x60
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <prepareFrame+0x270>)
 8001226:	f7ff f9f9 	bl	800061c <USART_fsend>
 800122a:	46b5      	mov	sp, r6
}
 800122c:	bf00      	nop
 800122e:	f507 7732 	add.w	r7, r7, #712	@ 0x2c8
 8001232:	46bd      	mov	sp, r7
 8001234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001238:	b001      	add	sp, #4
 800123a:	4770      	bx	lr
 800123c:	08008a48 	.word	0x08008a48

08001240 <decodeFrame>:


bool decodeFrame(uint8_t *bx, Receive_Frame *frame, uint8_t len) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	4613      	mov	r3, r2
 800124c:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];
    //USART_fsend("\r\ndlugosc: %d\r\n",len);
        if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b06      	cmp	r3, #6
 8001252:	d948      	bls.n	80012e6 <decodeFrame+0xa6>
            //USART_fsend("bede zapisywac ramke w strukturze\r\n");
            uint8_t k = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	75fb      	strb	r3, [r7, #23]
            frame->receiver = bx[k++];
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	75fa      	strb	r2, [r7, #23]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	701a      	strb	r2, [r3, #0]
            frame->sender = bx[k++];
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	75fa      	strb	r2, [r7, #23]
 8001270:	461a      	mov	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	705a      	strb	r2, [r3, #1]
            memcpy(frame->command, &bx[k],COMMAND_LENGTH);
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1c98      	adds	r0, r3, #2
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	4413      	add	r3, r2
 8001286:	2203      	movs	r2, #3
 8001288:	4619      	mov	r1, r3
 800128a:	f006 fc06 	bl	8007a9a <memcpy>
            k += COMMAND_LENGTH;
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	3303      	adds	r3, #3
 8001292:	75fb      	strb	r3, [r7, #23]
            uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	3b07      	subs	r3, #7
 8001298:	75bb      	strb	r3, [r7, #22]
            memcpy(frame->data, &bx[k],data_len);
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1d58      	adds	r0, r3, #5
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	7dba      	ldrb	r2, [r7, #22]
 80012a6:	4619      	mov	r1, r3
 80012a8:	f006 fbf7 	bl	8007a9a <memcpy>
            k += data_len;
 80012ac:	7dfa      	ldrb	r2, [r7, #23]
 80012ae:	7dbb      	ldrb	r3, [r7, #22]
 80012b0:	4413      	add	r3, r2
 80012b2:	75fb      	strb	r3, [r7, #23]
            memcpy(incCrc, &bx[k], 2);
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	4413      	add	r3, r2
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	823b      	strh	r3, [r7, #16]
            calculate_crc16((uint8_t *)frame, k, ownCrc);
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	f107 0214 	add.w	r2, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f7ff fa1d 	bl	8000708 <calculate_crc16>

                if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 80012ce:	7d3a      	ldrb	r2, [r7, #20]
 80012d0:	7c3b      	ldrb	r3, [r7, #16]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d103      	bne.n	80012de <decodeFrame+0x9e>
 80012d6:	7d7a      	ldrb	r2, [r7, #21]
 80012d8:	7c7b      	ldrb	r3, [r7, #17]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <decodeFrame+0xa2>
                    return false;
 80012de:	2300      	movs	r3, #0
 80012e0:	e002      	b.n	80012e8 <decodeFrame+0xa8>
                }

            return true; // crc zosta?o pomy?lnie por?wnanie
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <decodeFrame+0xa8>
        }
    return false; // ramka niepoprawna
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <handleCommand>:


void handleCommand(Receive_Frame *frame)
{
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b092      	sub	sp, #72	@ 0x48
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
	CommandEntry commandTable[COMMAND_COUNT] = {
 80012f8:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <handleCommand+0xf8>)
 80012fa:	f107 0414 	add.w	r4, r7, #20
 80012fe:	461d      	mov	r5, r3
 8001300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	e895 0003 	ldmia.w	r5, {r0, r1}
 800130c:	e884 0003 	stmia.w	r4, {r0, r1}
			{"ONP", executeONP},
			{"ONT", executeONT},
			{"ONN", executeONN},
			{"OFF", executeOFF}
	};
	for (int i = 0; i < COMMAND_COUNT; i++) {
 8001310:	2300      	movs	r3, #0
 8001312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001314:	e056      	b.n	80013c4 <handleCommand+0xd4>
	        if (strncmp(frame->command, commandTable[i].command, COMMAND_LENGTH) == 0) {
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	1c98      	adds	r0, r3, #2
 800131a:	f107 0214 	add.w	r2, r7, #20
 800131e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	2203      	movs	r2, #3
 8001326:	4619      	mov	r1, r3
 8001328:	f006 fac3 	bl	80078b2 <strncmp>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d145      	bne.n	80013be <handleCommand+0xce>
	            // Parsowanie współrzędnych z `data`
	            int x, y;
	            if (parse_coordinates(frame->data, &x, &y)) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3305      	adds	r3, #5
 8001336:	f107 020c 	add.w	r2, r7, #12
 800133a:	f107 0110 	add.w	r1, r7, #16
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fda6 	bl	8000e90 <parse_coordinates>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d02c      	beq.n	80013a4 <handleCommand+0xb4>
	                // Sprawdzenie zakresu współrzędnych
	                if (is_within_bounds(x, y)) {
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fd7f 	bl	8000e54 <is_within_bounds>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d015      	beq.n	8001388 <handleCommand+0x98>
	                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Wspolrzedne poprawne: x = %d, y = %d ", x, y);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	9201      	str	r2, [sp, #4]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <handleCommand+0xfc>)
 8001366:	4a22      	ldr	r2, [pc, #136]	@ (80013f0 <handleCommand+0x100>)
 8001368:	2167      	movs	r1, #103	@ 0x67
 800136a:	2068      	movs	r0, #104	@ 0x68
 800136c:	f7ff fe2e 	bl	8000fcc <prepareFrame>
	                    USART_fsend("\r\n");
 8001370:	4820      	ldr	r0, [pc, #128]	@ (80013f4 <handleCommand+0x104>)
 8001372:	f7ff f953 	bl	800061c <USART_fsend>
	                    commandTable[i].function(frame); // Wywołaj przypisaną funkcję
 8001376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	3340      	adds	r3, #64	@ 0x40
 800137c:	443b      	add	r3, r7
 800137e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
	                    return;
 8001386:	e02c      	b.n	80013e2 <handleCommand+0xf2>
	                } else {
	                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Współrzędne poza zakresem: x = %d, y = %d ", x, y);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	9201      	str	r2, [sp, #4]
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <handleCommand+0x108>)
 8001392:	4a17      	ldr	r2, [pc, #92]	@ (80013f0 <handleCommand+0x100>)
 8001394:	2167      	movs	r1, #103	@ 0x67
 8001396:	2068      	movs	r0, #104	@ 0x68
 8001398:	f7ff fe18 	bl	8000fcc <prepareFrame>
	                    USART_fsend("\r\n");
 800139c:	4815      	ldr	r0, [pc, #84]	@ (80013f4 <handleCommand+0x104>)
 800139e:	f7ff f93d 	bl	800061c <USART_fsend>
	                    return;
 80013a2:	e01e      	b.n	80013e2 <handleCommand+0xf2>
	                }
	            } else {
	                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Błąd parsowania współrzędnych w danych: %s\r\n ", frame->data);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3305      	adds	r3, #5
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <handleCommand+0x10c>)
 80013ac:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <handleCommand+0x100>)
 80013ae:	2167      	movs	r1, #103	@ 0x67
 80013b0:	2068      	movs	r0, #104	@ 0x68
 80013b2:	f7ff fe0b 	bl	8000fcc <prepareFrame>
	                USART_fsend("\r\n");
 80013b6:	480f      	ldr	r0, [pc, #60]	@ (80013f4 <handleCommand+0x104>)
 80013b8:	f7ff f930 	bl	800061c <USART_fsend>
	                return;
 80013bc:	e011      	b.n	80013e2 <handleCommand+0xf2>
	for (int i = 0; i < COMMAND_COUNT; i++) {
 80013be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013c0:	3301      	adds	r3, #1
 80013c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	dda5      	ble.n	8001316 <handleCommand+0x26>
	            }
	        }
	    }
	    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " Nieznana komenda: %s\r\n ", frame->command);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3302      	adds	r3, #2
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <handleCommand+0x110>)
 80013d2:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <handleCommand+0x100>)
 80013d4:	2167      	movs	r1, #103	@ 0x67
 80013d6:	2068      	movs	r0, #104	@ 0x68
 80013d8:	f7ff fdf8 	bl	8000fcc <prepareFrame>
	    USART_fsend("\r\n");
 80013dc:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <handleCommand+0x104>)
 80013de:	f7ff f91d 	bl	800061c <USART_fsend>
}
 80013e2:	3740      	adds	r7, #64	@ 0x40
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bdb0      	pop	{r4, r5, r7, pc}
 80013e8:	08008af8 	.word	0x08008af8
 80013ec:	08008a4c 	.word	0x08008a4c
 80013f0:	08008968 	.word	0x08008968
 80013f4:	08008a74 	.word	0x08008a74
 80013f8:	08008a78 	.word	0x08008a78
 80013fc:	08008aa8 	.word	0x08008aa8
 8001400:	08008adc 	.word	0x08008adc

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <MX_GPIO_Init+0x90>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	4a1d      	ldr	r2, [pc, #116]	@ (8001494 <MX_GPIO_Init+0x90>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <MX_GPIO_Init+0x90>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_GPIO_Init+0x90>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	4a17      	ldr	r2, [pc, #92]	@ (8001494 <MX_GPIO_Init+0x90>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <MX_GPIO_Init+0x90>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_GPIO_Init+0x90>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a11      	ldr	r2, [pc, #68]	@ (8001494 <MX_GPIO_Init+0x90>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_GPIO_Init+0x90>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f641 0106 	movw	r1, #6150	@ 0x1806
 8001468:	480b      	ldr	r0, [pc, #44]	@ (8001498 <MX_GPIO_Init+0x94>)
 800146a:	f001 f9a9 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 800146e:	f641 0306 	movw	r3, #6150	@ 0x1806
 8001472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_GPIO_Init+0x94>)
 8001488:	f000 fff0 	bl	800246c <HAL_GPIO_Init>

}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	48000400 	.word	0x48000400

0800149c <lcd_cmd>:
		CMD(ST7735S_COLMOD), 0x05,
		CMD(ST7735S_MADCTL), 0xa0,
};

static void lcd_cmd(uint8_t cmd)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014ac:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <lcd_cmd+0x44>)
 80014ae:	f001 f987 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <lcd_cmd+0x44>)
 80014ba:	f001 f981 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80014be:	1df9      	adds	r1, r7, #7
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	2201      	movs	r2, #1
 80014c6:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <lcd_cmd+0x48>)
 80014c8:	f002 fd55 	bl	8003f76 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d2:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <lcd_cmd+0x44>)
 80014d4:	f001 f974 	bl	80027c0 <HAL_GPIO_WritePin>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	48000400 	.word	0x48000400
 80014e4:	2000acc4 	.word	0x2000acc4

080014e8 <lcd_data>:
static void lcd_data(uint8_t data)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <lcd_data+0x44>)
 80014fa:	f001 f961 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001504:	4809      	ldr	r0, [pc, #36]	@ (800152c <lcd_data+0x44>)
 8001506:	f001 f95b 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800150a:	1df9      	adds	r1, r7, #7
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	2201      	movs	r2, #1
 8001512:	4807      	ldr	r0, [pc, #28]	@ (8001530 <lcd_data+0x48>)
 8001514:	f002 fd2f 	bl	8003f76 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800151e:	4803      	ldr	r0, [pc, #12]	@ (800152c <lcd_data+0x44>)
 8001520:	f001 f94e 	bl	80027c0 <HAL_GPIO_WritePin>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	48000400 	.word	0x48000400
 8001530:	2000acc4 	.word	0x2000acc4

08001534 <lcd_send>:
static void lcd_send(uint16_t value)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <lcd_send+0x20>
		lcd_cmd(value);
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ffa5 	bl	800149c <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001552:	e004      	b.n	800155e <lcd_send+0x2a>
		lcd_data(value);
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ffc5 	bl	80014e8 <lcd_data>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <lcd_data16>:
static void lcd_data16(uint16_t value)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ffb5 	bl	80014e8 <lcd_data>
	lcd_data(value);
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ffb0 	bl	80014e8 <lcd_data>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <lcd_set_window>:
static void lcd_set_window(int x, int y, int width, int height)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 800159e:	202a      	movs	r0, #42	@ 0x2a
 80015a0:	f7ff ff7c 	bl	800149c <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3301      	adds	r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ffda 	bl	8001566 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ffd1 	bl	8001566 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 80015c4:	202b      	movs	r0, #43	@ 0x2b
 80015c6:	f7ff ff69 	bl	800149c <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	3302      	adds	r3, #2
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ffc7 	bl	8001566 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ffbc 	bl	8001566 <lcd_data16>
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <lcd_copy>:
void lcd_copy(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80015fc:	2380      	movs	r3, #128	@ 0x80
 80015fe:	22a0      	movs	r2, #160	@ 0xa0
 8001600:	2100      	movs	r1, #0
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff ffc4 	bl	8001590 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001608:	202c      	movs	r0, #44	@ 0x2c
 800160a:	f7ff ff47 	bl	800149c <lcd_cmd>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001614:	480c      	ldr	r0, [pc, #48]	@ (8001648 <lcd_copy+0x50>)
 8001616:	f001 f8d3 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001620:	4809      	ldr	r0, [pc, #36]	@ (8001648 <lcd_copy+0x50>)
 8001622:	f001 f8cd 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 800162e:	4907      	ldr	r1, [pc, #28]	@ (800164c <lcd_copy+0x54>)
 8001630:	4807      	ldr	r0, [pc, #28]	@ (8001650 <lcd_copy+0x58>)
 8001632:	f002 fca0 	bl	8003f76 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <lcd_copy+0x50>)
 800163e:	f001 f8bf 	bl	80027c0 <HAL_GPIO_WritePin>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	48000400 	.word	0x48000400
 800164c:	20000bac 	.word	0x20000bac
 8001650:	2000acc4 	.word	0x2000acc4

08001654 <lcd_init>:

//TODO zrobic zarządzanie podświetleniem
void lcd_init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
	  int i;

	  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2104      	movs	r1, #4
 800165e:	4817      	ldr	r0, [pc, #92]	@ (80016bc <lcd_init+0x68>)
 8001660:	f001 f8ae 	bl	80027c0 <HAL_GPIO_WritePin>
	  delay(100);
 8001664:	2064      	movs	r0, #100	@ 0x64
 8001666:	f000 f895 	bl	8001794 <delay>
	  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800166a:	2201      	movs	r2, #1
 800166c:	2104      	movs	r1, #4
 800166e:	4813      	ldr	r0, [pc, #76]	@ (80016bc <lcd_init+0x68>)
 8001670:	f001 f8a6 	bl	80027c0 <HAL_GPIO_WritePin>
	  delay(100);
 8001674:	2064      	movs	r0, #100	@ 0x64
 8001676:	f000 f88d 	bl	8001794 <delay>
	  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	e009      	b.n	8001694 <lcd_init+0x40>
	    lcd_send(init_table[i]);
 8001680:	4a0f      	ldr	r2, [pc, #60]	@ (80016c0 <lcd_init+0x6c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff53 	bl	8001534 <lcd_send>
	  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3301      	adds	r3, #1
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b4b      	cmp	r3, #75	@ 0x4b
 8001698:	d9f2      	bls.n	8001680 <lcd_init+0x2c>
	  }
	  delay(200);
 800169a:	20c8      	movs	r0, #200	@ 0xc8
 800169c:	f000 f87a 	bl	8001794 <delay>

	  lcd_cmd(ST7735S_SLPOUT);
 80016a0:	2011      	movs	r0, #17
 80016a2:	f7ff fefb 	bl	800149c <lcd_cmd>
	  delay(120);
 80016a6:	2078      	movs	r0, #120	@ 0x78
 80016a8:	f000 f874 	bl	8001794 <delay>
	  lcd_cmd(ST7735S_DISPON);
 80016ac:	2029      	movs	r0, #41	@ 0x29
 80016ae:	f7ff fef5 	bl	800149c <lcd_cmd>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	48000400 	.word	0x48000400
 80016c0:	08011ff0 	.word	0x08011ff0

080016c4 <lcd_put_pixel>:
	lcd_cmd(ST7735S_RAMWR);
	for (int i = 0; i < width * height; i++)
		lcd_data16(color);
}
void lcd_put_pixel(int x, int y, uint16_t color)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	4613      	mov	r3, r2
 80016d0:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	461a      	mov	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	4905      	ldr	r1, [pc, #20]	@ (80016f8 <lcd_put_pixel+0x34>)
 80016e4:	88fa      	ldrh	r2, [r7, #6]
 80016e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000bac 	.word	0x20000bac

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	@ (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	@ (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ffc2 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delayMs){
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <delay+0x2c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs)); //niestety blokuje działanie programu ale na szczęście nie przerwań
 80017a2:	bf00      	nop
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	441a      	add	r2, r3
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <delay+0x2c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d8f8      	bhi.n	80017a4 <delay+0x10>
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	2000abac 	.word	0x2000abac

080017c4 <reset_frame_state>:
void reset_frame_state() {
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
    in_frame = false;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <reset_frame_state+0x20>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <reset_frame_state+0x24>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <reset_frame_state+0x28>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	2000ac38 	.word	0x2000ac38
 80017e8:	2000ac30 	.word	0x2000ac30
 80017ec:	2000ac34 	.word	0x2000ac34

080017f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f4:	f000 fc35 	bl	8002062 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f8:	f000 f8ce 	bl	8001998 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 80017fc:	4858      	ldr	r0, [pc, #352]	@ (8001960 <main+0x170>)
 80017fe:	f7ff ffa7 	bl	8001750 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001802:	f7ff fdff 	bl	8001404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001806:	f000 fb57 	bl	8001eb8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800180a:	f000 f91d 	bl	8001a48 <MX_SPI2_Init>
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
    /* USER CODE END WHILE */
	  if (USART_kbhit()) {                // Sprawdzamy, czy jest dostępny nowy znak
 800180e:	f7fe fec9 	bl	80005a4 <USART_kbhit>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0fa      	beq.n	800180e <main+0x1e>
	  	          received_char = USART_getchar();   // Pobieramy znak z bufora odbiorczego
 8001818:	f7fe fed6 	bl	80005c8 <USART_getchar>
 800181c:	4603      	mov	r3, r0
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b50      	ldr	r3, [pc, #320]	@ (8001964 <main+0x174>)
 8001822:	701a      	strb	r2, [r3, #0]

	  	          if (received_char == '~') {    // Rozpoczęcie nowej ramki
 8001824:	4b4f      	ldr	r3, [pc, #316]	@ (8001964 <main+0x174>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b7e      	cmp	r3, #126	@ 0x7e
 800182a:	d116      	bne.n	800185a <main+0x6a>
	  	              if (!in_frame) {
 800182c:	4b4e      	ldr	r3, [pc, #312]	@ (8001968 <main+0x178>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f083 0301 	eor.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00c      	beq.n	8001854 <main+0x64>
	  	                  USART_fsend("Znaleziono poczatek ramki...\r\n");
 800183a:	484c      	ldr	r0, [pc, #304]	@ (800196c <main+0x17c>)
 800183c:	f7fe feee 	bl	800061c <USART_fsend>
	  	                  in_frame = true;
 8001840:	4b49      	ldr	r3, [pc, #292]	@ (8001968 <main+0x178>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
	  	                  bx_index = 0;           // Resetujemy indeks bufora
 8001846:	4b4a      	ldr	r3, [pc, #296]	@ (8001970 <main+0x180>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
	  	                  escape_detected = false; // Resetujemy flagę escape
 800184c:	4b49      	ldr	r3, [pc, #292]	@ (8001974 <main+0x184>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e7dc      	b.n	800180e <main+0x1e>
	  	              } else {
	  	                  reset_frame_state();
 8001854:	f7ff ffb6 	bl	80017c4 <reset_frame_state>
 8001858:	e7d9      	b.n	800180e <main+0x1e>
	  	              }
	  	          } else if (received_char == '`') {    // Koniec ramki
 800185a:	4b42      	ldr	r3, [pc, #264]	@ (8001964 <main+0x174>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b60      	cmp	r3, #96	@ 0x60
 8001860:	d12a      	bne.n	80018b8 <main+0xc8>
	  	              if (in_frame) {
 8001862:	4b41      	ldr	r3, [pc, #260]	@ (8001968 <main+0x178>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d020      	beq.n	80018ac <main+0xbc>
	  	                  USART_fsend("Koniec odbioru, nastepuje sprawdzanie ramki...\r\n");
 800186a:	4843      	ldr	r0, [pc, #268]	@ (8001978 <main+0x188>)
 800186c:	f7fe fed6 	bl	800061c <USART_fsend>
	  	                  // Przetwarzanie odebranej ramki (np. wywołanie funkcji lub ustawienie flagi)
	  	                  if (decodeFrame(bx,&ramka, bx_index)) {
 8001870:	4b3f      	ldr	r3, [pc, #252]	@ (8001970 <main+0x180>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	4940      	ldr	r1, [pc, #256]	@ (800197c <main+0x18c>)
 800187a:	4841      	ldr	r0, [pc, #260]	@ (8001980 <main+0x190>)
 800187c:	f7ff fce0 	bl	8001240 <decodeFrame>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00c      	beq.n	80018a0 <main+0xb0>
	  	                      USART_fsend("SUKCES!\r\n");
 8001886:	483f      	ldr	r0, [pc, #252]	@ (8001984 <main+0x194>)
 8001888:	f7fe fec8 	bl	800061c <USART_fsend>
	  	                      USART_fsend("%d\r\n", bx_index);
 800188c:	4b38      	ldr	r3, [pc, #224]	@ (8001970 <main+0x180>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	483d      	ldr	r0, [pc, #244]	@ (8001988 <main+0x198>)
 8001894:	f7fe fec2 	bl	800061c <USART_fsend>
	  	                      handleCommand(&ramka);
 8001898:	4838      	ldr	r0, [pc, #224]	@ (800197c <main+0x18c>)
 800189a:	f7ff fd29 	bl	80012f0 <handleCommand>
 800189e:	e002      	b.n	80018a6 <main+0xb6>
	  	                  } else {
	  	                      USART_fsend("BŁĄD: Dekodowanie ramki nie powiodło się\r\n");
 80018a0:	483a      	ldr	r0, [pc, #232]	@ (800198c <main+0x19c>)
 80018a2:	f7fe febb 	bl	800061c <USART_fsend>
	  	                  }

	  	                  // Resetujemy stany po przetworzeniu ramki
	  	                  reset_frame_state();
 80018a6:	f7ff ff8d 	bl	80017c4 <reset_frame_state>
 80018aa:	e7b0      	b.n	800180e <main+0x1e>
	  	              } else {
	  	                  // Jeśli ramka się kończy, ale nie została rozpoczęta
	  	                  USART_fsend("BŁĄD: Zakonczenie ramki bez rozpoczecia\r\n");
 80018ac:	4838      	ldr	r0, [pc, #224]	@ (8001990 <main+0x1a0>)
 80018ae:	f7fe feb5 	bl	800061c <USART_fsend>
	  	                  reset_frame_state();
 80018b2:	f7ff ff87 	bl	80017c4 <reset_frame_state>
 80018b6:	e7aa      	b.n	800180e <main+0x1e>
	  	              }
	  	          } else if (in_frame) {
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <main+0x178>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d04c      	beq.n	800195a <main+0x16a>
	  	              // Jesteśmy w ramce i przetwarzamy znaki
	  	              if (escape_detected) {
 80018c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001974 <main+0x184>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d02f      	beq.n	8001928 <main+0x138>
	  	                  // Jeśli wykryto escape char, sprawdzamy następny znak
	  	                  if (received_char == '^') {
 80018c8:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <main+0x174>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b5e      	cmp	r3, #94	@ 0x5e
 80018ce:	d108      	bne.n	80018e2 <main+0xf2>
	  	                      bx[bx_index++] = '~'; // '~' było zakodowane jako '}^'
 80018d0:	4b27      	ldr	r3, [pc, #156]	@ (8001970 <main+0x180>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	4926      	ldr	r1, [pc, #152]	@ (8001970 <main+0x180>)
 80018d8:	600a      	str	r2, [r1, #0]
 80018da:	4a29      	ldr	r2, [pc, #164]	@ (8001980 <main+0x190>)
 80018dc:	217e      	movs	r1, #126	@ 0x7e
 80018de:	54d1      	strb	r1, [r2, r3]
 80018e0:	e01e      	b.n	8001920 <main+0x130>
	  	                  } else if (received_char == ']') {
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <main+0x174>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b5d      	cmp	r3, #93	@ 0x5d
 80018e8:	d108      	bne.n	80018fc <main+0x10c>
	  	                      bx[bx_index++] = '}'; // '}' było zakodowane jako '}]'
 80018ea:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <main+0x180>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	491f      	ldr	r1, [pc, #124]	@ (8001970 <main+0x180>)
 80018f2:	600a      	str	r2, [r1, #0]
 80018f4:	4a22      	ldr	r2, [pc, #136]	@ (8001980 <main+0x190>)
 80018f6:	217d      	movs	r1, #125	@ 0x7d
 80018f8:	54d1      	strb	r1, [r2, r3]
 80018fa:	e011      	b.n	8001920 <main+0x130>
	  	                  } else if (received_char == '&') {
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <main+0x174>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b26      	cmp	r3, #38	@ 0x26
 8001902:	d108      	bne.n	8001916 <main+0x126>
	  	                      bx[bx_index++] = '`'; // '`' było zakodowane jako '}&'
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <main+0x180>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	4919      	ldr	r1, [pc, #100]	@ (8001970 <main+0x180>)
 800190c:	600a      	str	r2, [r1, #0]
 800190e:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <main+0x190>)
 8001910:	2160      	movs	r1, #96	@ 0x60
 8001912:	54d1      	strb	r1, [r2, r3]
 8001914:	e004      	b.n	8001920 <main+0x130>
	  	                  } else {
	  	                      // Nieprawidłowy znak po '}', resetujemy
	  	                      USART_fsend("BŁĄD: Nieprawidłowy escape sequence\r\n");
 8001916:	481f      	ldr	r0, [pc, #124]	@ (8001994 <main+0x1a4>)
 8001918:	f7fe fe80 	bl	800061c <USART_fsend>
	  	                      reset_frame_state();
 800191c:	f7ff ff52 	bl	80017c4 <reset_frame_state>
	  	                  }
	  	                  escape_detected = false; // Resetujemy flagę escape
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <main+0x184>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e772      	b.n	800180e <main+0x1e>
	  	              } else if (received_char == '}') {
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <main+0x174>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b7d      	cmp	r3, #125	@ 0x7d
 800192e:	d103      	bne.n	8001938 <main+0x148>
	  	                  escape_detected = true; // Wykryto znak escape, czekamy na następny
 8001930:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <main+0x184>)
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	e76a      	b.n	800180e <main+0x1e>
	  	              } else {
	  	                  // Normalny znak w ramce, zapisujemy do bx
	  	                  if (bx_index < sizeof(bx)) {
 8001938:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <main+0x180>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b7f      	cmp	r3, #127	@ 0x7f
 800193e:	d809      	bhi.n	8001954 <main+0x164>
	  	                      bx[bx_index++] = received_char;
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <main+0x180>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	490a      	ldr	r1, [pc, #40]	@ (8001970 <main+0x180>)
 8001948:	600a      	str	r2, [r1, #0]
 800194a:	4a06      	ldr	r2, [pc, #24]	@ (8001964 <main+0x174>)
 800194c:	7811      	ldrb	r1, [r2, #0]
 800194e:	4a0c      	ldr	r2, [pc, #48]	@ (8001980 <main+0x190>)
 8001950:	54d1      	strb	r1, [r2, r3]
 8001952:	e75c      	b.n	800180e <main+0x1e>
	  	                  } else {
	  	                      // kontrola przepełnienia
	  	                      reset_frame_state();
 8001954:	f7ff ff36 	bl	80017c4 <reset_frame_state>
 8001958:	e759      	b.n	800180e <main+0x1e>
	  	                  }
	  	              }
	  	          } else {
	  	              // Ignorujemy znaki poza ramką, ale resetujemy dla bezpieczeństwa
	  	              //nie wiem czy reset co pętle będzie potrzebny
	  	              reset_frame_state();
 800195a:	f7ff ff33 	bl	80017c4 <reset_frame_state>
	  if (USART_kbhit()) {                // Sprawdzamy, czy jest dostępny nowy znak
 800195e:	e756      	b.n	800180e <main+0x1e>
 8001960:	00013880 	.word	0x00013880
 8001964:	2000ac39 	.word	0x2000ac39
 8001968:	2000ac38 	.word	0x2000ac38
 800196c:	08008b5c 	.word	0x08008b5c
 8001970:	2000ac34 	.word	0x2000ac34
 8001974:	2000ac30 	.word	0x2000ac30
 8001978:	08008b7c 	.word	0x08008b7c
 800197c:	2000ac3c 	.word	0x2000ac3c
 8001980:	2000abb0 	.word	0x2000abb0
 8001984:	08008bb0 	.word	0x08008bb0
 8001988:	08008bbc 	.word	0x08008bbc
 800198c:	08008bc4 	.word	0x08008bc4
 8001990:	08008bf4 	.word	0x08008bf4
 8001994:	08008c20 	.word	0x08008c20

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b096      	sub	sp, #88	@ 0x58
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	2244      	movs	r2, #68	@ 0x44
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 ff6e 	bl	8007888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	463b      	mov	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019be:	f000 ff25 	bl	800280c <HAL_PWREx_ControlVoltageScaling>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019c8:	f000 f838 	bl	8001a3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019cc:	2310      	movs	r3, #16
 80019ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019d8:	2360      	movs	r3, #96	@ 0x60
 80019da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	2302      	movs	r3, #2
 80019de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019e0:	2301      	movs	r3, #1
 80019e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019e8:	2328      	movs	r3, #40	@ 0x28
 80019ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019ec:	2307      	movs	r3, #7
 80019ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019f0:	2302      	movs	r3, #2
 80019f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 ff5b 	bl	80028b8 <HAL_RCC_OscConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a08:	f000 f818 	bl	8001a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a10:	2303      	movs	r3, #3
 8001a12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	2104      	movs	r1, #4
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 fb23 	bl	8003070 <HAL_RCC_ClockConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a30:	f000 f804 	bl	8001a3c <Error_Handler>
  }
}
 8001a34:	bf00      	nop
 8001a36:	3758      	adds	r7, #88	@ 0x58
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <Error_Handler+0x8>

08001a48 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <MX_SPI2_Init+0x78>)
 8001a50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a62:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a66:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a7a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a7e:	2210      	movs	r2, #16
 8001a80:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a96:	2207      	movs	r2, #7
 8001a98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_SPI2_Init+0x74>)
 8001aa8:	f002 f9c2 	bl	8003e30 <HAL_SPI_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ab2:	f7ff ffc3 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000acc4 	.word	0x2000acc4
 8001ac0:	40003800 	.word	0x40003800

08001ac4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a25      	ldr	r2, [pc, #148]	@ (8001b78 <HAL_SPI_MspInit+0xb4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d144      	bne.n	8001b70 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ae6:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <HAL_SPI_MspInit+0xb8>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	4a24      	ldr	r2, [pc, #144]	@ (8001b7c <HAL_SPI_MspInit+0xb8>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001af2:	4b22      	ldr	r3, [pc, #136]	@ (8001b7c <HAL_SPI_MspInit+0xb8>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <HAL_SPI_MspInit+0xb8>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	4a1e      	ldr	r2, [pc, #120]	@ (8001b7c <HAL_SPI_MspInit+0xb8>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <HAL_SPI_MspInit+0xb8>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_SPI_MspInit+0xb8>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	4a18      	ldr	r2, [pc, #96]	@ (8001b7c <HAL_SPI_MspInit+0xb8>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b22:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <HAL_SPI_MspInit+0xb8>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001b2e:	2308      	movs	r3, #8
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <HAL_SPI_MspInit+0xbc>)
 8001b4a:	f000 fc8f 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b60:	2305      	movs	r3, #5
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <HAL_SPI_MspInit+0xc0>)
 8001b6c:	f000 fc7e 	bl	800246c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	@ 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40003800 	.word	0x40003800
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000800 	.word	0x48000800
 8001b84:	48000400 	.word	0x48000400

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <HAL_MspInit+0x44>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <HAL_MspInit+0x44>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <HAL_MspInit+0x44>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_MspInit+0x44>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <HAL_MspInit+0x44>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_MspInit+0x44>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <NMI_Handler+0x4>

08001bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <MemManage_Handler+0x4>

08001be8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c28:	f000 fa70 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick++;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <SysTick_Handler+0x18>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	4a02      	ldr	r2, [pc, #8]	@ (8001c3c <SysTick_Handler+0x18>)
 8001c34:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000abac 	.word	0x2000abac

08001c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <USART2_IRQHandler+0x10>)
 8001c46:	f002 fd69 	bl	800471c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000ad2c 	.word	0x2000ad2c

08001c54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return 1;
 8001c58:	2301      	movs	r3, #1
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_kill>:

int _kill(int pid, int sig)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c6e:	f005 fee7 	bl	8007a40 <__errno>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2216      	movs	r2, #22
 8001c76:	601a      	str	r2, [r3, #0]
  return -1;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_exit>:

void _exit (int status)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffe7 	bl	8001c64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c96:	bf00      	nop
 8001c98:	e7fd      	b.n	8001c96 <_exit+0x12>

08001c9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e00a      	b.n	8001cc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cac:	f3af 8000 	nop.w
 8001cb0:	4601      	mov	r1, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	60ba      	str	r2, [r7, #8]
 8001cb8:	b2ca      	uxtb	r2, r1
 8001cba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	dbf0      	blt.n	8001cac <_read+0x12>
  }

  return len;
 8001cca:	687b      	ldr	r3, [r7, #4]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	e009      	b.n	8001cfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	60ba      	str	r2, [r7, #8]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	dbf1      	blt.n	8001ce6 <_write+0x12>
  }
  return len;
 8001d02:	687b      	ldr	r3, [r7, #4]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_close>:

int _close(int file)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d34:	605a      	str	r2, [r3, #4]
  return 0;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_isatty>:

int _isatty(int file)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	@ (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	@ (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f005 fe4c 	bl	8007a40 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20018000 	.word	0x20018000
 8001dd4:	00002000 	.word	0x00002000
 8001dd8:	2000ad28 	.word	0x2000ad28
 8001ddc:	2000af08 	.word	0x2000af08

08001de0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	@ (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <HAL_UART_TxCpltCallback>:
extern volatile int USART_TX_Busy;
extern volatile int USART_RX_Empty;
extern volatile int USART_RX_Busy;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a13      	ldr	r2, [pc, #76]	@ (8001e5c <HAL_UART_TxCpltCallback+0x58>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d11e      	bne.n	8001e52 <HAL_UART_TxCpltCallback+0x4e>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_UART_TxCpltCallback+0x5c>)
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_UART_TxCpltCallback+0x5c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d018      	beq.n	8001e52 <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8001e20:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <HAL_UART_TxCpltCallback+0x5c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a0f      	ldr	r2, [pc, #60]	@ (8001e64 <HAL_UART_TxCpltCallback+0x60>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex++;
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <HAL_UART_TxCpltCallback+0x5c>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	4a0b      	ldr	r2, [pc, #44]	@ (8001e60 <HAL_UART_TxCpltCallback+0x5c>)
 8001e32:	6053      	str	r3, [r2, #4]
		   if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex=0;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_UART_TxCpltCallback+0x5c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e3c:	d302      	bcc.n	8001e44 <HAL_UART_TxCpltCallback+0x40>
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <HAL_UART_TxCpltCallback+0x5c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8001e44:	f107 030f 	add.w	r3, r7, #15
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4803      	ldr	r0, [pc, #12]	@ (8001e5c <HAL_UART_TxCpltCallback+0x58>)
 8001e4e:	f002 fbbb 	bl	80045c8 <HAL_UART_Transmit_IT>
	   }
   }
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000ad2c 	.word	0x2000ad2c
 8001e60:	2000029c 	.word	0x2000029c
 8001e64:	200002ac 	.word	0x200002ac

08001e68 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a0e      	ldr	r2, [pc, #56]	@ (8001eac <HAL_UART_RxCpltCallback+0x44>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d114      	bne.n	8001ea2 <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex++;
 8001e78:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x48>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x48>)
 8001e80:	6093      	str	r3, [r2, #8]
		 if(rxRingBuffer.writeIndex >= RX_BUFFER_SIZE) rxRingBuffer.writeIndex=0;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x48>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2bff      	cmp	r3, #255	@ 0xff
 8001e88:	d902      	bls.n	8001e90 <HAL_UART_RxCpltCallback+0x28>
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x48>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 8001e90:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x48>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a07      	ldr	r2, [pc, #28]	@ (8001eb4 <HAL_UART_RxCpltCallback+0x4c>)
 8001e96:	4413      	add	r3, r2
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <HAL_UART_RxCpltCallback+0x44>)
 8001e9e:	f002 fbf1 	bl	8004684 <HAL_UART_Receive_IT>

	 }
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000ad2c 	.word	0x2000ad2c
 8001eb0:	2000028c 	.word	0x2000028c
 8001eb4:	20000aac 	.word	0x20000aac

08001eb8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <MX_USART2_UART_Init+0x7c>)
 8001ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001ec4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed0:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ed6:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001ede:	220c      	movs	r2, #12
 8001ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001efa:	480d      	ldr	r0, [pc, #52]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001efc:	f002 fb16 	bl	800452c <HAL_UART_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f06:	f7ff fd99 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ring_buffer_setup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE);
 8001f0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f0e:	490a      	ldr	r1, [pc, #40]	@ (8001f38 <MX_USART2_UART_Init+0x80>)
 8001f10:	480a      	ldr	r0, [pc, #40]	@ (8001f3c <MX_USART2_UART_Init+0x84>)
 8001f12:	f7fe fb2d 	bl	8000570 <ring_buffer_setup>
  ring_buffer_setup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE);
 8001f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f1a:	4909      	ldr	r1, [pc, #36]	@ (8001f40 <MX_USART2_UART_Init+0x88>)
 8001f1c:	4809      	ldr	r0, [pc, #36]	@ (8001f44 <MX_USART2_UART_Init+0x8c>)
 8001f1e:	f7fe fb27 	bl	8000570 <ring_buffer_setup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 8001f22:	2201      	movs	r2, #1
 8001f24:	4904      	ldr	r1, [pc, #16]	@ (8001f38 <MX_USART2_UART_Init+0x80>)
 8001f26:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <MX_USART2_UART_Init+0x78>)
 8001f28:	f002 fbac 	bl	8004684 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	2000ad2c 	.word	0x2000ad2c
 8001f34:	40004400 	.word	0x40004400
 8001f38:	20000aac 	.word	0x20000aac
 8001f3c:	2000028c 	.word	0x2000028c
 8001f40:	200002ac 	.word	0x200002ac
 8001f44:	2000029c 	.word	0x2000029c

08001f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0ac      	sub	sp, #176	@ 0xb0
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2288      	movs	r2, #136	@ 0x88
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f005 fc8d 	bl	8007888 <memset>
  if(uartHandle->Instance==USART2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a25      	ldr	r2, [pc, #148]	@ (8002008 <HAL_UART_MspInit+0xc0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d143      	bne.n	8002000 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fa97 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f90:	f7ff fd54 	bl	8001a3c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f94:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <HAL_UART_MspInit+0xc4>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <HAL_UART_MspInit+0xc4>)
 8001f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <HAL_UART_MspInit+0xc4>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4b17      	ldr	r3, [pc, #92]	@ (800200c <HAL_UART_MspInit+0xc4>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb0:	4a16      	ldr	r2, [pc, #88]	@ (800200c <HAL_UART_MspInit+0xc4>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb8:	4b14      	ldr	r3, [pc, #80]	@ (800200c <HAL_UART_MspInit+0xc4>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fc4:	230c      	movs	r3, #12
 8001fc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fdc:	2307      	movs	r3, #7
 8001fde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fec:	f000 fa3e 	bl	800246c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	2026      	movs	r0, #38	@ 0x26
 8001ff6:	f000 f984 	bl	8002302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ffa:	2026      	movs	r0, #38	@ 0x26
 8001ffc:	f000 f99d 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002000:	bf00      	nop
 8002002:	37b0      	adds	r7, #176	@ 0xb0
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40004400 	.word	0x40004400
 800200c:	40021000 	.word	0x40021000

08002010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002048 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002014:	f7ff fee4 	bl	8001de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002018:	480c      	ldr	r0, [pc, #48]	@ (800204c <LoopForever+0x6>)
  ldr r1, =_edata
 800201a:	490d      	ldr	r1, [pc, #52]	@ (8002050 <LoopForever+0xa>)
  ldr r2, =_sidata
 800201c:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <LoopForever+0xe>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002030:	4c0a      	ldr	r4, [pc, #40]	@ (800205c <LoopForever+0x16>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203e:	f005 fd05 	bl	8007a4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002042:	f7ff fbd5 	bl	80017f0 <main>

08002046 <LoopForever>:

LoopForever:
    b LoopForever
 8002046:	e7fe      	b.n	8002046 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002048:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002054:	080122c4 	.word	0x080122c4
  ldr r2, =_sbss
 8002058:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 800205c:	2000af04 	.word	0x2000af04

08002060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC1_2_IRQHandler>

08002062 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f000 f93d 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002072:	200f      	movs	r0, #15
 8002074:	f000 f80e 	bl	8002094 <HAL_InitTick>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	e001      	b.n	8002088 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002084:	f7ff fd80 	bl	8001b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002088:	79fb      	ldrb	r3, [r7, #7]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020a0:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <HAL_InitTick+0x6c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d023      	beq.n	80020f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020a8:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <HAL_InitTick+0x70>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <HAL_InitTick+0x6c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f949 	bl	8002356 <HAL_SYSTICK_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d809      	bhi.n	80020e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f000 f913 	bl	8002302 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <HAL_InitTick+0x74>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e007      	b.n	80020f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e004      	b.n	80020f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	e001      	b.n	80020f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000208 	.word	0x20000208
 8002104:	20000200 	.word	0x20000200
 8002108:	20000204 	.word	0x20000204

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000208 	.word	0x20000208
 8002130:	2000adb4 	.word	0x2000adb4

08002134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b03      	ldr	r3, [pc, #12]	@ (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	2000adb4 	.word	0x2000adb4

0800214c <__NVIC_SetPriorityGrouping>:
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	@ (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	@ (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	@ (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	@ 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	@ 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <SysTick_Config>:
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f7ff ff8e 	bl	80021ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff29 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff3e 	bl	8002194 <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff8e 	bl	8002240 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5d 	bl	80021ec <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff31 	bl	80021b0 <__NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffa2 	bl	80022a8 <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d008      	beq.n	8002398 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2204      	movs	r2, #4
 800238a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e022      	b.n	80023de <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 020e 	bic.w	r2, r2, #14
 80023a6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023bc:	f003 021c 	and.w	r2, r3, #28
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d005      	beq.n	800240e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2204      	movs	r2, #4
 8002406:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e029      	b.n	8002462 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 020e 	bic.w	r2, r2, #14
 800241c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0201 	bic.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f003 021c 	and.w	r2, r3, #28
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
    }
  }
  return status;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247a:	e17f      	b.n	800277c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2101      	movs	r1, #1
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8171 	beq.w	8002776 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d005      	beq.n	80024ac <HAL_GPIO_Init+0x40>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d130      	bne.n	800250e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024e2:	2201      	movs	r2, #1
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 0201 	and.w	r2, r3, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b03      	cmp	r3, #3
 8002518:	d118      	bne.n	800254c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002520:	2201      	movs	r2, #1
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	f003 0201 	and.w	r2, r3, #1
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b03      	cmp	r3, #3
 8002556:	d017      	beq.n	8002588 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d123      	bne.n	80025dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	220f      	movs	r2, #15
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	6939      	ldr	r1, [r7, #16]
 80025d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0203 	and.w	r2, r3, #3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80ac 	beq.w	8002776 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261e:	4b5f      	ldr	r3, [pc, #380]	@ (800279c <HAL_GPIO_Init+0x330>)
 8002620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002622:	4a5e      	ldr	r2, [pc, #376]	@ (800279c <HAL_GPIO_Init+0x330>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6613      	str	r3, [r2, #96]	@ 0x60
 800262a:	4b5c      	ldr	r3, [pc, #368]	@ (800279c <HAL_GPIO_Init+0x330>)
 800262c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002636:	4a5a      	ldr	r2, [pc, #360]	@ (80027a0 <HAL_GPIO_Init+0x334>)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	3302      	adds	r3, #2
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002660:	d025      	beq.n	80026ae <HAL_GPIO_Init+0x242>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4f      	ldr	r2, [pc, #316]	@ (80027a4 <HAL_GPIO_Init+0x338>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01f      	beq.n	80026aa <HAL_GPIO_Init+0x23e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4e      	ldr	r2, [pc, #312]	@ (80027a8 <HAL_GPIO_Init+0x33c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d019      	beq.n	80026a6 <HAL_GPIO_Init+0x23a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4d      	ldr	r2, [pc, #308]	@ (80027ac <HAL_GPIO_Init+0x340>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x236>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4c      	ldr	r2, [pc, #304]	@ (80027b0 <HAL_GPIO_Init+0x344>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00d      	beq.n	800269e <HAL_GPIO_Init+0x232>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4b      	ldr	r2, [pc, #300]	@ (80027b4 <HAL_GPIO_Init+0x348>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x22e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4a      	ldr	r2, [pc, #296]	@ (80027b8 <HAL_GPIO_Init+0x34c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_GPIO_Init+0x22a>
 8002692:	2306      	movs	r3, #6
 8002694:	e00c      	b.n	80026b0 <HAL_GPIO_Init+0x244>
 8002696:	2307      	movs	r3, #7
 8002698:	e00a      	b.n	80026b0 <HAL_GPIO_Init+0x244>
 800269a:	2305      	movs	r3, #5
 800269c:	e008      	b.n	80026b0 <HAL_GPIO_Init+0x244>
 800269e:	2304      	movs	r3, #4
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x244>
 80026a2:	2303      	movs	r3, #3
 80026a4:	e004      	b.n	80026b0 <HAL_GPIO_Init+0x244>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e002      	b.n	80026b0 <HAL_GPIO_Init+0x244>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x244>
 80026ae:	2300      	movs	r3, #0
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	f002 0203 	and.w	r2, r2, #3
 80026b6:	0092      	lsls	r2, r2, #2
 80026b8:	4093      	lsls	r3, r2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026c0:	4937      	ldr	r1, [pc, #220]	@ (80027a0 <HAL_GPIO_Init+0x334>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ce:	4b3b      	ldr	r3, [pc, #236]	@ (80027bc <HAL_GPIO_Init+0x350>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026f2:	4a32      	ldr	r2, [pc, #200]	@ (80027bc <HAL_GPIO_Init+0x350>)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026f8:	4b30      	ldr	r3, [pc, #192]	@ (80027bc <HAL_GPIO_Init+0x350>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800271c:	4a27      	ldr	r2, [pc, #156]	@ (80027bc <HAL_GPIO_Init+0x350>)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002722:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <HAL_GPIO_Init+0x350>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002746:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <HAL_GPIO_Init+0x350>)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <HAL_GPIO_Init+0x350>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002770:	4a12      	ldr	r2, [pc, #72]	@ (80027bc <HAL_GPIO_Init+0x350>)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	f47f ae78 	bne.w	800247c <HAL_GPIO_Init+0x10>
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40010000 	.word	0x40010000
 80027a4:	48000400 	.word	0x48000400
 80027a8:	48000800 	.word	0x48000800
 80027ac:	48000c00 	.word	0x48000c00
 80027b0:	48001000 	.word	0x48001000
 80027b4:	48001400 	.word	0x48001400
 80027b8:	48001800 	.word	0x48001800
 80027bc:	40010400 	.word	0x40010400

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027de:	887a      	ldrh	r2, [r7, #2]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027f4:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <HAL_PWREx_GetVoltageRange+0x18>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40007000 	.word	0x40007000

0800280c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800281a:	d130      	bne.n	800287e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800281c:	4b23      	ldr	r3, [pc, #140]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002828:	d038      	beq.n	800289c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800282a:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002832:	4a1e      	ldr	r2, [pc, #120]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002834:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002838:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800283a:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2232      	movs	r2, #50	@ 0x32
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	4a1b      	ldr	r2, [pc, #108]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9b      	lsrs	r3, r3, #18
 800284c:	3301      	adds	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002850:	e002      	b.n	8002858 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3b01      	subs	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002858:	4b14      	ldr	r3, [pc, #80]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002864:	d102      	bne.n	800286c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f2      	bne.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800286c:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002878:	d110      	bne.n	800289c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e00f      	b.n	800289e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800288a:	d007      	beq.n	800289c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800288c:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002894:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002896:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800289a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40007000 	.word	0x40007000
 80028b0:	20000200 	.word	0x20000200
 80028b4:	431bde83 	.word	0x431bde83

080028b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e3ca      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ca:	4b97      	ldr	r3, [pc, #604]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d4:	4b94      	ldr	r3, [pc, #592]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80e4 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <HAL_RCC_OscConfig+0x4a>
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	f040 808b 	bne.w	8002a10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f040 8087 	bne.w	8002a10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002902:	4b89      	ldr	r3, [pc, #548]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_RCC_OscConfig+0x62>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e3a2      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	4b82      	ldr	r3, [pc, #520]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <HAL_RCC_OscConfig+0x7c>
 800292a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002932:	e005      	b.n	8002940 <HAL_RCC_OscConfig+0x88>
 8002934:	4b7c      	ldr	r3, [pc, #496]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002940:	4293      	cmp	r3, r2
 8002942:	d223      	bcs.n	800298c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fd55 	bl	80033f8 <RCC_SetFlashLatencyFromMSIRange>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e383      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002958:	4b73      	ldr	r3, [pc, #460]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a72      	ldr	r2, [pc, #456]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 800295e:	f043 0308 	orr.w	r3, r3, #8
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b70      	ldr	r3, [pc, #448]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	496d      	ldr	r1, [pc, #436]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002976:	4b6c      	ldr	r3, [pc, #432]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	4968      	ldr	r1, [pc, #416]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
 800298a:	e025      	b.n	80029d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800298c:	4b66      	ldr	r3, [pc, #408]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a65      	ldr	r2, [pc, #404]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002992:	f043 0308 	orr.w	r3, r3, #8
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4b63      	ldr	r3, [pc, #396]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4960      	ldr	r1, [pc, #384]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	495b      	ldr	r1, [pc, #364]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fd15 	bl	80033f8 <RCC_SetFlashLatencyFromMSIRange>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e343      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029d8:	f000 fc4a 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b52      	ldr	r3, [pc, #328]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	4950      	ldr	r1, [pc, #320]	@ (8002b2c <HAL_RCC_OscConfig+0x274>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
 80029f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002b30 <HAL_RCC_OscConfig+0x278>)
 80029f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fb49 	bl	8002094 <HAL_InitTick>
 8002a02:	4603      	mov	r3, r0
 8002a04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d052      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	e327      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d032      	beq.n	8002a7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a18:	4b43      	ldr	r3, [pc, #268]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a42      	ldr	r2, [pc, #264]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a24:	f7ff fb86 	bl	8002134 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a2c:	f7ff fb82 	bl	8002134 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e310      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a4a:	4b37      	ldr	r3, [pc, #220]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a36      	ldr	r2, [pc, #216]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a50:	f043 0308 	orr.w	r3, r3, #8
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4931      	ldr	r1, [pc, #196]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a68:	4b2f      	ldr	r3, [pc, #188]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	492c      	ldr	r1, [pc, #176]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
 8002a7c:	e01a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a29      	ldr	r2, [pc, #164]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a8a:	f7ff fb53 	bl	8002134 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a92:	f7ff fb4f 	bl	8002134 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e2dd      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa4:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1da>
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ab2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d074      	beq.n	8002baa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x21a>
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	d10e      	bne.n	8002aea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d10b      	bne.n	8002aea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d064      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x2f0>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d160      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e2ba      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x24a>
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e026      	b.n	8002b50 <HAL_RCC_OscConfig+0x298>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b0a:	d115      	bne.n	8002b38 <HAL_RCC_OscConfig+0x280>
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002b12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b03      	ldr	r3, [pc, #12]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a02      	ldr	r2, [pc, #8]	@ (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x298>
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	08012088 	.word	0x08012088
 8002b30:	20000200 	.word	0x20000200
 8002b34:	20000204 	.word	0x20000204
 8002b38:	4ba0      	ldr	r3, [pc, #640]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a9f      	ldr	r2, [pc, #636]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b9d      	ldr	r3, [pc, #628]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a9c      	ldr	r2, [pc, #624]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7ff faec 	bl	8002134 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7ff fae8 	bl	8002134 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	@ 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e276      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b72:	4b92      	ldr	r3, [pc, #584]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x2a8>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7ff fad8 	bl	8002134 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7ff fad4 	bl	8002134 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	@ 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e262      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9a:	4b88      	ldr	r3, [pc, #544]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x2d0>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d060      	beq.n	8002c78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x310>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d119      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d116      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc8:	4b7c      	ldr	r3, [pc, #496]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_OscConfig+0x328>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e23f      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b76      	ldr	r3, [pc, #472]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	4973      	ldr	r1, [pc, #460]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf4:	e040      	b.n	8002c78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d023      	beq.n	8002c46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6e      	ldr	r2, [pc, #440]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7ff fa93 	bl	8002134 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7ff fa8f 	bl	8002134 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e21d      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	4b65      	ldr	r3, [pc, #404]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b62      	ldr	r3, [pc, #392]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	495f      	ldr	r1, [pc, #380]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
 8002c44:	e018      	b.n	8002c78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b5d      	ldr	r3, [pc, #372]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a5c      	ldr	r2, [pc, #368]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7ff fa6f 	bl	8002134 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7ff fa6b 	bl	8002134 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e1f9      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c6c:	4b53      	ldr	r3, [pc, #332]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f0      	bne.n	8002c5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d03c      	beq.n	8002cfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01c      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c92:	4a4a      	ldr	r2, [pc, #296]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7ff fa4a 	bl	8002134 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca4:	f7ff fa46 	bl	8002134 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1d4      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb6:	4b41      	ldr	r3, [pc, #260]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ef      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x3ec>
 8002cc4:	e01b      	b.n	8002cfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ccc:	4a3b      	ldr	r2, [pc, #236]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7ff fa2d 	bl	8002134 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cde:	f7ff fa29 	bl	8002134 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1b7      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf0:	4b32      	ldr	r3, [pc, #200]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ef      	bne.n	8002cde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80a6 	beq.w	8002e58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d10:	4b2a      	ldr	r3, [pc, #168]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	4b27      	ldr	r3, [pc, #156]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	4a26      	ldr	r2, [pc, #152]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d28:	4b24      	ldr	r3, [pc, #144]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d34:	2301      	movs	r3, #1
 8002d36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d38:	4b21      	ldr	r3, [pc, #132]	@ (8002dc0 <HAL_RCC_OscConfig+0x508>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d118      	bne.n	8002d76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d44:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc0 <HAL_RCC_OscConfig+0x508>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc0 <HAL_RCC_OscConfig+0x508>)
 8002d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d50:	f7ff f9f0 	bl	8002134 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7ff f9ec 	bl	8002134 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e17a      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	4b15      	ldr	r3, [pc, #84]	@ (8002dc0 <HAL_RCC_OscConfig+0x508>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d108      	bne.n	8002d90 <HAL_RCC_OscConfig+0x4d8>
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d84:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d8e:	e029      	b.n	8002de4 <HAL_RCC_OscConfig+0x52c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d115      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x50c>
 8002d98:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9e:	4a07      	ldr	r2, [pc, #28]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da8:	4b04      	ldr	r3, [pc, #16]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dae:	4a03      	ldr	r2, [pc, #12]	@ (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db8:	e014      	b.n	8002de4 <HAL_RCC_OscConfig+0x52c>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	4b9c      	ldr	r3, [pc, #624]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dca:	4a9b      	ldr	r2, [pc, #620]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dd4:	4b98      	ldr	r3, [pc, #608]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dda:	4a97      	ldr	r2, [pc, #604]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d016      	beq.n	8002e1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7ff f9a2 	bl	8002134 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7ff f99e 	bl	8002134 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e12a      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0a:	4b8b      	ldr	r3, [pc, #556]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ed      	beq.n	8002df4 <HAL_RCC_OscConfig+0x53c>
 8002e18:	e015      	b.n	8002e46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7ff f98b 	bl	8002134 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7ff f987 	bl	8002134 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e113      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e38:	4b7f      	ldr	r3, [pc, #508]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1ed      	bne.n	8002e22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e46:	7ffb      	ldrb	r3, [r7, #31]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4c:	4b7a      	ldr	r3, [pc, #488]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e50:	4a79      	ldr	r2, [pc, #484]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80fe 	beq.w	800305e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	f040 80d0 	bne.w	800300c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e6c:	4b72      	ldr	r3, [pc, #456]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f003 0203 	and.w	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d130      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d127      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d11f      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002eac:	2a07      	cmp	r2, #7
 8002eae:	bf14      	ite	ne
 8002eb0:	2201      	movne	r2, #1
 8002eb2:	2200      	moveq	r2, #0
 8002eb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d113      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d06e      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b0c      	cmp	r3, #12
 8002ee6:	d069      	beq.n	8002fbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ee8:	4b53      	ldr	r3, [pc, #332]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ef4:	4b50      	ldr	r3, [pc, #320]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0ad      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f04:	4b4c      	ldr	r3, [pc, #304]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a4b      	ldr	r2, [pc, #300]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f10:	f7ff f910 	bl	8002134 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7ff f90c 	bl	8002134 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e09a      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2a:	4b43      	ldr	r3, [pc, #268]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f36:	4b40      	ldr	r3, [pc, #256]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	4b40      	ldr	r3, [pc, #256]	@ (800303c <HAL_RCC_OscConfig+0x784>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f46:	3a01      	subs	r2, #1
 8002f48:	0112      	lsls	r2, r2, #4
 8002f4a:	4311      	orrs	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f50:	0212      	lsls	r2, r2, #8
 8002f52:	4311      	orrs	r1, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f58:	0852      	lsrs	r2, r2, #1
 8002f5a:	3a01      	subs	r2, #1
 8002f5c:	0552      	lsls	r2, r2, #21
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f64:	0852      	lsrs	r2, r2, #1
 8002f66:	3a01      	subs	r2, #1
 8002f68:	0652      	lsls	r2, r2, #25
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f70:	0912      	lsrs	r2, r2, #4
 8002f72:	0452      	lsls	r2, r2, #17
 8002f74:	430a      	orrs	r2, r1
 8002f76:	4930      	ldr	r1, [pc, #192]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2d      	ldr	r2, [pc, #180]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f88:	4b2b      	ldr	r3, [pc, #172]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f94:	f7ff f8ce 	bl	8002134 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7ff f8ca 	bl	8002134 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e058      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fae:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fba:	e050      	b.n	800305e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e04f      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d148      	bne.n	800305e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd8:	4b17      	ldr	r3, [pc, #92]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a16      	ldr	r2, [pc, #88]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8002fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fe4:	f7ff f8a6 	bl	8002134 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fec:	f7ff f8a2 	bl	8002134 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e030      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x734>
 800300a:	e028      	b.n	800305e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d023      	beq.n	800305a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a08      	ldr	r2, [pc, #32]	@ (8003038 <HAL_RCC_OscConfig+0x780>)
 8003018:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7ff f889 	bl	8002134 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003024:	e00c      	b.n	8003040 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7ff f885 	bl	8002134 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d905      	bls.n	8003040 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e013      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
 8003038:	40021000 	.word	0x40021000
 800303c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_RCC_OscConfig+0x7b0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ec      	bne.n	8003026 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800304c:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_RCC_OscConfig+0x7b0>)
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	4905      	ldr	r1, [pc, #20]	@ (8003068 <HAL_RCC_OscConfig+0x7b0>)
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_RCC_OscConfig+0x7b4>)
 8003054:	4013      	ands	r3, r2
 8003056:	60cb      	str	r3, [r1, #12]
 8003058:	e001      	b.n	800305e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3720      	adds	r7, #32
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	feeefffc 	.word	0xfeeefffc

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0e7      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b75      	ldr	r3, [pc, #468]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d910      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b72      	ldr	r3, [pc, #456]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 0207 	bic.w	r2, r3, #7
 800309a:	4970      	ldr	r1, [pc, #448]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b6e      	ldr	r3, [pc, #440]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0cf      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d010      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	4b66      	ldr	r3, [pc, #408]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d908      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b63      	ldr	r3, [pc, #396]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4960      	ldr	r1, [pc, #384]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d04c      	beq.n	8003188 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d121      	bne.n	8003146 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0a6      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310e:	4b54      	ldr	r3, [pc, #336]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d115      	bne.n	8003146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e09a      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003126:	4b4e      	ldr	r3, [pc, #312]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e08e      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003136:	4b4a      	ldr	r3, [pc, #296]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e086      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003146:	4b46      	ldr	r3, [pc, #280]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f023 0203 	bic.w	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4943      	ldr	r1, [pc, #268]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003154:	4313      	orrs	r3, r2
 8003156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003158:	f7fe ffec 	bl	8002134 <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315e:	e00a      	b.n	8003176 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003160:	f7fe ffe8 	bl	8002134 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e06e      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	4b3a      	ldr	r3, [pc, #232]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 020c 	and.w	r2, r3, #12
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	429a      	cmp	r2, r3
 8003186:	d1eb      	bne.n	8003160 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	4b31      	ldr	r3, [pc, #196]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d208      	bcs.n	80031b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	492b      	ldr	r1, [pc, #172]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b6:	4b29      	ldr	r3, [pc, #164]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d210      	bcs.n	80031e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c4:	4b25      	ldr	r3, [pc, #148]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 0207 	bic.w	r2, r3, #7
 80031cc:	4923      	ldr	r1, [pc, #140]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d4:	4b21      	ldr	r3, [pc, #132]	@ (800325c <HAL_RCC_ClockConfig+0x1ec>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e036      	b.n	8003254 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d008      	beq.n	8003204 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4918      	ldr	r1, [pc, #96]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003210:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4910      	ldr	r1, [pc, #64]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003224:	f000 f824 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	490b      	ldr	r1, [pc, #44]	@ (8003264 <HAL_RCC_ClockConfig+0x1f4>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
 8003240:	4a09      	ldr	r2, [pc, #36]	@ (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003242:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003244:	4b09      	ldr	r3, [pc, #36]	@ (800326c <HAL_RCC_ClockConfig+0x1fc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe ff23 	bl	8002094 <HAL_InitTick>
 800324e:	4603      	mov	r3, r0
 8003250:	72fb      	strb	r3, [r7, #11]

  return status;
 8003252:	7afb      	ldrb	r3, [r7, #11]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40022000 	.word	0x40022000
 8003260:	40021000 	.word	0x40021000
 8003264:	08012088 	.word	0x08012088
 8003268:	20000200 	.word	0x20000200
 800326c:	20000204 	.word	0x20000204

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	@ 0x24
 8003274:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327e:	4b3e      	ldr	r3, [pc, #248]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003288:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b0c      	cmp	r3, #12
 800329c:	d121      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d11e      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032a4:	4b34      	ldr	r3, [pc, #208]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032b0:	4b31      	ldr	r3, [pc, #196]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e005      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032cc:	4a2b      	ldr	r2, [pc, #172]	@ (800337c <HAL_RCC_GetSysClockFreq+0x10c>)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10d      	bne.n	80032f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d102      	bne.n	80032ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032e8:	4b25      	ldr	r3, [pc, #148]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e004      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032f4:	4b23      	ldr	r3, [pc, #140]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x114>)
 80032f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d134      	bne.n	8003368 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0xa6>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d003      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0xac>
 8003314:	e005      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003316:	4b1a      	ldr	r3, [pc, #104]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x110>)
 8003318:	617b      	str	r3, [r7, #20]
      break;
 800331a:	e005      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800331c:	4b19      	ldr	r3, [pc, #100]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x114>)
 800331e:	617b      	str	r3, [r7, #20]
      break;
 8003320:	e002      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	617b      	str	r3, [r7, #20]
      break;
 8003326:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003328:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	3301      	adds	r3, #1
 8003334:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	fb03 f202 	mul.w	r2, r3, r2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x108>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	0e5b      	lsrs	r3, r3, #25
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	3301      	adds	r3, #1
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003368:	69bb      	ldr	r3, [r7, #24]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	@ 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	080120a0 	.word	0x080120a0
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <HAL_RCC_GetHCLKFreq+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000200 	.word	0x20000200

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033a4:	f7ff fff0 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	08012098 	.word	0x08012098

080033cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033d0:	f7ff ffda 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	0adb      	lsrs	r3, r3, #11
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4904      	ldr	r1, [pc, #16]	@ (80033f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08012098 	.word	0x08012098

080033f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003404:	4b2a      	ldr	r3, [pc, #168]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003410:	f7ff f9ee 	bl	80027f0 <HAL_PWREx_GetVoltageRange>
 8003414:	6178      	str	r0, [r7, #20]
 8003416:	e014      	b.n	8003442 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	4b25      	ldr	r3, [pc, #148]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003422:	6593      	str	r3, [r2, #88]	@ 0x58
 8003424:	4b22      	ldr	r3, [pc, #136]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003430:	f7ff f9de 	bl	80027f0 <HAL_PWREx_GetVoltageRange>
 8003434:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b1e      	ldr	r3, [pc, #120]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343a:	4a1d      	ldr	r2, [pc, #116]	@ (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003440:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003448:	d10b      	bne.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b80      	cmp	r3, #128	@ 0x80
 800344e:	d919      	bls.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2ba0      	cmp	r3, #160	@ 0xa0
 8003454:	d902      	bls.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003456:	2302      	movs	r3, #2
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e013      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800345c:	2301      	movs	r3, #1
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e010      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b80      	cmp	r3, #128	@ 0x80
 8003466:	d902      	bls.n	800346e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003468:	2303      	movs	r3, #3
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e00a      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b80      	cmp	r3, #128	@ 0x80
 8003472:	d102      	bne.n	800347a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003474:	2302      	movs	r3, #2
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e004      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b70      	cmp	r3, #112	@ 0x70
 800347e:	d101      	bne.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003480:	2301      	movs	r3, #1
 8003482:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003484:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 0207 	bic.w	r2, r3, #7
 800348c:	4909      	ldr	r1, [pc, #36]	@ (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003494:	4b07      	ldr	r3, [pc, #28]	@ (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d001      	beq.n	80034a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40022000 	.word	0x40022000

080034b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c0:	2300      	movs	r3, #0
 80034c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034c4:	2300      	movs	r3, #0
 80034c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d041      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034dc:	d02a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034e2:	d824      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034e8:	d008      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034ee:	d81e      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034f8:	d010      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034fa:	e018      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034fc:	4b86      	ldr	r3, [pc, #536]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a85      	ldr	r2, [pc, #532]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003506:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003508:	e015      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fabb 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800351a:	e00c      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3320      	adds	r3, #32
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fba6 	bl	8003c74 <RCCEx_PLLSAI2_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	74fb      	strb	r3, [r7, #19]
      break;
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800353c:	4b76      	ldr	r3, [pc, #472]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003542:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800354a:	4973      	ldr	r1, [pc, #460]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003552:	e001      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d041      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003568:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800356c:	d02a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800356e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003572:	d824      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003574:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003578:	d008      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800357a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800357e:	d81e      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003588:	d010      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800358a:	e018      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800358c:	4b62      	ldr	r3, [pc, #392]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a61      	ldr	r2, [pc, #388]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003596:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003598:	e015      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fa73 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035aa:	e00c      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3320      	adds	r3, #32
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fb5e 	bl	8003c74 <RCCEx_PLLSAI2_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035bc:	e003      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	74fb      	strb	r3, [r7, #19]
      break;
 80035c2:	e000      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035cc:	4b52      	ldr	r3, [pc, #328]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035da:	494f      	ldr	r1, [pc, #316]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035e2:	e001      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a0 	beq.w	8003736 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035fa:	4b47      	ldr	r3, [pc, #284]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	4b41      	ldr	r3, [pc, #260]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003614:	4a40      	ldr	r2, [pc, #256]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800361a:	6593      	str	r3, [r2, #88]	@ 0x58
 800361c:	4b3e      	ldr	r3, [pc, #248]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003628:	2301      	movs	r3, #1
 800362a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362c:	4b3b      	ldr	r3, [pc, #236]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3a      	ldr	r2, [pc, #232]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003638:	f7fe fd7c 	bl	8002134 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800363e:	e009      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003640:	f7fe fd78 	bl	8002134 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	74fb      	strb	r3, [r7, #19]
        break;
 8003652:	e005      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003654:	4b31      	ldr	r3, [pc, #196]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ef      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d15c      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003666:	4b2c      	ldr	r3, [pc, #176]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003670:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01f      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	429a      	cmp	r2, r3
 8003682:	d019      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003684:	4b24      	ldr	r3, [pc, #144]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800368e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003690:	4b21      	ldr	r3, [pc, #132]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003696:	4a20      	ldr	r2, [pc, #128]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036b0:	4a19      	ldr	r2, [pc, #100]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fe fd37 	bl	8002134 <HAL_GetTick>
 80036c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c8:	e00b      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe fd33 	bl	8002134 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d902      	bls.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	74fb      	strb	r3, [r7, #19]
            break;
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ec      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f6:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003706:	4904      	ldr	r1, [pc, #16]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800370e:	e009      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
 8003714:	e006      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003724:	7c7b      	ldrb	r3, [r7, #17]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372a:	4b9e      	ldr	r3, [pc, #632]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372e:	4a9d      	ldr	r2, [pc, #628]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003734:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003742:	4b98      	ldr	r3, [pc, #608]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003748:	f023 0203 	bic.w	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003750:	4994      	ldr	r1, [pc, #592]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003764:	4b8f      	ldr	r3, [pc, #572]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376a:	f023 020c 	bic.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003772:	498c      	ldr	r1, [pc, #560]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003786:	4b87      	ldr	r3, [pc, #540]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	4983      	ldr	r1, [pc, #524]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037a8:	4b7e      	ldr	r3, [pc, #504]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	497b      	ldr	r1, [pc, #492]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ca:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d8:	4972      	ldr	r1, [pc, #456]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ec:	4b6d      	ldr	r3, [pc, #436]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fa:	496a      	ldr	r1, [pc, #424]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800380e:	4b65      	ldr	r3, [pc, #404]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003814:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381c:	4961      	ldr	r1, [pc, #388]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003830:	4b5c      	ldr	r3, [pc, #368]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	4959      	ldr	r1, [pc, #356]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003852:	4b54      	ldr	r3, [pc, #336]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003858:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003860:	4950      	ldr	r1, [pc, #320]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003874:	4b4b      	ldr	r3, [pc, #300]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	4948      	ldr	r1, [pc, #288]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003896:	4b43      	ldr	r3, [pc, #268]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a4:	493f      	ldr	r1, [pc, #252]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d028      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b8:	4b3a      	ldr	r3, [pc, #232]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c6:	4937      	ldr	r1, [pc, #220]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038d6:	d106      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d8:	4b32      	ldr	r3, [pc, #200]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a31      	ldr	r2, [pc, #196]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038e2:	60d3      	str	r3, [r2, #12]
 80038e4:	e011      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038ee:	d10c      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f8c8 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003906:	7cfb      	ldrb	r3, [r7, #19]
 8003908:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d028      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003916:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	491f      	ldr	r1, [pc, #124]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003934:	d106      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003936:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4a1a      	ldr	r2, [pc, #104]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003940:	60d3      	str	r3, [r2, #12]
 8003942:	e011      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003948:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800394c:	d10c      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f899 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d02b      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003982:	4908      	ldr	r1, [pc, #32]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003992:	d109      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003994:	4b03      	ldr	r3, [pc, #12]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a02      	ldr	r2, [pc, #8]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800399e:	60d3      	str	r3, [r2, #12]
 80039a0:	e014      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039b0:	d10c      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2101      	movs	r1, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f867 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d02f      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039e6:	4928      	ldr	r1, [pc, #160]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039f6:	d10d      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	2102      	movs	r1, #2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f844 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d014      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	74bb      	strb	r3, [r7, #18]
 8003a12:	e011      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3320      	adds	r3, #32
 8003a22:	2102      	movs	r1, #2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f925 	bl	8003c74 <RCCEx_PLLSAI2_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a2e:	7cfb      	ldrb	r3, [r7, #19]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a34:	7cfb      	ldrb	r3, [r7, #19]
 8003a36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a44:	4b10      	ldr	r3, [pc, #64]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a52:	490d      	ldr	r1, [pc, #52]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a66:	4b08      	ldr	r3, [pc, #32]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a76:	4904      	ldr	r1, [pc, #16]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000

08003a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a9a:	4b75      	ldr	r3, [pc, #468]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d018      	beq.n	8003ad8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003aa6:	4b72      	ldr	r3, [pc, #456]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0203 	and.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d10d      	bne.n	8003ad2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003abe:	4b6c      	ldr	r3, [pc, #432]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
       ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d047      	beq.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	e044      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d018      	beq.n	8003b12 <RCCEx_PLLSAI1_Config+0x86>
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d825      	bhi.n	8003b30 <RCCEx_PLLSAI1_Config+0xa4>
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d002      	beq.n	8003aee <RCCEx_PLLSAI1_Config+0x62>
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d009      	beq.n	8003b00 <RCCEx_PLLSAI1_Config+0x74>
 8003aec:	e020      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aee:	4b60      	ldr	r3, [pc, #384]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11d      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afe:	e01a      	b.n	8003b36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b00:	4b5b      	ldr	r3, [pc, #364]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d116      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b10:	e013      	b.n	8003b3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b12:	4b57      	ldr	r3, [pc, #348]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b1e:	4b54      	ldr	r3, [pc, #336]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b2e:	e006      	b.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e004      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b36:	bf00      	nop
 8003b38:	e002      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10d      	bne.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b46:	4b4a      	ldr	r3, [pc, #296]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	4944      	ldr	r1, [pc, #272]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d17d      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b68:	4b41      	ldr	r3, [pc, #260]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a40      	ldr	r2, [pc, #256]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b74:	f7fe fade 	bl	8002134 <HAL_GetTick>
 8003b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b7a:	e009      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b7c:	f7fe fada 	bl	8002134 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b8e:	e005      	b.n	8003b9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b90:	4b37      	ldr	r3, [pc, #220]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ef      	bne.n	8003b7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d160      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d111      	bne.n	8003bcc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba8:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
 8003bb8:	0211      	lsls	r1, r2, #8
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68d2      	ldr	r2, [r2, #12]
 8003bbe:	0912      	lsrs	r2, r2, #4
 8003bc0:	0452      	lsls	r2, r2, #17
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	492a      	ldr	r1, [pc, #168]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	610b      	str	r3, [r1, #16]
 8003bca:	e027      	b.n	8003c1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d112      	bne.n	8003bf8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd2:	4b27      	ldr	r3, [pc, #156]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003bda:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6892      	ldr	r2, [r2, #8]
 8003be2:	0211      	lsls	r1, r2, #8
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6912      	ldr	r2, [r2, #16]
 8003be8:	0852      	lsrs	r2, r2, #1
 8003bea:	3a01      	subs	r2, #1
 8003bec:	0552      	lsls	r2, r2, #21
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	491f      	ldr	r1, [pc, #124]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	610b      	str	r3, [r1, #16]
 8003bf6:	e011      	b.n	8003c1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6892      	ldr	r2, [r2, #8]
 8003c08:	0211      	lsls	r1, r2, #8
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6952      	ldr	r2, [r2, #20]
 8003c0e:	0852      	lsrs	r2, r2, #1
 8003c10:	3a01      	subs	r2, #1
 8003c12:	0652      	lsls	r2, r2, #25
 8003c14:	430a      	orrs	r2, r1
 8003c16:	4916      	ldr	r1, [pc, #88]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c1c:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7fe fa84 	bl	8002134 <HAL_GetTick>
 8003c2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c2e:	e009      	b.n	8003c44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c30:	f7fe fa80 	bl	8002134 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d902      	bls.n	8003c44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	73fb      	strb	r3, [r7, #15]
          break;
 8003c42:	e005      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c44:	4b0a      	ldr	r3, [pc, #40]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ef      	beq.n	8003c30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c56:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	4904      	ldr	r1, [pc, #16]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000

08003c74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c82:	4b6a      	ldr	r3, [pc, #424]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d018      	beq.n	8003cc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c8e:	4b67      	ldr	r3, [pc, #412]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0203 	and.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d10d      	bne.n	8003cba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ca6:	4b61      	ldr	r3, [pc, #388]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d047      	beq.n	8003d4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
 8003cbe:	e044      	b.n	8003d4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d018      	beq.n	8003cfa <RCCEx_PLLSAI2_Config+0x86>
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d825      	bhi.n	8003d18 <RCCEx_PLLSAI2_Config+0xa4>
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d002      	beq.n	8003cd6 <RCCEx_PLLSAI2_Config+0x62>
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d009      	beq.n	8003ce8 <RCCEx_PLLSAI2_Config+0x74>
 8003cd4:	e020      	b.n	8003d18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cd6:	4b55      	ldr	r3, [pc, #340]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d11d      	bne.n	8003d1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce6:	e01a      	b.n	8003d1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce8:	4b50      	ldr	r3, [pc, #320]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d116      	bne.n	8003d22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf8:	e013      	b.n	8003d22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d06:	4b49      	ldr	r3, [pc, #292]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d16:	e006      	b.n	8003d26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1c:	e004      	b.n	8003d28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e002      	b.n	8003d28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10d      	bne.n	8003d4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	430b      	orrs	r3, r1
 8003d44:	4939      	ldr	r1, [pc, #228]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d167      	bne.n	8003e20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d50:	4b36      	ldr	r3, [pc, #216]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a35      	ldr	r2, [pc, #212]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fe f9ea 	bl	8002134 <HAL_GetTick>
 8003d60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d62:	e009      	b.n	8003d78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d64:	f7fe f9e6 	bl	8002134 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d902      	bls.n	8003d78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	73fb      	strb	r3, [r7, #15]
        break;
 8003d76:	e005      	b.n	8003d84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d78:	4b2c      	ldr	r3, [pc, #176]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ef      	bne.n	8003d64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d14a      	bne.n	8003e20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d111      	bne.n	8003db4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d90:	4b26      	ldr	r3, [pc, #152]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6892      	ldr	r2, [r2, #8]
 8003da0:	0211      	lsls	r1, r2, #8
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68d2      	ldr	r2, [r2, #12]
 8003da6:	0912      	lsrs	r2, r2, #4
 8003da8:	0452      	lsls	r2, r2, #17
 8003daa:	430a      	orrs	r2, r1
 8003dac:	491f      	ldr	r1, [pc, #124]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	614b      	str	r3, [r1, #20]
 8003db2:	e011      	b.n	8003dd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003db4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003dbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6892      	ldr	r2, [r2, #8]
 8003dc4:	0211      	lsls	r1, r2, #8
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6912      	ldr	r2, [r2, #16]
 8003dca:	0852      	lsrs	r2, r2, #1
 8003dcc:	3a01      	subs	r2, #1
 8003dce:	0652      	lsls	r2, r2, #25
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	4916      	ldr	r1, [pc, #88]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dd8:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fe f9a6 	bl	8002134 <HAL_GetTick>
 8003de8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dea:	e009      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dec:	f7fe f9a2 	bl	8002134 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d902      	bls.n	8003e00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	73fb      	strb	r3, [r7, #15]
          break;
 8003dfe:	e005      	b.n	8003e0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e00:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ef      	beq.n	8003dec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e12:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4904      	ldr	r1, [pc, #16]	@ (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000

08003e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e095      	b.n	8003f6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d108      	bne.n	8003e5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e52:	d009      	beq.n	8003e68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	61da      	str	r2, [r3, #28]
 8003e5a:	e005      	b.n	8003e68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd fe1e 	bl	8001ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ea8:	d902      	bls.n	8003eb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	e002      	b.n	8003eb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003ebe:	d007      	beq.n	8003ed0 <HAL_SPI_Init+0xa0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ec8:	d002      	beq.n	8003ed0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f12:	ea42 0103 	orr.w	r1, r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	f003 0204 	and.w	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f4c:	ea42 0103 	orr.w	r1, r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b088      	sub	sp, #32
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f86:	f7fe f8d5 	bl	8002134 <HAL_GetTick>
 8003f8a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d001      	beq.n	8003fa0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e15c      	b.n	800425a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Transmit+0x36>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e154      	b.n	800425a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_SPI_Transmit+0x48>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e14d      	b.n	800425a <HAL_SPI_Transmit+0x2e4>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2203      	movs	r2, #3
 8003fca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	88fa      	ldrh	r2, [r7, #6]
 8003fde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004010:	d10f      	bne.n	8004032 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004020:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004030:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403c:	2b40      	cmp	r3, #64	@ 0x40
 800403e:	d007      	beq.n	8004050 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800404e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004058:	d952      	bls.n	8004100 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_SPI_Transmit+0xf2>
 8004062:	8b7b      	ldrh	r3, [r7, #26]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d145      	bne.n	80040f4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800408c:	e032      	b.n	80040f4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d112      	bne.n	80040c2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040c0:	e018      	b.n	80040f4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c2:	f7fe f837 	bl	8002134 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d803      	bhi.n	80040da <HAL_SPI_Transmit+0x164>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d102      	bne.n	80040e0 <HAL_SPI_Transmit+0x16a>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0b2      	b.n	800425a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1c7      	bne.n	800408e <HAL_SPI_Transmit+0x118>
 80040fe:	e083      	b.n	8004208 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_SPI_Transmit+0x198>
 8004108:	8b7b      	ldrh	r3, [r7, #26]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d177      	bne.n	80041fe <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d912      	bls.n	800413e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004128:	1c9a      	adds	r2, r3, #2
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b02      	subs	r3, #2
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800413c:	e05f      	b.n	80041fe <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	7812      	ldrb	r2, [r2, #0]
 800414a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004164:	e04b      	b.n	80041fe <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d12b      	bne.n	80041cc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d912      	bls.n	80041a4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004182:	881a      	ldrh	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	1c9a      	adds	r2, r3, #2
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b02      	subs	r3, #2
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041a2:	e02c      	b.n	80041fe <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041ca:	e018      	b.n	80041fe <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041cc:	f7fd ffb2 	bl	8002134 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d803      	bhi.n	80041e4 <HAL_SPI_Transmit+0x26e>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d102      	bne.n	80041ea <HAL_SPI_Transmit+0x274>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e02d      	b.n	800425a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ae      	bne.n	8004166 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	6839      	ldr	r1, [r7, #0]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f947 	bl	80044a0 <SPI_EndRxTxTransaction>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004258:	2300      	movs	r3, #0
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004274:	f7fd ff5e 	bl	8002134 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	4413      	add	r3, r2
 8004282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004284:	f7fd ff56 	bl	8002134 <HAL_GetTick>
 8004288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800428a:	4b39      	ldr	r3, [pc, #228]	@ (8004370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	015b      	lsls	r3, r3, #5
 8004290:	0d1b      	lsrs	r3, r3, #20
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	fb02 f303 	mul.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800429a:	e054      	b.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d050      	beq.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042a4:	f7fd ff46 	bl	8002134 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d902      	bls.n	80042ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d13d      	bne.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042d2:	d111      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042dc:	d004      	beq.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042e6:	d107      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004300:	d10f      	bne.n	8004322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e017      	b.n	8004366 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3b01      	subs	r3, #1
 8004344:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4013      	ands	r3, r2
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	429a      	cmp	r2, r3
 8004362:	d19b      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000200 	.word	0x20000200

08004374 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	@ 0x28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004386:	f7fd fed5 	bl	8002134 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	4413      	add	r3, r2
 8004394:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004396:	f7fd fecd 	bl	8002134 <HAL_GetTick>
 800439a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043a4:	4b3d      	ldr	r3, [pc, #244]	@ (800449c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	00da      	lsls	r2, r3, #3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	0d1b      	lsrs	r3, r3, #20
 80043b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043bc:	e060      	b.n	8004480 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80043c4:	d107      	bne.n	80043d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d050      	beq.n	8004480 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043de:	f7fd fea9 	bl	8002134 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d902      	bls.n	80043f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d13d      	bne.n	8004470 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004402:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800440c:	d111      	bne.n	8004432 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004416:	d004      	beq.n	8004422 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004420:	d107      	bne.n	8004432 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004430:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800443a:	d10f      	bne.n	800445c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800445a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e010      	b.n	8004492 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	3b01      	subs	r3, #1
 800447e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	429a      	cmp	r2, r3
 800448e:	d196      	bne.n	80043be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3728      	adds	r7, #40	@ 0x28
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000200 	.word	0x20000200

080044a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff ff5b 	bl	8004374 <SPI_WaitFifoStateUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e027      	b.n	8004524 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	2180      	movs	r1, #128	@ 0x80
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff fec0 	bl	8004264 <SPI_WaitFlagStateUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e014      	b.n	8004524 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2200      	movs	r2, #0
 8004502:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff ff34 	bl	8004374 <SPI_WaitFifoStateUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004516:	f043 0220 	orr.w	r2, r3, #32
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e000      	b.n	8004524 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e040      	b.n	80045c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd fcfa 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	@ 0x24
 8004558:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fea6 	bl	80052c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fbeb 	bl	8004d54 <UART_SetConfig>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e01b      	b.n	80045c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 ff25 	bl	8005408 <UART_CheckIdleState>
 80045be:	4603      	mov	r3, r0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b08b      	sub	sp, #44	@ 0x2c
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d147      	bne.n	800466e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_UART_Transmit_IT+0x22>
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e040      	b.n	8004670 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	88fa      	ldrh	r2, [r7, #6]
 8004600:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2221      	movs	r2, #33	@ 0x21
 8004616:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004620:	d107      	bne.n	8004632 <HAL_UART_Transmit_IT+0x6a>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d103      	bne.n	8004632 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a13      	ldr	r2, [pc, #76]	@ (800467c <HAL_UART_Transmit_IT+0xb4>)
 800462e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004630:	e002      	b.n	8004638 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <HAL_UART_Transmit_IT+0xb8>)
 8004636:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	613b      	str	r3, [r7, #16]
   return(result);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	69f9      	ldr	r1, [r7, #28]
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	61bb      	str	r3, [r7, #24]
   return(result);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e6      	bne.n	8004638 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	372c      	adds	r7, #44	@ 0x2c
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	0800596b 	.word	0x0800596b
 8004680:	080058b5 	.word	0x080058b5

08004684 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	@ 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004698:	2b20      	cmp	r3, #32
 800469a:	d137      	bne.n	800470c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_UART_Receive_IT+0x24>
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e030      	b.n	800470e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a18      	ldr	r2, [pc, #96]	@ (8004718 <HAL_UART_Receive_IT+0x94>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d01f      	beq.n	80046fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d018      	beq.n	80046fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	613b      	str	r3, [r7, #16]
   return(result);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	69f9      	ldr	r1, [r7, #28]
 80046ee:	6a3a      	ldr	r2, [r7, #32]
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e6      	bne.n	80046ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	461a      	mov	r2, r3
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 ff96 	bl	8005634 <UART_Start_Receive_IT>
 8004708:	4603      	mov	r3, r0
 800470a:	e000      	b.n	800470e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	3728      	adds	r7, #40	@ 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40008000 	.word	0x40008000

0800471c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b0ba      	sub	sp, #232	@ 0xe8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004742:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004746:	f640 030f 	movw	r3, #2063	@ 0x80f
 800474a:	4013      	ands	r3, r2
 800474c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d115      	bne.n	8004784 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00f      	beq.n	8004784 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d009      	beq.n	8004784 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 82ca 	beq.w	8004d0e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
      }
      return;
 8004782:	e2c4      	b.n	8004d0e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8117 	beq.w	80049bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800478e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800479a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800479e:	4b85      	ldr	r3, [pc, #532]	@ (80049b4 <HAL_UART_IRQHandler+0x298>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 810a 	beq.w	80049bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d011      	beq.n	80047d8 <HAL_UART_IRQHandler+0xbc>
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00b      	beq.n	80047d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ce:	f043 0201 	orr.w	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d011      	beq.n	8004808 <HAL_UART_IRQHandler+0xec>
 80047e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2202      	movs	r2, #2
 80047f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047fe:	f043 0204 	orr.w	r2, r3, #4
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d011      	beq.n	8004838 <HAL_UART_IRQHandler+0x11c>
 8004814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00b      	beq.n	8004838 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2204      	movs	r2, #4
 8004826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800482e:	f043 0202 	orr.w	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d017      	beq.n	8004874 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004854:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2208      	movs	r2, #8
 8004862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800486a:	f043 0208 	orr.w	r2, r3, #8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487c:	2b00      	cmp	r3, #0
 800487e:	d012      	beq.n	80048a6 <HAL_UART_IRQHandler+0x18a>
 8004880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004884:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00c      	beq.n	80048a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800489c:	f043 0220 	orr.w	r2, r3, #32
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8230 	beq.w	8004d12 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d005      	beq.n	80048fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d04f      	beq.n	800499e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 ff5e 	bl	80057c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490e:	2b40      	cmp	r3, #64	@ 0x40
 8004910:	d141      	bne.n	8004996 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004928:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800492c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800493e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800494a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1d9      	bne.n	8004912 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004962:	2b00      	cmp	r3, #0
 8004964:	d013      	beq.n	800498e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496a:	4a13      	ldr	r2, [pc, #76]	@ (80049b8 <HAL_UART_IRQHandler+0x29c>)
 800496c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004972:	4618      	mov	r0, r3
 8004974:	f7fd fd39 	bl	80023ea <HAL_DMA_Abort_IT>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d017      	beq.n	80049ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004988:	4610      	mov	r0, r2
 800498a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	e00f      	b.n	80049ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9ca 	bl	8004d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004994:	e00b      	b.n	80049ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9c6 	bl	8004d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499c:	e007      	b.n	80049ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9c2 	bl	8004d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80049ac:	e1b1      	b.n	8004d12 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ae:	bf00      	nop
    return;
 80049b0:	e1af      	b.n	8004d12 <HAL_UART_IRQHandler+0x5f6>
 80049b2:	bf00      	nop
 80049b4:	04000120 	.word	0x04000120
 80049b8:	08005889 	.word	0x08005889

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	f040 816a 	bne.w	8004c9a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8163 	beq.w	8004c9a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 815c 	beq.w	8004c9a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2210      	movs	r2, #16
 80049e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	f040 80d4 	bne.w	8004ba2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80ad 	beq.w	8004b6a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	f080 80a5 	bcs.w	8004b6a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 8086 	bne.w	8004b48 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004a66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1da      	bne.n	8004a3c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004aaa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004aae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ab2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004abc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e1      	bne.n	8004a86 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ad2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ae6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004aec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004af4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e3      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b18:	f023 0310 	bic.w	r3, r3, #16
 8004b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e4      	bne.n	8004b08 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd fc13 	bl	800236e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8ea 	bl	8004d3c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004b68:	e0d5      	b.n	8004d16 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b74:	429a      	cmp	r2, r3
 8004b76:	f040 80ce 	bne.w	8004d16 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	f040 80c5 	bne.w	8004d16 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f8ce 	bl	8004d3c <HAL_UARTEx_RxEventCallback>
      return;
 8004ba0:	e0b9      	b.n	8004d16 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80ab 	beq.w	8004d1a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80a6 	beq.w	8004d1a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bf2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e4      	bne.n	8004bce <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	623b      	str	r3, [r7, #32]
   return(result);
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c28:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e3      	bne.n	8004c04 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	69b9      	ldr	r1, [r7, #24]
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e4      	bne.n	8004c50 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f852 	bl	8004d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c98:	e03f      	b.n	8004d1a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x5a8>
 8004ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d008      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004cba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f001 f89b 	bl	8005df8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cc2:	e02d      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00e      	beq.n	8004cee <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01c      	beq.n	8004d1e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
    }
    return;
 8004cec:	e017      	b.n	8004d1e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d012      	beq.n	8004d20 <HAL_UART_IRQHandler+0x604>
 8004cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fe8f 	bl	8005a2a <UART_EndTransmit_IT>
    return;
 8004d0c:	e008      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
      return;
 8004d0e:	bf00      	nop
 8004d10:	e006      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
    return;
 8004d12:	bf00      	nop
 8004d14:	e004      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
      return;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
      return;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <HAL_UART_IRQHandler+0x604>
    return;
 8004d1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d20:	37e8      	adds	r7, #232	@ 0xe8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop

08004d28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d58:	b08a      	sub	sp, #40	@ 0x28
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4ba4      	ldr	r3, [pc, #656]	@ (8005014 <UART_SetConfig+0x2c0>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a99      	ldr	r2, [pc, #612]	@ (8005018 <UART_SetConfig+0x2c4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a90      	ldr	r2, [pc, #576]	@ (800501c <UART_SetConfig+0x2c8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d126      	bne.n	8004e2c <UART_SetConfig+0xd8>
 8004dde:	4b90      	ldr	r3, [pc, #576]	@ (8005020 <UART_SetConfig+0x2cc>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d81b      	bhi.n	8004e24 <UART_SetConfig+0xd0>
 8004dec:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <UART_SetConfig+0xa0>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	08004e15 	.word	0x08004e15
 8004dfc:	08004e0d 	.word	0x08004e0d
 8004e00:	08004e1d 	.word	0x08004e1d
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0a:	e116      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e12:	e112      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1a:	e10e      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e22:	e10a      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2a:	e106      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a7c      	ldr	r2, [pc, #496]	@ (8005024 <UART_SetConfig+0x2d0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d138      	bne.n	8004ea8 <UART_SetConfig+0x154>
 8004e36:	4b7a      	ldr	r3, [pc, #488]	@ (8005020 <UART_SetConfig+0x2cc>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d82d      	bhi.n	8004ea0 <UART_SetConfig+0x14c>
 8004e44:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <UART_SetConfig+0xf8>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e81 	.word	0x08004e81
 8004e50:	08004ea1 	.word	0x08004ea1
 8004e54:	08004ea1 	.word	0x08004ea1
 8004e58:	08004ea1 	.word	0x08004ea1
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004ea1 	.word	0x08004ea1
 8004e64:	08004ea1 	.word	0x08004ea1
 8004e68:	08004ea1 	.word	0x08004ea1
 8004e6c:	08004e89 	.word	0x08004e89
 8004e70:	08004ea1 	.word	0x08004ea1
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	08004ea1 	.word	0x08004ea1
 8004e7c:	08004e99 	.word	0x08004e99
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e86:	e0d8      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8e:	e0d4      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e90:	2304      	movs	r3, #4
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e96:	e0d0      	b.n	800503a <UART_SetConfig+0x2e6>
 8004e98:	2308      	movs	r3, #8
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9e:	e0cc      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea6:	e0c8      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a5e      	ldr	r2, [pc, #376]	@ (8005028 <UART_SetConfig+0x2d4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d125      	bne.n	8004efe <UART_SetConfig+0x1aa>
 8004eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8005020 <UART_SetConfig+0x2cc>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ebc:	2b30      	cmp	r3, #48	@ 0x30
 8004ebe:	d016      	beq.n	8004eee <UART_SetConfig+0x19a>
 8004ec0:	2b30      	cmp	r3, #48	@ 0x30
 8004ec2:	d818      	bhi.n	8004ef6 <UART_SetConfig+0x1a2>
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d00a      	beq.n	8004ede <UART_SetConfig+0x18a>
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d814      	bhi.n	8004ef6 <UART_SetConfig+0x1a2>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <UART_SetConfig+0x182>
 8004ed0:	2b10      	cmp	r3, #16
 8004ed2:	d008      	beq.n	8004ee6 <UART_SetConfig+0x192>
 8004ed4:	e00f      	b.n	8004ef6 <UART_SetConfig+0x1a2>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004edc:	e0ad      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee4:	e0a9      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eec:	e0a5      	b.n	800503a <UART_SetConfig+0x2e6>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef4:	e0a1      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ef6:	2310      	movs	r3, #16
 8004ef8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efc:	e09d      	b.n	800503a <UART_SetConfig+0x2e6>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a4a      	ldr	r2, [pc, #296]	@ (800502c <UART_SetConfig+0x2d8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d125      	bne.n	8004f54 <UART_SetConfig+0x200>
 8004f08:	4b45      	ldr	r3, [pc, #276]	@ (8005020 <UART_SetConfig+0x2cc>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f12:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f14:	d016      	beq.n	8004f44 <UART_SetConfig+0x1f0>
 8004f16:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f18:	d818      	bhi.n	8004f4c <UART_SetConfig+0x1f8>
 8004f1a:	2b80      	cmp	r3, #128	@ 0x80
 8004f1c:	d00a      	beq.n	8004f34 <UART_SetConfig+0x1e0>
 8004f1e:	2b80      	cmp	r3, #128	@ 0x80
 8004f20:	d814      	bhi.n	8004f4c <UART_SetConfig+0x1f8>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <UART_SetConfig+0x1d8>
 8004f26:	2b40      	cmp	r3, #64	@ 0x40
 8004f28:	d008      	beq.n	8004f3c <UART_SetConfig+0x1e8>
 8004f2a:	e00f      	b.n	8004f4c <UART_SetConfig+0x1f8>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f32:	e082      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f34:	2302      	movs	r3, #2
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3a:	e07e      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e07a      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f44:	2308      	movs	r3, #8
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e076      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e072      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a35      	ldr	r2, [pc, #212]	@ (8005030 <UART_SetConfig+0x2dc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d12a      	bne.n	8004fb4 <UART_SetConfig+0x260>
 8004f5e:	4b30      	ldr	r3, [pc, #192]	@ (8005020 <UART_SetConfig+0x2cc>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f6c:	d01a      	beq.n	8004fa4 <UART_SetConfig+0x250>
 8004f6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f72:	d81b      	bhi.n	8004fac <UART_SetConfig+0x258>
 8004f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f78:	d00c      	beq.n	8004f94 <UART_SetConfig+0x240>
 8004f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f7e:	d815      	bhi.n	8004fac <UART_SetConfig+0x258>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <UART_SetConfig+0x238>
 8004f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f88:	d008      	beq.n	8004f9c <UART_SetConfig+0x248>
 8004f8a:	e00f      	b.n	8004fac <UART_SetConfig+0x258>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f92:	e052      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f94:	2302      	movs	r3, #2
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9a:	e04e      	b.n	800503a <UART_SetConfig+0x2e6>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa2:	e04a      	b.n	800503a <UART_SetConfig+0x2e6>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004faa:	e046      	b.n	800503a <UART_SetConfig+0x2e6>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb2:	e042      	b.n	800503a <UART_SetConfig+0x2e6>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a17      	ldr	r2, [pc, #92]	@ (8005018 <UART_SetConfig+0x2c4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d13a      	bne.n	8005034 <UART_SetConfig+0x2e0>
 8004fbe:	4b18      	ldr	r3, [pc, #96]	@ (8005020 <UART_SetConfig+0x2cc>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fcc:	d01a      	beq.n	8005004 <UART_SetConfig+0x2b0>
 8004fce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fd2:	d81b      	bhi.n	800500c <UART_SetConfig+0x2b8>
 8004fd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fd8:	d00c      	beq.n	8004ff4 <UART_SetConfig+0x2a0>
 8004fda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fde:	d815      	bhi.n	800500c <UART_SetConfig+0x2b8>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <UART_SetConfig+0x298>
 8004fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe8:	d008      	beq.n	8004ffc <UART_SetConfig+0x2a8>
 8004fea:	e00f      	b.n	800500c <UART_SetConfig+0x2b8>
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff2:	e022      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffa:	e01e      	b.n	800503a <UART_SetConfig+0x2e6>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005002:	e01a      	b.n	800503a <UART_SetConfig+0x2e6>
 8005004:	2308      	movs	r3, #8
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500a:	e016      	b.n	800503a <UART_SetConfig+0x2e6>
 800500c:	2310      	movs	r3, #16
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005012:	e012      	b.n	800503a <UART_SetConfig+0x2e6>
 8005014:	efff69f3 	.word	0xefff69f3
 8005018:	40008000 	.word	0x40008000
 800501c:	40013800 	.word	0x40013800
 8005020:	40021000 	.word	0x40021000
 8005024:	40004400 	.word	0x40004400
 8005028:	40004800 	.word	0x40004800
 800502c:	40004c00 	.word	0x40004c00
 8005030:	40005000 	.word	0x40005000
 8005034:	2310      	movs	r3, #16
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a9f      	ldr	r2, [pc, #636]	@ (80052bc <UART_SetConfig+0x568>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d17a      	bne.n	800513a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005044:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005048:	2b08      	cmp	r3, #8
 800504a:	d824      	bhi.n	8005096 <UART_SetConfig+0x342>
 800504c:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <UART_SetConfig+0x300>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005079 	.word	0x08005079
 8005058:	08005097 	.word	0x08005097
 800505c:	08005081 	.word	0x08005081
 8005060:	08005097 	.word	0x08005097
 8005064:	08005087 	.word	0x08005087
 8005068:	08005097 	.word	0x08005097
 800506c:	08005097 	.word	0x08005097
 8005070:	08005097 	.word	0x08005097
 8005074:	0800508f 	.word	0x0800508f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fe f992 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 800507c:	61f8      	str	r0, [r7, #28]
        break;
 800507e:	e010      	b.n	80050a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005080:	4b8f      	ldr	r3, [pc, #572]	@ (80052c0 <UART_SetConfig+0x56c>)
 8005082:	61fb      	str	r3, [r7, #28]
        break;
 8005084:	e00d      	b.n	80050a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005086:	f7fe f8f3 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800508a:	61f8      	str	r0, [r7, #28]
        break;
 800508c:	e009      	b.n	80050a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005092:	61fb      	str	r3, [r7, #28]
        break;
 8005094:	e005      	b.n	80050a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80fb 	beq.w	80052a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4413      	add	r3, r2
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d305      	bcc.n	80050c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d903      	bls.n	80050ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050cc:	e0e8      	b.n	80052a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	2200      	movs	r2, #0
 80050d2:	461c      	mov	r4, r3
 80050d4:	4615      	mov	r5, r2
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	022b      	lsls	r3, r5, #8
 80050e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050e4:	0222      	lsls	r2, r4, #8
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	6849      	ldr	r1, [r1, #4]
 80050ea:	0849      	lsrs	r1, r1, #1
 80050ec:	2000      	movs	r0, #0
 80050ee:	4688      	mov	r8, r1
 80050f0:	4681      	mov	r9, r0
 80050f2:	eb12 0a08 	adds.w	sl, r2, r8
 80050f6:	eb43 0b09 	adc.w	fp, r3, r9
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005108:	4650      	mov	r0, sl
 800510a:	4659      	mov	r1, fp
 800510c:	f7fb f8b8 	bl	8000280 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4613      	mov	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800511e:	d308      	bcc.n	8005132 <UART_SetConfig+0x3de>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005126:	d204      	bcs.n	8005132 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	60da      	str	r2, [r3, #12]
 8005130:	e0b6      	b.n	80052a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005138:	e0b2      	b.n	80052a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005142:	d15e      	bne.n	8005202 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005144:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005148:	2b08      	cmp	r3, #8
 800514a:	d828      	bhi.n	800519e <UART_SetConfig+0x44a>
 800514c:	a201      	add	r2, pc, #4	@ (adr r2, 8005154 <UART_SetConfig+0x400>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005179 	.word	0x08005179
 8005158:	08005181 	.word	0x08005181
 800515c:	08005189 	.word	0x08005189
 8005160:	0800519f 	.word	0x0800519f
 8005164:	0800518f 	.word	0x0800518f
 8005168:	0800519f 	.word	0x0800519f
 800516c:	0800519f 	.word	0x0800519f
 8005170:	0800519f 	.word	0x0800519f
 8005174:	08005197 	.word	0x08005197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005178:	f7fe f912 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 800517c:	61f8      	str	r0, [r7, #28]
        break;
 800517e:	e014      	b.n	80051aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005180:	f7fe f924 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 8005184:	61f8      	str	r0, [r7, #28]
        break;
 8005186:	e010      	b.n	80051aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005188:	4b4d      	ldr	r3, [pc, #308]	@ (80052c0 <UART_SetConfig+0x56c>)
 800518a:	61fb      	str	r3, [r7, #28]
        break;
 800518c:	e00d      	b.n	80051aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800518e:	f7fe f86f 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8005192:	61f8      	str	r0, [r7, #28]
        break;
 8005194:	e009      	b.n	80051aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519a:	61fb      	str	r3, [r7, #28]
        break;
 800519c:	e005      	b.n	80051aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d077      	beq.n	80052a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	005a      	lsls	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	441a      	add	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b0f      	cmp	r3, #15
 80051ca:	d916      	bls.n	80051fa <UART_SetConfig+0x4a6>
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d2:	d212      	bcs.n	80051fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f023 030f 	bic.w	r3, r3, #15
 80051dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	085b      	lsrs	r3, r3, #1
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	8afb      	ldrh	r3, [r7, #22]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	8afa      	ldrh	r2, [r7, #22]
 80051f6:	60da      	str	r2, [r3, #12]
 80051f8:	e052      	b.n	80052a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005200:	e04e      	b.n	80052a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005202:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005206:	2b08      	cmp	r3, #8
 8005208:	d827      	bhi.n	800525a <UART_SetConfig+0x506>
 800520a:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <UART_SetConfig+0x4bc>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005235 	.word	0x08005235
 8005214:	0800523d 	.word	0x0800523d
 8005218:	08005245 	.word	0x08005245
 800521c:	0800525b 	.word	0x0800525b
 8005220:	0800524b 	.word	0x0800524b
 8005224:	0800525b 	.word	0x0800525b
 8005228:	0800525b 	.word	0x0800525b
 800522c:	0800525b 	.word	0x0800525b
 8005230:	08005253 	.word	0x08005253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005234:	f7fe f8b4 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8005238:	61f8      	str	r0, [r7, #28]
        break;
 800523a:	e014      	b.n	8005266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800523c:	f7fe f8c6 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 8005240:	61f8      	str	r0, [r7, #28]
        break;
 8005242:	e010      	b.n	8005266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005244:	4b1e      	ldr	r3, [pc, #120]	@ (80052c0 <UART_SetConfig+0x56c>)
 8005246:	61fb      	str	r3, [r7, #28]
        break;
 8005248:	e00d      	b.n	8005266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524a:	f7fe f811 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800524e:	61f8      	str	r0, [r7, #28]
        break;
 8005250:	e009      	b.n	8005266 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005256:	61fb      	str	r3, [r7, #28]
        break;
 8005258:	e005      	b.n	8005266 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005264:	bf00      	nop
    }

    if (pclk != 0U)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d019      	beq.n	80052a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	085a      	lsrs	r2, r3, #1
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	441a      	add	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b0f      	cmp	r3, #15
 8005284:	d909      	bls.n	800529a <UART_SetConfig+0x546>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528c:	d205      	bcs.n	800529a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60da      	str	r2, [r3, #12]
 8005298:	e002      	b.n	80052a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80052ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3728      	adds	r7, #40	@ 0x28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ba:	bf00      	nop
 80052bc:	40008000 	.word	0x40008000
 80052c0:	00f42400 	.word	0x00f42400

080052c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01a      	beq.n	80053da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053c2:	d10a      	bne.n	80053da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b098      	sub	sp, #96	@ 0x60
 800540c:	af02      	add	r7, sp, #8
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005418:	f7fc fe8c 	bl	8002134 <HAL_GetTick>
 800541c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b08      	cmp	r3, #8
 800542a:	d12e      	bne.n	800548a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800542c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005434:	2200      	movs	r2, #0
 8005436:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f88c 	bl	8005558 <UART_WaitOnFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d021      	beq.n	800548a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800545a:	653b      	str	r3, [r7, #80]	@ 0x50
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005464:	647b      	str	r3, [r7, #68]	@ 0x44
 8005466:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800546a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e6      	bne.n	8005446 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e062      	b.n	8005550 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b04      	cmp	r3, #4
 8005496:	d149      	bne.n	800552c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005498:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a0:	2200      	movs	r2, #0
 80054a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f856 	bl	8005558 <UART_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03c      	beq.n	800552c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	623b      	str	r3, [r7, #32]
   return(result);
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e6      	bne.n	80054b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005504:	61fa      	str	r2, [r7, #28]
 8005506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	69b9      	ldr	r1, [r7, #24]
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	617b      	str	r3, [r7, #20]
   return(result);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e5      	bne.n	80054e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e011      	b.n	8005550 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3758      	adds	r7, #88	@ 0x58
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005568:	e04f      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d04b      	beq.n	800560a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005572:	f7fc fddf 	bl	8002134 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	429a      	cmp	r2, r3
 8005580:	d302      	bcc.n	8005588 <UART_WaitOnFlagUntilTimeout+0x30>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e04e      	b.n	800562a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d037      	beq.n	800560a <UART_WaitOnFlagUntilTimeout+0xb2>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b80      	cmp	r3, #128	@ 0x80
 800559e:	d034      	beq.n	800560a <UART_WaitOnFlagUntilTimeout+0xb2>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b40      	cmp	r3, #64	@ 0x40
 80055a4:	d031      	beq.n	800560a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d110      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2208      	movs	r2, #8
 80055ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f8ff 	bl	80057c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2208      	movs	r2, #8
 80055c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e029      	b.n	800562a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055e4:	d111      	bne.n	800560a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f8e5 	bl	80057c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e00f      	b.n	800562a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4013      	ands	r3, r2
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	bf0c      	ite	eq
 800561a:	2301      	moveq	r3, #1
 800561c:	2300      	movne	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	429a      	cmp	r2, r3
 8005626:	d0a0      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005634:	b480      	push	{r7}
 8005636:	b097      	sub	sp, #92	@ 0x5c
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	88fa      	ldrh	r2, [r7, #6]
 800564c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005666:	d10e      	bne.n	8005686 <UART_Start_Receive_IT+0x52>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <UART_Start_Receive_IT+0x48>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005676:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800567a:	e02d      	b.n	80056d8 <UART_Start_Receive_IT+0xa4>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	22ff      	movs	r2, #255	@ 0xff
 8005680:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005684:	e028      	b.n	80056d8 <UART_Start_Receive_IT+0xa4>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10d      	bne.n	80056aa <UART_Start_Receive_IT+0x76>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <UART_Start_Receive_IT+0x6c>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	22ff      	movs	r2, #255	@ 0xff
 800569a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800569e:	e01b      	b.n	80056d8 <UART_Start_Receive_IT+0xa4>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	227f      	movs	r2, #127	@ 0x7f
 80056a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056a8:	e016      	b.n	80056d8 <UART_Start_Receive_IT+0xa4>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056b2:	d10d      	bne.n	80056d0 <UART_Start_Receive_IT+0x9c>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <UART_Start_Receive_IT+0x92>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	227f      	movs	r2, #127	@ 0x7f
 80056c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056c4:	e008      	b.n	80056d8 <UART_Start_Receive_IT+0xa4>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	223f      	movs	r2, #63	@ 0x3f
 80056ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056ce:	e003      	b.n	80056d8 <UART_Start_Receive_IT+0xa4>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2222      	movs	r2, #34	@ 0x22
 80056e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3308      	adds	r3, #8
 80056ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005708:	64ba      	str	r2, [r7, #72]	@ 0x48
 800570a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800570e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e5      	bne.n	80056e8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005724:	d107      	bne.n	8005736 <UART_Start_Receive_IT+0x102>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d103      	bne.n	8005736 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4a21      	ldr	r2, [pc, #132]	@ (80057b8 <UART_Start_Receive_IT+0x184>)
 8005732:	669a      	str	r2, [r3, #104]	@ 0x68
 8005734:	e002      	b.n	800573c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a20      	ldr	r2, [pc, #128]	@ (80057bc <UART_Start_Receive_IT+0x188>)
 800573a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d019      	beq.n	8005778 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005758:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005762:	637b      	str	r3, [r7, #52]	@ 0x34
 8005764:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005768:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e6      	bne.n	8005744 <UART_Start_Receive_IT+0x110>
 8005776:	e018      	b.n	80057aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	613b      	str	r3, [r7, #16]
   return(result);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f043 0320 	orr.w	r3, r3, #32
 800578c:	653b      	str	r3, [r7, #80]	@ 0x50
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005796:	623b      	str	r3, [r7, #32]
 8005798:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	69f9      	ldr	r1, [r7, #28]
 800579c:	6a3a      	ldr	r2, [r7, #32]
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e6      	bne.n	8005778 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	375c      	adds	r7, #92	@ 0x5c
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	08005c3d 	.word	0x08005c3d
 80057bc:	08005a81 	.word	0x08005a81

080057c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b095      	sub	sp, #84	@ 0x54
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80057e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e6      	bne.n	80057c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3308      	adds	r3, #8
 8005800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	61fb      	str	r3, [r7, #28]
   return(result);
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800581a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800581c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e5      	bne.n	80057fa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005832:	2b01      	cmp	r3, #1
 8005834:	d118      	bne.n	8005868 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60bb      	str	r3, [r7, #8]
   return(result);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f023 0310 	bic.w	r3, r3, #16
 800584a:	647b      	str	r3, [r7, #68]	@ 0x44
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	613b      	str	r3, [r7, #16]
   return(result);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e6      	bne.n	8005836 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800587c:	bf00      	nop
 800587e:	3754      	adds	r7, #84	@ 0x54
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff fa3e 	bl	8004d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b08f      	sub	sp, #60	@ 0x3c
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058c0:	2b21      	cmp	r3, #33	@ 0x21
 80058c2:	d14c      	bne.n	800595e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d132      	bne.n	8005936 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058f0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e6      	bne.n	80058d0 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005916:	633b      	str	r3, [r7, #48]	@ 0x30
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	6979      	ldr	r1, [r7, #20]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	e841 2300 	strex	r3, r2, [r1]
 800592c:	613b      	str	r3, [r7, #16]
   return(result);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e6      	bne.n	8005902 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005934:	e013      	b.n	800595e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800593a:	781a      	ldrb	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800595e:	bf00      	nop
 8005960:	373c      	adds	r7, #60	@ 0x3c
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800596a:	b480      	push	{r7}
 800596c:	b091      	sub	sp, #68	@ 0x44
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005976:	2b21      	cmp	r3, #33	@ 0x21
 8005978:	d151      	bne.n	8005a1e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d132      	bne.n	80059ec <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	623b      	str	r3, [r7, #32]
   return(result);
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800599a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	461a      	mov	r2, r3
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e6      	bne.n	8005986 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	69b9      	ldr	r1, [r7, #24]
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	617b      	str	r3, [r7, #20]
   return(result);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e6      	bne.n	80059b8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80059ea:	e018      	b.n	8005a1e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80059f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f4:	881a      	ldrh	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059fe:	b292      	uxth	r2, r2
 8005a00:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a06:	1c9a      	adds	r2, r3, #2
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005a1e:	bf00      	nop
 8005a20:	3744      	adds	r7, #68	@ 0x44
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b088      	sub	sp, #32
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6979      	ldr	r1, [r7, #20]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e6      	bne.n	8005a32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7fc f9c7 	bl	8001e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a76:	bf00      	nop
 8005a78:	3720      	adds	r7, #32
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b09c      	sub	sp, #112	@ 0x70
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a98:	2b22      	cmp	r3, #34	@ 0x22
 8005a9a:	f040 80be 	bne.w	8005c1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005aa4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005aa8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005aac:	b2d9      	uxtb	r1, r3
 8005aae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab8:	400a      	ands	r2, r1
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f040 80a3 	bne.w	8005c2e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005afc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e6      	bne.n	8005ae8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2c:	f023 0301 	bic.w	r3, r3, #1
 8005b30:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005b3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a34      	ldr	r2, [pc, #208]	@ (8005c38 <UART_RxISR_8BIT+0x1b8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d01f      	beq.n	8005bac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d018      	beq.n	8005bac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	623b      	str	r3, [r7, #32]
   return(result);
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e6      	bne.n	8005b7a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d12e      	bne.n	8005c12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0310 	bic.w	r3, r3, #16
 8005bce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	69b9      	ldr	r1, [r7, #24]
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	617b      	str	r3, [r7, #20]
   return(result);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e6      	bne.n	8005bba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d103      	bne.n	8005c02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2210      	movs	r2, #16
 8005c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff f896 	bl	8004d3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c10:	e00d      	b.n	8005c2e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fc f928 	bl	8001e68 <HAL_UART_RxCpltCallback>
}
 8005c18:	e009      	b.n	8005c2e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	8b1b      	ldrh	r3, [r3, #24]
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0208 	orr.w	r2, r2, #8
 8005c2a:	b292      	uxth	r2, r2
 8005c2c:	831a      	strh	r2, [r3, #24]
}
 8005c2e:	bf00      	nop
 8005c30:	3770      	adds	r7, #112	@ 0x70
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40008000 	.word	0x40008000

08005c3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b09c      	sub	sp, #112	@ 0x70
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c54:	2b22      	cmp	r3, #34	@ 0x22
 8005c56:	f040 80be 	bne.w	8005dd6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c68:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005c6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c72:	4013      	ands	r3, r2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7e:	1c9a      	adds	r2, r3, #2
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 80a3 	bne.w	8005dea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cc4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e6      	bne.n	8005ca4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3308      	adds	r3, #8
 8005cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005cf6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e5      	bne.n	8005cd6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a34      	ldr	r2, [pc, #208]	@ (8005df4 <UART_RxISR_16BIT+0x1b8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d01f      	beq.n	8005d68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d018      	beq.n	8005d68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d56:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e6      	bne.n	8005d36 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d12e      	bne.n	8005dce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f023 0310 	bic.w	r3, r3, #16
 8005d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6979      	ldr	r1, [r7, #20]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	613b      	str	r3, [r7, #16]
   return(result);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e6      	bne.n	8005d76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d103      	bne.n	8005dbe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2210      	movs	r2, #16
 8005dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fe ffb8 	bl	8004d3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dcc:	e00d      	b.n	8005dea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fc f84a 	bl	8001e68 <HAL_UART_RxCpltCallback>
}
 8005dd4:	e009      	b.n	8005dea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	8b1b      	ldrh	r3, [r3, #24]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0208 	orr.w	r2, r2, #8
 8005de6:	b292      	uxth	r2, r2
 8005de8:	831a      	strh	r2, [r3, #24]
}
 8005dea:	bf00      	nop
 8005dec:	3770      	adds	r7, #112	@ 0x70
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40008000 	.word	0x40008000

08005df8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	7992      	ldrb	r2, [r2, #6]
 8005e1e:	08d2      	lsrs	r2, r2, #3
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	fb13 f302 	smulbb	r3, r3, r2
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	889b      	ldrh	r3, [r3, #4]
 8005e30:	461a      	mov	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	885b      	ldrh	r3, [r3, #2]
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	60da      	str	r2, [r3, #12]
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8005e52:	b490      	push	{r4, r7}
 8005e54:	b086      	sub	sp, #24
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	4604      	mov	r4, r0
 8005e5a:	4608      	mov	r0, r1
 8005e5c:	1d39      	adds	r1, r7, #4
 8005e5e:	e881 000c 	stmia.w	r1, {r2, r3}
 8005e62:	4623      	mov	r3, r4
 8005e64:	81fb      	strh	r3, [r7, #14]
 8005e66:	4603      	mov	r3, r0
 8005e68:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8005e6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e72:	88ba      	ldrh	r2, [r7, #4]
 8005e74:	4293      	cmp	r3, r2
 8005e76:	da04      	bge.n	8005e82 <code+0x30>
        code |= LEFT;
 8005e78:	2201      	movs	r2, #1
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	75fb      	strb	r3, [r7, #23]
 8005e80:	e008      	b.n	8005e94 <code+0x42>
    } else if (x0 > window.x1) {
 8005e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e86:	893a      	ldrh	r2, [r7, #8]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	dd03      	ble.n	8005e94 <code+0x42>
        code |= RIGHT;
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8005e94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	da04      	bge.n	8005ea8 <code+0x56>
        code |= BOTTOM;
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	75fb      	strb	r3, [r7, #23]
 8005ea6:	e008      	b.n	8005eba <code+0x68>
    } else if (y0 > window.y1) {
 8005ea8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005eac:	897a      	ldrh	r2, [r7, #10]
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	dd03      	ble.n	8005eba <code+0x68>
        code |= TOP;
 8005eb2:	2208      	movs	r2, #8
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc90      	pop	{r4, r7}
 8005ec4:	4770      	bx	lr

08005ec6 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b088      	sub	sp, #32
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005ee0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ee4:	cb0c      	ldmia	r3, {r2, r3}
 8005ee6:	f7ff ffb4 	bl	8005e52 <code>
 8005eea:	4603      	mov	r3, r0
 8005eec:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005efa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005efe:	cb0c      	ldmia	r3, {r2, r3}
 8005f00:	f7ff ffa7 	bl	8005e52 <code>
 8005f04:	4603      	mov	r3, r0
 8005f06:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8005f0c:	7ffa      	ldrb	r2, [r7, #31]
 8005f0e:	7fbb      	ldrb	r3, [r7, #30]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	777b      	strb	r3, [r7, #29]
            break;
 8005f1c:	e0e9      	b.n	80060f2 <clip_line+0x22c>
        } else if (code0 & code1) {
 8005f1e:	7ffa      	ldrb	r2, [r7, #31]
 8005f20:	7fbb      	ldrb	r3, [r7, #30]
 8005f22:	4013      	ands	r3, r2
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f040 80e2 	bne.w	80060f0 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8005f34:	7ffb      	ldrb	r3, [r7, #31]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <clip_line+0x78>
 8005f3a:	7ffb      	ldrb	r3, [r7, #31]
 8005f3c:	e000      	b.n	8005f40 <clip_line+0x7a>
 8005f3e:	7fbb      	ldrb	r3, [r7, #30]
 8005f40:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8005f42:	2208      	movs	r2, #8
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	4013      	ands	r3, r2
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d024      	beq.n	8005f98 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f64:	1acb      	subs	r3, r1, r3
 8005f66:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8005f68:	4608      	mov	r0, r1
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005f70:	1a41      	subs	r1, r0, r1
 8005f72:	fb03 f101 	mul.w	r1, r3, r1
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f84:	1ac3      	subs	r3, r0, r3
 8005f86:	fb91 f3f3 	sdiv	r3, r1, r3
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8005f92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005f94:	833b      	strh	r3, [r7, #24]
 8005f96:	e07f      	b.n	8006098 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8005f98:	2204      	movs	r2, #4
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d024      	beq.n	8005fee <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fba:	1acb      	subs	r3, r1, r3
 8005fbc:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005fbe:	4608      	mov	r0, r1
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005fc6:	1a41      	subs	r1, r0, r1
 8005fc8:	fb03 f101 	mul.w	r1, r3, r1
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fda:	1ac3      	subs	r3, r0, r3
 8005fdc:	fb91 f3f3 	sdiv	r3, r1, r3
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8005fe8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005fea:	833b      	strh	r3, [r7, #24]
 8005fec:	e054      	b.n	8006098 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8005fee:	2202      	movs	r2, #2
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d024      	beq.n	8006044 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006000:	b29a      	uxth	r2, r3
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006008:	4619      	mov	r1, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006010:	1acb      	subs	r3, r1, r3
 8006012:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006014:	4608      	mov	r0, r1
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	f9b1 1000 	ldrsh.w	r1, [r1]
 800601c:	1a41      	subs	r1, r0, r1
 800601e:	fb03 f101 	mul.w	r1, r3, r1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006028:	4618      	mov	r0, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006030:	1ac3      	subs	r3, r0, r3
 8006032:	fb91 f3f3 	sdiv	r3, r1, r3
 8006036:	b29b      	uxth	r3, r3
 8006038:	4413      	add	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800603e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006040:	837b      	strh	r3, [r7, #26]
 8006042:	e029      	b.n	8006098 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006044:	2201      	movs	r2, #1
 8006046:	7dfb      	ldrb	r3, [r7, #23]
 8006048:	4013      	ands	r3, r2
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d023      	beq.n	8006098 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006056:	b29a      	uxth	r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800605e:	4619      	mov	r1, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006066:	1acb      	subs	r3, r1, r3
 8006068:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800606a:	4608      	mov	r0, r1
 800606c:	68f9      	ldr	r1, [r7, #12]
 800606e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006072:	1a41      	subs	r1, r0, r1
 8006074:	fb03 f101 	mul.w	r1, r3, r1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800607e:	4618      	mov	r0, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006086:	1ac3      	subs	r3, r0, r3
 8006088:	fb91 f3f3 	sdiv	r3, r1, r3
 800608c:	b29b      	uxth	r3, r3
 800608e:	4413      	add	r3, r2
 8006090:	b29b      	uxth	r3, r3
 8006092:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006094:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006096:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006098:	7dfa      	ldrb	r2, [r7, #23]
 800609a:	7ffb      	ldrb	r3, [r7, #31]
 800609c:	429a      	cmp	r2, r3
 800609e:	d113      	bne.n	80060c8 <clip_line+0x202>
                *x0 = x;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8b7a      	ldrh	r2, [r7, #26]
 80060a4:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	8b3a      	ldrh	r2, [r7, #24]
 80060aa:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f9b3 0000 	ldrsh.w	r0, [r3]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80060b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80060bc:	cb0c      	ldmia	r3, {r2, r3}
 80060be:	f7ff fec8 	bl	8005e52 <code>
 80060c2:	4603      	mov	r3, r0
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e721      	b.n	8005f0c <clip_line+0x46>
            } else {
                *x1 = x;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8b7a      	ldrh	r2, [r7, #26]
 80060cc:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	8b3a      	ldrh	r2, [r7, #24]
 80060d2:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80060e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80060e4:	cb0c      	ldmia	r3, {r2, r3}
 80060e6:	f7ff feb4 	bl	8005e52 <code>
 80060ea:	4603      	mov	r3, r0
 80060ec:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 80060ee:	e70d      	b.n	8005f0c <clip_line+0x46>
            break;
 80060f0:	bf00      	nop
            }
        }
    }

    return accept;
 80060f2:	7f7b      	ldrb	r3, [r7, #29]
 80060f4:	4618      	mov	r0, r3
 80060f6:	3720      	adds	r7, #32
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	3306      	adds	r3, #6
 800610c:	2208      	movs	r2, #8
 800610e:	4619      	mov	r1, r3
 8006110:	f001 fcc3 	bl	8007a9a <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	330e      	adds	r3, #14
 8006118:	781a      	ldrb	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	330f      	adds	r3, #15
 8006122:	781a      	ldrb	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	3310      	adds	r3, #16
 800612c:	781a      	ldrb	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	72da      	strb	r2, [r3, #11]

    return 0;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b08e      	sub	sp, #56	@ 0x38
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006148:	f107 0314 	add.w	r3, r7, #20
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff ffd4 	bl	80060fc <fontx_meta>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 800615a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <fontx_glyph+0x2c>
        return status;
 8006162:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006166:	e077      	b.n	8006258 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006168:	7f7a      	ldrb	r2, [r7, #29]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 800616e:	7fba      	ldrb	r2, [r7, #30]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006174:	7f7b      	ldrb	r3, [r7, #29]
 8006176:	3307      	adds	r3, #7
 8006178:	2b00      	cmp	r3, #0
 800617a:	da00      	bge.n	800617e <fontx_glyph+0x42>
 800617c:	3307      	adds	r3, #7
 800617e:	10db      	asrs	r3, r3, #3
 8006180:	b2da      	uxtb	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	78da      	ldrb	r2, [r3, #3]
 800618a:	7fbb      	ldrb	r3, [r7, #30]
 800618c:	fb12 f303 	smulbb	r3, r2, r3
 8006190:	b2da      	uxtb	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006196:	7ffb      	ldrb	r3, [r7, #31]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10f      	bne.n	80061bc <fontx_glyph+0x80>
        if (code < 0x100) {
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2bff      	cmp	r3, #255	@ 0xff
 80061a0:	d859      	bhi.n	8006256 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	789b      	ldrb	r3, [r3, #2]
 80061a6:	461a      	mov	r2, r3
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
 80061ae:	3311      	adds	r3, #17
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e04d      	b.n	8006258 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3312      	adds	r3, #18
 80061c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3311      	adds	r3, #17
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 80061ce:	e03d      	b.n	800624c <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	3301      	adds	r3, #1
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	4413      	add	r3, r2
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80061e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e4:	3302      	adds	r3, #2
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ec:	3303      	adds	r3, #3
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	4413      	add	r3, r2
 80061f4:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d31c      	bcc.n	8006238 <fontx_glyph+0xfc>
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	429a      	cmp	r2, r3
 8006204:	d818      	bhi.n	8006238 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800620e:	4413      	add	r3, r2
 8006210:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3311      	adds	r3, #17
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	461a      	mov	r2, r3
                    nc * glyph->size
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	789b      	ldrb	r3, [r3, #2]
 8006220:	4619      	mov	r1, r3
 8006222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006224:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006228:	4413      	add	r3, r2
 800622a:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	441a      	add	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	e00f      	b.n	8006258 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006238:	6a3a      	ldr	r2, [r7, #32]
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	1ad2      	subs	r2, r2, r3
 800623e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006240:	4413      	add	r3, r2
 8006242:	3301      	adds	r3, #1
 8006244:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006248:	3304      	adds	r3, #4
 800624a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	1e5a      	subs	r2, r3, #1
 8006250:	633a      	str	r2, [r7, #48]	@ 0x30
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1bc      	bne.n	80061d0 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006256:	2301      	movs	r3, #1
 8006258:	4618      	mov	r0, r3
 800625a:	3738      	adds	r7, #56	@ 0x38
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	dd01      	ble.n	8006276 <min+0x16>
        return b;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	e000      	b.n	8006278 <min+0x18>
    };
    return a;
 8006276:	687b      	ldr	r3, [r7, #4]
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <max>:

static inline int max(int a, int b) {
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	dd01      	ble.n	800629a <max+0x16>
        return a;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	e000      	b.n	800629c <max+0x18>
    }
    return b;
 800629a:	683b      	ldr	r3, [r7, #0]
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	80fb      	strh	r3, [r7, #6]
 80062b2:	460b      	mov	r3, r1
 80062b4:	80bb      	strh	r3, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 80062ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062be:	4a12      	ldr	r2, [pc, #72]	@ (8006308 <hagl_put_pixel+0x60>)
 80062c0:	8812      	ldrh	r2, [r2, #0]
 80062c2:	4293      	cmp	r3, r2
 80062c4:	db1a      	blt.n	80062fc <hagl_put_pixel+0x54>
 80062c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80062ca:	4a0f      	ldr	r2, [pc, #60]	@ (8006308 <hagl_put_pixel+0x60>)
 80062cc:	8852      	ldrh	r2, [r2, #2]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	db14      	blt.n	80062fc <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80062d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006308 <hagl_put_pixel+0x60>)
 80062d8:	8892      	ldrh	r2, [r2, #4]
 80062da:	4293      	cmp	r3, r2
 80062dc:	dc10      	bgt.n	8006300 <hagl_put_pixel+0x58>
 80062de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80062e2:	4a09      	ldr	r2, [pc, #36]	@ (8006308 <hagl_put_pixel+0x60>)
 80062e4:	88d2      	ldrh	r2, [r2, #6]
 80062e6:	4293      	cmp	r3, r2
 80062e8:	dc0a      	bgt.n	8006300 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 80062ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80062f2:	887a      	ldrh	r2, [r7, #2]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fb f9e5 	bl	80016c4 <lcd_put_pixel>
 80062fa:	e002      	b.n	8006302 <hagl_put_pixel+0x5a>
        return;
 80062fc:	bf00      	nop
 80062fe:	e000      	b.n	8006302 <hagl_put_pixel+0x5a>
        return;
 8006300:	bf00      	nop
}
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	2000020c 	.word	0x2000020c

0800630c <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b085      	sub	sp, #20
 8006310:	af02      	add	r7, sp, #8
 8006312:	4604      	mov	r4, r0
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	4623      	mov	r3, r4
 800631c:	80fb      	strh	r3, [r7, #6]
 800631e:	4603      	mov	r3, r0
 8006320:	80bb      	strh	r3, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	807b      	strh	r3, [r7, #2]
 8006326:	4613      	mov	r3, r2
 8006328:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	887b      	ldrh	r3, [r7, #2]
 800632e:	4413      	add	r3, r2
 8006330:	b29b      	uxth	r3, r3
 8006332:	b21a      	sxth	r2, r3
 8006334:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006338:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800633c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006340:	883b      	ldrh	r3, [r7, #0]
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	4623      	mov	r3, r4
 8006346:	f000 f827 	bl	8006398 <hagl_draw_line>
#endif
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	bd90      	pop	{r4, r7, pc}

08006352 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006352:	b590      	push	{r4, r7, lr}
 8006354:	b085      	sub	sp, #20
 8006356:	af02      	add	r7, sp, #8
 8006358:	4604      	mov	r4, r0
 800635a:	4608      	mov	r0, r1
 800635c:	4611      	mov	r1, r2
 800635e:	461a      	mov	r2, r3
 8006360:	4623      	mov	r3, r4
 8006362:	80fb      	strh	r3, [r7, #6]
 8006364:	4603      	mov	r3, r0
 8006366:	80bb      	strh	r3, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	807b      	strh	r3, [r7, #2]
 800636c:	4613      	mov	r3, r2
 800636e:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006370:	88ba      	ldrh	r2, [r7, #4]
 8006372:	887b      	ldrh	r3, [r7, #2]
 8006374:	4413      	add	r3, r2
 8006376:	b29b      	uxth	r3, r3
 8006378:	b21c      	sxth	r4, r3
 800637a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800637e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006382:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006386:	883b      	ldrh	r3, [r7, #0]
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	4623      	mov	r3, r4
 800638c:	f000 f804 	bl	8006398 <hagl_draw_line>
#endif
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	bd90      	pop	{r4, r7, pc}

08006398 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800639a:	b089      	sub	sp, #36	@ 0x24
 800639c:	af02      	add	r7, sp, #8
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	4611      	mov	r1, r2
 80063a4:	461a      	mov	r2, r3
 80063a6:	4623      	mov	r3, r4
 80063a8:	80fb      	strh	r3, [r7, #6]
 80063aa:	4603      	mov	r3, r0
 80063ac:	80bb      	strh	r3, [r7, #4]
 80063ae:	460b      	mov	r3, r1
 80063b0:	807b      	strh	r3, [r7, #2]
 80063b2:	4613      	mov	r3, r2
 80063b4:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80063b6:	463b      	mov	r3, r7
 80063b8:	1cba      	adds	r2, r7, #2
 80063ba:	1d3d      	adds	r5, r7, #4
 80063bc:	1dbc      	adds	r4, r7, #6
 80063be:	494a      	ldr	r1, [pc, #296]	@ (80064e8 <hagl_draw_line+0x150>)
 80063c0:	466e      	mov	r6, sp
 80063c2:	c903      	ldmia	r1, {r0, r1}
 80063c4:	e886 0003 	stmia.w	r6, {r0, r1}
 80063c8:	4629      	mov	r1, r5
 80063ca:	4620      	mov	r0, r4
 80063cc:	f7ff fd7b 	bl	8005ec6 <clip_line>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f083 0301 	eor.w	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d17e      	bne.n	80064da <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80063dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063e0:	461a      	mov	r2, r3
 80063e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bfb8      	it	lt
 80063ec:	425b      	neglt	r3, r3
 80063ee:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 80063f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	da01      	bge.n	8006400 <hagl_draw_line+0x68>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e001      	b.n	8006404 <hagl_draw_line+0x6c>
 8006400:	f04f 33ff 	mov.w	r3, #4294967295
 8006404:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8006406:	f9b7 3000 	ldrsh.w	r3, [r7]
 800640a:	461a      	mov	r2, r3
 800640c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	bfb8      	it	lt
 8006416:	425b      	neglt	r3, r3
 8006418:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800641a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800641e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006422:	429a      	cmp	r2, r3
 8006424:	da01      	bge.n	800642a <hagl_draw_line+0x92>
 8006426:	2301      	movs	r3, #1
 8006428:	e001      	b.n	800642e <hagl_draw_line+0x96>
 800642a:	f04f 33ff 	mov.w	r3, #4294967295
 800642e:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006430:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006434:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006438:	429a      	cmp	r2, r3
 800643a:	dd06      	ble.n	800644a <hagl_draw_line+0xb2>
 800643c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006440:	0fda      	lsrs	r2, r3, #31
 8006442:	4413      	add	r3, r2
 8006444:	105b      	asrs	r3, r3, #1
 8006446:	b21b      	sxth	r3, r3
 8006448:	e006      	b.n	8006458 <hagl_draw_line+0xc0>
 800644a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800644e:	0fda      	lsrs	r2, r3, #31
 8006450:	4413      	add	r3, r2
 8006452:	105b      	asrs	r3, r3, #1
 8006454:	425b      	negs	r3, r3
 8006456:	b21b      	sxth	r3, r3
 8006458:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800645a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800645e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006462:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff ff1f 	bl	80062a8 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800646a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800646e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006472:	429a      	cmp	r2, r3
 8006474:	d105      	bne.n	8006482 <hagl_draw_line+0xea>
 8006476:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800647a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800647e:	429a      	cmp	r2, r3
 8006480:	d02d      	beq.n	80064de <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006482:	8afb      	ldrh	r3, [r7, #22]
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800648a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800648e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006492:	425b      	negs	r3, r3
 8006494:	429a      	cmp	r2, r3
 8006496:	dd0c      	ble.n	80064b2 <hagl_draw_line+0x11a>
            err -= dy;
 8006498:	8afa      	ldrh	r2, [r7, #22]
 800649a:	8a3b      	ldrh	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	b29b      	uxth	r3, r3
 80064a0:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80064a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	8a7b      	ldrh	r3, [r7, #18]
 80064aa:	4413      	add	r3, r2
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	b21b      	sxth	r3, r3
 80064b0:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 80064b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80064b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	dacd      	bge.n	800645a <hagl_draw_line+0xc2>
            err += dx;
 80064be:	8afa      	ldrh	r2, [r7, #22]
 80064c0:	8abb      	ldrh	r3, [r7, #20]
 80064c2:	4413      	add	r3, r2
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80064c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	89fb      	ldrh	r3, [r7, #14]
 80064d0:	4413      	add	r3, r2
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	b21b      	sxth	r3, r3
 80064d6:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80064d8:	e7bf      	b.n	800645a <hagl_draw_line+0xc2>
        return;
 80064da:	bf00      	nop
 80064dc:	e000      	b.n	80064e0 <hagl_draw_line+0x148>
            break;
 80064de:	bf00      	nop
        }
    }
}
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e6:	bf00      	nop
 80064e8:	2000020c 	.word	0x2000020c

080064ec <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4604      	mov	r4, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	461a      	mov	r2, r3
 80064fa:	4623      	mov	r3, r4
 80064fc:	80fb      	strh	r3, [r7, #6]
 80064fe:	4603      	mov	r3, r0
 8006500:	80bb      	strh	r3, [r7, #4]
 8006502:	460b      	mov	r3, r1
 8006504:	807b      	strh	r3, [r7, #2]
 8006506:	4613      	mov	r3, r2
 8006508:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800650a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800650e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006512:	429a      	cmp	r2, r3
 8006514:	dd0e      	ble.n	8006534 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	887b      	ldrh	r3, [r7, #2]
 800651a:	4413      	add	r3, r2
 800651c:	b29b      	uxth	r3, r3
 800651e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	887b      	ldrh	r3, [r7, #2]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	b29b      	uxth	r3, r3
 8006528:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800652a:	88fa      	ldrh	r2, [r7, #6]
 800652c:	887b      	ldrh	r3, [r7, #2]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	b29b      	uxth	r3, r3
 8006532:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006534:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006538:	f9b7 3000 	ldrsh.w	r3, [r7]
 800653c:	429a      	cmp	r2, r3
 800653e:	dd0e      	ble.n	800655e <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8006540:	88ba      	ldrh	r2, [r7, #4]
 8006542:	883b      	ldrh	r3, [r7, #0]
 8006544:	4413      	add	r3, r2
 8006546:	b29b      	uxth	r3, r3
 8006548:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800654a:	88ba      	ldrh	r2, [r7, #4]
 800654c:	883b      	ldrh	r3, [r7, #0]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	b29b      	uxth	r3, r3
 8006552:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006554:	88ba      	ldrh	r2, [r7, #4]
 8006556:	883b      	ldrh	r3, [r7, #0]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	b29b      	uxth	r3, r3
 800655c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800655e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006562:	4a24      	ldr	r2, [pc, #144]	@ (80065f4 <hagl_draw_rectangle+0x108>)
 8006564:	8812      	ldrh	r2, [r2, #0]
 8006566:	4293      	cmp	r3, r2
 8006568:	db3e      	blt.n	80065e8 <hagl_draw_rectangle+0xfc>
 800656a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800656e:	4a21      	ldr	r2, [pc, #132]	@ (80065f4 <hagl_draw_rectangle+0x108>)
 8006570:	8852      	ldrh	r2, [r2, #2]
 8006572:	4293      	cmp	r3, r2
 8006574:	db38      	blt.n	80065e8 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800657a:	4a1e      	ldr	r2, [pc, #120]	@ (80065f4 <hagl_draw_rectangle+0x108>)
 800657c:	8892      	ldrh	r2, [r2, #4]
 800657e:	4293      	cmp	r3, r2
 8006580:	dc34      	bgt.n	80065ec <hagl_draw_rectangle+0x100>
 8006582:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006586:	4a1b      	ldr	r2, [pc, #108]	@ (80065f4 <hagl_draw_rectangle+0x108>)
 8006588:	88d2      	ldrh	r2, [r2, #6]
 800658a:	4293      	cmp	r3, r2
 800658c:	dc2e      	bgt.n	80065ec <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	b29b      	uxth	r3, r3
 8006596:	3301      	adds	r3, #1
 8006598:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 800659a:	883a      	ldrh	r2, [r7, #0]
 800659c:	88bb      	ldrh	r3, [r7, #4]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3301      	adds	r3, #1
 80065a4:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 80065a6:	8c3b      	ldrh	r3, [r7, #32]
 80065a8:	89fa      	ldrh	r2, [r7, #14]
 80065aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065b2:	f7ff feab 	bl	800630c <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 80065b6:	8c3b      	ldrh	r3, [r7, #32]
 80065b8:	89fa      	ldrh	r2, [r7, #14]
 80065ba:	f9b7 1000 	ldrsh.w	r1, [r7]
 80065be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065c2:	f7ff fea3 	bl	800630c <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 80065c6:	8c3b      	ldrh	r3, [r7, #32]
 80065c8:	89ba      	ldrh	r2, [r7, #12]
 80065ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065d2:	f7ff febe 	bl	8006352 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 80065d6:	8c3b      	ldrh	r3, [r7, #32]
 80065d8:	89ba      	ldrh	r2, [r7, #12]
 80065da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065de:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80065e2:	f7ff feb6 	bl	8006352 <hagl_draw_vline>
 80065e6:	e002      	b.n	80065ee <hagl_draw_rectangle+0x102>
        return;
 80065e8:	bf00      	nop
 80065ea:	e000      	b.n	80065ee <hagl_draw_rectangle+0x102>
        return;
 80065ec:	bf00      	nop
}
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd90      	pop	{r4, r7, pc}
 80065f4:	2000020c 	.word	0x2000020c

080065f8 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4604      	mov	r4, r0
 8006600:	4608      	mov	r0, r1
 8006602:	4611      	mov	r1, r2
 8006604:	461a      	mov	r2, r3
 8006606:	4623      	mov	r3, r4
 8006608:	80fb      	strh	r3, [r7, #6]
 800660a:	4603      	mov	r3, r0
 800660c:	80bb      	strh	r3, [r7, #4]
 800660e:	460b      	mov	r3, r1
 8006610:	807b      	strh	r3, [r7, #2]
 8006612:	4613      	mov	r3, r2
 8006614:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8006616:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800661a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800661e:	429a      	cmp	r2, r3
 8006620:	dd0e      	ble.n	8006640 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8006622:	88fa      	ldrh	r2, [r7, #6]
 8006624:	887b      	ldrh	r3, [r7, #2]
 8006626:	4413      	add	r3, r2
 8006628:	b29b      	uxth	r3, r3
 800662a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	887b      	ldrh	r3, [r7, #2]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	b29b      	uxth	r3, r3
 8006634:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8006636:	88fa      	ldrh	r2, [r7, #6]
 8006638:	887b      	ldrh	r3, [r7, #2]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	b29b      	uxth	r3, r3
 800663e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006640:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006644:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006648:	429a      	cmp	r2, r3
 800664a:	dd0e      	ble.n	800666a <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 800664c:	88ba      	ldrh	r2, [r7, #4]
 800664e:	883b      	ldrh	r3, [r7, #0]
 8006650:	4413      	add	r3, r2
 8006652:	b29b      	uxth	r3, r3
 8006654:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8006656:	88ba      	ldrh	r2, [r7, #4]
 8006658:	883b      	ldrh	r3, [r7, #0]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	b29b      	uxth	r3, r3
 800665e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006660:	88ba      	ldrh	r2, [r7, #4]
 8006662:	883b      	ldrh	r3, [r7, #0]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	b29b      	uxth	r3, r3
 8006668:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800666a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800666e:	4a33      	ldr	r2, [pc, #204]	@ (800673c <hagl_fill_rectangle+0x144>)
 8006670:	8812      	ldrh	r2, [r2, #0]
 8006672:	4293      	cmp	r3, r2
 8006674:	db5b      	blt.n	800672e <hagl_fill_rectangle+0x136>
 8006676:	f9b7 3000 	ldrsh.w	r3, [r7]
 800667a:	4a30      	ldr	r2, [pc, #192]	@ (800673c <hagl_fill_rectangle+0x144>)
 800667c:	8852      	ldrh	r2, [r2, #2]
 800667e:	4293      	cmp	r3, r2
 8006680:	db55      	blt.n	800672e <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006686:	4a2d      	ldr	r2, [pc, #180]	@ (800673c <hagl_fill_rectangle+0x144>)
 8006688:	8892      	ldrh	r2, [r2, #4]
 800668a:	4293      	cmp	r3, r2
 800668c:	dc51      	bgt.n	8006732 <hagl_fill_rectangle+0x13a>
 800668e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006692:	4a2a      	ldr	r2, [pc, #168]	@ (800673c <hagl_fill_rectangle+0x144>)
 8006694:	88d2      	ldrh	r2, [r2, #6]
 8006696:	4293      	cmp	r3, r2
 8006698:	dc4b      	bgt.n	8006732 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800669a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800669e:	4a27      	ldr	r2, [pc, #156]	@ (800673c <hagl_fill_rectangle+0x144>)
 80066a0:	8812      	ldrh	r2, [r2, #0]
 80066a2:	4611      	mov	r1, r2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fded 	bl	8006284 <max>
 80066aa:	4603      	mov	r3, r0
 80066ac:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80066ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80066b2:	4a22      	ldr	r2, [pc, #136]	@ (800673c <hagl_fill_rectangle+0x144>)
 80066b4:	8852      	ldrh	r2, [r2, #2]
 80066b6:	4611      	mov	r1, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff fde3 	bl	8006284 <max>
 80066be:	4603      	mov	r3, r0
 80066c0:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 80066c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066c6:	4a1d      	ldr	r2, [pc, #116]	@ (800673c <hagl_fill_rectangle+0x144>)
 80066c8:	8892      	ldrh	r2, [r2, #4]
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff fdc7 	bl	8006260 <min>
 80066d2:	4603      	mov	r3, r0
 80066d4:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80066d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80066da:	4a18      	ldr	r2, [pc, #96]	@ (800673c <hagl_fill_rectangle+0x144>)
 80066dc:	88d2      	ldrh	r2, [r2, #6]
 80066de:	4611      	mov	r1, r2
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff fdbd 	bl	8006260 <min>
 80066e6:	4603      	mov	r3, r0
 80066e8:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80066ea:	887a      	ldrh	r2, [r7, #2]
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3301      	adds	r3, #1
 80066f4:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 80066f6:	883a      	ldrh	r2, [r7, #0]
 80066f8:	88bb      	ldrh	r3, [r7, #4]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3301      	adds	r3, #1
 8006700:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8006702:	2300      	movs	r3, #0
 8006704:	81fb      	strh	r3, [r7, #14]
 8006706:	e00d      	b.n	8006724 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8006708:	88ba      	ldrh	r2, [r7, #4]
 800670a:	89fb      	ldrh	r3, [r7, #14]
 800670c:	4413      	add	r3, r2
 800670e:	b29b      	uxth	r3, r3
 8006710:	b219      	sxth	r1, r3
 8006712:	8c3b      	ldrh	r3, [r7, #32]
 8006714:	89ba      	ldrh	r2, [r7, #12]
 8006716:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800671a:	f7ff fdf7 	bl	800630c <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800671e:	89fb      	ldrh	r3, [r7, #14]
 8006720:	3301      	adds	r3, #1
 8006722:	81fb      	strh	r3, [r7, #14]
 8006724:	89fa      	ldrh	r2, [r7, #14]
 8006726:	897b      	ldrh	r3, [r7, #10]
 8006728:	429a      	cmp	r2, r3
 800672a:	d3ed      	bcc.n	8006708 <hagl_fill_rectangle+0x110>
 800672c:	e002      	b.n	8006734 <hagl_fill_rectangle+0x13c>
        return;
 800672e:	bf00      	nop
 8006730:	e000      	b.n	8006734 <hagl_fill_rectangle+0x13c>
        return;
 8006732:	bf00      	nop
#endif
    }
}
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bd90      	pop	{r4, r7, pc}
 800673a:	bf00      	nop
 800673c:	2000020c 	.word	0x2000020c

08006740 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800674e:	f844 0c24 	str.w	r0, [r4, #-36]
 8006752:	460c      	mov	r4, r1
 8006754:	4610      	mov	r0, r2
 8006756:	4619      	mov	r1, r3
 8006758:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800675c:	4622      	mov	r2, r4
 800675e:	f823 2c26 	strh.w	r2, [r3, #-38]
 8006762:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006766:	4602      	mov	r2, r0
 8006768:	f823 2c28 	strh.w	r2, [r3, #-40]
 800676c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006770:	460a      	mov	r2, r1
 8006772:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8006776:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800677a:	4619      	mov	r1, r3
 800677c:	f107 0310 	add.w	r3, r7, #16
 8006780:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	f851 1c24 	ldr.w	r1, [r1, #-36]
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fcd6 	bl	800613c <fontx_glyph>
 8006790:	4603      	mov	r3, r0
 8006792:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006796:	f102 0209 	add.w	r2, r2, #9
 800679a:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 800679c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80067a0:	f103 0309 	add.w	r3, r3, #9
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <hagl_put_char+0x6e>
        return 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	e0c0      	b.n	8006930 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 80067ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067bc:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80067c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067c4:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80067c8:	461a      	mov	r2, r3
 80067ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067ce:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80067d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067d6:	2210      	movs	r2, #16
 80067d8:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80067dc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80067e0:	3a08      	subs	r2, #8
 80067e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067e6:	3b18      	subs	r3, #24
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff fb0e 	bl	8005e0c <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80067f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067f4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80067f8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80067fc:	f102 020c 	add.w	r2, r2, #12
 8006800:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8006802:	2300      	movs	r3, #0
 8006804:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006808:	f102 020b 	add.w	r2, r2, #11
 800680c:	7013      	strb	r3, [r2, #0]
 800680e:	e071      	b.n	80068f4 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006810:	2300      	movs	r3, #0
 8006812:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006816:	f102 020a 	add.w	r2, r2, #10
 800681a:	7013      	strb	r3, [r2, #0]
 800681c:	e047      	b.n	80068ae <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800681e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006822:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	b25a      	sxtb	r2, r3
 800682a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800682e:	f103 030a 	add.w	r3, r3, #10
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	2180      	movs	r1, #128	@ 0x80
 800683a:	fa41 f303 	asr.w	r3, r1, r3
 800683e:	b25b      	sxtb	r3, r3
 8006840:	4013      	ands	r3, r2
 8006842:	b25b      	sxtb	r3, r3
 8006844:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006848:	f102 0208 	add.w	r2, r2, #8
 800684c:	7013      	strb	r3, [r2, #0]
            if (set) {
 800684e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006852:	f103 0308 	add.w	r3, r3, #8
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <hagl_put_char+0x13e>
                *(ptr++) = color;
 800685c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006860:	f103 030c 	add.w	r3, r3, #12
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	1c9a      	adds	r2, r3, #2
 8006868:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800686c:	f101 010c 	add.w	r1, r1, #12
 8006870:	600a      	str	r2, [r1, #0]
 8006872:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006876:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 800687a:	801a      	strh	r2, [r3, #0]
 800687c:	e00c      	b.n	8006898 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 800687e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006882:	f103 030c 	add.w	r3, r3, #12
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	1c9a      	adds	r2, r3, #2
 800688a:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800688e:	f101 010c 	add.w	r1, r1, #12
 8006892:	600a      	str	r2, [r1, #0]
 8006894:	2200      	movs	r2, #0
 8006896:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006898:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800689c:	f103 030a 	add.w	r3, r3, #10
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	3301      	adds	r3, #1
 80068a4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80068a8:	f102 020a 	add.w	r2, r2, #10
 80068ac:	7013      	strb	r3, [r2, #0]
 80068ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80068b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80068b6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80068ba:	f102 020a 	add.w	r2, r2, #10
 80068be:	7812      	ldrb	r2, [r2, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d3ac      	bcc.n	800681e <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 80068c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80068c8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80068cc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80068d0:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 80068d4:	4413      	add	r3, r2
 80068d6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80068da:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80068de:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80068e2:	f103 030b 	add.w	r3, r3, #11
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	3301      	adds	r3, #1
 80068ea:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80068ee:	f102 020b 	add.w	r2, r2, #11
 80068f2:	7013      	strb	r3, [r2, #0]
 80068f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80068f8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80068fc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006900:	f102 020b 	add.w	r2, r2, #11
 8006904:	7812      	ldrb	r2, [r2, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d382      	bcc.n	8006810 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 800690a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800690e:	3b18      	subs	r3, #24
 8006910:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006914:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8006918:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800691c:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8006920:	461a      	mov	r2, r3
 8006922:	f000 f85a 	bl	80069da <hagl_blit>

    return bitmap.width;
 8006926:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800692a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800692e:	b2db      	uxtb	r3, r3
}
 8006930:	4618      	mov	r0, r3
 8006932:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	bd90      	pop	{r4, r7, pc}

0800693c <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08c      	sub	sp, #48	@ 0x30
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	4603      	mov	r3, r0
 800694c:	817b      	strh	r3, [r7, #10]
 800694e:	460b      	mov	r3, r1
 8006950:	813b      	strh	r3, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8006956:	897b      	ldrh	r3, [r7, #10]
 8006958:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800695a:	f107 0314 	add.w	r3, r7, #20
 800695e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fbcb 	bl	80060fc <fontx_meta>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 800696c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <hagl_put_text+0x3c>
        return 0;
 8006974:	2300      	movs	r3, #0
 8006976:	e02c      	b.n	80069d2 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	1d1a      	adds	r2, r3, #4
 800697c:	60fa      	str	r2, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	2b0d      	cmp	r3, #13
 8006986:	d002      	beq.n	800698e <hagl_put_text+0x52>
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	2b0a      	cmp	r3, #10
 800698c:	d108      	bne.n	80069a0 <hagl_put_text+0x64>
            x0 = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8006992:	7fbb      	ldrb	r3, [r7, #30]
 8006994:	461a      	mov	r2, r3
 8006996:	893b      	ldrh	r3, [r7, #8]
 8006998:	4413      	add	r3, r2
 800699a:	b29b      	uxth	r3, r3
 800699c:	813b      	strh	r3, [r7, #8]
 800699e:	e010      	b.n	80069c2 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80069a0:	88f8      	ldrh	r0, [r7, #6]
 80069a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80069a6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	4603      	mov	r3, r0
 80069b0:	6a38      	ldr	r0, [r7, #32]
 80069b2:	f7ff fec5 	bl	8006740 <hagl_put_char>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	897b      	ldrh	r3, [r7, #10]
 80069bc:	4413      	add	r3, r2
 80069be:	b29b      	uxth	r3, r3
 80069c0:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1d6      	bne.n	8006978 <hagl_put_text+0x3c>

    return x0 - original;
 80069ca:	897a      	ldrh	r2, [r7, #10]
 80069cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	b29b      	uxth	r3, r3
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3728      	adds	r7, #40	@ 0x28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80069da:	b580      	push	{r7, lr}
 80069dc:	b086      	sub	sp, #24
 80069de:	af00      	add	r7, sp, #0
 80069e0:	4603      	mov	r3, r0
 80069e2:	603a      	str	r2, [r7, #0]
 80069e4:	80fb      	strh	r3, [r7, #6]
 80069e6:	460b      	mov	r3, r1
 80069e8:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80069f0:	2300      	movs	r3, #0
 80069f2:	827b      	strh	r3, [r7, #18]
 80069f4:	e020      	b.n	8006a38 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80069f6:	2300      	movs	r3, #0
 80069f8:	823b      	strh	r3, [r7, #16]
 80069fa:	e015      	b.n	8006a28 <hagl_blit+0x4e>
            color = *(ptr++);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1c9a      	adds	r2, r3, #2
 8006a00:	617a      	str	r2, [r7, #20]
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	8a3b      	ldrh	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	b218      	sxth	r0, r3
 8006a10:	88ba      	ldrh	r2, [r7, #4]
 8006a12:	8a7b      	ldrh	r3, [r7, #18]
 8006a14:	4413      	add	r3, r2
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	b21b      	sxth	r3, r3
 8006a1a:	89fa      	ldrh	r2, [r7, #14]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	f7ff fc43 	bl	80062a8 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8006a22:	8a3b      	ldrh	r3, [r7, #16]
 8006a24:	3301      	adds	r3, #1
 8006a26:	823b      	strh	r3, [r7, #16]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	8a3a      	ldrh	r2, [r7, #16]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d3e4      	bcc.n	80069fc <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8006a32:	8a7b      	ldrh	r3, [r7, #18]
 8006a34:	3301      	adds	r3, #1
 8006a36:	827b      	strh	r3, [r7, #18]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	885b      	ldrh	r3, [r3, #2]
 8006a3c:	8a7a      	ldrh	r2, [r7, #18]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d3d9      	bcc.n	80069f6 <hagl_blit+0x1c>
        }
    }
#endif
};
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <hagl_draw_circle>:
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
        0x00
    );
}

void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 8006a4c:	b590      	push	{r4, r7, lr}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4604      	mov	r4, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	4611      	mov	r1, r2
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	80fb      	strh	r3, [r7, #6]
 8006a5e:	4603      	mov	r3, r0
 8006a60:	80bb      	strh	r3, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	807b      	strh	r3, [r7, #2]
 8006a66:	4613      	mov	r3, r2
 8006a68:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006a6e:	887b      	ldrh	r3, [r7, #2]
 8006a70:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006a72:	887b      	ldrh	r3, [r7, #2]
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f1c3 0303 	rsb	r3, r3, #3
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 8006a80:	88fa      	ldrh	r2, [r7, #6]
 8006a82:	89fb      	ldrh	r3, [r7, #14]
 8006a84:	4413      	add	r3, r2
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	b218      	sxth	r0, r3
 8006a8a:	88ba      	ldrh	r2, [r7, #4]
 8006a8c:	89bb      	ldrh	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	b21b      	sxth	r3, r3
 8006a94:	883a      	ldrh	r2, [r7, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	f7ff fc06 	bl	80062a8 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 8006a9c:	88fa      	ldrh	r2, [r7, #6]
 8006a9e:	89fb      	ldrh	r3, [r7, #14]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	b218      	sxth	r0, r3
 8006aa6:	88ba      	ldrh	r2, [r7, #4]
 8006aa8:	89bb      	ldrh	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	b21b      	sxth	r3, r3
 8006ab0:	883a      	ldrh	r2, [r7, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f7ff fbf8 	bl	80062a8 <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8006ab8:	88fa      	ldrh	r2, [r7, #6]
 8006aba:	89fb      	ldrh	r3, [r7, #14]
 8006abc:	4413      	add	r3, r2
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	b218      	sxth	r0, r3
 8006ac2:	88ba      	ldrh	r2, [r7, #4]
 8006ac4:	89bb      	ldrh	r3, [r7, #12]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	b21b      	sxth	r3, r3
 8006acc:	883a      	ldrh	r2, [r7, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f7ff fbea 	bl	80062a8 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8006ad4:	88fa      	ldrh	r2, [r7, #6]
 8006ad6:	89fb      	ldrh	r3, [r7, #14]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	b218      	sxth	r0, r3
 8006ade:	88ba      	ldrh	r2, [r7, #4]
 8006ae0:	89bb      	ldrh	r3, [r7, #12]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	b21b      	sxth	r3, r3
 8006ae8:	883a      	ldrh	r2, [r7, #0]
 8006aea:	4619      	mov	r1, r3
 8006aec:	f7ff fbdc 	bl	80062a8 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8006af0:	88fa      	ldrh	r2, [r7, #6]
 8006af2:	89bb      	ldrh	r3, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	b218      	sxth	r0, r3
 8006afa:	88ba      	ldrh	r2, [r7, #4]
 8006afc:	89fb      	ldrh	r3, [r7, #14]
 8006afe:	4413      	add	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	b21b      	sxth	r3, r3
 8006b04:	883a      	ldrh	r2, [r7, #0]
 8006b06:	4619      	mov	r1, r3
 8006b08:	f7ff fbce 	bl	80062a8 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	89bb      	ldrh	r3, [r7, #12]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b218      	sxth	r0, r3
 8006b16:	88ba      	ldrh	r2, [r7, #4]
 8006b18:	89fb      	ldrh	r3, [r7, #14]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	b21b      	sxth	r3, r3
 8006b20:	883a      	ldrh	r2, [r7, #0]
 8006b22:	4619      	mov	r1, r3
 8006b24:	f7ff fbc0 	bl	80062a8 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	89bb      	ldrh	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	b218      	sxth	r0, r3
 8006b32:	88ba      	ldrh	r2, [r7, #4]
 8006b34:	89fb      	ldrh	r3, [r7, #14]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	b21b      	sxth	r3, r3
 8006b3c:	883a      	ldrh	r2, [r7, #0]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f7ff fbb2 	bl	80062a8 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8006b44:	88fa      	ldrh	r2, [r7, #6]
 8006b46:	89bb      	ldrh	r3, [r7, #12]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	b218      	sxth	r0, r3
 8006b4e:	88ba      	ldrh	r2, [r7, #4]
 8006b50:	89fb      	ldrh	r3, [r7, #14]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	b21b      	sxth	r3, r3
 8006b58:	883a      	ldrh	r2, [r7, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f7ff fba4 	bl	80062a8 <hagl_put_pixel>

    while (y >= x) {
 8006b60:	e097      	b.n	8006c92 <hagl_draw_circle+0x246>
        x++;
 8006b62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3301      	adds	r3, #1
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006b6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	dd14      	ble.n	8006ba0 <hagl_draw_circle+0x154>
            y--;
 8006b76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006b82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006b86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	897b      	ldrh	r3, [r7, #10]
 8006b94:	4413      	add	r3, r2
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	330a      	adds	r3, #10
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	817b      	strh	r3, [r7, #10]
 8006b9e:	e008      	b.n	8006bb2 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8006ba0:	89fb      	ldrh	r3, [r7, #14]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	897b      	ldrh	r3, [r7, #10]
 8006ba8:	4413      	add	r3, r2
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3306      	adds	r3, #6
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	89fb      	ldrh	r3, [r7, #14]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	b218      	sxth	r0, r3
 8006bbc:	88ba      	ldrh	r2, [r7, #4]
 8006bbe:	89bb      	ldrh	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	b21b      	sxth	r3, r3
 8006bc6:	883a      	ldrh	r2, [r7, #0]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	f7ff fb6d 	bl	80062a8 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8006bce:	88fa      	ldrh	r2, [r7, #6]
 8006bd0:	89fb      	ldrh	r3, [r7, #14]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	b218      	sxth	r0, r3
 8006bd8:	88ba      	ldrh	r2, [r7, #4]
 8006bda:	89bb      	ldrh	r3, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	b21b      	sxth	r3, r3
 8006be2:	883a      	ldrh	r2, [r7, #0]
 8006be4:	4619      	mov	r1, r3
 8006be6:	f7ff fb5f 	bl	80062a8 <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 8006bea:	88fa      	ldrh	r2, [r7, #6]
 8006bec:	89fb      	ldrh	r3, [r7, #14]
 8006bee:	4413      	add	r3, r2
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	b218      	sxth	r0, r3
 8006bf4:	88ba      	ldrh	r2, [r7, #4]
 8006bf6:	89bb      	ldrh	r3, [r7, #12]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	b21b      	sxth	r3, r3
 8006bfe:	883a      	ldrh	r2, [r7, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	f7ff fb51 	bl	80062a8 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	89fb      	ldrh	r3, [r7, #14]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	b218      	sxth	r0, r3
 8006c10:	88ba      	ldrh	r2, [r7, #4]
 8006c12:	89bb      	ldrh	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	b21b      	sxth	r3, r3
 8006c1a:	883a      	ldrh	r2, [r7, #0]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	f7ff fb43 	bl	80062a8 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8006c22:	88fa      	ldrh	r2, [r7, #6]
 8006c24:	89bb      	ldrh	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	b218      	sxth	r0, r3
 8006c2c:	88ba      	ldrh	r2, [r7, #4]
 8006c2e:	89fb      	ldrh	r3, [r7, #14]
 8006c30:	4413      	add	r3, r2
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	b21b      	sxth	r3, r3
 8006c36:	883a      	ldrh	r2, [r7, #0]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f7ff fb35 	bl	80062a8 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8006c3e:	88fa      	ldrh	r2, [r7, #6]
 8006c40:	89bb      	ldrh	r3, [r7, #12]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	b218      	sxth	r0, r3
 8006c48:	88ba      	ldrh	r2, [r7, #4]
 8006c4a:	89fb      	ldrh	r3, [r7, #14]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	b21b      	sxth	r3, r3
 8006c52:	883a      	ldrh	r2, [r7, #0]
 8006c54:	4619      	mov	r1, r3
 8006c56:	f7ff fb27 	bl	80062a8 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	89bb      	ldrh	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	b218      	sxth	r0, r3
 8006c64:	88ba      	ldrh	r2, [r7, #4]
 8006c66:	89fb      	ldrh	r3, [r7, #14]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	b21b      	sxth	r3, r3
 8006c6e:	883a      	ldrh	r2, [r7, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	f7ff fb19 	bl	80062a8 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8006c76:	88fa      	ldrh	r2, [r7, #6]
 8006c78:	89bb      	ldrh	r3, [r7, #12]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	b218      	sxth	r0, r3
 8006c80:	88ba      	ldrh	r2, [r7, #4]
 8006c82:	89fb      	ldrh	r3, [r7, #14]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	b21b      	sxth	r3, r3
 8006c8a:	883a      	ldrh	r2, [r7, #0]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	f7ff fb0b 	bl	80062a8 <hagl_put_pixel>
    while (y >= x) {
 8006c92:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	f6bf af61 	bge.w	8006b62 <hagl_draw_circle+0x116>
    }
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd90      	pop	{r4, r7, pc}

08006caa <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8006caa:	b590      	push	{r4, r7, lr}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	4608      	mov	r0, r1
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	4623      	mov	r3, r4
 8006cba:	80fb      	strh	r3, [r7, #6]
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	80bb      	strh	r3, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	807b      	strh	r3, [r7, #2]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006ccc:	887b      	ldrh	r3, [r7, #2]
 8006cce:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006cd0:	887b      	ldrh	r3, [r7, #2]
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f1c3 0303 	rsb	r3, r3, #3
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8006cde:	e067      	b.n	8006db0 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8006ce0:	88fa      	ldrh	r2, [r7, #6]
 8006ce2:	89fb      	ldrh	r3, [r7, #14]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	b218      	sxth	r0, r3
 8006cea:	88ba      	ldrh	r2, [r7, #4]
 8006cec:	89bb      	ldrh	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	b219      	sxth	r1, r3
 8006cf4:	89fb      	ldrh	r3, [r7, #14]
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	883b      	ldrh	r3, [r7, #0]
 8006cfc:	f7ff fb06 	bl	800630c <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8006d00:	88fa      	ldrh	r2, [r7, #6]
 8006d02:	89fb      	ldrh	r3, [r7, #14]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	b218      	sxth	r0, r3
 8006d0a:	88ba      	ldrh	r2, [r7, #4]
 8006d0c:	89bb      	ldrh	r3, [r7, #12]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	b219      	sxth	r1, r3
 8006d14:	89fb      	ldrh	r3, [r7, #14]
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	883b      	ldrh	r3, [r7, #0]
 8006d1c:	f7ff faf6 	bl	800630c <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8006d20:	88fa      	ldrh	r2, [r7, #6]
 8006d22:	89bb      	ldrh	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	b218      	sxth	r0, r3
 8006d2a:	88ba      	ldrh	r2, [r7, #4]
 8006d2c:	89fb      	ldrh	r3, [r7, #14]
 8006d2e:	4413      	add	r3, r2
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	b219      	sxth	r1, r3
 8006d34:	89bb      	ldrh	r3, [r7, #12]
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	883b      	ldrh	r3, [r7, #0]
 8006d3c:	f7ff fae6 	bl	800630c <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8006d40:	88fa      	ldrh	r2, [r7, #6]
 8006d42:	89bb      	ldrh	r3, [r7, #12]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	b218      	sxth	r0, r3
 8006d4a:	88ba      	ldrh	r2, [r7, #4]
 8006d4c:	89fb      	ldrh	r3, [r7, #14]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	b219      	sxth	r1, r3
 8006d54:	89bb      	ldrh	r3, [r7, #12]
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	883b      	ldrh	r3, [r7, #0]
 8006d5c:	f7ff fad6 	bl	800630c <hagl_draw_hline>
        x++;
 8006d60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3301      	adds	r3, #1
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006d6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dd14      	ble.n	8006d9e <hagl_fill_circle+0xf4>
            y--;
 8006d74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006d80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006d84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	897b      	ldrh	r3, [r7, #10]
 8006d92:	4413      	add	r3, r2
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	330a      	adds	r3, #10
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	817b      	strh	r3, [r7, #10]
 8006d9c:	e008      	b.n	8006db0 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8006d9e:	89fb      	ldrh	r3, [r7, #14]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	897b      	ldrh	r3, [r7, #10]
 8006da6:	4413      	add	r3, r2
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3306      	adds	r3, #6
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8006db0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006db4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	da91      	bge.n	8006ce0 <hagl_fill_circle+0x36>
        }
    }
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd90      	pop	{r4, r7, pc}

08006dc6 <hagl_draw_polygon>:
        hagl_draw_hline(x0 - wx, y0 + wy, wx * 2, color);
    }
}


void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8006dc6:	b590      	push	{r4, r7, lr}
 8006dc8:	b087      	sub	sp, #28
 8006dca:	af02      	add	r7, sp, #8
 8006dcc:	4603      	mov	r3, r0
 8006dce:	6039      	str	r1, [r7, #0]
 8006dd0:	80fb      	strh	r3, [r7, #6]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	81fb      	strh	r3, [r7, #14]
 8006dda:	e02a      	b.n	8006e32 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8006ddc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	4413      	add	r3, r2
        hagl_draw_line(
 8006de6:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8006dea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	3302      	adds	r3, #2
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4413      	add	r3, r2
        hagl_draw_line(
 8006df6:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8006dfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	4413      	add	r3, r2
        hagl_draw_line(
 8006e06:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8006e0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	3306      	adds	r3, #6
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	4413      	add	r3, r2
        hagl_draw_line(
 8006e16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e1a:	88bb      	ldrh	r3, [r7, #4]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	4622      	mov	r2, r4
 8006e22:	f7ff fab9 	bl	8006398 <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8006e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	81fb      	strh	r3, [r7, #14]
 8006e32:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	dbcd      	blt.n	8006ddc <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	3302      	adds	r3, #2
    hagl_draw_line(
 8006e4a:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8006e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e56:	3b01      	subs	r3, #1
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	4413      	add	r3, r2
    hagl_draw_line(
 8006e5e:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8006e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	3b02      	subs	r3, #2
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	4413      	add	r3, r2
    hagl_draw_line(
 8006e6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e72:	88bb      	ldrh	r3, [r7, #4]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	4613      	mov	r3, r2
 8006e78:	4622      	mov	r2, r4
 8006e7a:	f7ff fa8d 	bl	8006398 <hagl_draw_line>
        color
    );
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd90      	pop	{r4, r7, pc}

08006e86 <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b0ac      	sub	sp, #176	@ 0xb0
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	6039      	str	r1, [r7, #0]
 8006e90:	80fb      	strh	r3, [r7, #6]
 8006e92:	4613      	mov	r3, r2
 8006e94:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8006e96:	2380      	movs	r3, #128	@ 0x80
 8006e98:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8006ea8:	e02e      	b.n	8006f08 <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8006eaa:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eba:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	dd08      	ble.n	8006ed4 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8006ec2:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	3302      	adds	r3, #2
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4413      	add	r3, r2
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8006ed4:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	3302      	adds	r3, #2
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee4:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	da08      	bge.n	8006efe <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8006eec:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	3302      	adds	r3, #2
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8006efe:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006f02:	3301      	adds	r3, #1
 8006f04:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8006f08:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8006f0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	dbca      	blt.n	8006eaa <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8006f14:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8006f18:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8006f1c:	e144      	b.n	80071a8 <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8006f24:	88fb      	ldrh	r3, [r7, #6]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8006f34:	e0a6      	b.n	8007084 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8006f36:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f4c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8006f50:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	3302      	adds	r3, #2
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f60:	ee07 3a90 	vmov	s15, r3
 8006f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f68:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8006f6c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4413      	add	r3, r2
 8006f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f82:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8006f86:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	4413      	add	r3, r2
 8006f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f9e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8006fa2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8006fae:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8006fb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fba:	d50c      	bpl.n	8006fd6 <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8006fbc:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006fc0:	ee07 3a90 	vmov	s15, r3
 8006fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fc8:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd4:	da19      	bge.n	800700a <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8006fd6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8006fe2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fee:	d53e      	bpl.n	800706e <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8006ff0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ffc:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007008:	db31      	blt.n	800706e <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 800700a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007016:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800701a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800701e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007022:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800702a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702e:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007032:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007036:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800703a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800703e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800704a:	ee17 3a90 	vmov	r3, s15
 800704e:	b21a      	sxth	r2, r3
 8007050:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007054:	b292      	uxth	r2, r2
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	33b0      	adds	r3, #176	@ 0xb0
 800705a:	443b      	add	r3, r7
 800705c:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007060:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007064:	b29b      	uxth	r3, r3
 8007066:	3301      	adds	r3, #1
 8007068:	b29b      	uxth	r3, r3
 800706a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 800706e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007072:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007076:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 800707a:	b29b      	uxth	r3, r3
 800707c:	3301      	adds	r3, #1
 800707e:	b29b      	uxth	r3, r3
 8007080:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007084:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800708c:	429a      	cmp	r2, r3
 800708e:	f6ff af52 	blt.w	8006f36 <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007098:	e046      	b.n	8007128 <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 800709a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	33b0      	adds	r3, #176	@ 0xb0
 80070a2:	443b      	add	r3, r7
 80070a4:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 80070a8:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80070ac:	3301      	adds	r3, #1
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	33b0      	adds	r3, #176	@ 0xb0
 80070b2:	443b      	add	r3, r7
 80070b4:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d92e      	bls.n	800711a <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 80070bc:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	33b0      	adds	r3, #176	@ 0xb0
 80070c4:	443b      	add	r3, r7
 80070c6:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80070ca:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 80070ce:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80070d2:	3301      	adds	r3, #1
 80070d4:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	33b0      	adds	r3, #176	@ 0xb0
 80070dc:	443b      	add	r3, r7
 80070de:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 80070e2:	0053      	lsls	r3, r2, #1
 80070e4:	33b0      	adds	r3, #176	@ 0xb0
 80070e6:	443b      	add	r3, r7
 80070e8:	460a      	mov	r2, r1
 80070ea:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 80070ee:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80070f2:	3301      	adds	r3, #1
 80070f4:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	33b0      	adds	r3, #176	@ 0xb0
 80070fc:	443b      	add	r3, r7
 80070fe:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007102:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00e      	beq.n	8007128 <hagl_fill_polygon+0x2a2>
                    i--;
 800710a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29b      	uxth	r3, r3
 8007114:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007118:	e006      	b.n	8007128 <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 800711a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800711e:	b29b      	uxth	r3, r3
 8007120:	3301      	adds	r3, #1
 8007122:	b29b      	uxth	r3, r3
 8007124:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007128:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 800712c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007130:	3b01      	subs	r3, #1
 8007132:	429a      	cmp	r2, r3
 8007134:	dbb1      	blt.n	800709a <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007136:	2300      	movs	r3, #0
 8007138:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 800713c:	e027      	b.n	800718e <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 800713e:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007142:	3301      	adds	r3, #1
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	33b0      	adds	r3, #176	@ 0xb0
 8007148:	443b      	add	r3, r7
 800714a:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 800714e:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	33b0      	adds	r3, #176	@ 0xb0
 8007156:	443b      	add	r3, r7
 8007158:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	b29b      	uxth	r3, r3
 8007160:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007164:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	33b0      	adds	r3, #176	@ 0xb0
 800716c:	443b      	add	r3, r7
 800716e:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007172:	b218      	sxth	r0, r3
 8007174:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8007178:	88bb      	ldrh	r3, [r7, #4]
 800717a:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 800717e:	f7ff f8c5 	bl	800630c <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007182:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007186:	3302      	adds	r3, #2
 8007188:	b29b      	uxth	r3, r3
 800718a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 800718e:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007192:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007196:	429a      	cmp	r2, r3
 8007198:	dbd1      	blt.n	800713e <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 800719a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800719e:	b29b      	uxth	r3, r3
 80071a0:	3301      	adds	r3, #1
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80071a8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80071ac:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 80071b0:	429a      	cmp	r2, r3
 80071b2:	f6ff aeb4 	blt.w	8006f1e <hagl_fill_polygon+0x98>
        }
    }
}
 80071b6:	bf00      	nop
 80071b8:	bf00      	nop
 80071ba:	37b0      	adds	r7, #176	@ 0xb0
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	461a      	mov	r2, r3
 80071ce:	4623      	mov	r3, r4
 80071d0:	80fb      	strh	r3, [r7, #6]
 80071d2:	4603      	mov	r3, r0
 80071d4:	80bb      	strh	r3, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	807b      	strh	r3, [r7, #2]
 80071da:	4613      	mov	r3, r2
 80071dc:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	81bb      	strh	r3, [r7, #12]
 80071e2:	88bb      	ldrh	r3, [r7, #4]
 80071e4:	81fb      	strh	r3, [r7, #14]
 80071e6:	887b      	ldrh	r3, [r7, #2]
 80071e8:	823b      	strh	r3, [r7, #16]
 80071ea:	883b      	ldrh	r3, [r7, #0]
 80071ec:	827b      	strh	r3, [r7, #18]
 80071ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071f0:	82bb      	strh	r3, [r7, #20]
 80071f2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80071f4:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 80071f6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80071f8:	f107 030c 	add.w	r3, r7, #12
 80071fc:	4619      	mov	r1, r3
 80071fe:	2003      	movs	r0, #3
 8007200:	f7ff fde1 	bl	8006dc6 <hagl_draw_polygon>
};
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	bd90      	pop	{r4, r7, pc}

0800720c <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 800720c:	b590      	push	{r4, r7, lr}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	4604      	mov	r4, r0
 8007214:	4608      	mov	r0, r1
 8007216:	4611      	mov	r1, r2
 8007218:	461a      	mov	r2, r3
 800721a:	4623      	mov	r3, r4
 800721c:	80fb      	strh	r3, [r7, #6]
 800721e:	4603      	mov	r3, r0
 8007220:	80bb      	strh	r3, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	807b      	strh	r3, [r7, #2]
 8007226:	4613      	mov	r3, r2
 8007228:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	81bb      	strh	r3, [r7, #12]
 800722e:	88bb      	ldrh	r3, [r7, #4]
 8007230:	81fb      	strh	r3, [r7, #14]
 8007232:	887b      	ldrh	r3, [r7, #2]
 8007234:	823b      	strh	r3, [r7, #16]
 8007236:	883b      	ldrh	r3, [r7, #0]
 8007238:	827b      	strh	r3, [r7, #18]
 800723a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800723c:	82bb      	strh	r3, [r7, #20]
 800723e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007240:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007242:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007244:	f107 030c 	add.w	r3, r7, #12
 8007248:	4619      	mov	r1, r3
 800724a:	2003      	movs	r0, #3
 800724c:	f7ff fe1b 	bl	8006e86 <hagl_fill_polygon>
}
 8007250:	bf00      	nop
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	bd90      	pop	{r4, r7, pc}

08007258 <atoi>:
 8007258:	220a      	movs	r2, #10
 800725a:	2100      	movs	r1, #0
 800725c:	f000 b888 	b.w	8007370 <strtol>

08007260 <mbstowcs>:
 8007260:	b510      	push	{r4, lr}
 8007262:	4603      	mov	r3, r0
 8007264:	b142      	cbz	r2, 8007278 <mbstowcs+0x18>
 8007266:	2000      	movs	r0, #0
 8007268:	5c0c      	ldrb	r4, [r1, r0]
 800726a:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
 800726e:	b114      	cbz	r4, 8007276 <mbstowcs+0x16>
 8007270:	3001      	adds	r0, #1
 8007272:	4290      	cmp	r0, r2
 8007274:	d1f8      	bne.n	8007268 <mbstowcs+0x8>
 8007276:	bd10      	pop	{r4, pc}
 8007278:	4610      	mov	r0, r2
 800727a:	e7fc      	b.n	8007276 <mbstowcs+0x16>

0800727c <_strtol_l.constprop.0>:
 800727c:	2b24      	cmp	r3, #36	@ 0x24
 800727e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007282:	4686      	mov	lr, r0
 8007284:	4690      	mov	r8, r2
 8007286:	d801      	bhi.n	800728c <_strtol_l.constprop.0+0x10>
 8007288:	2b01      	cmp	r3, #1
 800728a:	d106      	bne.n	800729a <_strtol_l.constprop.0+0x1e>
 800728c:	f000 fbd8 	bl	8007a40 <__errno>
 8007290:	2316      	movs	r3, #22
 8007292:	6003      	str	r3, [r0, #0]
 8007294:	2000      	movs	r0, #0
 8007296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729a:	4834      	ldr	r0, [pc, #208]	@ (800736c <_strtol_l.constprop.0+0xf0>)
 800729c:	460d      	mov	r5, r1
 800729e:	462a      	mov	r2, r5
 80072a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072a4:	5d06      	ldrb	r6, [r0, r4]
 80072a6:	f016 0608 	ands.w	r6, r6, #8
 80072aa:	d1f8      	bne.n	800729e <_strtol_l.constprop.0+0x22>
 80072ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80072ae:	d12d      	bne.n	800730c <_strtol_l.constprop.0+0x90>
 80072b0:	782c      	ldrb	r4, [r5, #0]
 80072b2:	2601      	movs	r6, #1
 80072b4:	1c95      	adds	r5, r2, #2
 80072b6:	f033 0210 	bics.w	r2, r3, #16
 80072ba:	d109      	bne.n	80072d0 <_strtol_l.constprop.0+0x54>
 80072bc:	2c30      	cmp	r4, #48	@ 0x30
 80072be:	d12a      	bne.n	8007316 <_strtol_l.constprop.0+0x9a>
 80072c0:	782a      	ldrb	r2, [r5, #0]
 80072c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072c6:	2a58      	cmp	r2, #88	@ 0x58
 80072c8:	d125      	bne.n	8007316 <_strtol_l.constprop.0+0x9a>
 80072ca:	786c      	ldrb	r4, [r5, #1]
 80072cc:	2310      	movs	r3, #16
 80072ce:	3502      	adds	r5, #2
 80072d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072d8:	2200      	movs	r2, #0
 80072da:	fbbc f9f3 	udiv	r9, ip, r3
 80072de:	4610      	mov	r0, r2
 80072e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80072e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072e8:	2f09      	cmp	r7, #9
 80072ea:	d81b      	bhi.n	8007324 <_strtol_l.constprop.0+0xa8>
 80072ec:	463c      	mov	r4, r7
 80072ee:	42a3      	cmp	r3, r4
 80072f0:	dd27      	ble.n	8007342 <_strtol_l.constprop.0+0xc6>
 80072f2:	1c57      	adds	r7, r2, #1
 80072f4:	d007      	beq.n	8007306 <_strtol_l.constprop.0+0x8a>
 80072f6:	4581      	cmp	r9, r0
 80072f8:	d320      	bcc.n	800733c <_strtol_l.constprop.0+0xc0>
 80072fa:	d101      	bne.n	8007300 <_strtol_l.constprop.0+0x84>
 80072fc:	45a2      	cmp	sl, r4
 80072fe:	db1d      	blt.n	800733c <_strtol_l.constprop.0+0xc0>
 8007300:	fb00 4003 	mla	r0, r0, r3, r4
 8007304:	2201      	movs	r2, #1
 8007306:	f815 4b01 	ldrb.w	r4, [r5], #1
 800730a:	e7eb      	b.n	80072e4 <_strtol_l.constprop.0+0x68>
 800730c:	2c2b      	cmp	r4, #43	@ 0x2b
 800730e:	bf04      	itt	eq
 8007310:	782c      	ldrbeq	r4, [r5, #0]
 8007312:	1c95      	addeq	r5, r2, #2
 8007314:	e7cf      	b.n	80072b6 <_strtol_l.constprop.0+0x3a>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1da      	bne.n	80072d0 <_strtol_l.constprop.0+0x54>
 800731a:	2c30      	cmp	r4, #48	@ 0x30
 800731c:	bf0c      	ite	eq
 800731e:	2308      	moveq	r3, #8
 8007320:	230a      	movne	r3, #10
 8007322:	e7d5      	b.n	80072d0 <_strtol_l.constprop.0+0x54>
 8007324:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007328:	2f19      	cmp	r7, #25
 800732a:	d801      	bhi.n	8007330 <_strtol_l.constprop.0+0xb4>
 800732c:	3c37      	subs	r4, #55	@ 0x37
 800732e:	e7de      	b.n	80072ee <_strtol_l.constprop.0+0x72>
 8007330:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007334:	2f19      	cmp	r7, #25
 8007336:	d804      	bhi.n	8007342 <_strtol_l.constprop.0+0xc6>
 8007338:	3c57      	subs	r4, #87	@ 0x57
 800733a:	e7d8      	b.n	80072ee <_strtol_l.constprop.0+0x72>
 800733c:	f04f 32ff 	mov.w	r2, #4294967295
 8007340:	e7e1      	b.n	8007306 <_strtol_l.constprop.0+0x8a>
 8007342:	1c53      	adds	r3, r2, #1
 8007344:	d108      	bne.n	8007358 <_strtol_l.constprop.0+0xdc>
 8007346:	2322      	movs	r3, #34	@ 0x22
 8007348:	f8ce 3000 	str.w	r3, [lr]
 800734c:	4660      	mov	r0, ip
 800734e:	f1b8 0f00 	cmp.w	r8, #0
 8007352:	d0a0      	beq.n	8007296 <_strtol_l.constprop.0+0x1a>
 8007354:	1e69      	subs	r1, r5, #1
 8007356:	e006      	b.n	8007366 <_strtol_l.constprop.0+0xea>
 8007358:	b106      	cbz	r6, 800735c <_strtol_l.constprop.0+0xe0>
 800735a:	4240      	negs	r0, r0
 800735c:	f1b8 0f00 	cmp.w	r8, #0
 8007360:	d099      	beq.n	8007296 <_strtol_l.constprop.0+0x1a>
 8007362:	2a00      	cmp	r2, #0
 8007364:	d1f6      	bne.n	8007354 <_strtol_l.constprop.0+0xd8>
 8007366:	f8c8 1000 	str.w	r1, [r8]
 800736a:	e794      	b.n	8007296 <_strtol_l.constprop.0+0x1a>
 800736c:	080120d1 	.word	0x080120d1

08007370 <strtol>:
 8007370:	4613      	mov	r3, r2
 8007372:	460a      	mov	r2, r1
 8007374:	4601      	mov	r1, r0
 8007376:	4802      	ldr	r0, [pc, #8]	@ (8007380 <strtol+0x10>)
 8007378:	6800      	ldr	r0, [r0, #0]
 800737a:	f7ff bf7f 	b.w	800727c <_strtol_l.constprop.0>
 800737e:	bf00      	nop
 8007380:	20000220 	.word	0x20000220

08007384 <_strtoul_l.constprop.0>:
 8007384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007388:	4e34      	ldr	r6, [pc, #208]	@ (800745c <_strtoul_l.constprop.0+0xd8>)
 800738a:	4686      	mov	lr, r0
 800738c:	460d      	mov	r5, r1
 800738e:	4628      	mov	r0, r5
 8007390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007394:	5d37      	ldrb	r7, [r6, r4]
 8007396:	f017 0708 	ands.w	r7, r7, #8
 800739a:	d1f8      	bne.n	800738e <_strtoul_l.constprop.0+0xa>
 800739c:	2c2d      	cmp	r4, #45	@ 0x2d
 800739e:	d12f      	bne.n	8007400 <_strtoul_l.constprop.0+0x7c>
 80073a0:	782c      	ldrb	r4, [r5, #0]
 80073a2:	2701      	movs	r7, #1
 80073a4:	1c85      	adds	r5, r0, #2
 80073a6:	f033 0010 	bics.w	r0, r3, #16
 80073aa:	d109      	bne.n	80073c0 <_strtoul_l.constprop.0+0x3c>
 80073ac:	2c30      	cmp	r4, #48	@ 0x30
 80073ae:	d12c      	bne.n	800740a <_strtoul_l.constprop.0+0x86>
 80073b0:	7828      	ldrb	r0, [r5, #0]
 80073b2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80073b6:	2858      	cmp	r0, #88	@ 0x58
 80073b8:	d127      	bne.n	800740a <_strtoul_l.constprop.0+0x86>
 80073ba:	786c      	ldrb	r4, [r5, #1]
 80073bc:	2310      	movs	r3, #16
 80073be:	3502      	adds	r5, #2
 80073c0:	f04f 38ff 	mov.w	r8, #4294967295
 80073c4:	2600      	movs	r6, #0
 80073c6:	fbb8 f8f3 	udiv	r8, r8, r3
 80073ca:	fb03 f908 	mul.w	r9, r3, r8
 80073ce:	ea6f 0909 	mvn.w	r9, r9
 80073d2:	4630      	mov	r0, r6
 80073d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80073d8:	f1bc 0f09 	cmp.w	ip, #9
 80073dc:	d81c      	bhi.n	8007418 <_strtoul_l.constprop.0+0x94>
 80073de:	4664      	mov	r4, ip
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	dd2a      	ble.n	800743a <_strtoul_l.constprop.0+0xb6>
 80073e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80073e8:	d007      	beq.n	80073fa <_strtoul_l.constprop.0+0x76>
 80073ea:	4580      	cmp	r8, r0
 80073ec:	d322      	bcc.n	8007434 <_strtoul_l.constprop.0+0xb0>
 80073ee:	d101      	bne.n	80073f4 <_strtoul_l.constprop.0+0x70>
 80073f0:	45a1      	cmp	r9, r4
 80073f2:	db1f      	blt.n	8007434 <_strtoul_l.constprop.0+0xb0>
 80073f4:	fb00 4003 	mla	r0, r0, r3, r4
 80073f8:	2601      	movs	r6, #1
 80073fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073fe:	e7e9      	b.n	80073d4 <_strtoul_l.constprop.0+0x50>
 8007400:	2c2b      	cmp	r4, #43	@ 0x2b
 8007402:	bf04      	itt	eq
 8007404:	782c      	ldrbeq	r4, [r5, #0]
 8007406:	1c85      	addeq	r5, r0, #2
 8007408:	e7cd      	b.n	80073a6 <_strtoul_l.constprop.0+0x22>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1d8      	bne.n	80073c0 <_strtoul_l.constprop.0+0x3c>
 800740e:	2c30      	cmp	r4, #48	@ 0x30
 8007410:	bf0c      	ite	eq
 8007412:	2308      	moveq	r3, #8
 8007414:	230a      	movne	r3, #10
 8007416:	e7d3      	b.n	80073c0 <_strtoul_l.constprop.0+0x3c>
 8007418:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800741c:	f1bc 0f19 	cmp.w	ip, #25
 8007420:	d801      	bhi.n	8007426 <_strtoul_l.constprop.0+0xa2>
 8007422:	3c37      	subs	r4, #55	@ 0x37
 8007424:	e7dc      	b.n	80073e0 <_strtoul_l.constprop.0+0x5c>
 8007426:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800742a:	f1bc 0f19 	cmp.w	ip, #25
 800742e:	d804      	bhi.n	800743a <_strtoul_l.constprop.0+0xb6>
 8007430:	3c57      	subs	r4, #87	@ 0x57
 8007432:	e7d5      	b.n	80073e0 <_strtoul_l.constprop.0+0x5c>
 8007434:	f04f 36ff 	mov.w	r6, #4294967295
 8007438:	e7df      	b.n	80073fa <_strtoul_l.constprop.0+0x76>
 800743a:	1c73      	adds	r3, r6, #1
 800743c:	d106      	bne.n	800744c <_strtoul_l.constprop.0+0xc8>
 800743e:	2322      	movs	r3, #34	@ 0x22
 8007440:	f8ce 3000 	str.w	r3, [lr]
 8007444:	4630      	mov	r0, r6
 8007446:	b932      	cbnz	r2, 8007456 <_strtoul_l.constprop.0+0xd2>
 8007448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800744c:	b107      	cbz	r7, 8007450 <_strtoul_l.constprop.0+0xcc>
 800744e:	4240      	negs	r0, r0
 8007450:	2a00      	cmp	r2, #0
 8007452:	d0f9      	beq.n	8007448 <_strtoul_l.constprop.0+0xc4>
 8007454:	b106      	cbz	r6, 8007458 <_strtoul_l.constprop.0+0xd4>
 8007456:	1e69      	subs	r1, r5, #1
 8007458:	6011      	str	r1, [r2, #0]
 800745a:	e7f5      	b.n	8007448 <_strtoul_l.constprop.0+0xc4>
 800745c:	080120d1 	.word	0x080120d1

08007460 <strtoul>:
 8007460:	4613      	mov	r3, r2
 8007462:	460a      	mov	r2, r1
 8007464:	4601      	mov	r1, r0
 8007466:	4802      	ldr	r0, [pc, #8]	@ (8007470 <strtoul+0x10>)
 8007468:	6800      	ldr	r0, [r0, #0]
 800746a:	f7ff bf8b 	b.w	8007384 <_strtoul_l.constprop.0>
 800746e:	bf00      	nop
 8007470:	20000220 	.word	0x20000220

08007474 <__sflush_r>:
 8007474:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747c:	0716      	lsls	r6, r2, #28
 800747e:	4605      	mov	r5, r0
 8007480:	460c      	mov	r4, r1
 8007482:	d454      	bmi.n	800752e <__sflush_r+0xba>
 8007484:	684b      	ldr	r3, [r1, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	dc02      	bgt.n	8007490 <__sflush_r+0x1c>
 800748a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800748c:	2b00      	cmp	r3, #0
 800748e:	dd48      	ble.n	8007522 <__sflush_r+0xae>
 8007490:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007492:	2e00      	cmp	r6, #0
 8007494:	d045      	beq.n	8007522 <__sflush_r+0xae>
 8007496:	2300      	movs	r3, #0
 8007498:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800749c:	682f      	ldr	r7, [r5, #0]
 800749e:	6a21      	ldr	r1, [r4, #32]
 80074a0:	602b      	str	r3, [r5, #0]
 80074a2:	d030      	beq.n	8007506 <__sflush_r+0x92>
 80074a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	0759      	lsls	r1, r3, #29
 80074aa:	d505      	bpl.n	80074b8 <__sflush_r+0x44>
 80074ac:	6863      	ldr	r3, [r4, #4]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074b2:	b10b      	cbz	r3, 80074b8 <__sflush_r+0x44>
 80074b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074b6:	1ad2      	subs	r2, r2, r3
 80074b8:	2300      	movs	r3, #0
 80074ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074bc:	6a21      	ldr	r1, [r4, #32]
 80074be:	4628      	mov	r0, r5
 80074c0:	47b0      	blx	r6
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	d106      	bne.n	80074d6 <__sflush_r+0x62>
 80074c8:	6829      	ldr	r1, [r5, #0]
 80074ca:	291d      	cmp	r1, #29
 80074cc:	d82b      	bhi.n	8007526 <__sflush_r+0xb2>
 80074ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007578 <__sflush_r+0x104>)
 80074d0:	410a      	asrs	r2, r1
 80074d2:	07d6      	lsls	r6, r2, #31
 80074d4:	d427      	bmi.n	8007526 <__sflush_r+0xb2>
 80074d6:	2200      	movs	r2, #0
 80074d8:	6062      	str	r2, [r4, #4]
 80074da:	04d9      	lsls	r1, r3, #19
 80074dc:	6922      	ldr	r2, [r4, #16]
 80074de:	6022      	str	r2, [r4, #0]
 80074e0:	d504      	bpl.n	80074ec <__sflush_r+0x78>
 80074e2:	1c42      	adds	r2, r0, #1
 80074e4:	d101      	bne.n	80074ea <__sflush_r+0x76>
 80074e6:	682b      	ldr	r3, [r5, #0]
 80074e8:	b903      	cbnz	r3, 80074ec <__sflush_r+0x78>
 80074ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80074ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074ee:	602f      	str	r7, [r5, #0]
 80074f0:	b1b9      	cbz	r1, 8007522 <__sflush_r+0xae>
 80074f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074f6:	4299      	cmp	r1, r3
 80074f8:	d002      	beq.n	8007500 <__sflush_r+0x8c>
 80074fa:	4628      	mov	r0, r5
 80074fc:	f000 fafa 	bl	8007af4 <_free_r>
 8007500:	2300      	movs	r3, #0
 8007502:	6363      	str	r3, [r4, #52]	@ 0x34
 8007504:	e00d      	b.n	8007522 <__sflush_r+0xae>
 8007506:	2301      	movs	r3, #1
 8007508:	4628      	mov	r0, r5
 800750a:	47b0      	blx	r6
 800750c:	4602      	mov	r2, r0
 800750e:	1c50      	adds	r0, r2, #1
 8007510:	d1c9      	bne.n	80074a6 <__sflush_r+0x32>
 8007512:	682b      	ldr	r3, [r5, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0c6      	beq.n	80074a6 <__sflush_r+0x32>
 8007518:	2b1d      	cmp	r3, #29
 800751a:	d001      	beq.n	8007520 <__sflush_r+0xac>
 800751c:	2b16      	cmp	r3, #22
 800751e:	d11e      	bne.n	800755e <__sflush_r+0xea>
 8007520:	602f      	str	r7, [r5, #0]
 8007522:	2000      	movs	r0, #0
 8007524:	e022      	b.n	800756c <__sflush_r+0xf8>
 8007526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800752a:	b21b      	sxth	r3, r3
 800752c:	e01b      	b.n	8007566 <__sflush_r+0xf2>
 800752e:	690f      	ldr	r7, [r1, #16]
 8007530:	2f00      	cmp	r7, #0
 8007532:	d0f6      	beq.n	8007522 <__sflush_r+0xae>
 8007534:	0793      	lsls	r3, r2, #30
 8007536:	680e      	ldr	r6, [r1, #0]
 8007538:	bf08      	it	eq
 800753a:	694b      	ldreq	r3, [r1, #20]
 800753c:	600f      	str	r7, [r1, #0]
 800753e:	bf18      	it	ne
 8007540:	2300      	movne	r3, #0
 8007542:	eba6 0807 	sub.w	r8, r6, r7
 8007546:	608b      	str	r3, [r1, #8]
 8007548:	f1b8 0f00 	cmp.w	r8, #0
 800754c:	dde9      	ble.n	8007522 <__sflush_r+0xae>
 800754e:	6a21      	ldr	r1, [r4, #32]
 8007550:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007552:	4643      	mov	r3, r8
 8007554:	463a      	mov	r2, r7
 8007556:	4628      	mov	r0, r5
 8007558:	47b0      	blx	r6
 800755a:	2800      	cmp	r0, #0
 800755c:	dc08      	bgt.n	8007570 <__sflush_r+0xfc>
 800755e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007570:	4407      	add	r7, r0
 8007572:	eba8 0800 	sub.w	r8, r8, r0
 8007576:	e7e7      	b.n	8007548 <__sflush_r+0xd4>
 8007578:	dfbffffe 	.word	0xdfbffffe

0800757c <_fflush_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	690b      	ldr	r3, [r1, #16]
 8007580:	4605      	mov	r5, r0
 8007582:	460c      	mov	r4, r1
 8007584:	b913      	cbnz	r3, 800758c <_fflush_r+0x10>
 8007586:	2500      	movs	r5, #0
 8007588:	4628      	mov	r0, r5
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	b118      	cbz	r0, 8007596 <_fflush_r+0x1a>
 800758e:	6a03      	ldr	r3, [r0, #32]
 8007590:	b90b      	cbnz	r3, 8007596 <_fflush_r+0x1a>
 8007592:	f000 f8a7 	bl	80076e4 <__sinit>
 8007596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0f3      	beq.n	8007586 <_fflush_r+0xa>
 800759e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075a0:	07d0      	lsls	r0, r2, #31
 80075a2:	d404      	bmi.n	80075ae <_fflush_r+0x32>
 80075a4:	0599      	lsls	r1, r3, #22
 80075a6:	d402      	bmi.n	80075ae <_fflush_r+0x32>
 80075a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075aa:	f000 fa74 	bl	8007a96 <__retarget_lock_acquire_recursive>
 80075ae:	4628      	mov	r0, r5
 80075b0:	4621      	mov	r1, r4
 80075b2:	f7ff ff5f 	bl	8007474 <__sflush_r>
 80075b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075b8:	07da      	lsls	r2, r3, #31
 80075ba:	4605      	mov	r5, r0
 80075bc:	d4e4      	bmi.n	8007588 <_fflush_r+0xc>
 80075be:	89a3      	ldrh	r3, [r4, #12]
 80075c0:	059b      	lsls	r3, r3, #22
 80075c2:	d4e1      	bmi.n	8007588 <_fflush_r+0xc>
 80075c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075c6:	f000 fa67 	bl	8007a98 <__retarget_lock_release_recursive>
 80075ca:	e7dd      	b.n	8007588 <_fflush_r+0xc>

080075cc <std>:
 80075cc:	2300      	movs	r3, #0
 80075ce:	b510      	push	{r4, lr}
 80075d0:	4604      	mov	r4, r0
 80075d2:	e9c0 3300 	strd	r3, r3, [r0]
 80075d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075da:	6083      	str	r3, [r0, #8]
 80075dc:	8181      	strh	r1, [r0, #12]
 80075de:	6643      	str	r3, [r0, #100]	@ 0x64
 80075e0:	81c2      	strh	r2, [r0, #14]
 80075e2:	6183      	str	r3, [r0, #24]
 80075e4:	4619      	mov	r1, r3
 80075e6:	2208      	movs	r2, #8
 80075e8:	305c      	adds	r0, #92	@ 0x5c
 80075ea:	f000 f94d 	bl	8007888 <memset>
 80075ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <std+0x58>)
 80075f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <std+0x5c>)
 80075f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075f6:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <std+0x60>)
 80075f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007630 <std+0x64>)
 80075fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <std+0x68>)
 8007600:	6224      	str	r4, [r4, #32]
 8007602:	429c      	cmp	r4, r3
 8007604:	d006      	beq.n	8007614 <std+0x48>
 8007606:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800760a:	4294      	cmp	r4, r2
 800760c:	d002      	beq.n	8007614 <std+0x48>
 800760e:	33d0      	adds	r3, #208	@ 0xd0
 8007610:	429c      	cmp	r4, r3
 8007612:	d105      	bne.n	8007620 <std+0x54>
 8007614:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800761c:	f000 ba3a 	b.w	8007a94 <__retarget_lock_init_recursive>
 8007620:	bd10      	pop	{r4, pc}
 8007622:	bf00      	nop
 8007624:	08007751 	.word	0x08007751
 8007628:	08007773 	.word	0x08007773
 800762c:	080077ab 	.word	0x080077ab
 8007630:	080077cf 	.word	0x080077cf
 8007634:	2000adb8 	.word	0x2000adb8

08007638 <stdio_exit_handler>:
 8007638:	4a02      	ldr	r2, [pc, #8]	@ (8007644 <stdio_exit_handler+0xc>)
 800763a:	4903      	ldr	r1, [pc, #12]	@ (8007648 <stdio_exit_handler+0x10>)
 800763c:	4803      	ldr	r0, [pc, #12]	@ (800764c <stdio_exit_handler+0x14>)
 800763e:	f000 b869 	b.w	8007714 <_fwalk_sglue>
 8007642:	bf00      	nop
 8007644:	20000214 	.word	0x20000214
 8007648:	0800757d 	.word	0x0800757d
 800764c:	20000224 	.word	0x20000224

08007650 <cleanup_stdio>:
 8007650:	6841      	ldr	r1, [r0, #4]
 8007652:	4b0c      	ldr	r3, [pc, #48]	@ (8007684 <cleanup_stdio+0x34>)
 8007654:	4299      	cmp	r1, r3
 8007656:	b510      	push	{r4, lr}
 8007658:	4604      	mov	r4, r0
 800765a:	d001      	beq.n	8007660 <cleanup_stdio+0x10>
 800765c:	f7ff ff8e 	bl	800757c <_fflush_r>
 8007660:	68a1      	ldr	r1, [r4, #8]
 8007662:	4b09      	ldr	r3, [pc, #36]	@ (8007688 <cleanup_stdio+0x38>)
 8007664:	4299      	cmp	r1, r3
 8007666:	d002      	beq.n	800766e <cleanup_stdio+0x1e>
 8007668:	4620      	mov	r0, r4
 800766a:	f7ff ff87 	bl	800757c <_fflush_r>
 800766e:	68e1      	ldr	r1, [r4, #12]
 8007670:	4b06      	ldr	r3, [pc, #24]	@ (800768c <cleanup_stdio+0x3c>)
 8007672:	4299      	cmp	r1, r3
 8007674:	d004      	beq.n	8007680 <cleanup_stdio+0x30>
 8007676:	4620      	mov	r0, r4
 8007678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800767c:	f7ff bf7e 	b.w	800757c <_fflush_r>
 8007680:	bd10      	pop	{r4, pc}
 8007682:	bf00      	nop
 8007684:	2000adb8 	.word	0x2000adb8
 8007688:	2000ae20 	.word	0x2000ae20
 800768c:	2000ae88 	.word	0x2000ae88

08007690 <global_stdio_init.part.0>:
 8007690:	b510      	push	{r4, lr}
 8007692:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <global_stdio_init.part.0+0x30>)
 8007694:	4c0b      	ldr	r4, [pc, #44]	@ (80076c4 <global_stdio_init.part.0+0x34>)
 8007696:	4a0c      	ldr	r2, [pc, #48]	@ (80076c8 <global_stdio_init.part.0+0x38>)
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	4620      	mov	r0, r4
 800769c:	2200      	movs	r2, #0
 800769e:	2104      	movs	r1, #4
 80076a0:	f7ff ff94 	bl	80075cc <std>
 80076a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076a8:	2201      	movs	r2, #1
 80076aa:	2109      	movs	r1, #9
 80076ac:	f7ff ff8e 	bl	80075cc <std>
 80076b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076b4:	2202      	movs	r2, #2
 80076b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ba:	2112      	movs	r1, #18
 80076bc:	f7ff bf86 	b.w	80075cc <std>
 80076c0:	2000aef0 	.word	0x2000aef0
 80076c4:	2000adb8 	.word	0x2000adb8
 80076c8:	08007639 	.word	0x08007639

080076cc <__sfp_lock_acquire>:
 80076cc:	4801      	ldr	r0, [pc, #4]	@ (80076d4 <__sfp_lock_acquire+0x8>)
 80076ce:	f000 b9e2 	b.w	8007a96 <__retarget_lock_acquire_recursive>
 80076d2:	bf00      	nop
 80076d4:	2000aef9 	.word	0x2000aef9

080076d8 <__sfp_lock_release>:
 80076d8:	4801      	ldr	r0, [pc, #4]	@ (80076e0 <__sfp_lock_release+0x8>)
 80076da:	f000 b9dd 	b.w	8007a98 <__retarget_lock_release_recursive>
 80076de:	bf00      	nop
 80076e0:	2000aef9 	.word	0x2000aef9

080076e4 <__sinit>:
 80076e4:	b510      	push	{r4, lr}
 80076e6:	4604      	mov	r4, r0
 80076e8:	f7ff fff0 	bl	80076cc <__sfp_lock_acquire>
 80076ec:	6a23      	ldr	r3, [r4, #32]
 80076ee:	b11b      	cbz	r3, 80076f8 <__sinit+0x14>
 80076f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f4:	f7ff bff0 	b.w	80076d8 <__sfp_lock_release>
 80076f8:	4b04      	ldr	r3, [pc, #16]	@ (800770c <__sinit+0x28>)
 80076fa:	6223      	str	r3, [r4, #32]
 80076fc:	4b04      	ldr	r3, [pc, #16]	@ (8007710 <__sinit+0x2c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1f5      	bne.n	80076f0 <__sinit+0xc>
 8007704:	f7ff ffc4 	bl	8007690 <global_stdio_init.part.0>
 8007708:	e7f2      	b.n	80076f0 <__sinit+0xc>
 800770a:	bf00      	nop
 800770c:	08007651 	.word	0x08007651
 8007710:	2000aef0 	.word	0x2000aef0

08007714 <_fwalk_sglue>:
 8007714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007718:	4607      	mov	r7, r0
 800771a:	4688      	mov	r8, r1
 800771c:	4614      	mov	r4, r2
 800771e:	2600      	movs	r6, #0
 8007720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007724:	f1b9 0901 	subs.w	r9, r9, #1
 8007728:	d505      	bpl.n	8007736 <_fwalk_sglue+0x22>
 800772a:	6824      	ldr	r4, [r4, #0]
 800772c:	2c00      	cmp	r4, #0
 800772e:	d1f7      	bne.n	8007720 <_fwalk_sglue+0xc>
 8007730:	4630      	mov	r0, r6
 8007732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d907      	bls.n	800774c <_fwalk_sglue+0x38>
 800773c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007740:	3301      	adds	r3, #1
 8007742:	d003      	beq.n	800774c <_fwalk_sglue+0x38>
 8007744:	4629      	mov	r1, r5
 8007746:	4638      	mov	r0, r7
 8007748:	47c0      	blx	r8
 800774a:	4306      	orrs	r6, r0
 800774c:	3568      	adds	r5, #104	@ 0x68
 800774e:	e7e9      	b.n	8007724 <_fwalk_sglue+0x10>

08007750 <__sread>:
 8007750:	b510      	push	{r4, lr}
 8007752:	460c      	mov	r4, r1
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	f000 f94e 	bl	80079f8 <_read_r>
 800775c:	2800      	cmp	r0, #0
 800775e:	bfab      	itete	ge
 8007760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007762:	89a3      	ldrhlt	r3, [r4, #12]
 8007764:	181b      	addge	r3, r3, r0
 8007766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800776a:	bfac      	ite	ge
 800776c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800776e:	81a3      	strhlt	r3, [r4, #12]
 8007770:	bd10      	pop	{r4, pc}

08007772 <__swrite>:
 8007772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007776:	461f      	mov	r7, r3
 8007778:	898b      	ldrh	r3, [r1, #12]
 800777a:	05db      	lsls	r3, r3, #23
 800777c:	4605      	mov	r5, r0
 800777e:	460c      	mov	r4, r1
 8007780:	4616      	mov	r6, r2
 8007782:	d505      	bpl.n	8007790 <__swrite+0x1e>
 8007784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007788:	2302      	movs	r3, #2
 800778a:	2200      	movs	r2, #0
 800778c:	f000 f922 	bl	80079d4 <_lseek_r>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	4632      	mov	r2, r6
 800779e:	463b      	mov	r3, r7
 80077a0:	4628      	mov	r0, r5
 80077a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077a6:	f000 b939 	b.w	8007a1c <_write_r>

080077aa <__sseek>:
 80077aa:	b510      	push	{r4, lr}
 80077ac:	460c      	mov	r4, r1
 80077ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b2:	f000 f90f 	bl	80079d4 <_lseek_r>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	bf15      	itete	ne
 80077bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077c6:	81a3      	strheq	r3, [r4, #12]
 80077c8:	bf18      	it	ne
 80077ca:	81a3      	strhne	r3, [r4, #12]
 80077cc:	bd10      	pop	{r4, pc}

080077ce <__sclose>:
 80077ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d2:	f000 b8ef 	b.w	80079b4 <_close_r>

080077d6 <_vsniprintf_r>:
 80077d6:	b530      	push	{r4, r5, lr}
 80077d8:	4614      	mov	r4, r2
 80077da:	2c00      	cmp	r4, #0
 80077dc:	b09b      	sub	sp, #108	@ 0x6c
 80077de:	4605      	mov	r5, r0
 80077e0:	461a      	mov	r2, r3
 80077e2:	da05      	bge.n	80077f0 <_vsniprintf_r+0x1a>
 80077e4:	238b      	movs	r3, #139	@ 0x8b
 80077e6:	6003      	str	r3, [r0, #0]
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ec:	b01b      	add	sp, #108	@ 0x6c
 80077ee:	bd30      	pop	{r4, r5, pc}
 80077f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80077f4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80077f8:	bf14      	ite	ne
 80077fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077fe:	4623      	moveq	r3, r4
 8007800:	9302      	str	r3, [sp, #8]
 8007802:	9305      	str	r3, [sp, #20]
 8007804:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007808:	9100      	str	r1, [sp, #0]
 800780a:	9104      	str	r1, [sp, #16]
 800780c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007810:	4669      	mov	r1, sp
 8007812:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007814:	f000 faca 	bl	8007dac <_svfiprintf_r>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	bfbc      	itt	lt
 800781c:	238b      	movlt	r3, #139	@ 0x8b
 800781e:	602b      	strlt	r3, [r5, #0]
 8007820:	2c00      	cmp	r4, #0
 8007822:	d0e3      	beq.n	80077ec <_vsniprintf_r+0x16>
 8007824:	9b00      	ldr	r3, [sp, #0]
 8007826:	2200      	movs	r2, #0
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	e7df      	b.n	80077ec <_vsniprintf_r+0x16>

0800782c <vsniprintf>:
 800782c:	b507      	push	{r0, r1, r2, lr}
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	4613      	mov	r3, r2
 8007832:	460a      	mov	r2, r1
 8007834:	4601      	mov	r1, r0
 8007836:	4803      	ldr	r0, [pc, #12]	@ (8007844 <vsniprintf+0x18>)
 8007838:	6800      	ldr	r0, [r0, #0]
 800783a:	f7ff ffcc 	bl	80077d6 <_vsniprintf_r>
 800783e:	b003      	add	sp, #12
 8007840:	f85d fb04 	ldr.w	pc, [sp], #4
 8007844:	20000220 	.word	0x20000220

08007848 <_vsiprintf_r>:
 8007848:	b500      	push	{lr}
 800784a:	b09b      	sub	sp, #108	@ 0x6c
 800784c:	9100      	str	r1, [sp, #0]
 800784e:	9104      	str	r1, [sp, #16]
 8007850:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007854:	9105      	str	r1, [sp, #20]
 8007856:	9102      	str	r1, [sp, #8]
 8007858:	4905      	ldr	r1, [pc, #20]	@ (8007870 <_vsiprintf_r+0x28>)
 800785a:	9103      	str	r1, [sp, #12]
 800785c:	4669      	mov	r1, sp
 800785e:	f000 faa5 	bl	8007dac <_svfiprintf_r>
 8007862:	9b00      	ldr	r3, [sp, #0]
 8007864:	2200      	movs	r2, #0
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	b01b      	add	sp, #108	@ 0x6c
 800786a:	f85d fb04 	ldr.w	pc, [sp], #4
 800786e:	bf00      	nop
 8007870:	ffff0208 	.word	0xffff0208

08007874 <vsiprintf>:
 8007874:	4613      	mov	r3, r2
 8007876:	460a      	mov	r2, r1
 8007878:	4601      	mov	r1, r0
 800787a:	4802      	ldr	r0, [pc, #8]	@ (8007884 <vsiprintf+0x10>)
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	f7ff bfe3 	b.w	8007848 <_vsiprintf_r>
 8007882:	bf00      	nop
 8007884:	20000220 	.word	0x20000220

08007888 <memset>:
 8007888:	4402      	add	r2, r0
 800788a:	4603      	mov	r3, r0
 800788c:	4293      	cmp	r3, r2
 800788e:	d100      	bne.n	8007892 <memset+0xa>
 8007890:	4770      	bx	lr
 8007892:	f803 1b01 	strb.w	r1, [r3], #1
 8007896:	e7f9      	b.n	800788c <memset+0x4>

08007898 <strchr>:
 8007898:	b2c9      	uxtb	r1, r1
 800789a:	4603      	mov	r3, r0
 800789c:	4618      	mov	r0, r3
 800789e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078a2:	b112      	cbz	r2, 80078aa <strchr+0x12>
 80078a4:	428a      	cmp	r2, r1
 80078a6:	d1f9      	bne.n	800789c <strchr+0x4>
 80078a8:	4770      	bx	lr
 80078aa:	2900      	cmp	r1, #0
 80078ac:	bf18      	it	ne
 80078ae:	2000      	movne	r0, #0
 80078b0:	4770      	bx	lr

080078b2 <strncmp>:
 80078b2:	b510      	push	{r4, lr}
 80078b4:	b16a      	cbz	r2, 80078d2 <strncmp+0x20>
 80078b6:	3901      	subs	r1, #1
 80078b8:	1884      	adds	r4, r0, r2
 80078ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d103      	bne.n	80078ce <strncmp+0x1c>
 80078c6:	42a0      	cmp	r0, r4
 80078c8:	d001      	beq.n	80078ce <strncmp+0x1c>
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	d1f5      	bne.n	80078ba <strncmp+0x8>
 80078ce:	1ad0      	subs	r0, r2, r3
 80078d0:	bd10      	pop	{r4, pc}
 80078d2:	4610      	mov	r0, r2
 80078d4:	e7fc      	b.n	80078d0 <strncmp+0x1e>

080078d6 <strncpy>:
 80078d6:	b510      	push	{r4, lr}
 80078d8:	3901      	subs	r1, #1
 80078da:	4603      	mov	r3, r0
 80078dc:	b132      	cbz	r2, 80078ec <strncpy+0x16>
 80078de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80078e2:	f803 4b01 	strb.w	r4, [r3], #1
 80078e6:	3a01      	subs	r2, #1
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	d1f7      	bne.n	80078dc <strncpy+0x6>
 80078ec:	441a      	add	r2, r3
 80078ee:	2100      	movs	r1, #0
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d100      	bne.n	80078f6 <strncpy+0x20>
 80078f4:	bd10      	pop	{r4, pc}
 80078f6:	f803 1b01 	strb.w	r1, [r3], #1
 80078fa:	e7f9      	b.n	80078f0 <strncpy+0x1a>

080078fc <strtok>:
 80078fc:	4b16      	ldr	r3, [pc, #88]	@ (8007958 <strtok+0x5c>)
 80078fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007902:	681f      	ldr	r7, [r3, #0]
 8007904:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007906:	4605      	mov	r5, r0
 8007908:	460e      	mov	r6, r1
 800790a:	b9ec      	cbnz	r4, 8007948 <strtok+0x4c>
 800790c:	2050      	movs	r0, #80	@ 0x50
 800790e:	f000 f93b 	bl	8007b88 <malloc>
 8007912:	4602      	mov	r2, r0
 8007914:	6478      	str	r0, [r7, #68]	@ 0x44
 8007916:	b920      	cbnz	r0, 8007922 <strtok+0x26>
 8007918:	4b10      	ldr	r3, [pc, #64]	@ (800795c <strtok+0x60>)
 800791a:	4811      	ldr	r0, [pc, #68]	@ (8007960 <strtok+0x64>)
 800791c:	215b      	movs	r1, #91	@ 0x5b
 800791e:	f000 f8cb 	bl	8007ab8 <__assert_func>
 8007922:	e9c0 4400 	strd	r4, r4, [r0]
 8007926:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800792a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800792e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007932:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007936:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800793a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800793e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007942:	6184      	str	r4, [r0, #24]
 8007944:	7704      	strb	r4, [r0, #28]
 8007946:	6244      	str	r4, [r0, #36]	@ 0x24
 8007948:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	2301      	movs	r3, #1
 8007950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007954:	f000 b806 	b.w	8007964 <__strtok_r>
 8007958:	20000220 	.word	0x20000220
 800795c:	080121d1 	.word	0x080121d1
 8007960:	080121e8 	.word	0x080121e8

08007964 <__strtok_r>:
 8007964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007966:	4604      	mov	r4, r0
 8007968:	b908      	cbnz	r0, 800796e <__strtok_r+0xa>
 800796a:	6814      	ldr	r4, [r2, #0]
 800796c:	b144      	cbz	r4, 8007980 <__strtok_r+0x1c>
 800796e:	4620      	mov	r0, r4
 8007970:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007974:	460f      	mov	r7, r1
 8007976:	f817 6b01 	ldrb.w	r6, [r7], #1
 800797a:	b91e      	cbnz	r6, 8007984 <__strtok_r+0x20>
 800797c:	b965      	cbnz	r5, 8007998 <__strtok_r+0x34>
 800797e:	6015      	str	r5, [r2, #0]
 8007980:	2000      	movs	r0, #0
 8007982:	e005      	b.n	8007990 <__strtok_r+0x2c>
 8007984:	42b5      	cmp	r5, r6
 8007986:	d1f6      	bne.n	8007976 <__strtok_r+0x12>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f0      	bne.n	800796e <__strtok_r+0xa>
 800798c:	6014      	str	r4, [r2, #0]
 800798e:	7003      	strb	r3, [r0, #0]
 8007990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007992:	461c      	mov	r4, r3
 8007994:	e00c      	b.n	80079b0 <__strtok_r+0x4c>
 8007996:	b915      	cbnz	r5, 800799e <__strtok_r+0x3a>
 8007998:	f814 3b01 	ldrb.w	r3, [r4], #1
 800799c:	460e      	mov	r6, r1
 800799e:	f816 5b01 	ldrb.w	r5, [r6], #1
 80079a2:	42ab      	cmp	r3, r5
 80079a4:	d1f7      	bne.n	8007996 <__strtok_r+0x32>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0f3      	beq.n	8007992 <__strtok_r+0x2e>
 80079aa:	2300      	movs	r3, #0
 80079ac:	f804 3c01 	strb.w	r3, [r4, #-1]
 80079b0:	6014      	str	r4, [r2, #0]
 80079b2:	e7ed      	b.n	8007990 <__strtok_r+0x2c>

080079b4 <_close_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d06      	ldr	r5, [pc, #24]	@ (80079d0 <_close_r+0x1c>)
 80079b8:	2300      	movs	r3, #0
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	602b      	str	r3, [r5, #0]
 80079c0:	f7fa f9a4 	bl	8001d0c <_close>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_close_r+0x1a>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_close_r+0x1a>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	2000aef4 	.word	0x2000aef4

080079d4 <_lseek_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4d07      	ldr	r5, [pc, #28]	@ (80079f4 <_lseek_r+0x20>)
 80079d8:	4604      	mov	r4, r0
 80079da:	4608      	mov	r0, r1
 80079dc:	4611      	mov	r1, r2
 80079de:	2200      	movs	r2, #0
 80079e0:	602a      	str	r2, [r5, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	f7fa f9b9 	bl	8001d5a <_lseek>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_lseek_r+0x1e>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_lseek_r+0x1e>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	2000aef4 	.word	0x2000aef4

080079f8 <_read_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d07      	ldr	r5, [pc, #28]	@ (8007a18 <_read_r+0x20>)
 80079fc:	4604      	mov	r4, r0
 80079fe:	4608      	mov	r0, r1
 8007a00:	4611      	mov	r1, r2
 8007a02:	2200      	movs	r2, #0
 8007a04:	602a      	str	r2, [r5, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f7fa f947 	bl	8001c9a <_read>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_read_r+0x1e>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_read_r+0x1e>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	2000aef4 	.word	0x2000aef4

08007a1c <_write_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4d07      	ldr	r5, [pc, #28]	@ (8007a3c <_write_r+0x20>)
 8007a20:	4604      	mov	r4, r0
 8007a22:	4608      	mov	r0, r1
 8007a24:	4611      	mov	r1, r2
 8007a26:	2200      	movs	r2, #0
 8007a28:	602a      	str	r2, [r5, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f7fa f952 	bl	8001cd4 <_write>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_write_r+0x1e>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_write_r+0x1e>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	2000aef4 	.word	0x2000aef4

08007a40 <__errno>:
 8007a40:	4b01      	ldr	r3, [pc, #4]	@ (8007a48 <__errno+0x8>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	20000220 	.word	0x20000220

08007a4c <__libc_init_array>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8007a84 <__libc_init_array+0x38>)
 8007a50:	4c0d      	ldr	r4, [pc, #52]	@ (8007a88 <__libc_init_array+0x3c>)
 8007a52:	1b64      	subs	r4, r4, r5
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	2600      	movs	r6, #0
 8007a58:	42a6      	cmp	r6, r4
 8007a5a:	d109      	bne.n	8007a70 <__libc_init_array+0x24>
 8007a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8007a8c <__libc_init_array+0x40>)
 8007a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8007a90 <__libc_init_array+0x44>)
 8007a60:	f000 ff44 	bl	80088ec <_init>
 8007a64:	1b64      	subs	r4, r4, r5
 8007a66:	10a4      	asrs	r4, r4, #2
 8007a68:	2600      	movs	r6, #0
 8007a6a:	42a6      	cmp	r6, r4
 8007a6c:	d105      	bne.n	8007a7a <__libc_init_array+0x2e>
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a74:	4798      	blx	r3
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7ee      	b.n	8007a58 <__libc_init_array+0xc>
 8007a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7e:	4798      	blx	r3
 8007a80:	3601      	adds	r6, #1
 8007a82:	e7f2      	b.n	8007a6a <__libc_init_array+0x1e>
 8007a84:	080122bc 	.word	0x080122bc
 8007a88:	080122bc 	.word	0x080122bc
 8007a8c:	080122bc 	.word	0x080122bc
 8007a90:	080122c0 	.word	0x080122c0

08007a94 <__retarget_lock_init_recursive>:
 8007a94:	4770      	bx	lr

08007a96 <__retarget_lock_acquire_recursive>:
 8007a96:	4770      	bx	lr

08007a98 <__retarget_lock_release_recursive>:
 8007a98:	4770      	bx	lr

08007a9a <memcpy>:
 8007a9a:	440a      	add	r2, r1
 8007a9c:	4291      	cmp	r1, r2
 8007a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aa2:	d100      	bne.n	8007aa6 <memcpy+0xc>
 8007aa4:	4770      	bx	lr
 8007aa6:	b510      	push	{r4, lr}
 8007aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ab0:	4291      	cmp	r1, r2
 8007ab2:	d1f9      	bne.n	8007aa8 <memcpy+0xe>
 8007ab4:	bd10      	pop	{r4, pc}
	...

08007ab8 <__assert_func>:
 8007ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007aba:	4614      	mov	r4, r2
 8007abc:	461a      	mov	r2, r3
 8007abe:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <__assert_func+0x2c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	68d8      	ldr	r0, [r3, #12]
 8007ac6:	b954      	cbnz	r4, 8007ade <__assert_func+0x26>
 8007ac8:	4b07      	ldr	r3, [pc, #28]	@ (8007ae8 <__assert_func+0x30>)
 8007aca:	461c      	mov	r4, r3
 8007acc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ad0:	9100      	str	r1, [sp, #0]
 8007ad2:	462b      	mov	r3, r5
 8007ad4:	4905      	ldr	r1, [pc, #20]	@ (8007aec <__assert_func+0x34>)
 8007ad6:	f000 fbf3 	bl	80082c0 <fiprintf>
 8007ada:	f000 fcb1 	bl	8008440 <abort>
 8007ade:	4b04      	ldr	r3, [pc, #16]	@ (8007af0 <__assert_func+0x38>)
 8007ae0:	e7f4      	b.n	8007acc <__assert_func+0x14>
 8007ae2:	bf00      	nop
 8007ae4:	20000220 	.word	0x20000220
 8007ae8:	0801227d 	.word	0x0801227d
 8007aec:	0801224f 	.word	0x0801224f
 8007af0:	08012242 	.word	0x08012242

08007af4 <_free_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4605      	mov	r5, r0
 8007af8:	2900      	cmp	r1, #0
 8007afa:	d041      	beq.n	8007b80 <_free_r+0x8c>
 8007afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b00:	1f0c      	subs	r4, r1, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bfb8      	it	lt
 8007b06:	18e4      	addlt	r4, r4, r3
 8007b08:	f000 f8e8 	bl	8007cdc <__malloc_lock>
 8007b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b84 <_free_r+0x90>)
 8007b0e:	6813      	ldr	r3, [r2, #0]
 8007b10:	b933      	cbnz	r3, 8007b20 <_free_r+0x2c>
 8007b12:	6063      	str	r3, [r4, #4]
 8007b14:	6014      	str	r4, [r2, #0]
 8007b16:	4628      	mov	r0, r5
 8007b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b1c:	f000 b8e4 	b.w	8007ce8 <__malloc_unlock>
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	d908      	bls.n	8007b36 <_free_r+0x42>
 8007b24:	6820      	ldr	r0, [r4, #0]
 8007b26:	1821      	adds	r1, r4, r0
 8007b28:	428b      	cmp	r3, r1
 8007b2a:	bf01      	itttt	eq
 8007b2c:	6819      	ldreq	r1, [r3, #0]
 8007b2e:	685b      	ldreq	r3, [r3, #4]
 8007b30:	1809      	addeq	r1, r1, r0
 8007b32:	6021      	streq	r1, [r4, #0]
 8007b34:	e7ed      	b.n	8007b12 <_free_r+0x1e>
 8007b36:	461a      	mov	r2, r3
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	b10b      	cbz	r3, 8007b40 <_free_r+0x4c>
 8007b3c:	42a3      	cmp	r3, r4
 8007b3e:	d9fa      	bls.n	8007b36 <_free_r+0x42>
 8007b40:	6811      	ldr	r1, [r2, #0]
 8007b42:	1850      	adds	r0, r2, r1
 8007b44:	42a0      	cmp	r0, r4
 8007b46:	d10b      	bne.n	8007b60 <_free_r+0x6c>
 8007b48:	6820      	ldr	r0, [r4, #0]
 8007b4a:	4401      	add	r1, r0
 8007b4c:	1850      	adds	r0, r2, r1
 8007b4e:	4283      	cmp	r3, r0
 8007b50:	6011      	str	r1, [r2, #0]
 8007b52:	d1e0      	bne.n	8007b16 <_free_r+0x22>
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	6053      	str	r3, [r2, #4]
 8007b5a:	4408      	add	r0, r1
 8007b5c:	6010      	str	r0, [r2, #0]
 8007b5e:	e7da      	b.n	8007b16 <_free_r+0x22>
 8007b60:	d902      	bls.n	8007b68 <_free_r+0x74>
 8007b62:	230c      	movs	r3, #12
 8007b64:	602b      	str	r3, [r5, #0]
 8007b66:	e7d6      	b.n	8007b16 <_free_r+0x22>
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	1821      	adds	r1, r4, r0
 8007b6c:	428b      	cmp	r3, r1
 8007b6e:	bf04      	itt	eq
 8007b70:	6819      	ldreq	r1, [r3, #0]
 8007b72:	685b      	ldreq	r3, [r3, #4]
 8007b74:	6063      	str	r3, [r4, #4]
 8007b76:	bf04      	itt	eq
 8007b78:	1809      	addeq	r1, r1, r0
 8007b7a:	6021      	streq	r1, [r4, #0]
 8007b7c:	6054      	str	r4, [r2, #4]
 8007b7e:	e7ca      	b.n	8007b16 <_free_r+0x22>
 8007b80:	bd38      	pop	{r3, r4, r5, pc}
 8007b82:	bf00      	nop
 8007b84:	2000af00 	.word	0x2000af00

08007b88 <malloc>:
 8007b88:	4b02      	ldr	r3, [pc, #8]	@ (8007b94 <malloc+0xc>)
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	f000 b825 	b.w	8007bdc <_malloc_r>
 8007b92:	bf00      	nop
 8007b94:	20000220 	.word	0x20000220

08007b98 <sbrk_aligned>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	4e0f      	ldr	r6, [pc, #60]	@ (8007bd8 <sbrk_aligned+0x40>)
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	6831      	ldr	r1, [r6, #0]
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	b911      	cbnz	r1, 8007baa <sbrk_aligned+0x12>
 8007ba4:	f000 fc3c 	bl	8008420 <_sbrk_r>
 8007ba8:	6030      	str	r0, [r6, #0]
 8007baa:	4621      	mov	r1, r4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 fc37 	bl	8008420 <_sbrk_r>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	d103      	bne.n	8007bbe <sbrk_aligned+0x26>
 8007bb6:	f04f 34ff 	mov.w	r4, #4294967295
 8007bba:	4620      	mov	r0, r4
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
 8007bbe:	1cc4      	adds	r4, r0, #3
 8007bc0:	f024 0403 	bic.w	r4, r4, #3
 8007bc4:	42a0      	cmp	r0, r4
 8007bc6:	d0f8      	beq.n	8007bba <sbrk_aligned+0x22>
 8007bc8:	1a21      	subs	r1, r4, r0
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 fc28 	bl	8008420 <_sbrk_r>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d1f2      	bne.n	8007bba <sbrk_aligned+0x22>
 8007bd4:	e7ef      	b.n	8007bb6 <sbrk_aligned+0x1e>
 8007bd6:	bf00      	nop
 8007bd8:	2000aefc 	.word	0x2000aefc

08007bdc <_malloc_r>:
 8007bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be0:	1ccd      	adds	r5, r1, #3
 8007be2:	f025 0503 	bic.w	r5, r5, #3
 8007be6:	3508      	adds	r5, #8
 8007be8:	2d0c      	cmp	r5, #12
 8007bea:	bf38      	it	cc
 8007bec:	250c      	movcc	r5, #12
 8007bee:	2d00      	cmp	r5, #0
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	db01      	blt.n	8007bf8 <_malloc_r+0x1c>
 8007bf4:	42a9      	cmp	r1, r5
 8007bf6:	d904      	bls.n	8007c02 <_malloc_r+0x26>
 8007bf8:	230c      	movs	r3, #12
 8007bfa:	6033      	str	r3, [r6, #0]
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cd8 <_malloc_r+0xfc>
 8007c06:	f000 f869 	bl	8007cdc <__malloc_lock>
 8007c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c0e:	461c      	mov	r4, r3
 8007c10:	bb44      	cbnz	r4, 8007c64 <_malloc_r+0x88>
 8007c12:	4629      	mov	r1, r5
 8007c14:	4630      	mov	r0, r6
 8007c16:	f7ff ffbf 	bl	8007b98 <sbrk_aligned>
 8007c1a:	1c43      	adds	r3, r0, #1
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	d158      	bne.n	8007cd2 <_malloc_r+0xf6>
 8007c20:	f8d8 4000 	ldr.w	r4, [r8]
 8007c24:	4627      	mov	r7, r4
 8007c26:	2f00      	cmp	r7, #0
 8007c28:	d143      	bne.n	8007cb2 <_malloc_r+0xd6>
 8007c2a:	2c00      	cmp	r4, #0
 8007c2c:	d04b      	beq.n	8007cc6 <_malloc_r+0xea>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	4639      	mov	r1, r7
 8007c32:	4630      	mov	r0, r6
 8007c34:	eb04 0903 	add.w	r9, r4, r3
 8007c38:	f000 fbf2 	bl	8008420 <_sbrk_r>
 8007c3c:	4581      	cmp	r9, r0
 8007c3e:	d142      	bne.n	8007cc6 <_malloc_r+0xea>
 8007c40:	6821      	ldr	r1, [r4, #0]
 8007c42:	1a6d      	subs	r5, r5, r1
 8007c44:	4629      	mov	r1, r5
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff ffa6 	bl	8007b98 <sbrk_aligned>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d03a      	beq.n	8007cc6 <_malloc_r+0xea>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	442b      	add	r3, r5
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	bb62      	cbnz	r2, 8007cb8 <_malloc_r+0xdc>
 8007c5e:	f8c8 7000 	str.w	r7, [r8]
 8007c62:	e00f      	b.n	8007c84 <_malloc_r+0xa8>
 8007c64:	6822      	ldr	r2, [r4, #0]
 8007c66:	1b52      	subs	r2, r2, r5
 8007c68:	d420      	bmi.n	8007cac <_malloc_r+0xd0>
 8007c6a:	2a0b      	cmp	r2, #11
 8007c6c:	d917      	bls.n	8007c9e <_malloc_r+0xc2>
 8007c6e:	1961      	adds	r1, r4, r5
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	6025      	str	r5, [r4, #0]
 8007c74:	bf18      	it	ne
 8007c76:	6059      	strne	r1, [r3, #4]
 8007c78:	6863      	ldr	r3, [r4, #4]
 8007c7a:	bf08      	it	eq
 8007c7c:	f8c8 1000 	streq.w	r1, [r8]
 8007c80:	5162      	str	r2, [r4, r5]
 8007c82:	604b      	str	r3, [r1, #4]
 8007c84:	4630      	mov	r0, r6
 8007c86:	f000 f82f 	bl	8007ce8 <__malloc_unlock>
 8007c8a:	f104 000b 	add.w	r0, r4, #11
 8007c8e:	1d23      	adds	r3, r4, #4
 8007c90:	f020 0007 	bic.w	r0, r0, #7
 8007c94:	1ac2      	subs	r2, r0, r3
 8007c96:	bf1c      	itt	ne
 8007c98:	1a1b      	subne	r3, r3, r0
 8007c9a:	50a3      	strne	r3, [r4, r2]
 8007c9c:	e7af      	b.n	8007bfe <_malloc_r+0x22>
 8007c9e:	6862      	ldr	r2, [r4, #4]
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	bf0c      	ite	eq
 8007ca4:	f8c8 2000 	streq.w	r2, [r8]
 8007ca8:	605a      	strne	r2, [r3, #4]
 8007caa:	e7eb      	b.n	8007c84 <_malloc_r+0xa8>
 8007cac:	4623      	mov	r3, r4
 8007cae:	6864      	ldr	r4, [r4, #4]
 8007cb0:	e7ae      	b.n	8007c10 <_malloc_r+0x34>
 8007cb2:	463c      	mov	r4, r7
 8007cb4:	687f      	ldr	r7, [r7, #4]
 8007cb6:	e7b6      	b.n	8007c26 <_malloc_r+0x4a>
 8007cb8:	461a      	mov	r2, r3
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	d1fb      	bne.n	8007cb8 <_malloc_r+0xdc>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	6053      	str	r3, [r2, #4]
 8007cc4:	e7de      	b.n	8007c84 <_malloc_r+0xa8>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f000 f80c 	bl	8007ce8 <__malloc_unlock>
 8007cd0:	e794      	b.n	8007bfc <_malloc_r+0x20>
 8007cd2:	6005      	str	r5, [r0, #0]
 8007cd4:	e7d6      	b.n	8007c84 <_malloc_r+0xa8>
 8007cd6:	bf00      	nop
 8007cd8:	2000af00 	.word	0x2000af00

08007cdc <__malloc_lock>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	@ (8007ce4 <__malloc_lock+0x8>)
 8007cde:	f7ff beda 	b.w	8007a96 <__retarget_lock_acquire_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	2000aef8 	.word	0x2000aef8

08007ce8 <__malloc_unlock>:
 8007ce8:	4801      	ldr	r0, [pc, #4]	@ (8007cf0 <__malloc_unlock+0x8>)
 8007cea:	f7ff bed5 	b.w	8007a98 <__retarget_lock_release_recursive>
 8007cee:	bf00      	nop
 8007cf0:	2000aef8 	.word	0x2000aef8

08007cf4 <__ssputs_r>:
 8007cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	688e      	ldr	r6, [r1, #8]
 8007cfa:	461f      	mov	r7, r3
 8007cfc:	42be      	cmp	r6, r7
 8007cfe:	680b      	ldr	r3, [r1, #0]
 8007d00:	4682      	mov	sl, r0
 8007d02:	460c      	mov	r4, r1
 8007d04:	4690      	mov	r8, r2
 8007d06:	d82d      	bhi.n	8007d64 <__ssputs_r+0x70>
 8007d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d10:	d026      	beq.n	8007d60 <__ssputs_r+0x6c>
 8007d12:	6965      	ldr	r5, [r4, #20]
 8007d14:	6909      	ldr	r1, [r1, #16]
 8007d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d1a:	eba3 0901 	sub.w	r9, r3, r1
 8007d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d22:	1c7b      	adds	r3, r7, #1
 8007d24:	444b      	add	r3, r9
 8007d26:	106d      	asrs	r5, r5, #1
 8007d28:	429d      	cmp	r5, r3
 8007d2a:	bf38      	it	cc
 8007d2c:	461d      	movcc	r5, r3
 8007d2e:	0553      	lsls	r3, r2, #21
 8007d30:	d527      	bpl.n	8007d82 <__ssputs_r+0x8e>
 8007d32:	4629      	mov	r1, r5
 8007d34:	f7ff ff52 	bl	8007bdc <_malloc_r>
 8007d38:	4606      	mov	r6, r0
 8007d3a:	b360      	cbz	r0, 8007d96 <__ssputs_r+0xa2>
 8007d3c:	6921      	ldr	r1, [r4, #16]
 8007d3e:	464a      	mov	r2, r9
 8007d40:	f7ff feab 	bl	8007a9a <memcpy>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	6126      	str	r6, [r4, #16]
 8007d52:	6165      	str	r5, [r4, #20]
 8007d54:	444e      	add	r6, r9
 8007d56:	eba5 0509 	sub.w	r5, r5, r9
 8007d5a:	6026      	str	r6, [r4, #0]
 8007d5c:	60a5      	str	r5, [r4, #8]
 8007d5e:	463e      	mov	r6, r7
 8007d60:	42be      	cmp	r6, r7
 8007d62:	d900      	bls.n	8007d66 <__ssputs_r+0x72>
 8007d64:	463e      	mov	r6, r7
 8007d66:	6820      	ldr	r0, [r4, #0]
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4641      	mov	r1, r8
 8007d6c:	f000 fb1c 	bl	80083a8 <memmove>
 8007d70:	68a3      	ldr	r3, [r4, #8]
 8007d72:	1b9b      	subs	r3, r3, r6
 8007d74:	60a3      	str	r3, [r4, #8]
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	4433      	add	r3, r6
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d82:	462a      	mov	r2, r5
 8007d84:	f000 fb63 	bl	800844e <_realloc_r>
 8007d88:	4606      	mov	r6, r0
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d1e0      	bne.n	8007d50 <__ssputs_r+0x5c>
 8007d8e:	6921      	ldr	r1, [r4, #16]
 8007d90:	4650      	mov	r0, sl
 8007d92:	f7ff feaf 	bl	8007af4 <_free_r>
 8007d96:	230c      	movs	r3, #12
 8007d98:	f8ca 3000 	str.w	r3, [sl]
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007da2:	81a3      	strh	r3, [r4, #12]
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	e7e9      	b.n	8007d7e <__ssputs_r+0x8a>
	...

08007dac <_svfiprintf_r>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	4698      	mov	r8, r3
 8007db2:	898b      	ldrh	r3, [r1, #12]
 8007db4:	061b      	lsls	r3, r3, #24
 8007db6:	b09d      	sub	sp, #116	@ 0x74
 8007db8:	4607      	mov	r7, r0
 8007dba:	460d      	mov	r5, r1
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	d510      	bpl.n	8007de2 <_svfiprintf_r+0x36>
 8007dc0:	690b      	ldr	r3, [r1, #16]
 8007dc2:	b973      	cbnz	r3, 8007de2 <_svfiprintf_r+0x36>
 8007dc4:	2140      	movs	r1, #64	@ 0x40
 8007dc6:	f7ff ff09 	bl	8007bdc <_malloc_r>
 8007dca:	6028      	str	r0, [r5, #0]
 8007dcc:	6128      	str	r0, [r5, #16]
 8007dce:	b930      	cbnz	r0, 8007dde <_svfiprintf_r+0x32>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	b01d      	add	sp, #116	@ 0x74
 8007dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dde:	2340      	movs	r3, #64	@ 0x40
 8007de0:	616b      	str	r3, [r5, #20]
 8007de2:	2300      	movs	r3, #0
 8007de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007de6:	2320      	movs	r3, #32
 8007de8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df0:	2330      	movs	r3, #48	@ 0x30
 8007df2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f90 <_svfiprintf_r+0x1e4>
 8007df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dfa:	f04f 0901 	mov.w	r9, #1
 8007dfe:	4623      	mov	r3, r4
 8007e00:	469a      	mov	sl, r3
 8007e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e06:	b10a      	cbz	r2, 8007e0c <_svfiprintf_r+0x60>
 8007e08:	2a25      	cmp	r2, #37	@ 0x25
 8007e0a:	d1f9      	bne.n	8007e00 <_svfiprintf_r+0x54>
 8007e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e10:	d00b      	beq.n	8007e2a <_svfiprintf_r+0x7e>
 8007e12:	465b      	mov	r3, fp
 8007e14:	4622      	mov	r2, r4
 8007e16:	4629      	mov	r1, r5
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f7ff ff6b 	bl	8007cf4 <__ssputs_r>
 8007e1e:	3001      	adds	r0, #1
 8007e20:	f000 80a7 	beq.w	8007f72 <_svfiprintf_r+0x1c6>
 8007e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e26:	445a      	add	r2, fp
 8007e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 809f 	beq.w	8007f72 <_svfiprintf_r+0x1c6>
 8007e34:	2300      	movs	r3, #0
 8007e36:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e3e:	f10a 0a01 	add.w	sl, sl, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	9307      	str	r3, [sp, #28]
 8007e46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e4c:	4654      	mov	r4, sl
 8007e4e:	2205      	movs	r2, #5
 8007e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e54:	484e      	ldr	r0, [pc, #312]	@ (8007f90 <_svfiprintf_r+0x1e4>)
 8007e56:	f7f8 f9c3 	bl	80001e0 <memchr>
 8007e5a:	9a04      	ldr	r2, [sp, #16]
 8007e5c:	b9d8      	cbnz	r0, 8007e96 <_svfiprintf_r+0xea>
 8007e5e:	06d0      	lsls	r0, r2, #27
 8007e60:	bf44      	itt	mi
 8007e62:	2320      	movmi	r3, #32
 8007e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e68:	0711      	lsls	r1, r2, #28
 8007e6a:	bf44      	itt	mi
 8007e6c:	232b      	movmi	r3, #43	@ 0x2b
 8007e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e72:	f89a 3000 	ldrb.w	r3, [sl]
 8007e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e78:	d015      	beq.n	8007ea6 <_svfiprintf_r+0xfa>
 8007e7a:	9a07      	ldr	r2, [sp, #28]
 8007e7c:	4654      	mov	r4, sl
 8007e7e:	2000      	movs	r0, #0
 8007e80:	f04f 0c0a 	mov.w	ip, #10
 8007e84:	4621      	mov	r1, r4
 8007e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e8a:	3b30      	subs	r3, #48	@ 0x30
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	d94b      	bls.n	8007f28 <_svfiprintf_r+0x17c>
 8007e90:	b1b0      	cbz	r0, 8007ec0 <_svfiprintf_r+0x114>
 8007e92:	9207      	str	r2, [sp, #28]
 8007e94:	e014      	b.n	8007ec0 <_svfiprintf_r+0x114>
 8007e96:	eba0 0308 	sub.w	r3, r0, r8
 8007e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	46a2      	mov	sl, r4
 8007ea4:	e7d2      	b.n	8007e4c <_svfiprintf_r+0xa0>
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	1d19      	adds	r1, r3, #4
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	9103      	str	r1, [sp, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfbb      	ittet	lt
 8007eb2:	425b      	neglt	r3, r3
 8007eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb8:	9307      	strge	r3, [sp, #28]
 8007eba:	9307      	strlt	r3, [sp, #28]
 8007ebc:	bfb8      	it	lt
 8007ebe:	9204      	strlt	r2, [sp, #16]
 8007ec0:	7823      	ldrb	r3, [r4, #0]
 8007ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ec4:	d10a      	bne.n	8007edc <_svfiprintf_r+0x130>
 8007ec6:	7863      	ldrb	r3, [r4, #1]
 8007ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eca:	d132      	bne.n	8007f32 <_svfiprintf_r+0x186>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	1d1a      	adds	r2, r3, #4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	9203      	str	r2, [sp, #12]
 8007ed4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ed8:	3402      	adds	r4, #2
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007fa0 <_svfiprintf_r+0x1f4>
 8007ee0:	7821      	ldrb	r1, [r4, #0]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	4650      	mov	r0, sl
 8007ee6:	f7f8 f97b 	bl	80001e0 <memchr>
 8007eea:	b138      	cbz	r0, 8007efc <_svfiprintf_r+0x150>
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	eba0 000a 	sub.w	r0, r0, sl
 8007ef2:	2240      	movs	r2, #64	@ 0x40
 8007ef4:	4082      	lsls	r2, r0
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f00:	4824      	ldr	r0, [pc, #144]	@ (8007f94 <_svfiprintf_r+0x1e8>)
 8007f02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f06:	2206      	movs	r2, #6
 8007f08:	f7f8 f96a 	bl	80001e0 <memchr>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d036      	beq.n	8007f7e <_svfiprintf_r+0x1d2>
 8007f10:	4b21      	ldr	r3, [pc, #132]	@ (8007f98 <_svfiprintf_r+0x1ec>)
 8007f12:	bb1b      	cbnz	r3, 8007f5c <_svfiprintf_r+0x1b0>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	3307      	adds	r3, #7
 8007f18:	f023 0307 	bic.w	r3, r3, #7
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f22:	4433      	add	r3, r6
 8007f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f26:	e76a      	b.n	8007dfe <_svfiprintf_r+0x52>
 8007f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e7a8      	b.n	8007e84 <_svfiprintf_r+0xd8>
 8007f32:	2300      	movs	r3, #0
 8007f34:	3401      	adds	r4, #1
 8007f36:	9305      	str	r3, [sp, #20]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f04f 0c0a 	mov.w	ip, #10
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f44:	3a30      	subs	r2, #48	@ 0x30
 8007f46:	2a09      	cmp	r2, #9
 8007f48:	d903      	bls.n	8007f52 <_svfiprintf_r+0x1a6>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0c6      	beq.n	8007edc <_svfiprintf_r+0x130>
 8007f4e:	9105      	str	r1, [sp, #20]
 8007f50:	e7c4      	b.n	8007edc <_svfiprintf_r+0x130>
 8007f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f56:	4604      	mov	r4, r0
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e7f0      	b.n	8007f3e <_svfiprintf_r+0x192>
 8007f5c:	ab03      	add	r3, sp, #12
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4b0e      	ldr	r3, [pc, #56]	@ (8007f9c <_svfiprintf_r+0x1f0>)
 8007f64:	a904      	add	r1, sp, #16
 8007f66:	4638      	mov	r0, r7
 8007f68:	f3af 8000 	nop.w
 8007f6c:	1c42      	adds	r2, r0, #1
 8007f6e:	4606      	mov	r6, r0
 8007f70:	d1d6      	bne.n	8007f20 <_svfiprintf_r+0x174>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	065b      	lsls	r3, r3, #25
 8007f76:	f53f af2d 	bmi.w	8007dd4 <_svfiprintf_r+0x28>
 8007f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f7c:	e72c      	b.n	8007dd8 <_svfiprintf_r+0x2c>
 8007f7e:	ab03      	add	r3, sp, #12
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	462a      	mov	r2, r5
 8007f84:	4b05      	ldr	r3, [pc, #20]	@ (8007f9c <_svfiprintf_r+0x1f0>)
 8007f86:	a904      	add	r1, sp, #16
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f000 f879 	bl	8008080 <_printf_i>
 8007f8e:	e7ed      	b.n	8007f6c <_svfiprintf_r+0x1c0>
 8007f90:	0801227e 	.word	0x0801227e
 8007f94:	08012288 	.word	0x08012288
 8007f98:	00000000 	.word	0x00000000
 8007f9c:	08007cf5 	.word	0x08007cf5
 8007fa0:	08012284 	.word	0x08012284

08007fa4 <_printf_common>:
 8007fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa8:	4616      	mov	r6, r2
 8007faa:	4698      	mov	r8, r3
 8007fac:	688a      	ldr	r2, [r1, #8]
 8007fae:	690b      	ldr	r3, [r1, #16]
 8007fb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	bfb8      	it	lt
 8007fb8:	4613      	movlt	r3, r2
 8007fba:	6033      	str	r3, [r6, #0]
 8007fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	b10a      	cbz	r2, 8007fca <_printf_common+0x26>
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	6033      	str	r3, [r6, #0]
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	0699      	lsls	r1, r3, #26
 8007fce:	bf42      	ittt	mi
 8007fd0:	6833      	ldrmi	r3, [r6, #0]
 8007fd2:	3302      	addmi	r3, #2
 8007fd4:	6033      	strmi	r3, [r6, #0]
 8007fd6:	6825      	ldr	r5, [r4, #0]
 8007fd8:	f015 0506 	ands.w	r5, r5, #6
 8007fdc:	d106      	bne.n	8007fec <_printf_common+0x48>
 8007fde:	f104 0a19 	add.w	sl, r4, #25
 8007fe2:	68e3      	ldr	r3, [r4, #12]
 8007fe4:	6832      	ldr	r2, [r6, #0]
 8007fe6:	1a9b      	subs	r3, r3, r2
 8007fe8:	42ab      	cmp	r3, r5
 8007fea:	dc26      	bgt.n	800803a <_printf_common+0x96>
 8007fec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ff0:	6822      	ldr	r2, [r4, #0]
 8007ff2:	3b00      	subs	r3, #0
 8007ff4:	bf18      	it	ne
 8007ff6:	2301      	movne	r3, #1
 8007ff8:	0692      	lsls	r2, r2, #26
 8007ffa:	d42b      	bmi.n	8008054 <_printf_common+0xb0>
 8007ffc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008000:	4641      	mov	r1, r8
 8008002:	4638      	mov	r0, r7
 8008004:	47c8      	blx	r9
 8008006:	3001      	adds	r0, #1
 8008008:	d01e      	beq.n	8008048 <_printf_common+0xa4>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	6922      	ldr	r2, [r4, #16]
 800800e:	f003 0306 	and.w	r3, r3, #6
 8008012:	2b04      	cmp	r3, #4
 8008014:	bf02      	ittt	eq
 8008016:	68e5      	ldreq	r5, [r4, #12]
 8008018:	6833      	ldreq	r3, [r6, #0]
 800801a:	1aed      	subeq	r5, r5, r3
 800801c:	68a3      	ldr	r3, [r4, #8]
 800801e:	bf0c      	ite	eq
 8008020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008024:	2500      	movne	r5, #0
 8008026:	4293      	cmp	r3, r2
 8008028:	bfc4      	itt	gt
 800802a:	1a9b      	subgt	r3, r3, r2
 800802c:	18ed      	addgt	r5, r5, r3
 800802e:	2600      	movs	r6, #0
 8008030:	341a      	adds	r4, #26
 8008032:	42b5      	cmp	r5, r6
 8008034:	d11a      	bne.n	800806c <_printf_common+0xc8>
 8008036:	2000      	movs	r0, #0
 8008038:	e008      	b.n	800804c <_printf_common+0xa8>
 800803a:	2301      	movs	r3, #1
 800803c:	4652      	mov	r2, sl
 800803e:	4641      	mov	r1, r8
 8008040:	4638      	mov	r0, r7
 8008042:	47c8      	blx	r9
 8008044:	3001      	adds	r0, #1
 8008046:	d103      	bne.n	8008050 <_printf_common+0xac>
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008050:	3501      	adds	r5, #1
 8008052:	e7c6      	b.n	8007fe2 <_printf_common+0x3e>
 8008054:	18e1      	adds	r1, r4, r3
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	2030      	movs	r0, #48	@ 0x30
 800805a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800805e:	4422      	add	r2, r4
 8008060:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008064:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008068:	3302      	adds	r3, #2
 800806a:	e7c7      	b.n	8007ffc <_printf_common+0x58>
 800806c:	2301      	movs	r3, #1
 800806e:	4622      	mov	r2, r4
 8008070:	4641      	mov	r1, r8
 8008072:	4638      	mov	r0, r7
 8008074:	47c8      	blx	r9
 8008076:	3001      	adds	r0, #1
 8008078:	d0e6      	beq.n	8008048 <_printf_common+0xa4>
 800807a:	3601      	adds	r6, #1
 800807c:	e7d9      	b.n	8008032 <_printf_common+0x8e>
	...

08008080 <_printf_i>:
 8008080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	7e0f      	ldrb	r7, [r1, #24]
 8008086:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008088:	2f78      	cmp	r7, #120	@ 0x78
 800808a:	4691      	mov	r9, r2
 800808c:	4680      	mov	r8, r0
 800808e:	460c      	mov	r4, r1
 8008090:	469a      	mov	sl, r3
 8008092:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008096:	d807      	bhi.n	80080a8 <_printf_i+0x28>
 8008098:	2f62      	cmp	r7, #98	@ 0x62
 800809a:	d80a      	bhi.n	80080b2 <_printf_i+0x32>
 800809c:	2f00      	cmp	r7, #0
 800809e:	f000 80d2 	beq.w	8008246 <_printf_i+0x1c6>
 80080a2:	2f58      	cmp	r7, #88	@ 0x58
 80080a4:	f000 80b9 	beq.w	800821a <_printf_i+0x19a>
 80080a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080b0:	e03a      	b.n	8008128 <_printf_i+0xa8>
 80080b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080b6:	2b15      	cmp	r3, #21
 80080b8:	d8f6      	bhi.n	80080a8 <_printf_i+0x28>
 80080ba:	a101      	add	r1, pc, #4	@ (adr r1, 80080c0 <_printf_i+0x40>)
 80080bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080c0:	08008119 	.word	0x08008119
 80080c4:	0800812d 	.word	0x0800812d
 80080c8:	080080a9 	.word	0x080080a9
 80080cc:	080080a9 	.word	0x080080a9
 80080d0:	080080a9 	.word	0x080080a9
 80080d4:	080080a9 	.word	0x080080a9
 80080d8:	0800812d 	.word	0x0800812d
 80080dc:	080080a9 	.word	0x080080a9
 80080e0:	080080a9 	.word	0x080080a9
 80080e4:	080080a9 	.word	0x080080a9
 80080e8:	080080a9 	.word	0x080080a9
 80080ec:	0800822d 	.word	0x0800822d
 80080f0:	08008157 	.word	0x08008157
 80080f4:	080081e7 	.word	0x080081e7
 80080f8:	080080a9 	.word	0x080080a9
 80080fc:	080080a9 	.word	0x080080a9
 8008100:	0800824f 	.word	0x0800824f
 8008104:	080080a9 	.word	0x080080a9
 8008108:	08008157 	.word	0x08008157
 800810c:	080080a9 	.word	0x080080a9
 8008110:	080080a9 	.word	0x080080a9
 8008114:	080081ef 	.word	0x080081ef
 8008118:	6833      	ldr	r3, [r6, #0]
 800811a:	1d1a      	adds	r2, r3, #4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6032      	str	r2, [r6, #0]
 8008120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008124:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008128:	2301      	movs	r3, #1
 800812a:	e09d      	b.n	8008268 <_printf_i+0x1e8>
 800812c:	6833      	ldr	r3, [r6, #0]
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	1d19      	adds	r1, r3, #4
 8008132:	6031      	str	r1, [r6, #0]
 8008134:	0606      	lsls	r6, r0, #24
 8008136:	d501      	bpl.n	800813c <_printf_i+0xbc>
 8008138:	681d      	ldr	r5, [r3, #0]
 800813a:	e003      	b.n	8008144 <_printf_i+0xc4>
 800813c:	0645      	lsls	r5, r0, #25
 800813e:	d5fb      	bpl.n	8008138 <_printf_i+0xb8>
 8008140:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008144:	2d00      	cmp	r5, #0
 8008146:	da03      	bge.n	8008150 <_printf_i+0xd0>
 8008148:	232d      	movs	r3, #45	@ 0x2d
 800814a:	426d      	negs	r5, r5
 800814c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008150:	4859      	ldr	r0, [pc, #356]	@ (80082b8 <_printf_i+0x238>)
 8008152:	230a      	movs	r3, #10
 8008154:	e011      	b.n	800817a <_printf_i+0xfa>
 8008156:	6821      	ldr	r1, [r4, #0]
 8008158:	6833      	ldr	r3, [r6, #0]
 800815a:	0608      	lsls	r0, r1, #24
 800815c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008160:	d402      	bmi.n	8008168 <_printf_i+0xe8>
 8008162:	0649      	lsls	r1, r1, #25
 8008164:	bf48      	it	mi
 8008166:	b2ad      	uxthmi	r5, r5
 8008168:	2f6f      	cmp	r7, #111	@ 0x6f
 800816a:	4853      	ldr	r0, [pc, #332]	@ (80082b8 <_printf_i+0x238>)
 800816c:	6033      	str	r3, [r6, #0]
 800816e:	bf14      	ite	ne
 8008170:	230a      	movne	r3, #10
 8008172:	2308      	moveq	r3, #8
 8008174:	2100      	movs	r1, #0
 8008176:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800817a:	6866      	ldr	r6, [r4, #4]
 800817c:	60a6      	str	r6, [r4, #8]
 800817e:	2e00      	cmp	r6, #0
 8008180:	bfa2      	ittt	ge
 8008182:	6821      	ldrge	r1, [r4, #0]
 8008184:	f021 0104 	bicge.w	r1, r1, #4
 8008188:	6021      	strge	r1, [r4, #0]
 800818a:	b90d      	cbnz	r5, 8008190 <_printf_i+0x110>
 800818c:	2e00      	cmp	r6, #0
 800818e:	d04b      	beq.n	8008228 <_printf_i+0x1a8>
 8008190:	4616      	mov	r6, r2
 8008192:	fbb5 f1f3 	udiv	r1, r5, r3
 8008196:	fb03 5711 	mls	r7, r3, r1, r5
 800819a:	5dc7      	ldrb	r7, [r0, r7]
 800819c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081a0:	462f      	mov	r7, r5
 80081a2:	42bb      	cmp	r3, r7
 80081a4:	460d      	mov	r5, r1
 80081a6:	d9f4      	bls.n	8008192 <_printf_i+0x112>
 80081a8:	2b08      	cmp	r3, #8
 80081aa:	d10b      	bne.n	80081c4 <_printf_i+0x144>
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	07df      	lsls	r7, r3, #31
 80081b0:	d508      	bpl.n	80081c4 <_printf_i+0x144>
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	6861      	ldr	r1, [r4, #4]
 80081b6:	4299      	cmp	r1, r3
 80081b8:	bfde      	ittt	le
 80081ba:	2330      	movle	r3, #48	@ 0x30
 80081bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081c4:	1b92      	subs	r2, r2, r6
 80081c6:	6122      	str	r2, [r4, #16]
 80081c8:	f8cd a000 	str.w	sl, [sp]
 80081cc:	464b      	mov	r3, r9
 80081ce:	aa03      	add	r2, sp, #12
 80081d0:	4621      	mov	r1, r4
 80081d2:	4640      	mov	r0, r8
 80081d4:	f7ff fee6 	bl	8007fa4 <_printf_common>
 80081d8:	3001      	adds	r0, #1
 80081da:	d14a      	bne.n	8008272 <_printf_i+0x1f2>
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	b004      	add	sp, #16
 80081e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	f043 0320 	orr.w	r3, r3, #32
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	4833      	ldr	r0, [pc, #204]	@ (80082bc <_printf_i+0x23c>)
 80081f0:	2778      	movs	r7, #120	@ 0x78
 80081f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	6831      	ldr	r1, [r6, #0]
 80081fa:	061f      	lsls	r7, r3, #24
 80081fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008200:	d402      	bmi.n	8008208 <_printf_i+0x188>
 8008202:	065f      	lsls	r7, r3, #25
 8008204:	bf48      	it	mi
 8008206:	b2ad      	uxthmi	r5, r5
 8008208:	6031      	str	r1, [r6, #0]
 800820a:	07d9      	lsls	r1, r3, #31
 800820c:	bf44      	itt	mi
 800820e:	f043 0320 	orrmi.w	r3, r3, #32
 8008212:	6023      	strmi	r3, [r4, #0]
 8008214:	b11d      	cbz	r5, 800821e <_printf_i+0x19e>
 8008216:	2310      	movs	r3, #16
 8008218:	e7ac      	b.n	8008174 <_printf_i+0xf4>
 800821a:	4827      	ldr	r0, [pc, #156]	@ (80082b8 <_printf_i+0x238>)
 800821c:	e7e9      	b.n	80081f2 <_printf_i+0x172>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	f023 0320 	bic.w	r3, r3, #32
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	e7f6      	b.n	8008216 <_printf_i+0x196>
 8008228:	4616      	mov	r6, r2
 800822a:	e7bd      	b.n	80081a8 <_printf_i+0x128>
 800822c:	6833      	ldr	r3, [r6, #0]
 800822e:	6825      	ldr	r5, [r4, #0]
 8008230:	6961      	ldr	r1, [r4, #20]
 8008232:	1d18      	adds	r0, r3, #4
 8008234:	6030      	str	r0, [r6, #0]
 8008236:	062e      	lsls	r6, r5, #24
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	d501      	bpl.n	8008240 <_printf_i+0x1c0>
 800823c:	6019      	str	r1, [r3, #0]
 800823e:	e002      	b.n	8008246 <_printf_i+0x1c6>
 8008240:	0668      	lsls	r0, r5, #25
 8008242:	d5fb      	bpl.n	800823c <_printf_i+0x1bc>
 8008244:	8019      	strh	r1, [r3, #0]
 8008246:	2300      	movs	r3, #0
 8008248:	6123      	str	r3, [r4, #16]
 800824a:	4616      	mov	r6, r2
 800824c:	e7bc      	b.n	80081c8 <_printf_i+0x148>
 800824e:	6833      	ldr	r3, [r6, #0]
 8008250:	1d1a      	adds	r2, r3, #4
 8008252:	6032      	str	r2, [r6, #0]
 8008254:	681e      	ldr	r6, [r3, #0]
 8008256:	6862      	ldr	r2, [r4, #4]
 8008258:	2100      	movs	r1, #0
 800825a:	4630      	mov	r0, r6
 800825c:	f7f7 ffc0 	bl	80001e0 <memchr>
 8008260:	b108      	cbz	r0, 8008266 <_printf_i+0x1e6>
 8008262:	1b80      	subs	r0, r0, r6
 8008264:	6060      	str	r0, [r4, #4]
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	2300      	movs	r3, #0
 800826c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008270:	e7aa      	b.n	80081c8 <_printf_i+0x148>
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	4632      	mov	r2, r6
 8008276:	4649      	mov	r1, r9
 8008278:	4640      	mov	r0, r8
 800827a:	47d0      	blx	sl
 800827c:	3001      	adds	r0, #1
 800827e:	d0ad      	beq.n	80081dc <_printf_i+0x15c>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	079b      	lsls	r3, r3, #30
 8008284:	d413      	bmi.n	80082ae <_printf_i+0x22e>
 8008286:	68e0      	ldr	r0, [r4, #12]
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	4298      	cmp	r0, r3
 800828c:	bfb8      	it	lt
 800828e:	4618      	movlt	r0, r3
 8008290:	e7a6      	b.n	80081e0 <_printf_i+0x160>
 8008292:	2301      	movs	r3, #1
 8008294:	4632      	mov	r2, r6
 8008296:	4649      	mov	r1, r9
 8008298:	4640      	mov	r0, r8
 800829a:	47d0      	blx	sl
 800829c:	3001      	adds	r0, #1
 800829e:	d09d      	beq.n	80081dc <_printf_i+0x15c>
 80082a0:	3501      	adds	r5, #1
 80082a2:	68e3      	ldr	r3, [r4, #12]
 80082a4:	9903      	ldr	r1, [sp, #12]
 80082a6:	1a5b      	subs	r3, r3, r1
 80082a8:	42ab      	cmp	r3, r5
 80082aa:	dcf2      	bgt.n	8008292 <_printf_i+0x212>
 80082ac:	e7eb      	b.n	8008286 <_printf_i+0x206>
 80082ae:	2500      	movs	r5, #0
 80082b0:	f104 0619 	add.w	r6, r4, #25
 80082b4:	e7f5      	b.n	80082a2 <_printf_i+0x222>
 80082b6:	bf00      	nop
 80082b8:	0801228f 	.word	0x0801228f
 80082bc:	080122a0 	.word	0x080122a0

080082c0 <fiprintf>:
 80082c0:	b40e      	push	{r1, r2, r3}
 80082c2:	b503      	push	{r0, r1, lr}
 80082c4:	4601      	mov	r1, r0
 80082c6:	ab03      	add	r3, sp, #12
 80082c8:	4805      	ldr	r0, [pc, #20]	@ (80082e0 <fiprintf+0x20>)
 80082ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	f000 f913 	bl	80084fc <_vfiprintf_r>
 80082d6:	b002      	add	sp, #8
 80082d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082dc:	b003      	add	sp, #12
 80082de:	4770      	bx	lr
 80082e0:	20000220 	.word	0x20000220

080082e4 <__swhatbuf_r>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	460c      	mov	r4, r1
 80082e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ec:	2900      	cmp	r1, #0
 80082ee:	b096      	sub	sp, #88	@ 0x58
 80082f0:	4615      	mov	r5, r2
 80082f2:	461e      	mov	r6, r3
 80082f4:	da0d      	bge.n	8008312 <__swhatbuf_r+0x2e>
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082fc:	f04f 0100 	mov.w	r1, #0
 8008300:	bf14      	ite	ne
 8008302:	2340      	movne	r3, #64	@ 0x40
 8008304:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008308:	2000      	movs	r0, #0
 800830a:	6031      	str	r1, [r6, #0]
 800830c:	602b      	str	r3, [r5, #0]
 800830e:	b016      	add	sp, #88	@ 0x58
 8008310:	bd70      	pop	{r4, r5, r6, pc}
 8008312:	466a      	mov	r2, sp
 8008314:	f000 f862 	bl	80083dc <_fstat_r>
 8008318:	2800      	cmp	r0, #0
 800831a:	dbec      	blt.n	80082f6 <__swhatbuf_r+0x12>
 800831c:	9901      	ldr	r1, [sp, #4]
 800831e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008322:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008326:	4259      	negs	r1, r3
 8008328:	4159      	adcs	r1, r3
 800832a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800832e:	e7eb      	b.n	8008308 <__swhatbuf_r+0x24>

08008330 <__smakebuf_r>:
 8008330:	898b      	ldrh	r3, [r1, #12]
 8008332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008334:	079d      	lsls	r5, r3, #30
 8008336:	4606      	mov	r6, r0
 8008338:	460c      	mov	r4, r1
 800833a:	d507      	bpl.n	800834c <__smakebuf_r+0x1c>
 800833c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	6123      	str	r3, [r4, #16]
 8008344:	2301      	movs	r3, #1
 8008346:	6163      	str	r3, [r4, #20]
 8008348:	b003      	add	sp, #12
 800834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800834c:	ab01      	add	r3, sp, #4
 800834e:	466a      	mov	r2, sp
 8008350:	f7ff ffc8 	bl	80082e4 <__swhatbuf_r>
 8008354:	9f00      	ldr	r7, [sp, #0]
 8008356:	4605      	mov	r5, r0
 8008358:	4639      	mov	r1, r7
 800835a:	4630      	mov	r0, r6
 800835c:	f7ff fc3e 	bl	8007bdc <_malloc_r>
 8008360:	b948      	cbnz	r0, 8008376 <__smakebuf_r+0x46>
 8008362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008366:	059a      	lsls	r2, r3, #22
 8008368:	d4ee      	bmi.n	8008348 <__smakebuf_r+0x18>
 800836a:	f023 0303 	bic.w	r3, r3, #3
 800836e:	f043 0302 	orr.w	r3, r3, #2
 8008372:	81a3      	strh	r3, [r4, #12]
 8008374:	e7e2      	b.n	800833c <__smakebuf_r+0xc>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	6020      	str	r0, [r4, #0]
 800837a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	9b01      	ldr	r3, [sp, #4]
 8008382:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008386:	b15b      	cbz	r3, 80083a0 <__smakebuf_r+0x70>
 8008388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800838c:	4630      	mov	r0, r6
 800838e:	f000 f837 	bl	8008400 <_isatty_r>
 8008392:	b128      	cbz	r0, 80083a0 <__smakebuf_r+0x70>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f023 0303 	bic.w	r3, r3, #3
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	431d      	orrs	r5, r3
 80083a4:	81a5      	strh	r5, [r4, #12]
 80083a6:	e7cf      	b.n	8008348 <__smakebuf_r+0x18>

080083a8 <memmove>:
 80083a8:	4288      	cmp	r0, r1
 80083aa:	b510      	push	{r4, lr}
 80083ac:	eb01 0402 	add.w	r4, r1, r2
 80083b0:	d902      	bls.n	80083b8 <memmove+0x10>
 80083b2:	4284      	cmp	r4, r0
 80083b4:	4623      	mov	r3, r4
 80083b6:	d807      	bhi.n	80083c8 <memmove+0x20>
 80083b8:	1e43      	subs	r3, r0, #1
 80083ba:	42a1      	cmp	r1, r4
 80083bc:	d008      	beq.n	80083d0 <memmove+0x28>
 80083be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083c6:	e7f8      	b.n	80083ba <memmove+0x12>
 80083c8:	4402      	add	r2, r0
 80083ca:	4601      	mov	r1, r0
 80083cc:	428a      	cmp	r2, r1
 80083ce:	d100      	bne.n	80083d2 <memmove+0x2a>
 80083d0:	bd10      	pop	{r4, pc}
 80083d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083da:	e7f7      	b.n	80083cc <memmove+0x24>

080083dc <_fstat_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4d07      	ldr	r5, [pc, #28]	@ (80083fc <_fstat_r+0x20>)
 80083e0:	2300      	movs	r3, #0
 80083e2:	4604      	mov	r4, r0
 80083e4:	4608      	mov	r0, r1
 80083e6:	4611      	mov	r1, r2
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	f7f9 fc9b 	bl	8001d24 <_fstat>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	d102      	bne.n	80083f8 <_fstat_r+0x1c>
 80083f2:	682b      	ldr	r3, [r5, #0]
 80083f4:	b103      	cbz	r3, 80083f8 <_fstat_r+0x1c>
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	bd38      	pop	{r3, r4, r5, pc}
 80083fa:	bf00      	nop
 80083fc:	2000aef4 	.word	0x2000aef4

08008400 <_isatty_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4d06      	ldr	r5, [pc, #24]	@ (800841c <_isatty_r+0x1c>)
 8008404:	2300      	movs	r3, #0
 8008406:	4604      	mov	r4, r0
 8008408:	4608      	mov	r0, r1
 800840a:	602b      	str	r3, [r5, #0]
 800840c:	f7f9 fc9a 	bl	8001d44 <_isatty>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d102      	bne.n	800841a <_isatty_r+0x1a>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	b103      	cbz	r3, 800841a <_isatty_r+0x1a>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	2000aef4 	.word	0x2000aef4

08008420 <_sbrk_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d06      	ldr	r5, [pc, #24]	@ (800843c <_sbrk_r+0x1c>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	f7f9 fca2 	bl	8001d74 <_sbrk>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_sbrk_r+0x1a>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_sbrk_r+0x1a>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	2000aef4 	.word	0x2000aef4

08008440 <abort>:
 8008440:	b508      	push	{r3, lr}
 8008442:	2006      	movs	r0, #6
 8008444:	f000 fa2e 	bl	80088a4 <raise>
 8008448:	2001      	movs	r0, #1
 800844a:	f7f9 fc1b 	bl	8001c84 <_exit>

0800844e <_realloc_r>:
 800844e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008452:	4680      	mov	r8, r0
 8008454:	4615      	mov	r5, r2
 8008456:	460c      	mov	r4, r1
 8008458:	b921      	cbnz	r1, 8008464 <_realloc_r+0x16>
 800845a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800845e:	4611      	mov	r1, r2
 8008460:	f7ff bbbc 	b.w	8007bdc <_malloc_r>
 8008464:	b92a      	cbnz	r2, 8008472 <_realloc_r+0x24>
 8008466:	f7ff fb45 	bl	8007af4 <_free_r>
 800846a:	2400      	movs	r4, #0
 800846c:	4620      	mov	r0, r4
 800846e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008472:	f000 fa33 	bl	80088dc <_malloc_usable_size_r>
 8008476:	4285      	cmp	r5, r0
 8008478:	4606      	mov	r6, r0
 800847a:	d802      	bhi.n	8008482 <_realloc_r+0x34>
 800847c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008480:	d8f4      	bhi.n	800846c <_realloc_r+0x1e>
 8008482:	4629      	mov	r1, r5
 8008484:	4640      	mov	r0, r8
 8008486:	f7ff fba9 	bl	8007bdc <_malloc_r>
 800848a:	4607      	mov	r7, r0
 800848c:	2800      	cmp	r0, #0
 800848e:	d0ec      	beq.n	800846a <_realloc_r+0x1c>
 8008490:	42b5      	cmp	r5, r6
 8008492:	462a      	mov	r2, r5
 8008494:	4621      	mov	r1, r4
 8008496:	bf28      	it	cs
 8008498:	4632      	movcs	r2, r6
 800849a:	f7ff fafe 	bl	8007a9a <memcpy>
 800849e:	4621      	mov	r1, r4
 80084a0:	4640      	mov	r0, r8
 80084a2:	f7ff fb27 	bl	8007af4 <_free_r>
 80084a6:	463c      	mov	r4, r7
 80084a8:	e7e0      	b.n	800846c <_realloc_r+0x1e>

080084aa <__sfputc_r>:
 80084aa:	6893      	ldr	r3, [r2, #8]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	b410      	push	{r4}
 80084b2:	6093      	str	r3, [r2, #8]
 80084b4:	da08      	bge.n	80084c8 <__sfputc_r+0x1e>
 80084b6:	6994      	ldr	r4, [r2, #24]
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	db01      	blt.n	80084c0 <__sfputc_r+0x16>
 80084bc:	290a      	cmp	r1, #10
 80084be:	d103      	bne.n	80084c8 <__sfputc_r+0x1e>
 80084c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084c4:	f000 b932 	b.w	800872c <__swbuf_r>
 80084c8:	6813      	ldr	r3, [r2, #0]
 80084ca:	1c58      	adds	r0, r3, #1
 80084cc:	6010      	str	r0, [r2, #0]
 80084ce:	7019      	strb	r1, [r3, #0]
 80084d0:	4608      	mov	r0, r1
 80084d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <__sfputs_r>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	4606      	mov	r6, r0
 80084dc:	460f      	mov	r7, r1
 80084de:	4614      	mov	r4, r2
 80084e0:	18d5      	adds	r5, r2, r3
 80084e2:	42ac      	cmp	r4, r5
 80084e4:	d101      	bne.n	80084ea <__sfputs_r+0x12>
 80084e6:	2000      	movs	r0, #0
 80084e8:	e007      	b.n	80084fa <__sfputs_r+0x22>
 80084ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ee:	463a      	mov	r2, r7
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7ff ffda 	bl	80084aa <__sfputc_r>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d1f3      	bne.n	80084e2 <__sfputs_r+0xa>
 80084fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084fc <_vfiprintf_r>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	460d      	mov	r5, r1
 8008502:	b09d      	sub	sp, #116	@ 0x74
 8008504:	4614      	mov	r4, r2
 8008506:	4698      	mov	r8, r3
 8008508:	4606      	mov	r6, r0
 800850a:	b118      	cbz	r0, 8008514 <_vfiprintf_r+0x18>
 800850c:	6a03      	ldr	r3, [r0, #32]
 800850e:	b90b      	cbnz	r3, 8008514 <_vfiprintf_r+0x18>
 8008510:	f7ff f8e8 	bl	80076e4 <__sinit>
 8008514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008516:	07d9      	lsls	r1, r3, #31
 8008518:	d405      	bmi.n	8008526 <_vfiprintf_r+0x2a>
 800851a:	89ab      	ldrh	r3, [r5, #12]
 800851c:	059a      	lsls	r2, r3, #22
 800851e:	d402      	bmi.n	8008526 <_vfiprintf_r+0x2a>
 8008520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008522:	f7ff fab8 	bl	8007a96 <__retarget_lock_acquire_recursive>
 8008526:	89ab      	ldrh	r3, [r5, #12]
 8008528:	071b      	lsls	r3, r3, #28
 800852a:	d501      	bpl.n	8008530 <_vfiprintf_r+0x34>
 800852c:	692b      	ldr	r3, [r5, #16]
 800852e:	b99b      	cbnz	r3, 8008558 <_vfiprintf_r+0x5c>
 8008530:	4629      	mov	r1, r5
 8008532:	4630      	mov	r0, r6
 8008534:	f000 f938 	bl	80087a8 <__swsetup_r>
 8008538:	b170      	cbz	r0, 8008558 <_vfiprintf_r+0x5c>
 800853a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800853c:	07dc      	lsls	r4, r3, #31
 800853e:	d504      	bpl.n	800854a <_vfiprintf_r+0x4e>
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	b01d      	add	sp, #116	@ 0x74
 8008546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854a:	89ab      	ldrh	r3, [r5, #12]
 800854c:	0598      	lsls	r0, r3, #22
 800854e:	d4f7      	bmi.n	8008540 <_vfiprintf_r+0x44>
 8008550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008552:	f7ff faa1 	bl	8007a98 <__retarget_lock_release_recursive>
 8008556:	e7f3      	b.n	8008540 <_vfiprintf_r+0x44>
 8008558:	2300      	movs	r3, #0
 800855a:	9309      	str	r3, [sp, #36]	@ 0x24
 800855c:	2320      	movs	r3, #32
 800855e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008562:	f8cd 800c 	str.w	r8, [sp, #12]
 8008566:	2330      	movs	r3, #48	@ 0x30
 8008568:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008718 <_vfiprintf_r+0x21c>
 800856c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008570:	f04f 0901 	mov.w	r9, #1
 8008574:	4623      	mov	r3, r4
 8008576:	469a      	mov	sl, r3
 8008578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800857c:	b10a      	cbz	r2, 8008582 <_vfiprintf_r+0x86>
 800857e:	2a25      	cmp	r2, #37	@ 0x25
 8008580:	d1f9      	bne.n	8008576 <_vfiprintf_r+0x7a>
 8008582:	ebba 0b04 	subs.w	fp, sl, r4
 8008586:	d00b      	beq.n	80085a0 <_vfiprintf_r+0xa4>
 8008588:	465b      	mov	r3, fp
 800858a:	4622      	mov	r2, r4
 800858c:	4629      	mov	r1, r5
 800858e:	4630      	mov	r0, r6
 8008590:	f7ff ffa2 	bl	80084d8 <__sfputs_r>
 8008594:	3001      	adds	r0, #1
 8008596:	f000 80a7 	beq.w	80086e8 <_vfiprintf_r+0x1ec>
 800859a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800859c:	445a      	add	r2, fp
 800859e:	9209      	str	r2, [sp, #36]	@ 0x24
 80085a0:	f89a 3000 	ldrb.w	r3, [sl]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 809f 	beq.w	80086e8 <_vfiprintf_r+0x1ec>
 80085aa:	2300      	movs	r3, #0
 80085ac:	f04f 32ff 	mov.w	r2, #4294967295
 80085b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085b4:	f10a 0a01 	add.w	sl, sl, #1
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	9307      	str	r3, [sp, #28]
 80085bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80085c2:	4654      	mov	r4, sl
 80085c4:	2205      	movs	r2, #5
 80085c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ca:	4853      	ldr	r0, [pc, #332]	@ (8008718 <_vfiprintf_r+0x21c>)
 80085cc:	f7f7 fe08 	bl	80001e0 <memchr>
 80085d0:	9a04      	ldr	r2, [sp, #16]
 80085d2:	b9d8      	cbnz	r0, 800860c <_vfiprintf_r+0x110>
 80085d4:	06d1      	lsls	r1, r2, #27
 80085d6:	bf44      	itt	mi
 80085d8:	2320      	movmi	r3, #32
 80085da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085de:	0713      	lsls	r3, r2, #28
 80085e0:	bf44      	itt	mi
 80085e2:	232b      	movmi	r3, #43	@ 0x2b
 80085e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085e8:	f89a 3000 	ldrb.w	r3, [sl]
 80085ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ee:	d015      	beq.n	800861c <_vfiprintf_r+0x120>
 80085f0:	9a07      	ldr	r2, [sp, #28]
 80085f2:	4654      	mov	r4, sl
 80085f4:	2000      	movs	r0, #0
 80085f6:	f04f 0c0a 	mov.w	ip, #10
 80085fa:	4621      	mov	r1, r4
 80085fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008600:	3b30      	subs	r3, #48	@ 0x30
 8008602:	2b09      	cmp	r3, #9
 8008604:	d94b      	bls.n	800869e <_vfiprintf_r+0x1a2>
 8008606:	b1b0      	cbz	r0, 8008636 <_vfiprintf_r+0x13a>
 8008608:	9207      	str	r2, [sp, #28]
 800860a:	e014      	b.n	8008636 <_vfiprintf_r+0x13a>
 800860c:	eba0 0308 	sub.w	r3, r0, r8
 8008610:	fa09 f303 	lsl.w	r3, r9, r3
 8008614:	4313      	orrs	r3, r2
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	46a2      	mov	sl, r4
 800861a:	e7d2      	b.n	80085c2 <_vfiprintf_r+0xc6>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	1d19      	adds	r1, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	9103      	str	r1, [sp, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfbb      	ittet	lt
 8008628:	425b      	neglt	r3, r3
 800862a:	f042 0202 	orrlt.w	r2, r2, #2
 800862e:	9307      	strge	r3, [sp, #28]
 8008630:	9307      	strlt	r3, [sp, #28]
 8008632:	bfb8      	it	lt
 8008634:	9204      	strlt	r2, [sp, #16]
 8008636:	7823      	ldrb	r3, [r4, #0]
 8008638:	2b2e      	cmp	r3, #46	@ 0x2e
 800863a:	d10a      	bne.n	8008652 <_vfiprintf_r+0x156>
 800863c:	7863      	ldrb	r3, [r4, #1]
 800863e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008640:	d132      	bne.n	80086a8 <_vfiprintf_r+0x1ac>
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	1d1a      	adds	r2, r3, #4
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	9203      	str	r2, [sp, #12]
 800864a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800864e:	3402      	adds	r4, #2
 8008650:	9305      	str	r3, [sp, #20]
 8008652:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008728 <_vfiprintf_r+0x22c>
 8008656:	7821      	ldrb	r1, [r4, #0]
 8008658:	2203      	movs	r2, #3
 800865a:	4650      	mov	r0, sl
 800865c:	f7f7 fdc0 	bl	80001e0 <memchr>
 8008660:	b138      	cbz	r0, 8008672 <_vfiprintf_r+0x176>
 8008662:	9b04      	ldr	r3, [sp, #16]
 8008664:	eba0 000a 	sub.w	r0, r0, sl
 8008668:	2240      	movs	r2, #64	@ 0x40
 800866a:	4082      	lsls	r2, r0
 800866c:	4313      	orrs	r3, r2
 800866e:	3401      	adds	r4, #1
 8008670:	9304      	str	r3, [sp, #16]
 8008672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008676:	4829      	ldr	r0, [pc, #164]	@ (800871c <_vfiprintf_r+0x220>)
 8008678:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800867c:	2206      	movs	r2, #6
 800867e:	f7f7 fdaf 	bl	80001e0 <memchr>
 8008682:	2800      	cmp	r0, #0
 8008684:	d03f      	beq.n	8008706 <_vfiprintf_r+0x20a>
 8008686:	4b26      	ldr	r3, [pc, #152]	@ (8008720 <_vfiprintf_r+0x224>)
 8008688:	bb1b      	cbnz	r3, 80086d2 <_vfiprintf_r+0x1d6>
 800868a:	9b03      	ldr	r3, [sp, #12]
 800868c:	3307      	adds	r3, #7
 800868e:	f023 0307 	bic.w	r3, r3, #7
 8008692:	3308      	adds	r3, #8
 8008694:	9303      	str	r3, [sp, #12]
 8008696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008698:	443b      	add	r3, r7
 800869a:	9309      	str	r3, [sp, #36]	@ 0x24
 800869c:	e76a      	b.n	8008574 <_vfiprintf_r+0x78>
 800869e:	fb0c 3202 	mla	r2, ip, r2, r3
 80086a2:	460c      	mov	r4, r1
 80086a4:	2001      	movs	r0, #1
 80086a6:	e7a8      	b.n	80085fa <_vfiprintf_r+0xfe>
 80086a8:	2300      	movs	r3, #0
 80086aa:	3401      	adds	r4, #1
 80086ac:	9305      	str	r3, [sp, #20]
 80086ae:	4619      	mov	r1, r3
 80086b0:	f04f 0c0a 	mov.w	ip, #10
 80086b4:	4620      	mov	r0, r4
 80086b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ba:	3a30      	subs	r2, #48	@ 0x30
 80086bc:	2a09      	cmp	r2, #9
 80086be:	d903      	bls.n	80086c8 <_vfiprintf_r+0x1cc>
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d0c6      	beq.n	8008652 <_vfiprintf_r+0x156>
 80086c4:	9105      	str	r1, [sp, #20]
 80086c6:	e7c4      	b.n	8008652 <_vfiprintf_r+0x156>
 80086c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086cc:	4604      	mov	r4, r0
 80086ce:	2301      	movs	r3, #1
 80086d0:	e7f0      	b.n	80086b4 <_vfiprintf_r+0x1b8>
 80086d2:	ab03      	add	r3, sp, #12
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	462a      	mov	r2, r5
 80086d8:	4b12      	ldr	r3, [pc, #72]	@ (8008724 <_vfiprintf_r+0x228>)
 80086da:	a904      	add	r1, sp, #16
 80086dc:	4630      	mov	r0, r6
 80086de:	f3af 8000 	nop.w
 80086e2:	4607      	mov	r7, r0
 80086e4:	1c78      	adds	r0, r7, #1
 80086e6:	d1d6      	bne.n	8008696 <_vfiprintf_r+0x19a>
 80086e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086ea:	07d9      	lsls	r1, r3, #31
 80086ec:	d405      	bmi.n	80086fa <_vfiprintf_r+0x1fe>
 80086ee:	89ab      	ldrh	r3, [r5, #12]
 80086f0:	059a      	lsls	r2, r3, #22
 80086f2:	d402      	bmi.n	80086fa <_vfiprintf_r+0x1fe>
 80086f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086f6:	f7ff f9cf 	bl	8007a98 <__retarget_lock_release_recursive>
 80086fa:	89ab      	ldrh	r3, [r5, #12]
 80086fc:	065b      	lsls	r3, r3, #25
 80086fe:	f53f af1f 	bmi.w	8008540 <_vfiprintf_r+0x44>
 8008702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008704:	e71e      	b.n	8008544 <_vfiprintf_r+0x48>
 8008706:	ab03      	add	r3, sp, #12
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	462a      	mov	r2, r5
 800870c:	4b05      	ldr	r3, [pc, #20]	@ (8008724 <_vfiprintf_r+0x228>)
 800870e:	a904      	add	r1, sp, #16
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff fcb5 	bl	8008080 <_printf_i>
 8008716:	e7e4      	b.n	80086e2 <_vfiprintf_r+0x1e6>
 8008718:	0801227e 	.word	0x0801227e
 800871c:	08012288 	.word	0x08012288
 8008720:	00000000 	.word	0x00000000
 8008724:	080084d9 	.word	0x080084d9
 8008728:	08012284 	.word	0x08012284

0800872c <__swbuf_r>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	460e      	mov	r6, r1
 8008730:	4614      	mov	r4, r2
 8008732:	4605      	mov	r5, r0
 8008734:	b118      	cbz	r0, 800873e <__swbuf_r+0x12>
 8008736:	6a03      	ldr	r3, [r0, #32]
 8008738:	b90b      	cbnz	r3, 800873e <__swbuf_r+0x12>
 800873a:	f7fe ffd3 	bl	80076e4 <__sinit>
 800873e:	69a3      	ldr	r3, [r4, #24]
 8008740:	60a3      	str	r3, [r4, #8]
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	071a      	lsls	r2, r3, #28
 8008746:	d501      	bpl.n	800874c <__swbuf_r+0x20>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	b943      	cbnz	r3, 800875e <__swbuf_r+0x32>
 800874c:	4621      	mov	r1, r4
 800874e:	4628      	mov	r0, r5
 8008750:	f000 f82a 	bl	80087a8 <__swsetup_r>
 8008754:	b118      	cbz	r0, 800875e <__swbuf_r+0x32>
 8008756:	f04f 37ff 	mov.w	r7, #4294967295
 800875a:	4638      	mov	r0, r7
 800875c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	6922      	ldr	r2, [r4, #16]
 8008762:	1a98      	subs	r0, r3, r2
 8008764:	6963      	ldr	r3, [r4, #20]
 8008766:	b2f6      	uxtb	r6, r6
 8008768:	4283      	cmp	r3, r0
 800876a:	4637      	mov	r7, r6
 800876c:	dc05      	bgt.n	800877a <__swbuf_r+0x4e>
 800876e:	4621      	mov	r1, r4
 8008770:	4628      	mov	r0, r5
 8008772:	f7fe ff03 	bl	800757c <_fflush_r>
 8008776:	2800      	cmp	r0, #0
 8008778:	d1ed      	bne.n	8008756 <__swbuf_r+0x2a>
 800877a:	68a3      	ldr	r3, [r4, #8]
 800877c:	3b01      	subs	r3, #1
 800877e:	60a3      	str	r3, [r4, #8]
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	6022      	str	r2, [r4, #0]
 8008786:	701e      	strb	r6, [r3, #0]
 8008788:	6962      	ldr	r2, [r4, #20]
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	429a      	cmp	r2, r3
 800878e:	d004      	beq.n	800879a <__swbuf_r+0x6e>
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	07db      	lsls	r3, r3, #31
 8008794:	d5e1      	bpl.n	800875a <__swbuf_r+0x2e>
 8008796:	2e0a      	cmp	r6, #10
 8008798:	d1df      	bne.n	800875a <__swbuf_r+0x2e>
 800879a:	4621      	mov	r1, r4
 800879c:	4628      	mov	r0, r5
 800879e:	f7fe feed 	bl	800757c <_fflush_r>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d0d9      	beq.n	800875a <__swbuf_r+0x2e>
 80087a6:	e7d6      	b.n	8008756 <__swbuf_r+0x2a>

080087a8 <__swsetup_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4b29      	ldr	r3, [pc, #164]	@ (8008850 <__swsetup_r+0xa8>)
 80087ac:	4605      	mov	r5, r0
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	460c      	mov	r4, r1
 80087b2:	b118      	cbz	r0, 80087bc <__swsetup_r+0x14>
 80087b4:	6a03      	ldr	r3, [r0, #32]
 80087b6:	b90b      	cbnz	r3, 80087bc <__swsetup_r+0x14>
 80087b8:	f7fe ff94 	bl	80076e4 <__sinit>
 80087bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c0:	0719      	lsls	r1, r3, #28
 80087c2:	d422      	bmi.n	800880a <__swsetup_r+0x62>
 80087c4:	06da      	lsls	r2, r3, #27
 80087c6:	d407      	bmi.n	80087d8 <__swsetup_r+0x30>
 80087c8:	2209      	movs	r2, #9
 80087ca:	602a      	str	r2, [r5, #0]
 80087cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	f04f 30ff 	mov.w	r0, #4294967295
 80087d6:	e033      	b.n	8008840 <__swsetup_r+0x98>
 80087d8:	0758      	lsls	r0, r3, #29
 80087da:	d512      	bpl.n	8008802 <__swsetup_r+0x5a>
 80087dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087de:	b141      	cbz	r1, 80087f2 <__swsetup_r+0x4a>
 80087e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087e4:	4299      	cmp	r1, r3
 80087e6:	d002      	beq.n	80087ee <__swsetup_r+0x46>
 80087e8:	4628      	mov	r0, r5
 80087ea:	f7ff f983 	bl	8007af4 <_free_r>
 80087ee:	2300      	movs	r3, #0
 80087f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80087f8:	81a3      	strh	r3, [r4, #12]
 80087fa:	2300      	movs	r3, #0
 80087fc:	6063      	str	r3, [r4, #4]
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f043 0308 	orr.w	r3, r3, #8
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	b94b      	cbnz	r3, 8008822 <__swsetup_r+0x7a>
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008818:	d003      	beq.n	8008822 <__swsetup_r+0x7a>
 800881a:	4621      	mov	r1, r4
 800881c:	4628      	mov	r0, r5
 800881e:	f7ff fd87 	bl	8008330 <__smakebuf_r>
 8008822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008826:	f013 0201 	ands.w	r2, r3, #1
 800882a:	d00a      	beq.n	8008842 <__swsetup_r+0x9a>
 800882c:	2200      	movs	r2, #0
 800882e:	60a2      	str	r2, [r4, #8]
 8008830:	6962      	ldr	r2, [r4, #20]
 8008832:	4252      	negs	r2, r2
 8008834:	61a2      	str	r2, [r4, #24]
 8008836:	6922      	ldr	r2, [r4, #16]
 8008838:	b942      	cbnz	r2, 800884c <__swsetup_r+0xa4>
 800883a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800883e:	d1c5      	bne.n	80087cc <__swsetup_r+0x24>
 8008840:	bd38      	pop	{r3, r4, r5, pc}
 8008842:	0799      	lsls	r1, r3, #30
 8008844:	bf58      	it	pl
 8008846:	6962      	ldrpl	r2, [r4, #20]
 8008848:	60a2      	str	r2, [r4, #8]
 800884a:	e7f4      	b.n	8008836 <__swsetup_r+0x8e>
 800884c:	2000      	movs	r0, #0
 800884e:	e7f7      	b.n	8008840 <__swsetup_r+0x98>
 8008850:	20000220 	.word	0x20000220

08008854 <_raise_r>:
 8008854:	291f      	cmp	r1, #31
 8008856:	b538      	push	{r3, r4, r5, lr}
 8008858:	4605      	mov	r5, r0
 800885a:	460c      	mov	r4, r1
 800885c:	d904      	bls.n	8008868 <_raise_r+0x14>
 800885e:	2316      	movs	r3, #22
 8008860:	6003      	str	r3, [r0, #0]
 8008862:	f04f 30ff 	mov.w	r0, #4294967295
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800886a:	b112      	cbz	r2, 8008872 <_raise_r+0x1e>
 800886c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008870:	b94b      	cbnz	r3, 8008886 <_raise_r+0x32>
 8008872:	4628      	mov	r0, r5
 8008874:	f000 f830 	bl	80088d8 <_getpid_r>
 8008878:	4622      	mov	r2, r4
 800887a:	4601      	mov	r1, r0
 800887c:	4628      	mov	r0, r5
 800887e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008882:	f000 b817 	b.w	80088b4 <_kill_r>
 8008886:	2b01      	cmp	r3, #1
 8008888:	d00a      	beq.n	80088a0 <_raise_r+0x4c>
 800888a:	1c59      	adds	r1, r3, #1
 800888c:	d103      	bne.n	8008896 <_raise_r+0x42>
 800888e:	2316      	movs	r3, #22
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	2001      	movs	r0, #1
 8008894:	e7e7      	b.n	8008866 <_raise_r+0x12>
 8008896:	2100      	movs	r1, #0
 8008898:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800889c:	4620      	mov	r0, r4
 800889e:	4798      	blx	r3
 80088a0:	2000      	movs	r0, #0
 80088a2:	e7e0      	b.n	8008866 <_raise_r+0x12>

080088a4 <raise>:
 80088a4:	4b02      	ldr	r3, [pc, #8]	@ (80088b0 <raise+0xc>)
 80088a6:	4601      	mov	r1, r0
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f7ff bfd3 	b.w	8008854 <_raise_r>
 80088ae:	bf00      	nop
 80088b0:	20000220 	.word	0x20000220

080088b4 <_kill_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4d07      	ldr	r5, [pc, #28]	@ (80088d4 <_kill_r+0x20>)
 80088b8:	2300      	movs	r3, #0
 80088ba:	4604      	mov	r4, r0
 80088bc:	4608      	mov	r0, r1
 80088be:	4611      	mov	r1, r2
 80088c0:	602b      	str	r3, [r5, #0]
 80088c2:	f7f9 f9cf 	bl	8001c64 <_kill>
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	d102      	bne.n	80088d0 <_kill_r+0x1c>
 80088ca:	682b      	ldr	r3, [r5, #0]
 80088cc:	b103      	cbz	r3, 80088d0 <_kill_r+0x1c>
 80088ce:	6023      	str	r3, [r4, #0]
 80088d0:	bd38      	pop	{r3, r4, r5, pc}
 80088d2:	bf00      	nop
 80088d4:	2000aef4 	.word	0x2000aef4

080088d8 <_getpid_r>:
 80088d8:	f7f9 b9bc 	b.w	8001c54 <_getpid>

080088dc <_malloc_usable_size_r>:
 80088dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e0:	1f18      	subs	r0, r3, #4
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bfbc      	itt	lt
 80088e6:	580b      	ldrlt	r3, [r1, r0]
 80088e8:	18c0      	addlt	r0, r0, r3
 80088ea:	4770      	bx	lr

080088ec <_init>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	bf00      	nop
 80088f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f2:	bc08      	pop	{r3}
 80088f4:	469e      	mov	lr, r3
 80088f6:	4770      	bx	lr

080088f8 <_fini>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	bf00      	nop
 80088fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fe:	bc08      	pop	{r3}
 8008900:	469e      	mov	lr, r3
 8008902:	4770      	bx	lr
